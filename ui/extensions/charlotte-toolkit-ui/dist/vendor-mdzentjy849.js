function _mergeNamespaces(n, m) {
	for (var i = 0; i < m.length; i++) {
		const e = m[i];
		if (typeof e !== 'string' && !Array.isArray(e)) { for (const k in e) {
			if (k !== 'default' && !(k in n)) {
				const d = Object.getOwnPropertyDescriptor(e, k);
				if (d) {
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: () => e[k]
					});
				}
			}
		} }
	}
	return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: 'Module' }));
}

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (Object.prototype.hasOwnProperty.call(n, '__esModule')) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			var isInstance = false;
      try {
        isInstance = this instanceof a;
      } catch {}
			if (isInstance) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var react = {exports: {}};

var react_development = {exports: {}};

/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReact_development;

function requireReact_development () {
	if (hasRequiredReact_development) return react_development.exports;
	hasRequiredReact_development = 1;
	(function (module, exports) {
		((function () {
		    function defineDeprecationWarning(methodName, info) {
		      Object.defineProperty(Component.prototype, methodName, {
		        get: function () {
		          console.warn(
		            "%s(...) is deprecated in plain JavaScript React classes. %s",
		            info[0],
		            info[1]
		          );
		        }
		      });
		    }
		    function getIteratorFn(maybeIterable) {
		      if (null === maybeIterable || "object" !== typeof maybeIterable)
		        return null;
		      maybeIterable =
		        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
		        maybeIterable["@@iterator"];
		      return "function" === typeof maybeIterable ? maybeIterable : null;
		    }
		    function warnNoop(publicInstance, callerName) {
		      publicInstance =
		        ((publicInstance = publicInstance.constructor) &&
		          (publicInstance.displayName || publicInstance.name)) ||
		        "ReactClass";
		      var warningKey = publicInstance + "." + callerName;
		      didWarnStateUpdateForUnmountedComponent[warningKey] ||
		        (console.error(
		          "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
		          callerName,
		          publicInstance
		        ),
		        (didWarnStateUpdateForUnmountedComponent[warningKey] = true));
		    }
		    function Component(props, context, updater) {
		      this.props = props;
		      this.context = context;
		      this.refs = emptyObject;
		      this.updater = updater || ReactNoopUpdateQueue;
		    }
		    function ComponentDummy() {}
		    function PureComponent(props, context, updater) {
		      this.props = props;
		      this.context = context;
		      this.refs = emptyObject;
		      this.updater = updater || ReactNoopUpdateQueue;
		    }
		    function testStringCoercion(value) {
		      return "" + value;
		    }
		    function checkKeyStringCoercion(value) {
		      try {
		        var JSCompiler_inline_result = false;
		      } catch (e) {
		        JSCompiler_inline_result = true;
		      }
		      if (JSCompiler_inline_result) {
		        JSCompiler_inline_result = console;
		        var JSCompiler_temp_const = JSCompiler_inline_result.error;
		        var JSCompiler_inline_result$jscomp$0 =
		          ("function" === typeof Symbol &&
		            Symbol.toStringTag &&
		            value[Symbol.toStringTag]) ||
		          value.constructor.name ||
		          "Object";
		        JSCompiler_temp_const.call(
		          JSCompiler_inline_result,
		          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
		          JSCompiler_inline_result$jscomp$0
		        );
		        return testStringCoercion(value);
		      }
		    }
		    function getComponentNameFromType(type) {
		      if (null == type) return null;
		      if ("function" === typeof type)
		        return type.$$typeof === REACT_CLIENT_REFERENCE
		          ? null
		          : type.displayName || type.name || null;
		      if ("string" === typeof type) return type;
		      switch (type) {
		        case REACT_FRAGMENT_TYPE:
		          return "Fragment";
		        case REACT_PROFILER_TYPE:
		          return "Profiler";
		        case REACT_STRICT_MODE_TYPE:
		          return "StrictMode";
		        case REACT_SUSPENSE_TYPE:
		          return "Suspense";
		        case REACT_SUSPENSE_LIST_TYPE:
		          return "SuspenseList";
		        case REACT_ACTIVITY_TYPE:
		          return "Activity";
		      }
		      if ("object" === typeof type)
		        switch (
		          ("number" === typeof type.tag &&
		            console.error(
		              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
		            ),
		          type.$$typeof)
		        ) {
		          case REACT_PORTAL_TYPE:
		            return "Portal";
		          case REACT_CONTEXT_TYPE:
		            return (type.displayName || "Context") + ".Provider";
		          case REACT_CONSUMER_TYPE:
		            return (type._context.displayName || "Context") + ".Consumer";
		          case REACT_FORWARD_REF_TYPE:
		            var innerType = type.render;
		            type = type.displayName;
		            type ||
		              ((type = innerType.displayName || innerType.name || ""),
		              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
		            return type;
		          case REACT_MEMO_TYPE:
		            return (
		              (innerType = type.displayName || null),
		              null !== innerType
		                ? innerType
		                : getComponentNameFromType(type.type) || "Memo"
		            );
		          case REACT_LAZY_TYPE:
		            innerType = type._payload;
		            type = type._init;
		            try {
		              return getComponentNameFromType(type(innerType));
		            } catch (x) {}
		        }
		      return null;
		    }
		    function getTaskName(type) {
		      if (type === REACT_FRAGMENT_TYPE) return "<>";
		      if (
		        "object" === typeof type &&
		        null !== type &&
		        type.$$typeof === REACT_LAZY_TYPE
		      )
		        return "<...>";
		      try {
		        var name = getComponentNameFromType(type);
		        return name ? "<" + name + ">" : "<...>";
		      } catch (x) {
		        return "<...>";
		      }
		    }
		    function getOwner() {
		      var dispatcher = ReactSharedInternals.A;
		      return null === dispatcher ? null : dispatcher.getOwner();
		    }
		    function UnknownOwner() {
		      return Error("react-stack-top-frame");
		    }
		    function hasValidKey(config) {
		      if (hasOwnProperty.call(config, "key")) {
		        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
		        if (getter && getter.isReactWarning) return false;
		      }
		      return void 0 !== config.key;
		    }
		    function defineKeyPropWarningGetter(props, displayName) {
		      function warnAboutAccessingKey() {
		        specialPropKeyWarningShown ||
		          ((specialPropKeyWarningShown = true),
		          console.error(
		            "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
		            displayName
		          ));
		      }
		      warnAboutAccessingKey.isReactWarning = true;
		      Object.defineProperty(props, "key", {
		        get: warnAboutAccessingKey,
		        configurable: true
		      });
		    }
		    function elementRefGetterWithDeprecationWarning() {
		      var componentName = getComponentNameFromType(this.type);
		      didWarnAboutElementRef[componentName] ||
		        ((didWarnAboutElementRef[componentName] = true),
		        console.error(
		          "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
		        ));
		      componentName = this.props.ref;
		      return void 0 !== componentName ? componentName : null;
		    }
		    function ReactElement(
		      type,
		      key,
		      self,
		      source,
		      owner,
		      props,
		      debugStack,
		      debugTask
		    ) {
		      self = props.ref;
		      type = {
		        $$typeof: REACT_ELEMENT_TYPE,
		        type: type,
		        key: key,
		        props: props,
		        _owner: owner
		      };
		      null !== (void 0 !== self ? self : null)
		        ? Object.defineProperty(type, "ref", {
		            enumerable: false,
		            get: elementRefGetterWithDeprecationWarning
		          })
		        : Object.defineProperty(type, "ref", { enumerable: false, value: null });
		      type._store = {};
		      Object.defineProperty(type._store, "validated", {
		        configurable: false,
		        enumerable: false,
		        writable: true,
		        value: 0
		      });
		      Object.defineProperty(type, "_debugInfo", {
		        configurable: false,
		        enumerable: false,
		        writable: true,
		        value: null
		      });
		      Object.defineProperty(type, "_debugStack", {
		        configurable: false,
		        enumerable: false,
		        writable: true,
		        value: debugStack
		      });
		      Object.defineProperty(type, "_debugTask", {
		        configurable: false,
		        enumerable: false,
		        writable: true,
		        value: debugTask
		      });
		      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
		      return type;
		    }
		    function cloneAndReplaceKey(oldElement, newKey) {
		      newKey = ReactElement(
		        oldElement.type,
		        newKey,
		        void 0,
		        void 0,
		        oldElement._owner,
		        oldElement.props,
		        oldElement._debugStack,
		        oldElement._debugTask
		      );
		      oldElement._store &&
		        (newKey._store.validated = oldElement._store.validated);
		      return newKey;
		    }
		    function isValidElement(object) {
		      return (
		        "object" === typeof object &&
		        null !== object &&
		        object.$$typeof === REACT_ELEMENT_TYPE
		      );
		    }
		    function escape(key) {
		      var escaperLookup = { "=": "=0", ":": "=2" };
		      return (
		        "$" +
		        key.replace(/[=:]/g, function (match) {
		          return escaperLookup[match];
		        })
		      );
		    }
		    function getElementKey(element, index) {
		      return "object" === typeof element &&
		        null !== element &&
		        null != element.key
		        ? (checkKeyStringCoercion(element.key), escape("" + element.key))
		        : index.toString(36);
		    }
		    function noop$1() {}
		    function resolveThenable(thenable) {
		      switch (thenable.status) {
		        case "fulfilled":
		          return thenable.value;
		        case "rejected":
		          throw thenable.reason;
		        default:
		          switch (
		            ("string" === typeof thenable.status
		              ? thenable.then(noop$1, noop$1)
		              : ((thenable.status = "pending"),
		                thenable.then(
		                  function (fulfilledValue) {
		                    "pending" === thenable.status &&
		                      ((thenable.status = "fulfilled"),
		                      (thenable.value = fulfilledValue));
		                  },
		                  function (error) {
		                    "pending" === thenable.status &&
		                      ((thenable.status = "rejected"),
		                      (thenable.reason = error));
		                  }
		                )),
		            thenable.status)
		          ) {
		            case "fulfilled":
		              return thenable.value;
		            case "rejected":
		              throw thenable.reason;
		          }
		      }
		      throw thenable;
		    }
		    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
		      var type = typeof children;
		      if ("undefined" === type || "boolean" === type) children = null;
		      var invokeCallback = false;
		      if (null === children) invokeCallback = true;
		      else
		        switch (type) {
		          case "bigint":
		          case "string":
		          case "number":
		            invokeCallback = true;
		            break;
		          case "object":
		            switch (children.$$typeof) {
		              case REACT_ELEMENT_TYPE:
		              case REACT_PORTAL_TYPE:
		                invokeCallback = true;
		                break;
		              case REACT_LAZY_TYPE:
		                return (
		                  (invokeCallback = children._init),
		                  mapIntoArray(
		                    invokeCallback(children._payload),
		                    array,
		                    escapedPrefix,
		                    nameSoFar,
		                    callback
		                  )
		                );
		            }
		        }
		      if (invokeCallback) {
		        invokeCallback = children;
		        callback = callback(invokeCallback);
		        var childKey =
		          "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
		        isArrayImpl(callback)
		          ? ((escapedPrefix = ""),
		            null != childKey &&
		              (escapedPrefix =
		                childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"),
		            mapIntoArray(callback, array, escapedPrefix, "", function (c) {
		              return c;
		            }))
		          : null != callback &&
		            (isValidElement(callback) &&
		              (null != callback.key &&
		                ((invokeCallback && invokeCallback.key === callback.key) ||
		                  checkKeyStringCoercion(callback.key)),
		              (escapedPrefix = cloneAndReplaceKey(
		                callback,
		                escapedPrefix +
		                  (null == callback.key ||
		                  (invokeCallback && invokeCallback.key === callback.key)
		                    ? ""
		                    : ("" + callback.key).replace(
		                        userProvidedKeyEscapeRegex,
		                        "$&/"
		                      ) + "/") +
		                  childKey
		              )),
		              "" !== nameSoFar &&
		                null != invokeCallback &&
		                isValidElement(invokeCallback) &&
		                null == invokeCallback.key &&
		                invokeCallback._store &&
		                !invokeCallback._store.validated &&
		                (escapedPrefix._store.validated = 2),
		              (callback = escapedPrefix)),
		            array.push(callback));
		        return 1;
		      }
		      invokeCallback = 0;
		      childKey = "" === nameSoFar ? "." : nameSoFar + ":";
		      if (isArrayImpl(children))
		        for (var i = 0; i < children.length; i++)
		          (nameSoFar = children[i]),
		            (type = childKey + getElementKey(nameSoFar, i)),
		            (invokeCallback += mapIntoArray(
		              nameSoFar,
		              array,
		              escapedPrefix,
		              type,
		              callback
		            ));
		      else if (((i = getIteratorFn(children)), "function" === typeof i))
		        for (
		          i === children.entries &&
		            (didWarnAboutMaps ||
		              console.warn(
		                "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
		              ),
		            (didWarnAboutMaps = true)),
		            children = i.call(children),
		            i = 0;
		          !(nameSoFar = children.next()).done;

		        )
		          (nameSoFar = nameSoFar.value),
		            (type = childKey + getElementKey(nameSoFar, i++)),
		            (invokeCallback += mapIntoArray(
		              nameSoFar,
		              array,
		              escapedPrefix,
		              type,
		              callback
		            ));
		      else if ("object" === type) {
		        if ("function" === typeof children.then)
		          return mapIntoArray(
		            resolveThenable(children),
		            array,
		            escapedPrefix,
		            nameSoFar,
		            callback
		          );
		        array = String(children);
		        throw Error(
		          "Objects are not valid as a React child (found: " +
		            ("[object Object]" === array
		              ? "object with keys {" + Object.keys(children).join(", ") + "}"
		              : array) +
		            "). If you meant to render a collection of children, use an array instead."
		        );
		      }
		      return invokeCallback;
		    }
		    function mapChildren(children, func, context) {
		      if (null == children) return children;
		      var result = [],
		        count = 0;
		      mapIntoArray(children, result, "", "", function (child) {
		        return func.call(context, child, count++);
		      });
		      return result;
		    }
		    function lazyInitializer(payload) {
		      if (-1 === payload._status) {
		        var ctor = payload._result;
		        ctor = ctor();
		        ctor.then(
		          function (moduleObject) {
		            if (0 === payload._status || -1 === payload._status)
		              (payload._status = 1), (payload._result = moduleObject);
		          },
		          function (error) {
		            if (0 === payload._status || -1 === payload._status)
		              (payload._status = 2), (payload._result = error);
		          }
		        );
		        -1 === payload._status &&
		          ((payload._status = 0), (payload._result = ctor));
		      }
		      if (1 === payload._status)
		        return (
		          (ctor = payload._result),
		          void 0 === ctor &&
		            console.error(
		              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
		              ctor
		            ),
		          "default" in ctor ||
		            console.error(
		              "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
		              ctor
		            ),
		          ctor.default
		        );
		      throw payload._result;
		    }
		    function resolveDispatcher() {
		      var dispatcher = ReactSharedInternals.H;
		      null === dispatcher &&
		        console.error(
		          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
		        );
		      return dispatcher;
		    }
		    function noop() {}
		    function enqueueTask(task) {
		      if (null === enqueueTaskImpl)
		        try {
		          var requireString = ("require" + Math.random()).slice(0, 7);
		          enqueueTaskImpl = (module && module[requireString]).call(
		            module,
		            "timers"
		          ).setImmediate;
		        } catch (_err) {
		          enqueueTaskImpl = function (callback) {
		            false === didWarnAboutMessageChannel &&
		              ((didWarnAboutMessageChannel = true),
		              "undefined" === typeof MessageChannel &&
		                console.error(
		                  "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."
		                ));
		            var channel = new MessageChannel();
		            channel.port1.onmessage = callback;
		            channel.port2.postMessage(void 0);
		          };
		        }
		      return enqueueTaskImpl(task);
		    }
		    function aggregateErrors(errors) {
		      return 1 < errors.length && "function" === typeof AggregateError
		        ? new AggregateError(errors)
		        : errors[0];
		    }
		    function popActScope(prevActQueue, prevActScopeDepth) {
		      prevActScopeDepth !== actScopeDepth - 1 &&
		        console.error(
		          "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "
		        );
		      actScopeDepth = prevActScopeDepth;
		    }
		    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
		      var queue = ReactSharedInternals.actQueue;
		      if (null !== queue)
		        if (0 !== queue.length)
		          try {
		            flushActQueue(queue);
		            enqueueTask(function () {
		              return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
		            });
		            return;
		          } catch (error) {
		            ReactSharedInternals.thrownErrors.push(error);
		          }
		        else ReactSharedInternals.actQueue = null;
		      0 < ReactSharedInternals.thrownErrors.length
		        ? ((queue = aggregateErrors(ReactSharedInternals.thrownErrors)),
		          (ReactSharedInternals.thrownErrors.length = 0),
		          reject(queue))
		        : resolve(returnValue);
		    }
		    function flushActQueue(queue) {
		      if (!isFlushing) {
		        isFlushing = true;
		        var i = 0;
		        try {
		          for (; i < queue.length; i++) {
		            var callback = queue[i];
		            do {
		              ReactSharedInternals.didUsePromise = false;
		              var continuation = callback(false);
		              if (null !== continuation) {
		                if (ReactSharedInternals.didUsePromise) {
		                  queue[i] = callback;
		                  queue.splice(0, i);
		                  return;
		                }
		                callback = continuation;
		              } else break;
		            } while (1);
		          }
		          queue.length = 0;
		        } catch (error) {
		          queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
		        } finally {
		          isFlushing = false;
		        }
		      }
		    }
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
		    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
		      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
		      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
		      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
		      REACT_PROFILER_TYPE = Symbol.for("react.profiler");
		    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
		      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
		      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
		      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
		      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
		      REACT_MEMO_TYPE = Symbol.for("react.memo"),
		      REACT_LAZY_TYPE = Symbol.for("react.lazy"),
		      REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
		      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
		      didWarnStateUpdateForUnmountedComponent = {},
		      ReactNoopUpdateQueue = {
		        isMounted: function () {
		          return false;
		        },
		        enqueueForceUpdate: function (publicInstance) {
		          warnNoop(publicInstance, "forceUpdate");
		        },
		        enqueueReplaceState: function (publicInstance) {
		          warnNoop(publicInstance, "replaceState");
		        },
		        enqueueSetState: function (publicInstance) {
		          warnNoop(publicInstance, "setState");
		        }
		      },
		      assign = Object.assign,
		      emptyObject = {};
		    Object.freeze(emptyObject);
		    Component.prototype.isReactComponent = {};
		    Component.prototype.setState = function (partialState, callback) {
		      if (
		        "object" !== typeof partialState &&
		        "function" !== typeof partialState &&
		        null != partialState
		      )
		        throw Error(
		          "takes an object of state variables to update or a function which returns an object of state variables."
		        );
		      this.updater.enqueueSetState(this, partialState, callback, "setState");
		    };
		    Component.prototype.forceUpdate = function (callback) {
		      this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
		    };
		    var deprecatedAPIs = {
		        isMounted: [
		          "isMounted",
		          "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
		        ],
		        replaceState: [
		          "replaceState",
		          "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
		        ]
		      },
		      fnName;
		    for (fnName in deprecatedAPIs)
		      deprecatedAPIs.hasOwnProperty(fnName) &&
		        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
		    ComponentDummy.prototype = Component.prototype;
		    deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
		    deprecatedAPIs.constructor = PureComponent;
		    assign(deprecatedAPIs, Component.prototype);
		    deprecatedAPIs.isPureReactComponent = true;
		    var isArrayImpl = Array.isArray,
		      REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
		      ReactSharedInternals = {
		        H: null,
		        A: null,
		        T: null,
		        S: null,
		        V: null,
		        actQueue: null,
		        isBatchingLegacy: false,
		        didScheduleLegacyUpdate: false,
		        didUsePromise: false,
		        thrownErrors: [],
		        getCurrentStack: null,
		        recentlyCreatedOwnerStacks: 0
		      },
		      hasOwnProperty = Object.prototype.hasOwnProperty,
		      createTask = console.createTask
		        ? console.createTask
		        : function () {
		            return null;
		          };
		    deprecatedAPIs = {
		      react_stack_bottom_frame: function (callStackForError) {
		        return callStackForError();
		      }
		    };
		    var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
		    var didWarnAboutElementRef = {};
		    var unknownOwnerDebugStack = deprecatedAPIs.react_stack_bottom_frame.bind(
		      deprecatedAPIs,
		      UnknownOwner
		    )();
		    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
		    var didWarnAboutMaps = false,
		      userProvidedKeyEscapeRegex = /\/+/g,
		      reportGlobalError =
		        "function" === typeof reportError
		          ? reportError
		          : function (error) {
		              if (
		                "object" === typeof window &&
		                "function" === typeof window.ErrorEvent
		              ) {
		                var event = new window.ErrorEvent("error", {
		                  bubbles: true,
		                  cancelable: true,
		                  message:
		                    "object" === typeof error &&
		                    null !== error &&
		                    "string" === typeof error.message
		                      ? String(error.message)
		                      : String(error),
		                  error: error
		                });
		                if (!window.dispatchEvent(event)) return;
		              } else if (
		                "object" === typeof process &&
		                "function" === typeof process.emit
		              ) {
		                process.emit("uncaughtException", error);
		                return;
		              }
		              console.error(error);
		            },
		      didWarnAboutMessageChannel = false,
		      enqueueTaskImpl = null,
		      actScopeDepth = 0,
		      didWarnNoAwaitAct = false,
		      isFlushing = false,
		      queueSeveralMicrotasks =
		        "function" === typeof queueMicrotask
		          ? function (callback) {
		              queueMicrotask(function () {
		                return queueMicrotask(callback);
		              });
		            }
		          : enqueueTask;
		    deprecatedAPIs = Object.freeze({
		      __proto__: null,
		      c: function (size) {
		        return resolveDispatcher().useMemoCache(size);
		      }
		    });
		    exports.Children = {
		      map: mapChildren,
		      forEach: function (children, forEachFunc, forEachContext) {
		        mapChildren(
		          children,
		          function () {
		            forEachFunc.apply(this, arguments);
		          },
		          forEachContext
		        );
		      },
		      count: function (children) {
		        var n = 0;
		        mapChildren(children, function () {
		          n++;
		        });
		        return n;
		      },
		      toArray: function (children) {
		        return (
		          mapChildren(children, function (child) {
		            return child;
		          }) || []
		        );
		      },
		      only: function (children) {
		        if (!isValidElement(children))
		          throw Error(
		            "React.Children.only expected to receive a single React element child."
		          );
		        return children;
		      }
		    };
		    exports.Component = Component;
		    exports.Fragment = REACT_FRAGMENT_TYPE;
		    exports.Profiler = REACT_PROFILER_TYPE;
		    exports.PureComponent = PureComponent;
		    exports.StrictMode = REACT_STRICT_MODE_TYPE;
		    exports.Suspense = REACT_SUSPENSE_TYPE;
		    exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
		      ReactSharedInternals;
		    exports.__COMPILER_RUNTIME = deprecatedAPIs;
		    exports.act = function (callback) {
		      var prevActQueue = ReactSharedInternals.actQueue,
		        prevActScopeDepth = actScopeDepth;
		      actScopeDepth++;
		      var queue = (ReactSharedInternals.actQueue =
		          null !== prevActQueue ? prevActQueue : []),
		        didAwaitActCall = false;
		      try {
		        var result = callback();
		      } catch (error) {
		        ReactSharedInternals.thrownErrors.push(error);
		      }
		      if (0 < ReactSharedInternals.thrownErrors.length)
		        throw (
		          (popActScope(prevActQueue, prevActScopeDepth),
		          (callback = aggregateErrors(ReactSharedInternals.thrownErrors)),
		          (ReactSharedInternals.thrownErrors.length = 0),
		          callback)
		        );
		      if (
		        null !== result &&
		        "object" === typeof result &&
		        "function" === typeof result.then
		      ) {
		        var thenable = result;
		        queueSeveralMicrotasks(function () {
		          didAwaitActCall ||
		            didWarnNoAwaitAct ||
		            ((didWarnNoAwaitAct = true),
		            console.error(
		              "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"
		            ));
		        });
		        return {
		          then: function (resolve, reject) {
		            didAwaitActCall = true;
		            thenable.then(
		              function (returnValue) {
		                popActScope(prevActQueue, prevActScopeDepth);
		                if (0 === prevActScopeDepth) {
		                  try {
		                    flushActQueue(queue),
		                      enqueueTask(function () {
		                        return recursivelyFlushAsyncActWork(
		                          returnValue,
		                          resolve,
		                          reject
		                        );
		                      });
		                  } catch (error$0) {
		                    ReactSharedInternals.thrownErrors.push(error$0);
		                  }
		                  if (0 < ReactSharedInternals.thrownErrors.length) {
		                    var _thrownError = aggregateErrors(
		                      ReactSharedInternals.thrownErrors
		                    );
		                    ReactSharedInternals.thrownErrors.length = 0;
		                    reject(_thrownError);
		                  }
		                } else resolve(returnValue);
		              },
		              function (error) {
		                popActScope(prevActQueue, prevActScopeDepth);
		                0 < ReactSharedInternals.thrownErrors.length
		                  ? ((error = aggregateErrors(
		                      ReactSharedInternals.thrownErrors
		                    )),
		                    (ReactSharedInternals.thrownErrors.length = 0),
		                    reject(error))
		                  : reject(error);
		              }
		            );
		          }
		        };
		      }
		      var returnValue$jscomp$0 = result;
		      popActScope(prevActQueue, prevActScopeDepth);
		      0 === prevActScopeDepth &&
		        (flushActQueue(queue),
		        0 !== queue.length &&
		          queueSeveralMicrotasks(function () {
		            didAwaitActCall ||
		              didWarnNoAwaitAct ||
		              ((didWarnNoAwaitAct = true),
		              console.error(
		                "A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"
		              ));
		          }),
		        (ReactSharedInternals.actQueue = null));
		      if (0 < ReactSharedInternals.thrownErrors.length)
		        throw (
		          ((callback = aggregateErrors(ReactSharedInternals.thrownErrors)),
		          (ReactSharedInternals.thrownErrors.length = 0),
		          callback)
		        );
		      return {
		        then: function (resolve, reject) {
		          didAwaitActCall = true;
		          0 === prevActScopeDepth
		            ? ((ReactSharedInternals.actQueue = queue),
		              enqueueTask(function () {
		                return recursivelyFlushAsyncActWork(
		                  returnValue$jscomp$0,
		                  resolve,
		                  reject
		                );
		              }))
		            : resolve(returnValue$jscomp$0);
		        }
		      };
		    };
		    exports.cache = function (fn) {
		      return function () {
		        return fn.apply(null, arguments);
		      };
		    };
		    exports.captureOwnerStack = function () {
		      var getCurrentStack = ReactSharedInternals.getCurrentStack;
		      return null === getCurrentStack ? null : getCurrentStack();
		    };
		    exports.cloneElement = function (element, config, children) {
		      if (null === element || void 0 === element)
		        throw Error(
		          "The argument must be a React element, but you passed " +
		            element +
		            "."
		        );
		      var props = assign({}, element.props),
		        key = element.key,
		        owner = element._owner;
		      if (null != config) {
		        var JSCompiler_inline_result;
		        a: {
		          if (
		            hasOwnProperty.call(config, "ref") &&
		            (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(
		              config,
		              "ref"
		            ).get) &&
		            JSCompiler_inline_result.isReactWarning
		          ) {
		            JSCompiler_inline_result = false;
		            break a;
		          }
		          JSCompiler_inline_result = void 0 !== config.ref;
		        }
		        JSCompiler_inline_result && (owner = getOwner());
		        hasValidKey(config) &&
		          (checkKeyStringCoercion(config.key), (key = "" + config.key));
		        for (propName in config)
		          !hasOwnProperty.call(config, propName) ||
		            "key" === propName ||
		            "__self" === propName ||
		            "__source" === propName ||
		            ("ref" === propName && void 0 === config.ref) ||
		            (props[propName] = config[propName]);
		      }
		      var propName = arguments.length - 2;
		      if (1 === propName) props.children = children;
		      else if (1 < propName) {
		        JSCompiler_inline_result = Array(propName);
		        for (var i = 0; i < propName; i++)
		          JSCompiler_inline_result[i] = arguments[i + 2];
		        props.children = JSCompiler_inline_result;
		      }
		      props = ReactElement(
		        element.type,
		        key,
		        void 0,
		        void 0,
		        owner,
		        props,
		        element._debugStack,
		        element._debugTask
		      );
		      for (key = 2; key < arguments.length; key++)
		        (owner = arguments[key]),
		          isValidElement(owner) && owner._store && (owner._store.validated = 1);
		      return props;
		    };
		    exports.createContext = function (defaultValue) {
		      defaultValue = {
		        $$typeof: REACT_CONTEXT_TYPE,
		        _currentValue: defaultValue,
		        _currentValue2: defaultValue,
		        _threadCount: 0,
		        Provider: null,
		        Consumer: null
		      };
		      defaultValue.Provider = defaultValue;
		      defaultValue.Consumer = {
		        $$typeof: REACT_CONSUMER_TYPE,
		        _context: defaultValue
		      };
		      defaultValue._currentRenderer = null;
		      defaultValue._currentRenderer2 = null;
		      return defaultValue;
		    };
		    exports.createElement = function (type, config, children) {
		      for (var i = 2; i < arguments.length; i++) {
		        var node = arguments[i];
		        isValidElement(node) && node._store && (node._store.validated = 1);
		      }
		      i = {};
		      node = null;
		      if (null != config)
		        for (propName in (didWarnAboutOldJSXRuntime ||
		          !("__self" in config) ||
		          "key" in config ||
		          ((didWarnAboutOldJSXRuntime = true),
		          console.warn(
		            "Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform"
		          )),
		        hasValidKey(config) &&
		          (checkKeyStringCoercion(config.key), (node = "" + config.key)),
		        config))
		          hasOwnProperty.call(config, propName) &&
		            "key" !== propName &&
		            "__self" !== propName &&
		            "__source" !== propName &&
		            (i[propName] = config[propName]);
		      var childrenLength = arguments.length - 2;
		      if (1 === childrenLength) i.children = children;
		      else if (1 < childrenLength) {
		        for (
		          var childArray = Array(childrenLength), _i = 0;
		          _i < childrenLength;
		          _i++
		        )
		          childArray[_i] = arguments[_i + 2];
		        Object.freeze && Object.freeze(childArray);
		        i.children = childArray;
		      }
		      if (type && type.defaultProps)
		        for (propName in ((childrenLength = type.defaultProps), childrenLength))
		          void 0 === i[propName] && (i[propName] = childrenLength[propName]);
		      node &&
		        defineKeyPropWarningGetter(
		          i,
		          "function" === typeof type
		            ? type.displayName || type.name || "Unknown"
		            : type
		        );
		      var propName = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
		      return ReactElement(
		        type,
		        node,
		        void 0,
		        void 0,
		        getOwner(),
		        i,
		        propName ? Error("react-stack-top-frame") : unknownOwnerDebugStack,
		        propName ? createTask(getTaskName(type)) : unknownOwnerDebugTask
		      );
		    };
		    exports.createRef = function () {
		      var refObject = { current: null };
		      Object.seal(refObject);
		      return refObject;
		    };
		    exports.forwardRef = function (render) {
		      null != render && render.$$typeof === REACT_MEMO_TYPE
		        ? console.error(
		            "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
		          )
		        : "function" !== typeof render
		          ? console.error(
		              "forwardRef requires a render function but was given %s.",
		              null === render ? "null" : typeof render
		            )
		          : 0 !== render.length &&
		            2 !== render.length &&
		            console.error(
		              "forwardRef render functions accept exactly two parameters: props and ref. %s",
		              1 === render.length
		                ? "Did you forget to use the ref parameter?"
		                : "Any additional parameter will be undefined."
		            );
		      null != render &&
		        null != render.defaultProps &&
		        console.error(
		          "forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?"
		        );
		      var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render: render },
		        ownName;
		      Object.defineProperty(elementType, "displayName", {
		        enumerable: false,
		        configurable: true,
		        get: function () {
		          return ownName;
		        },
		        set: function (name) {
		          ownName = name;
		          render.name ||
		            render.displayName ||
		            (Object.defineProperty(render, "name", { value: name }),
		            (render.displayName = name));
		        }
		      });
		      return elementType;
		    };
		    exports.isValidElement = isValidElement;
		    exports.lazy = function (ctor) {
		      return {
		        $$typeof: REACT_LAZY_TYPE,
		        _payload: { _status: -1, _result: ctor },
		        _init: lazyInitializer
		      };
		    };
		    exports.memo = function (type, compare) {
		      null == type &&
		        console.error(
		          "memo: The first argument must be a component. Instead received: %s",
		          null === type ? "null" : typeof type
		        );
		      compare = {
		        $$typeof: REACT_MEMO_TYPE,
		        type: type,
		        compare: void 0 === compare ? null : compare
		      };
		      var ownName;
		      Object.defineProperty(compare, "displayName", {
		        enumerable: false,
		        configurable: true,
		        get: function () {
		          return ownName;
		        },
		        set: function (name) {
		          ownName = name;
		          type.name ||
		            type.displayName ||
		            (Object.defineProperty(type, "name", { value: name }),
		            (type.displayName = name));
		        }
		      });
		      return compare;
		    };
		    exports.startTransition = function (scope) {
		      var prevTransition = ReactSharedInternals.T,
		        currentTransition = {};
		      ReactSharedInternals.T = currentTransition;
		      currentTransition._updatedFibers = new Set();
		      try {
		        var returnValue = scope(),
		          onStartTransitionFinish = ReactSharedInternals.S;
		        null !== onStartTransitionFinish &&
		          onStartTransitionFinish(currentTransition, returnValue);
		        "object" === typeof returnValue &&
		          null !== returnValue &&
		          "function" === typeof returnValue.then &&
		          returnValue.then(noop, reportGlobalError);
		      } catch (error) {
		        reportGlobalError(error);
		      } finally {
		        null === prevTransition &&
		          currentTransition._updatedFibers &&
		          ((scope = currentTransition._updatedFibers.size),
		          currentTransition._updatedFibers.clear(),
		          10 < scope &&
		            console.warn(
		              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
		            )),
		          (ReactSharedInternals.T = prevTransition);
		      }
		    };
		    exports.unstable_useCacheRefresh = function () {
		      return resolveDispatcher().useCacheRefresh();
		    };
		    exports.use = function (usable) {
		      return resolveDispatcher().use(usable);
		    };
		    exports.useActionState = function (action, initialState, permalink) {
		      return resolveDispatcher().useActionState(
		        action,
		        initialState,
		        permalink
		      );
		    };
		    exports.useCallback = function (callback, deps) {
		      return resolveDispatcher().useCallback(callback, deps);
		    };
		    exports.useContext = function (Context) {
		      var dispatcher = resolveDispatcher();
		      Context.$$typeof === REACT_CONSUMER_TYPE &&
		        console.error(
		          "Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?"
		        );
		      return dispatcher.useContext(Context);
		    };
		    exports.useDebugValue = function (value, formatterFn) {
		      return resolveDispatcher().useDebugValue(value, formatterFn);
		    };
		    exports.useDeferredValue = function (value, initialValue) {
		      return resolveDispatcher().useDeferredValue(value, initialValue);
		    };
		    exports.useEffect = function (create, createDeps, update) {
		      null == create &&
		        console.warn(
		          "React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?"
		        );
		      var dispatcher = resolveDispatcher();
		      if ("function" === typeof update)
		        throw Error(
		          "useEffect CRUD overload is not enabled in this build of React."
		        );
		      return dispatcher.useEffect(create, createDeps);
		    };
		    exports.useId = function () {
		      return resolveDispatcher().useId();
		    };
		    exports.useImperativeHandle = function (ref, create, deps) {
		      return resolveDispatcher().useImperativeHandle(ref, create, deps);
		    };
		    exports.useInsertionEffect = function (create, deps) {
		      null == create &&
		        console.warn(
		          "React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?"
		        );
		      return resolveDispatcher().useInsertionEffect(create, deps);
		    };
		    exports.useLayoutEffect = function (create, deps) {
		      null == create &&
		        console.warn(
		          "React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?"
		        );
		      return resolveDispatcher().useLayoutEffect(create, deps);
		    };
		    exports.useMemo = function (create, deps) {
		      return resolveDispatcher().useMemo(create, deps);
		    };
		    exports.useOptimistic = function (passthrough, reducer) {
		      return resolveDispatcher().useOptimistic(passthrough, reducer);
		    };
		    exports.useReducer = function (reducer, initialArg, init) {
		      return resolveDispatcher().useReducer(reducer, initialArg, init);
		    };
		    exports.useRef = function (initialValue) {
		      return resolveDispatcher().useRef(initialValue);
		    };
		    exports.useState = function (initialState) {
		      return resolveDispatcher().useState(initialState);
		    };
		    exports.useSyncExternalStore = function (
		      subscribe,
		      getSnapshot,
		      getServerSnapshot
		    ) {
		      return resolveDispatcher().useSyncExternalStore(
		        subscribe,
		        getSnapshot,
		        getServerSnapshot
		      );
		    };
		    exports.useTransition = function () {
		      return resolveDispatcher().useTransition();
		    };
		    exports.version = "19.1.1";
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
		  }))(); 
	} (react_development, react_development.exports));
	return react_development.exports;
}

var hasRequiredReact;

function requireReact () {
	if (hasRequiredReact) return react.exports;
	hasRequiredReact = 1;

	{
	  react.exports = requireReact_development();
	}
	return react.exports;
}

var reactExports = requireReact();
const React = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

const React$1 = /*#__PURE__*/_mergeNamespaces({
	__proto__: null,
	default: React
}, [reactExports]);

var client = {exports: {}};

var reactDomClient_development = {};

var scheduler = {exports: {}};

var scheduler_development = {};

/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_development;

function requireScheduler_development () {
	if (hasRequiredScheduler_development) return scheduler_development;
	hasRequiredScheduler_development = 1;
	(function (exports) {
		((function () {
		    function performWorkUntilDeadline() {
		      needsPaint = false;
		      if (isMessageLoopRunning) {
		        var currentTime = exports.unstable_now();
		        startTime = currentTime;
		        var hasMoreWork = true;
		        try {
		          a: {
		            isHostCallbackScheduled = false;
		            isHostTimeoutScheduled &&
		              ((isHostTimeoutScheduled = false),
		              localClearTimeout(taskTimeoutID),
		              (taskTimeoutID = -1));
		            isPerformingWork = true;
		            var previousPriorityLevel = currentPriorityLevel;
		            try {
		              b: {
		                advanceTimers(currentTime);
		                for (
		                  currentTask = peek(taskQueue);
		                  null !== currentTask &&
		                  !(
		                    currentTask.expirationTime > currentTime &&
		                    shouldYieldToHost()
		                  );

		                ) {
		                  var callback = currentTask.callback;
		                  if ("function" === typeof callback) {
		                    currentTask.callback = null;
		                    currentPriorityLevel = currentTask.priorityLevel;
		                    var continuationCallback = callback(
		                      currentTask.expirationTime <= currentTime
		                    );
		                    currentTime = exports.unstable_now();
		                    if ("function" === typeof continuationCallback) {
		                      currentTask.callback = continuationCallback;
		                      advanceTimers(currentTime);
		                      hasMoreWork = true;
		                      break b;
		                    }
		                    currentTask === peek(taskQueue) && pop(taskQueue);
		                    advanceTimers(currentTime);
		                  } else pop(taskQueue);
		                  currentTask = peek(taskQueue);
		                }
		                if (null !== currentTask) hasMoreWork = true;
		                else {
		                  var firstTimer = peek(timerQueue);
		                  null !== firstTimer &&
		                    requestHostTimeout(
		                      handleTimeout,
		                      firstTimer.startTime - currentTime
		                    );
		                  hasMoreWork = false;
		                }
		              }
		              break a;
		            } finally {
		              (currentTask = null),
		                (currentPriorityLevel = previousPriorityLevel),
		                (isPerformingWork = false);
		            }
		            hasMoreWork = void 0;
		          }
		        } finally {
		          hasMoreWork
		            ? schedulePerformWorkUntilDeadline()
		            : (isMessageLoopRunning = false);
		        }
		      }
		    }
		    function push(heap, node) {
		      var index = heap.length;
		      heap.push(node);
		      a: for (; 0 < index; ) {
		        var parentIndex = (index - 1) >>> 1,
		          parent = heap[parentIndex];
		        if (0 < compare(parent, node))
		          (heap[parentIndex] = node),
		            (heap[index] = parent),
		            (index = parentIndex);
		        else break a;
		      }
		    }
		    function peek(heap) {
		      return 0 === heap.length ? null : heap[0];
		    }
		    function pop(heap) {
		      if (0 === heap.length) return null;
		      var first = heap[0],
		        last = heap.pop();
		      if (last !== first) {
		        heap[0] = last;
		        a: for (
		          var index = 0, length = heap.length, halfLength = length >>> 1;
		          index < halfLength;

		        ) {
		          var leftIndex = 2 * (index + 1) - 1,
		            left = heap[leftIndex],
		            rightIndex = leftIndex + 1,
		            right = heap[rightIndex];
		          if (0 > compare(left, last))
		            rightIndex < length && 0 > compare(right, left)
		              ? ((heap[index] = right),
		                (heap[rightIndex] = last),
		                (index = rightIndex))
		              : ((heap[index] = left),
		                (heap[leftIndex] = last),
		                (index = leftIndex));
		          else if (rightIndex < length && 0 > compare(right, last))
		            (heap[index] = right),
		              (heap[rightIndex] = last),
		              (index = rightIndex);
		          else break a;
		        }
		      }
		      return first;
		    }
		    function compare(a, b) {
		      var diff = a.sortIndex - b.sortIndex;
		      return 0 !== diff ? diff : a.id - b.id;
		    }
		    function advanceTimers(currentTime) {
		      for (var timer = peek(timerQueue); null !== timer; ) {
		        if (null === timer.callback) pop(timerQueue);
		        else if (timer.startTime <= currentTime)
		          pop(timerQueue),
		            (timer.sortIndex = timer.expirationTime),
		            push(taskQueue, timer);
		        else break;
		        timer = peek(timerQueue);
		      }
		    }
		    function handleTimeout(currentTime) {
		      isHostTimeoutScheduled = false;
		      advanceTimers(currentTime);
		      if (!isHostCallbackScheduled)
		        if (null !== peek(taskQueue))
		          (isHostCallbackScheduled = true),
		            isMessageLoopRunning ||
		              ((isMessageLoopRunning = true), schedulePerformWorkUntilDeadline());
		        else {
		          var firstTimer = peek(timerQueue);
		          null !== firstTimer &&
		            requestHostTimeout(
		              handleTimeout,
		              firstTimer.startTime - currentTime
		            );
		        }
		    }
		    function shouldYieldToHost() {
		      return needsPaint
		        ? true
		        : exports.unstable_now() - startTime < frameInterval
		          ? false
		          : true;
		    }
		    function requestHostTimeout(callback, ms) {
		      taskTimeoutID = localSetTimeout(function () {
		        callback(exports.unstable_now());
		      }, ms);
		    }
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
		    exports.unstable_now = void 0;
		    if (
		      "object" === typeof performance &&
		      "function" === typeof performance.now
		    ) {
		      var localPerformance = performance;
		      exports.unstable_now = function () {
		        return localPerformance.now();
		      };
		    } else {
		      var localDate = Date,
		        initialTime = localDate.now();
		      exports.unstable_now = function () {
		        return localDate.now() - initialTime;
		      };
		    }
		    var taskQueue = [],
		      timerQueue = [],
		      taskIdCounter = 1,
		      currentTask = null,
		      currentPriorityLevel = 3,
		      isPerformingWork = false,
		      isHostCallbackScheduled = false,
		      isHostTimeoutScheduled = false,
		      needsPaint = false,
		      localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
		      localClearTimeout =
		        "function" === typeof clearTimeout ? clearTimeout : null,
		      localSetImmediate =
		        "undefined" !== typeof setImmediate ? setImmediate : null,
		      isMessageLoopRunning = false,
		      taskTimeoutID = -1,
		      frameInterval = 5,
		      startTime = -1;
		    if ("function" === typeof localSetImmediate)
		      var schedulePerformWorkUntilDeadline = function () {
		        localSetImmediate(performWorkUntilDeadline);
		      };
		    else if ("undefined" !== typeof MessageChannel) {
		      var channel = new MessageChannel(),
		        port = channel.port2;
		      channel.port1.onmessage = performWorkUntilDeadline;
		      schedulePerformWorkUntilDeadline = function () {
		        port.postMessage(null);
		      };
		    } else
		      schedulePerformWorkUntilDeadline = function () {
		        localSetTimeout(performWorkUntilDeadline, 0);
		      };
		    exports.unstable_IdlePriority = 5;
		    exports.unstable_ImmediatePriority = 1;
		    exports.unstable_LowPriority = 4;
		    exports.unstable_NormalPriority = 3;
		    exports.unstable_Profiling = null;
		    exports.unstable_UserBlockingPriority = 2;
		    exports.unstable_cancelCallback = function (task) {
		      task.callback = null;
		    };
		    exports.unstable_forceFrameRate = function (fps) {
		      0 > fps || 125 < fps
		        ? console.error(
		            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
		          )
		        : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
		    };
		    exports.unstable_getCurrentPriorityLevel = function () {
		      return currentPriorityLevel;
		    };
		    exports.unstable_next = function (eventHandler) {
		      switch (currentPriorityLevel) {
		        case 1:
		        case 2:
		        case 3:
		          var priorityLevel = 3;
		          break;
		        default:
		          priorityLevel = currentPriorityLevel;
		      }
		      var previousPriorityLevel = currentPriorityLevel;
		      currentPriorityLevel = priorityLevel;
		      try {
		        return eventHandler();
		      } finally {
		        currentPriorityLevel = previousPriorityLevel;
		      }
		    };
		    exports.unstable_requestPaint = function () {
		      needsPaint = true;
		    };
		    exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
		      switch (priorityLevel) {
		        case 1:
		        case 2:
		        case 3:
		        case 4:
		        case 5:
		          break;
		        default:
		          priorityLevel = 3;
		      }
		      var previousPriorityLevel = currentPriorityLevel;
		      currentPriorityLevel = priorityLevel;
		      try {
		        return eventHandler();
		      } finally {
		        currentPriorityLevel = previousPriorityLevel;
		      }
		    };
		    exports.unstable_scheduleCallback = function (
		      priorityLevel,
		      callback,
		      options
		    ) {
		      var currentTime = exports.unstable_now();
		      "object" === typeof options && null !== options
		        ? ((options = options.delay),
		          (options =
		            "number" === typeof options && 0 < options
		              ? currentTime + options
		              : currentTime))
		        : (options = currentTime);
		      switch (priorityLevel) {
		        case 1:
		          var timeout = -1;
		          break;
		        case 2:
		          timeout = 250;
		          break;
		        case 5:
		          timeout = 1073741823;
		          break;
		        case 4:
		          timeout = 1e4;
		          break;
		        default:
		          timeout = 5e3;
		      }
		      timeout = options + timeout;
		      priorityLevel = {
		        id: taskIdCounter++,
		        callback: callback,
		        priorityLevel: priorityLevel,
		        startTime: options,
		        expirationTime: timeout,
		        sortIndex: -1
		      };
		      options > currentTime
		        ? ((priorityLevel.sortIndex = options),
		          push(timerQueue, priorityLevel),
		          null === peek(taskQueue) &&
		            priorityLevel === peek(timerQueue) &&
		            (isHostTimeoutScheduled
		              ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))
		              : (isHostTimeoutScheduled = true),
		            requestHostTimeout(handleTimeout, options - currentTime)))
		        : ((priorityLevel.sortIndex = timeout),
		          push(taskQueue, priorityLevel),
		          isHostCallbackScheduled ||
		            isPerformingWork ||
		            ((isHostCallbackScheduled = true),
		            isMessageLoopRunning ||
		              ((isMessageLoopRunning = true),
		              schedulePerformWorkUntilDeadline())));
		      return priorityLevel;
		    };
		    exports.unstable_shouldYield = shouldYieldToHost;
		    exports.unstable_wrapCallback = function (callback) {
		      var parentPriorityLevel = currentPriorityLevel;
		      return function () {
		        var previousPriorityLevel = currentPriorityLevel;
		        currentPriorityLevel = parentPriorityLevel;
		        try {
		          return callback.apply(this, arguments);
		        } finally {
		          currentPriorityLevel = previousPriorityLevel;
		        }
		      };
		    };
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
		  }))(); 
	} (scheduler_development));
	return scheduler_development;
}

var hasRequiredScheduler;

function requireScheduler () {
	if (hasRequiredScheduler) return scheduler.exports;
	hasRequiredScheduler = 1;

	{
	  scheduler.exports = requireScheduler_development();
	}
	return scheduler.exports;
}

var reactDom = {exports: {}};

var reactDom_development = {};

/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDom_development;

function requireReactDom_development () {
	if (hasRequiredReactDom_development) return reactDom_development;
	hasRequiredReactDom_development = 1;
	((function () {
	    function noop() {}
	    function testStringCoercion(value) {
	      return "" + value;
	    }
	    function createPortal$1(children, containerInfo, implementation) {
	      var key =
	        3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
	      try {
	        var JSCompiler_inline_result = false;
	      } catch (e) {
	        JSCompiler_inline_result = true;
	      }
	      JSCompiler_inline_result &&
	        (console.error(
	          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
	          ("function" === typeof Symbol &&
	            Symbol.toStringTag &&
	            key[Symbol.toStringTag]) ||
	            key.constructor.name ||
	            "Object"
	        ),
	        testStringCoercion(key));
	      return {
	        $$typeof: REACT_PORTAL_TYPE,
	        key: null == key ? null : "" + key,
	        children: children,
	        containerInfo: containerInfo,
	        implementation: implementation
	      };
	    }
	    function getCrossOriginStringAs(as, input) {
	      if ("font" === as) return "";
	      if ("string" === typeof input)
	        return "use-credentials" === input ? input : "";
	    }
	    function getValueDescriptorExpectingObjectForWarning(thing) {
	      return null === thing
	        ? "`null`"
	        : void 0 === thing
	          ? "`undefined`"
	          : "" === thing
	            ? "an empty string"
	            : 'something with type "' + typeof thing + '"';
	    }
	    function getValueDescriptorExpectingEnumForWarning(thing) {
	      return null === thing
	        ? "`null`"
	        : void 0 === thing
	          ? "`undefined`"
	          : "" === thing
	            ? "an empty string"
	            : "string" === typeof thing
	              ? JSON.stringify(thing)
	              : "number" === typeof thing
	                ? "`" + thing + "`"
	                : 'something with type "' + typeof thing + '"';
	    }
	    function resolveDispatcher() {
	      var dispatcher = ReactSharedInternals.H;
	      null === dispatcher &&
	        console.error(
	          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
	        );
	      return dispatcher;
	    }
	    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
	      "function" ===
	        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
	    var React = requireReact(),
	      Internals = {
	        d: {
	          f: noop,
	          r: function () {
	            throw Error(
	              "Invalid form element. requestFormReset must be passed a form that was rendered by React."
	            );
	          },
	          D: noop,
	          C: noop,
	          L: noop,
	          m: noop,
	          X: noop,
	          S: noop,
	          M: noop
	        },
	        p: 0,
	        findDOMNode: null
	      },
	      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	      ReactSharedInternals =
	        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
	    ("function" === typeof Map &&
	      null != Map.prototype &&
	      "function" === typeof Map.prototype.forEach &&
	      "function" === typeof Set &&
	      null != Set.prototype &&
	      "function" === typeof Set.prototype.clear &&
	      "function" === typeof Set.prototype.forEach) ||
	      console.error(
	        "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
	      );
	    reactDom_development.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
	      Internals;
	    reactDom_development.createPortal = function (children, container) {
	      var key =
	        2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
	      if (
	        !container ||
	        (1 !== container.nodeType &&
	          9 !== container.nodeType &&
	          11 !== container.nodeType)
	      )
	        throw Error("Target container is not a DOM element.");
	      return createPortal$1(children, container, null, key);
	    };
	    reactDom_development.flushSync = function (fn) {
	      var previousTransition = ReactSharedInternals.T,
	        previousUpdatePriority = Internals.p;
	      try {
	        if (((ReactSharedInternals.T = null), (Internals.p = 2), fn))
	          return fn();
	      } finally {
	        (ReactSharedInternals.T = previousTransition),
	          (Internals.p = previousUpdatePriority),
	          Internals.d.f() &&
	            console.error(
	              "flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."
	            );
	      }
	    };
	    reactDom_development.preconnect = function (href, options) {
	      "string" === typeof href && href
	        ? null != options && "object" !== typeof options
	          ? console.error(
	              "ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",
	              getValueDescriptorExpectingEnumForWarning(options)
	            )
	          : null != options &&
	            "string" !== typeof options.crossOrigin &&
	            console.error(
	              "ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",
	              getValueDescriptorExpectingObjectForWarning(options.crossOrigin)
	            )
	        : console.error(
	            "ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
	            getValueDescriptorExpectingObjectForWarning(href)
	          );
	      "string" === typeof href &&
	        (options
	          ? ((options = options.crossOrigin),
	            (options =
	              "string" === typeof options
	                ? "use-credentials" === options
	                  ? options
	                  : ""
	                : void 0))
	          : (options = null),
	        Internals.d.C(href, options));
	    };
	    reactDom_development.prefetchDNS = function (href) {
	      if ("string" !== typeof href || !href)
	        console.error(
	          "ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
	          getValueDescriptorExpectingObjectForWarning(href)
	        );
	      else if (1 < arguments.length) {
	        var options = arguments[1];
	        "object" === typeof options && options.hasOwnProperty("crossOrigin")
	          ? console.error(
	              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
	              getValueDescriptorExpectingEnumForWarning(options)
	            )
	          : console.error(
	              "ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",
	              getValueDescriptorExpectingEnumForWarning(options)
	            );
	      }
	      "string" === typeof href && Internals.d.D(href);
	    };
	    reactDom_development.preinit = function (href, options) {
	      "string" === typeof href && href
	        ? null == options || "object" !== typeof options
	          ? console.error(
	              "ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",
	              getValueDescriptorExpectingEnumForWarning(options)
	            )
	          : "style" !== options.as &&
	            "script" !== options.as &&
	            console.error(
	              'ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',
	              getValueDescriptorExpectingEnumForWarning(options.as)
	            )
	        : console.error(
	            "ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",
	            getValueDescriptorExpectingObjectForWarning(href)
	          );
	      if (
	        "string" === typeof href &&
	        options &&
	        "string" === typeof options.as
	      ) {
	        var as = options.as,
	          crossOrigin = getCrossOriginStringAs(as, options.crossOrigin),
	          integrity =
	            "string" === typeof options.integrity ? options.integrity : void 0,
	          fetchPriority =
	            "string" === typeof options.fetchPriority
	              ? options.fetchPriority
	              : void 0;
	        "style" === as
	          ? Internals.d.S(
	              href,
	              "string" === typeof options.precedence
	                ? options.precedence
	                : void 0,
	              {
	                crossOrigin: crossOrigin,
	                integrity: integrity,
	                fetchPriority: fetchPriority
	              }
	            )
	          : "script" === as &&
	            Internals.d.X(href, {
	              crossOrigin: crossOrigin,
	              integrity: integrity,
	              fetchPriority: fetchPriority,
	              nonce: "string" === typeof options.nonce ? options.nonce : void 0
	            });
	      }
	    };
	    reactDom_development.preinitModule = function (href, options) {
	      var encountered = "";
	      ("string" === typeof href && href) ||
	        (encountered +=
	          " The `href` argument encountered was " +
	          getValueDescriptorExpectingObjectForWarning(href) +
	          ".");
	      void 0 !== options && "object" !== typeof options
	        ? (encountered +=
	            " The `options` argument encountered was " +
	            getValueDescriptorExpectingObjectForWarning(options) +
	            ".")
	        : options &&
	          "as" in options &&
	          "script" !== options.as &&
	          (encountered +=
	            " The `as` option encountered was " +
	            getValueDescriptorExpectingEnumForWarning(options.as) +
	            ".");
	      if (encountered)
	        console.error(
	          "ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",
	          encountered
	        );
	      else
	        switch (
	          ((encountered =
	            options && "string" === typeof options.as ? options.as : "script"),
	          encountered)
	        ) {
	          case "script":
	            break;
	          default:
	            (encountered =
	              getValueDescriptorExpectingEnumForWarning(encountered)),
	              console.error(
	                'ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',
	                encountered,
	                href
	              );
	        }
	      if ("string" === typeof href)
	        if ("object" === typeof options && null !== options) {
	          if (null == options.as || "script" === options.as)
	            (encountered = getCrossOriginStringAs(
	              options.as,
	              options.crossOrigin
	            )),
	              Internals.d.M(href, {
	                crossOrigin: encountered,
	                integrity:
	                  "string" === typeof options.integrity
	                    ? options.integrity
	                    : void 0,
	                nonce:
	                  "string" === typeof options.nonce ? options.nonce : void 0
	              });
	        } else null == options && Internals.d.M(href);
	    };
	    reactDom_development.preload = function (href, options) {
	      var encountered = "";
	      ("string" === typeof href && href) ||
	        (encountered +=
	          " The `href` argument encountered was " +
	          getValueDescriptorExpectingObjectForWarning(href) +
	          ".");
	      null == options || "object" !== typeof options
	        ? (encountered +=
	            " The `options` argument encountered was " +
	            getValueDescriptorExpectingObjectForWarning(options) +
	            ".")
	        : ("string" === typeof options.as && options.as) ||
	          (encountered +=
	            " The `as` option encountered was " +
	            getValueDescriptorExpectingObjectForWarning(options.as) +
	            ".");
	      encountered &&
	        console.error(
	          'ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',
	          encountered
	        );
	      if (
	        "string" === typeof href &&
	        "object" === typeof options &&
	        null !== options &&
	        "string" === typeof options.as
	      ) {
	        encountered = options.as;
	        var crossOrigin = getCrossOriginStringAs(
	          encountered,
	          options.crossOrigin
	        );
	        Internals.d.L(href, encountered, {
	          crossOrigin: crossOrigin,
	          integrity:
	            "string" === typeof options.integrity ? options.integrity : void 0,
	          nonce: "string" === typeof options.nonce ? options.nonce : void 0,
	          type: "string" === typeof options.type ? options.type : void 0,
	          fetchPriority:
	            "string" === typeof options.fetchPriority
	              ? options.fetchPriority
	              : void 0,
	          referrerPolicy:
	            "string" === typeof options.referrerPolicy
	              ? options.referrerPolicy
	              : void 0,
	          imageSrcSet:
	            "string" === typeof options.imageSrcSet
	              ? options.imageSrcSet
	              : void 0,
	          imageSizes:
	            "string" === typeof options.imageSizes
	              ? options.imageSizes
	              : void 0,
	          media: "string" === typeof options.media ? options.media : void 0
	        });
	      }
	    };
	    reactDom_development.preloadModule = function (href, options) {
	      var encountered = "";
	      ("string" === typeof href && href) ||
	        (encountered +=
	          " The `href` argument encountered was " +
	          getValueDescriptorExpectingObjectForWarning(href) +
	          ".");
	      void 0 !== options && "object" !== typeof options
	        ? (encountered +=
	            " The `options` argument encountered was " +
	            getValueDescriptorExpectingObjectForWarning(options) +
	            ".")
	        : options &&
	          "as" in options &&
	          "string" !== typeof options.as &&
	          (encountered +=
	            " The `as` option encountered was " +
	            getValueDescriptorExpectingObjectForWarning(options.as) +
	            ".");
	      encountered &&
	        console.error(
	          'ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',
	          encountered
	        );
	      "string" === typeof href &&
	        (options
	          ? ((encountered = getCrossOriginStringAs(
	              options.as,
	              options.crossOrigin
	            )),
	            Internals.d.m(href, {
	              as:
	                "string" === typeof options.as && "script" !== options.as
	                  ? options.as
	                  : void 0,
	              crossOrigin: encountered,
	              integrity:
	                "string" === typeof options.integrity
	                  ? options.integrity
	                  : void 0
	            }))
	          : Internals.d.m(href));
	    };
	    reactDom_development.requestFormReset = function (form) {
	      Internals.d.r(form);
	    };
	    reactDom_development.unstable_batchedUpdates = function (fn, a) {
	      return fn(a);
	    };
	    reactDom_development.useFormState = function (action, initialState, permalink) {
	      return resolveDispatcher().useFormState(action, initialState, permalink);
	    };
	    reactDom_development.useFormStatus = function () {
	      return resolveDispatcher().useHostTransitionStatus();
	    };
	    reactDom_development.version = "19.1.1";
	    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
	      "function" ===
	        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
	  }))();
	return reactDom_development;
}

var hasRequiredReactDom;

function requireReactDom () {
	if (hasRequiredReactDom) return reactDom.exports;
	hasRequiredReactDom = 1;

	{
	  reactDom.exports = requireReactDom_development();
	}
	return reactDom.exports;
}

/**
 * @license React
 * react-dom-client.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDomClient_development;

function requireReactDomClient_development () {
	if (hasRequiredReactDomClient_development) return reactDomClient_development;
	hasRequiredReactDomClient_development = 1;
	((function () {
	    function findHook(fiber, id) {
	      for (fiber = fiber.memoizedState; null !== fiber && 0 < id; )
	        (fiber = fiber.next), id--;
	      return fiber;
	    }
	    function copyWithSetImpl(obj, path, index, value) {
	      if (index >= path.length) return value;
	      var key = path[index],
	        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
	      updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
	      return updated;
	    }
	    function copyWithRename(obj, oldPath, newPath) {
	      if (oldPath.length !== newPath.length)
	        console.warn("copyWithRename() expects paths of the same length");
	      else {
	        for (var i = 0; i < newPath.length - 1; i++)
	          if (oldPath[i] !== newPath[i]) {
	            console.warn(
	              "copyWithRename() expects paths to be the same except for the deepest key"
	            );
	            return;
	          }
	        return copyWithRenameImpl(obj, oldPath, newPath, 0);
	      }
	    }
	    function copyWithRenameImpl(obj, oldPath, newPath, index) {
	      var oldKey = oldPath[index],
	        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
	      index + 1 === oldPath.length
	        ? ((updated[newPath[index]] = updated[oldKey]),
	          isArrayImpl(updated)
	            ? updated.splice(oldKey, 1)
	            : delete updated[oldKey])
	        : (updated[oldKey] = copyWithRenameImpl(
	            obj[oldKey],
	            oldPath,
	            newPath,
	            index + 1
	          ));
	      return updated;
	    }
	    function copyWithDeleteImpl(obj, path, index) {
	      var key = path[index],
	        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
	      if (index + 1 === path.length)
	        return (
	          isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key],
	          updated
	        );
	      updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
	      return updated;
	    }
	    function shouldSuspendImpl() {
	      return false;
	    }
	    function shouldErrorImpl() {
	      return null;
	    }
	    function warnForMissingKey() {}
	    function warnInvalidHookAccess() {
	      console.error(
	        "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks"
	      );
	    }
	    function warnInvalidContextAccess() {
	      console.error(
	        "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
	      );
	    }
	    function noop$2() {}
	    function setToSortedString(set) {
	      var array = [];
	      set.forEach(function (value) {
	        array.push(value);
	      });
	      return array.sort().join(", ");
	    }
	    function createFiber(tag, pendingProps, key, mode) {
	      return new FiberNode(tag, pendingProps, key, mode);
	    }
	    function scheduleRoot(root, element) {
	      root.context === emptyContextObject &&
	        (updateContainerImpl(root.current, 2, element, root, null, null),
	        flushSyncWork$1());
	    }
	    function scheduleRefresh(root, update) {
	      if (null !== resolveFamily) {
	        var staleFamilies = update.staleFamilies;
	        update = update.updatedFamilies;
	        flushPendingEffects();
	        scheduleFibersWithFamiliesRecursively(
	          root.current,
	          update,
	          staleFamilies
	        );
	        flushSyncWork$1();
	      }
	    }
	    function setRefreshHandler(handler) {
	      resolveFamily = handler;
	    }
	    function isValidContainer(node) {
	      return !(
	        !node ||
	        (1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType)
	      );
	    }
	    function getNearestMountedFiber(fiber) {
	      var node = fiber,
	        nearestMounted = fiber;
	      if (fiber.alternate) for (; node.return; ) node = node.return;
	      else {
	        fiber = node;
	        do
	          (node = fiber),
	            0 !== (node.flags & 4098) && (nearestMounted = node.return),
	            (fiber = node.return);
	        while (fiber);
	      }
	      return 3 === node.tag ? nearestMounted : null;
	    }
	    function getSuspenseInstanceFromFiber(fiber) {
	      if (13 === fiber.tag) {
	        var suspenseState = fiber.memoizedState;
	        null === suspenseState &&
	          ((fiber = fiber.alternate),
	          null !== fiber && (suspenseState = fiber.memoizedState));
	        if (null !== suspenseState) return suspenseState.dehydrated;
	      }
	      return null;
	    }
	    function assertIsMounted(fiber) {
	      if (getNearestMountedFiber(fiber) !== fiber)
	        throw Error("Unable to find node on an unmounted component.");
	    }
	    function findCurrentFiberUsingSlowPath(fiber) {
	      var alternate = fiber.alternate;
	      if (!alternate) {
	        alternate = getNearestMountedFiber(fiber);
	        if (null === alternate)
	          throw Error("Unable to find node on an unmounted component.");
	        return alternate !== fiber ? null : fiber;
	      }
	      for (var a = fiber, b = alternate; ; ) {
	        var parentA = a.return;
	        if (null === parentA) break;
	        var parentB = parentA.alternate;
	        if (null === parentB) {
	          b = parentA.return;
	          if (null !== b) {
	            a = b;
	            continue;
	          }
	          break;
	        }
	        if (parentA.child === parentB.child) {
	          for (parentB = parentA.child; parentB; ) {
	            if (parentB === a) return assertIsMounted(parentA), fiber;
	            if (parentB === b) return assertIsMounted(parentA), alternate;
	            parentB = parentB.sibling;
	          }
	          throw Error("Unable to find node on an unmounted component.");
	        }
	        if (a.return !== b.return) (a = parentA), (b = parentB);
	        else {
	          for (var didFindChild = false, _child = parentA.child; _child; ) {
	            if (_child === a) {
	              didFindChild = true;
	              a = parentA;
	              b = parentB;
	              break;
	            }
	            if (_child === b) {
	              didFindChild = true;
	              b = parentA;
	              a = parentB;
	              break;
	            }
	            _child = _child.sibling;
	          }
	          if (!didFindChild) {
	            for (_child = parentB.child; _child; ) {
	              if (_child === a) {
	                didFindChild = true;
	                a = parentB;
	                b = parentA;
	                break;
	              }
	              if (_child === b) {
	                didFindChild = true;
	                b = parentB;
	                a = parentA;
	                break;
	              }
	              _child = _child.sibling;
	            }
	            if (!didFindChild)
	              throw Error(
	                "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
	              );
	          }
	        }
	        if (a.alternate !== b)
	          throw Error(
	            "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
	          );
	      }
	      if (3 !== a.tag)
	        throw Error("Unable to find node on an unmounted component.");
	      return a.stateNode.current === a ? fiber : alternate;
	    }
	    function findCurrentHostFiberImpl(node) {
	      var tag = node.tag;
	      if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
	      for (node = node.child; null !== node; ) {
	        tag = findCurrentHostFiberImpl(node);
	        if (null !== tag) return tag;
	        node = node.sibling;
	      }
	      return null;
	    }
	    function getIteratorFn(maybeIterable) {
	      if (null === maybeIterable || "object" !== typeof maybeIterable)
	        return null;
	      maybeIterable =
	        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
	        maybeIterable["@@iterator"];
	      return "function" === typeof maybeIterable ? maybeIterable : null;
	    }
	    function getComponentNameFromType(type) {
	      if (null == type) return null;
	      if ("function" === typeof type)
	        return type.$$typeof === REACT_CLIENT_REFERENCE
	          ? null
	          : type.displayName || type.name || null;
	      if ("string" === typeof type) return type;
	      switch (type) {
	        case REACT_FRAGMENT_TYPE:
	          return "Fragment";
	        case REACT_PROFILER_TYPE:
	          return "Profiler";
	        case REACT_STRICT_MODE_TYPE:
	          return "StrictMode";
	        case REACT_SUSPENSE_TYPE:
	          return "Suspense";
	        case REACT_SUSPENSE_LIST_TYPE:
	          return "SuspenseList";
	        case REACT_ACTIVITY_TYPE:
	          return "Activity";
	      }
	      if ("object" === typeof type)
	        switch (
	          ("number" === typeof type.tag &&
	            console.error(
	              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
	            ),
	          type.$$typeof)
	        ) {
	          case REACT_PORTAL_TYPE:
	            return "Portal";
	          case REACT_CONTEXT_TYPE:
	            return (type.displayName || "Context") + ".Provider";
	          case REACT_CONSUMER_TYPE:
	            return (type._context.displayName || "Context") + ".Consumer";
	          case REACT_FORWARD_REF_TYPE:
	            var innerType = type.render;
	            type = type.displayName;
	            type ||
	              ((type = innerType.displayName || innerType.name || ""),
	              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
	            return type;
	          case REACT_MEMO_TYPE:
	            return (
	              (innerType = type.displayName || null),
	              null !== innerType
	                ? innerType
	                : getComponentNameFromType(type.type) || "Memo"
	            );
	          case REACT_LAZY_TYPE:
	            innerType = type._payload;
	            type = type._init;
	            try {
	              return getComponentNameFromType(type(innerType));
	            } catch (x) {}
	        }
	      return null;
	    }
	    function getComponentNameFromOwner(owner) {
	      return "number" === typeof owner.tag
	        ? getComponentNameFromFiber(owner)
	        : "string" === typeof owner.name
	          ? owner.name
	          : null;
	    }
	    function getComponentNameFromFiber(fiber) {
	      var type = fiber.type;
	      switch (fiber.tag) {
	        case 31:
	          return "Activity";
	        case 24:
	          return "Cache";
	        case 9:
	          return (type._context.displayName || "Context") + ".Consumer";
	        case 10:
	          return (type.displayName || "Context") + ".Provider";
	        case 18:
	          return "DehydratedFragment";
	        case 11:
	          return (
	            (fiber = type.render),
	            (fiber = fiber.displayName || fiber.name || ""),
	            type.displayName ||
	              ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef")
	          );
	        case 7:
	          return "Fragment";
	        case 26:
	        case 27:
	        case 5:
	          return type;
	        case 4:
	          return "Portal";
	        case 3:
	          return "Root";
	        case 6:
	          return "Text";
	        case 16:
	          return getComponentNameFromType(type);
	        case 8:
	          return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
	        case 22:
	          return "Offscreen";
	        case 12:
	          return "Profiler";
	        case 21:
	          return "Scope";
	        case 13:
	          return "Suspense";
	        case 19:
	          return "SuspenseList";
	        case 25:
	          return "TracingMarker";
	        case 1:
	        case 0:
	        case 14:
	        case 15:
	          if ("function" === typeof type)
	            return type.displayName || type.name || null;
	          if ("string" === typeof type) return type;
	          break;
	        case 29:
	          type = fiber._debugInfo;
	          if (null != type)
	            for (var i = type.length - 1; 0 <= i; i--)
	              if ("string" === typeof type[i].name) return type[i].name;
	          if (null !== fiber.return)
	            return getComponentNameFromFiber(fiber.return);
	      }
	      return null;
	    }
	    function createCursor(defaultValue) {
	      return { current: defaultValue };
	    }
	    function pop(cursor, fiber) {
	      0 > index$jscomp$0
	        ? console.error("Unexpected pop.")
	        : (fiber !== fiberStack[index$jscomp$0] &&
	            console.error("Unexpected Fiber popped."),
	          (cursor.current = valueStack[index$jscomp$0]),
	          (valueStack[index$jscomp$0] = null),
	          (fiberStack[index$jscomp$0] = null),
	          index$jscomp$0--);
	    }
	    function push(cursor, value, fiber) {
	      index$jscomp$0++;
	      valueStack[index$jscomp$0] = cursor.current;
	      fiberStack[index$jscomp$0] = fiber;
	      cursor.current = value;
	    }
	    function requiredContext(c) {
	      null === c &&
	        console.error(
	          "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
	        );
	      return c;
	    }
	    function pushHostContainer(fiber, nextRootInstance) {
	      push(rootInstanceStackCursor, nextRootInstance, fiber);
	      push(contextFiberStackCursor, fiber, fiber);
	      push(contextStackCursor, null, fiber);
	      var nextRootContext = nextRootInstance.nodeType;
	      switch (nextRootContext) {
	        case 9:
	        case 11:
	          nextRootContext = 9 === nextRootContext ? "#document" : "#fragment";
	          nextRootInstance = (nextRootInstance =
	            nextRootInstance.documentElement)
	            ? (nextRootInstance = nextRootInstance.namespaceURI)
	              ? getOwnHostContext(nextRootInstance)
	              : HostContextNamespaceNone
	            : HostContextNamespaceNone;
	          break;
	        default:
	          if (
	            ((nextRootContext = nextRootInstance.tagName),
	            (nextRootInstance = nextRootInstance.namespaceURI))
	          )
	            (nextRootInstance = getOwnHostContext(nextRootInstance)),
	              (nextRootInstance = getChildHostContextProd(
	                nextRootInstance,
	                nextRootContext
	              ));
	          else
	            switch (nextRootContext) {
	              case "svg":
	                nextRootInstance = HostContextNamespaceSvg;
	                break;
	              case "math":
	                nextRootInstance = HostContextNamespaceMath;
	                break;
	              default:
	                nextRootInstance = HostContextNamespaceNone;
	            }
	      }
	      nextRootContext = nextRootContext.toLowerCase();
	      nextRootContext = updatedAncestorInfoDev(null, nextRootContext);
	      nextRootContext = {
	        context: nextRootInstance,
	        ancestorInfo: nextRootContext
	      };
	      pop(contextStackCursor, fiber);
	      push(contextStackCursor, nextRootContext, fiber);
	    }
	    function popHostContainer(fiber) {
	      pop(contextStackCursor, fiber);
	      pop(contextFiberStackCursor, fiber);
	      pop(rootInstanceStackCursor, fiber);
	    }
	    function getHostContext() {
	      return requiredContext(contextStackCursor.current);
	    }
	    function pushHostContext(fiber) {
	      null !== fiber.memoizedState &&
	        push(hostTransitionProviderCursor, fiber, fiber);
	      var context = requiredContext(contextStackCursor.current);
	      var type = fiber.type;
	      var nextContext = getChildHostContextProd(context.context, type);
	      type = updatedAncestorInfoDev(context.ancestorInfo, type);
	      nextContext = { context: nextContext, ancestorInfo: type };
	      context !== nextContext &&
	        (push(contextFiberStackCursor, fiber, fiber),
	        push(contextStackCursor, nextContext, fiber));
	    }
	    function popHostContext(fiber) {
	      contextFiberStackCursor.current === fiber &&
	        (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
	      hostTransitionProviderCursor.current === fiber &&
	        (pop(hostTransitionProviderCursor, fiber),
	        (HostTransitionContext._currentValue = NotPendingTransition));
	    }
	    function typeName(value) {
	      return (
	        ("function" === typeof Symbol &&
	          Symbol.toStringTag &&
	          value[Symbol.toStringTag]) ||
	        value.constructor.name ||
	        "Object"
	      );
	    }
	    function willCoercionThrow(value) {
	      try {
	        return false;
	      } catch (e) {
	        return true;
	      }
	    }
	    function testStringCoercion(value) {
	      return "" + value;
	    }
	    function checkAttributeStringCoercion(value, attributeName) {
	      if (willCoercionThrow())
	        return (
	          console.error(
	            "The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.",
	            attributeName,
	            typeName(value)
	          ),
	          testStringCoercion(value)
	        );
	    }
	    function checkCSSPropertyStringCoercion(value, propName) {
	      if (willCoercionThrow())
	        return (
	          console.error(
	            "The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.",
	            propName,
	            typeName(value)
	          ),
	          testStringCoercion(value)
	        );
	    }
	    function checkFormFieldValueStringCoercion(value) {
	      if (willCoercionThrow())
	        return (
	          console.error(
	            "Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.",
	            typeName(value)
	          ),
	          testStringCoercion(value)
	        );
	    }
	    function injectInternals(internals) {
	      if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
	      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
	      if (hook.isDisabled) return true;
	      if (!hook.supportsFiber)
	        return (
	          console.error(
	            "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"
	          ),
	          true
	        );
	      try {
	        (rendererID = hook.inject(internals)), (injectedHook = hook);
	      } catch (err) {
	        console.error("React instrumentation encountered an error: %s.", err);
	      }
	      return hook.checkDCE ? true : false;
	    }
	    function setIsStrictModeForDevtools(newIsStrictMode) {
	      "function" === typeof log$1 &&
	        unstable_setDisableYieldValue(newIsStrictMode);
	      if (injectedHook && "function" === typeof injectedHook.setStrictMode)
	        try {
	          injectedHook.setStrictMode(rendererID, newIsStrictMode);
	        } catch (err) {
	          hasLoggedError ||
	            ((hasLoggedError = true),
	            console.error(
	              "React instrumentation encountered an error: %s",
	              err
	            ));
	        }
	    }
	    function injectProfilingHooks(profilingHooks) {
	      injectedProfilingHooks = profilingHooks;
	    }
	    function markCommitStopped() {
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markCommitStopped &&
	        injectedProfilingHooks.markCommitStopped();
	    }
	    function markComponentRenderStarted(fiber) {
	      null !== injectedProfilingHooks &&
	        "function" ===
	          typeof injectedProfilingHooks.markComponentRenderStarted &&
	        injectedProfilingHooks.markComponentRenderStarted(fiber);
	    }
	    function markComponentRenderStopped() {
	      null !== injectedProfilingHooks &&
	        "function" ===
	          typeof injectedProfilingHooks.markComponentRenderStopped &&
	        injectedProfilingHooks.markComponentRenderStopped();
	    }
	    function markRenderStarted(lanes) {
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markRenderStarted &&
	        injectedProfilingHooks.markRenderStarted(lanes);
	    }
	    function markRenderStopped() {
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markRenderStopped &&
	        injectedProfilingHooks.markRenderStopped();
	    }
	    function markStateUpdateScheduled(fiber, lane) {
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markStateUpdateScheduled &&
	        injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
	    }
	    function clz32Fallback(x) {
	      x >>>= 0;
	      return 0 === x ? 32 : (31 - ((log(x) / LN2) | 0)) | 0;
	    }
	    function getLabelForLane(lane) {
	      if (lane & 1) return "SyncHydrationLane";
	      if (lane & 2) return "Sync";
	      if (lane & 4) return "InputContinuousHydration";
	      if (lane & 8) return "InputContinuous";
	      if (lane & 16) return "DefaultHydration";
	      if (lane & 32) return "Default";
	      if (lane & 128) return "TransitionHydration";
	      if (lane & 4194048) return "Transition";
	      if (lane & 62914560) return "Retry";
	      if (lane & 67108864) return "SelectiveHydration";
	      if (lane & 134217728) return "IdleHydration";
	      if (lane & 268435456) return "Idle";
	      if (lane & 536870912) return "Offscreen";
	      if (lane & 1073741824) return "Deferred";
	    }
	    function getHighestPriorityLanes(lanes) {
	      var pendingSyncLanes = lanes & 42;
	      if (0 !== pendingSyncLanes) return pendingSyncLanes;
	      switch (lanes & -lanes) {
	        case 1:
	          return 1;
	        case 2:
	          return 2;
	        case 4:
	          return 4;
	        case 8:
	          return 8;
	        case 16:
	          return 16;
	        case 32:
	          return 32;
	        case 64:
	          return 64;
	        case 128:
	          return 128;
	        case 256:
	        case 512:
	        case 1024:
	        case 2048:
	        case 4096:
	        case 8192:
	        case 16384:
	        case 32768:
	        case 65536:
	        case 131072:
	        case 262144:
	        case 524288:
	        case 1048576:
	        case 2097152:
	          return lanes & 4194048;
	        case 4194304:
	        case 8388608:
	        case 16777216:
	        case 33554432:
	          return lanes & 62914560;
	        case 67108864:
	          return 67108864;
	        case 134217728:
	          return 134217728;
	        case 268435456:
	          return 268435456;
	        case 536870912:
	          return 536870912;
	        case 1073741824:
	          return 0;
	        default:
	          return (
	            console.error(
	              "Should have found matching lanes. This is a bug in React."
	            ),
	            lanes
	          );
	      }
	    }
	    function getNextLanes(root, wipLanes, rootHasPendingCommit) {
	      var pendingLanes = root.pendingLanes;
	      if (0 === pendingLanes) return 0;
	      var nextLanes = 0,
	        suspendedLanes = root.suspendedLanes,
	        pingedLanes = root.pingedLanes;
	      root = root.warmLanes;
	      var nonIdlePendingLanes = pendingLanes & 134217727;
	      0 !== nonIdlePendingLanes
	        ? ((pendingLanes = nonIdlePendingLanes & ~suspendedLanes),
	          0 !== pendingLanes
	            ? (nextLanes = getHighestPriorityLanes(pendingLanes))
	            : ((pingedLanes &= nonIdlePendingLanes),
	              0 !== pingedLanes
	                ? (nextLanes = getHighestPriorityLanes(pingedLanes))
	                : rootHasPendingCommit ||
	                  ((rootHasPendingCommit = nonIdlePendingLanes & ~root),
	                  0 !== rootHasPendingCommit &&
	                    (nextLanes =
	                      getHighestPriorityLanes(rootHasPendingCommit)))))
	        : ((nonIdlePendingLanes = pendingLanes & ~suspendedLanes),
	          0 !== nonIdlePendingLanes
	            ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))
	            : 0 !== pingedLanes
	              ? (nextLanes = getHighestPriorityLanes(pingedLanes))
	              : rootHasPendingCommit ||
	                ((rootHasPendingCommit = pendingLanes & ~root),
	                0 !== rootHasPendingCommit &&
	                  (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
	      return 0 === nextLanes
	        ? 0
	        : 0 !== wipLanes &&
	            wipLanes !== nextLanes &&
	            0 === (wipLanes & suspendedLanes) &&
	            ((suspendedLanes = nextLanes & -nextLanes),
	            (rootHasPendingCommit = wipLanes & -wipLanes),
	            suspendedLanes >= rootHasPendingCommit ||
	              (32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)))
	          ? wipLanes
	          : nextLanes;
	    }
	    function checkIfRootIsPrerendering(root, renderLanes) {
	      return (
	        0 ===
	        (root.pendingLanes &
	          ~(root.suspendedLanes & ~root.pingedLanes) &
	          renderLanes)
	      );
	    }
	    function computeExpirationTime(lane, currentTime) {
	      switch (lane) {
	        case 1:
	        case 2:
	        case 4:
	        case 8:
	        case 64:
	          return currentTime + 250;
	        case 16:
	        case 32:
	        case 128:
	        case 256:
	        case 512:
	        case 1024:
	        case 2048:
	        case 4096:
	        case 8192:
	        case 16384:
	        case 32768:
	        case 65536:
	        case 131072:
	        case 262144:
	        case 524288:
	        case 1048576:
	        case 2097152:
	          return currentTime + 5e3;
	        case 4194304:
	        case 8388608:
	        case 16777216:
	        case 33554432:
	          return -1;
	        case 67108864:
	        case 134217728:
	        case 268435456:
	        case 536870912:
	        case 1073741824:
	          return -1;
	        default:
	          return (
	            console.error(
	              "Should have found matching lanes. This is a bug in React."
	            ),
	            -1
	          );
	      }
	    }
	    function claimNextTransitionLane() {
	      var lane = nextTransitionLane;
	      nextTransitionLane <<= 1;
	      0 === (nextTransitionLane & 4194048) && (nextTransitionLane = 256);
	      return lane;
	    }
	    function claimNextRetryLane() {
	      var lane = nextRetryLane;
	      nextRetryLane <<= 1;
	      0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
	      return lane;
	    }
	    function createLaneMap(initial) {
	      for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
	      return laneMap;
	    }
	    function markRootUpdated$1(root, updateLane) {
	      root.pendingLanes |= updateLane;
	      268435456 !== updateLane &&
	        ((root.suspendedLanes = 0),
	        (root.pingedLanes = 0),
	        (root.warmLanes = 0));
	    }
	    function markRootFinished(
	      root,
	      finishedLanes,
	      remainingLanes,
	      spawnedLane,
	      updatedLanes,
	      suspendedRetryLanes
	    ) {
	      var previouslyPendingLanes = root.pendingLanes;
	      root.pendingLanes = remainingLanes;
	      root.suspendedLanes = 0;
	      root.pingedLanes = 0;
	      root.warmLanes = 0;
	      root.expiredLanes &= remainingLanes;
	      root.entangledLanes &= remainingLanes;
	      root.errorRecoveryDisabledLanes &= remainingLanes;
	      root.shellSuspendCounter = 0;
	      var entanglements = root.entanglements,
	        expirationTimes = root.expirationTimes,
	        hiddenUpdates = root.hiddenUpdates;
	      for (
	        remainingLanes = previouslyPendingLanes & ~remainingLanes;
	        0 < remainingLanes;

	      ) {
	        var index = 31 - clz32(remainingLanes),
	          lane = 1 << index;
	        entanglements[index] = 0;
	        expirationTimes[index] = -1;
	        var hiddenUpdatesForLane = hiddenUpdates[index];
	        if (null !== hiddenUpdatesForLane)
	          for (
	            hiddenUpdates[index] = null, index = 0;
	            index < hiddenUpdatesForLane.length;
	            index++
	          ) {
	            var update = hiddenUpdatesForLane[index];
	            null !== update && (update.lane &= -536870913);
	          }
	        remainingLanes &= ~lane;
	      }
	      0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
	      0 !== suspendedRetryLanes &&
	        0 === updatedLanes &&
	        0 !== root.tag &&
	        (root.suspendedLanes |=
	          suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
	    }
	    function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
	      root.pendingLanes |= spawnedLane;
	      root.suspendedLanes &= ~spawnedLane;
	      var spawnedLaneIndex = 31 - clz32(spawnedLane);
	      root.entangledLanes |= spawnedLane;
	      root.entanglements[spawnedLaneIndex] =
	        root.entanglements[spawnedLaneIndex] |
	        1073741824 |
	        (entangledLanes & 4194090);
	    }
	    function markRootEntangled(root, entangledLanes) {
	      var rootEntangledLanes = (root.entangledLanes |= entangledLanes);
	      for (root = root.entanglements; rootEntangledLanes; ) {
	        var index = 31 - clz32(rootEntangledLanes),
	          lane = 1 << index;
	        (lane & entangledLanes) | (root[index] & entangledLanes) &&
	          (root[index] |= entangledLanes);
	        rootEntangledLanes &= ~lane;
	      }
	    }
	    function getBumpedLaneForHydrationByLane(lane) {
	      switch (lane) {
	        case 2:
	          lane = 1;
	          break;
	        case 8:
	          lane = 4;
	          break;
	        case 32:
	          lane = 16;
	          break;
	        case 256:
	        case 512:
	        case 1024:
	        case 2048:
	        case 4096:
	        case 8192:
	        case 16384:
	        case 32768:
	        case 65536:
	        case 131072:
	        case 262144:
	        case 524288:
	        case 1048576:
	        case 2097152:
	        case 4194304:
	        case 8388608:
	        case 16777216:
	        case 33554432:
	          lane = 128;
	          break;
	        case 268435456:
	          lane = 134217728;
	          break;
	        default:
	          lane = 0;
	      }
	      return lane;
	    }
	    function addFiberToLanesMap(root, fiber, lanes) {
	      if (isDevToolsPresent)
	        for (root = root.pendingUpdatersLaneMap; 0 < lanes; ) {
	          var index = 31 - clz32(lanes),
	            lane = 1 << index;
	          root[index].add(fiber);
	          lanes &= ~lane;
	        }
	    }
	    function movePendingFibersToMemoized(root, lanes) {
	      if (isDevToolsPresent)
	        for (
	          var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap,
	            memoizedUpdaters = root.memoizedUpdaters;
	          0 < lanes;

	        ) {
	          var index = 31 - clz32(lanes);
	          root = 1 << index;
	          index = pendingUpdatersLaneMap[index];
	          0 < index.size &&
	            (index.forEach(function (fiber) {
	              var alternate = fiber.alternate;
	              (null !== alternate && memoizedUpdaters.has(alternate)) ||
	                memoizedUpdaters.add(fiber);
	            }),
	            index.clear());
	          lanes &= ~root;
	        }
	    }
	    function lanesToEventPriority(lanes) {
	      lanes &= -lanes;
	      return DiscreteEventPriority < lanes
	        ? ContinuousEventPriority < lanes
	          ? 0 !== (lanes & 134217727)
	            ? DefaultEventPriority
	            : IdleEventPriority
	          : ContinuousEventPriority
	        : DiscreteEventPriority;
	    }
	    function resolveUpdatePriority() {
	      var updatePriority = ReactDOMSharedInternals.p;
	      if (0 !== updatePriority) return updatePriority;
	      updatePriority = window.event;
	      return void 0 === updatePriority
	        ? DefaultEventPriority
	        : getEventPriority(updatePriority.type);
	    }
	    function runWithPriority(priority, fn) {
	      var previousPriority = ReactDOMSharedInternals.p;
	      try {
	        return (ReactDOMSharedInternals.p = priority), fn();
	      } finally {
	        ReactDOMSharedInternals.p = previousPriority;
	      }
	    }
	    function detachDeletedInstance(node) {
	      delete node[internalInstanceKey];
	      delete node[internalPropsKey];
	      delete node[internalEventHandlersKey];
	      delete node[internalEventHandlerListenersKey];
	      delete node[internalEventHandlesSetKey];
	    }
	    function getClosestInstanceFromNode(targetNode) {
	      var targetInst = targetNode[internalInstanceKey];
	      if (targetInst) return targetInst;
	      for (var parentNode = targetNode.parentNode; parentNode; ) {
	        if (
	          (targetInst =
	            parentNode[internalContainerInstanceKey] ||
	            parentNode[internalInstanceKey])
	        ) {
	          parentNode = targetInst.alternate;
	          if (
	            null !== targetInst.child ||
	            (null !== parentNode && null !== parentNode.child)
	          )
	            for (
	              targetNode = getParentSuspenseInstance(targetNode);
	              null !== targetNode;

	            ) {
	              if ((parentNode = targetNode[internalInstanceKey]))
	                return parentNode;
	              targetNode = getParentSuspenseInstance(targetNode);
	            }
	          return targetInst;
	        }
	        targetNode = parentNode;
	        parentNode = targetNode.parentNode;
	      }
	      return null;
	    }
	    function getInstanceFromNode(node) {
	      if (
	        (node = node[internalInstanceKey] || node[internalContainerInstanceKey])
	      ) {
	        var tag = node.tag;
	        if (
	          5 === tag ||
	          6 === tag ||
	          13 === tag ||
	          26 === tag ||
	          27 === tag ||
	          3 === tag
	        )
	          return node;
	      }
	      return null;
	    }
	    function getNodeFromInstance(inst) {
	      var tag = inst.tag;
	      if (5 === tag || 26 === tag || 27 === tag || 6 === tag)
	        return inst.stateNode;
	      throw Error("getNodeFromInstance: Invalid argument.");
	    }
	    function getResourcesFromRoot(root) {
	      var resources = root[internalRootNodeResourcesKey];
	      resources ||
	        (resources = root[internalRootNodeResourcesKey] =
	          { hoistableStyles: new Map(), hoistableScripts: new Map() });
	      return resources;
	    }
	    function markNodeAsHoistable(node) {
	      node[internalHoistableMarker] = true;
	    }
	    function registerTwoPhaseEvent(registrationName, dependencies) {
	      registerDirectEvent(registrationName, dependencies);
	      registerDirectEvent(registrationName + "Capture", dependencies);
	    }
	    function registerDirectEvent(registrationName, dependencies) {
	      registrationNameDependencies[registrationName] &&
	        console.error(
	          "EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",
	          registrationName
	        );
	      registrationNameDependencies[registrationName] = dependencies;
	      var lowerCasedName = registrationName.toLowerCase();
	      possibleRegistrationNames[lowerCasedName] = registrationName;
	      "onDoubleClick" === registrationName &&
	        (possibleRegistrationNames.ondblclick = registrationName);
	      for (
	        registrationName = 0;
	        registrationName < dependencies.length;
	        registrationName++
	      )
	        allNativeEvents.add(dependencies[registrationName]);
	    }
	    function checkControlledValueProps(tagName, props) {
	      hasReadOnlyValue[props.type] ||
	        props.onChange ||
	        props.onInput ||
	        props.readOnly ||
	        props.disabled ||
	        null == props.value ||
	        ("select" === tagName
	          ? console.error(
	              "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`."
	            )
	          : console.error(
	              "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
	            ));
	      props.onChange ||
	        props.readOnly ||
	        props.disabled ||
	        null == props.checked ||
	        console.error(
	          "You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
	        );
	    }
	    function isAttributeNameSafe(attributeName) {
	      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
	        return true;
	      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
	        return false;
	      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
	        return (validatedAttributeNameCache[attributeName] = true);
	      illegalAttributeNameCache[attributeName] = true;
	      console.error("Invalid attribute name: `%s`", attributeName);
	      return false;
	    }
	    function getValueForAttributeOnCustomComponent(node, name, expected) {
	      if (isAttributeNameSafe(name)) {
	        if (!node.hasAttribute(name)) {
	          switch (typeof expected) {
	            case "symbol":
	            case "object":
	              return expected;
	            case "function":
	              return expected;
	            case "boolean":
	              if (false === expected) return expected;
	          }
	          return void 0 === expected ? void 0 : null;
	        }
	        node = node.getAttribute(name);
	        if ("" === node && true === expected) return true;
	        checkAttributeStringCoercion(expected, name);
	        return node === "" + expected ? expected : node;
	      }
	    }
	    function setValueForAttribute(node, name, value) {
	      if (isAttributeNameSafe(name))
	        if (null === value) node.removeAttribute(name);
	        else {
	          switch (typeof value) {
	            case "undefined":
	            case "function":
	            case "symbol":
	              node.removeAttribute(name);
	              return;
	            case "boolean":
	              var prefix = name.toLowerCase().slice(0, 5);
	              if ("data-" !== prefix && "aria-" !== prefix) {
	                node.removeAttribute(name);
	                return;
	              }
	          }
	          checkAttributeStringCoercion(value, name);
	          node.setAttribute(name, "" + value);
	        }
	    }
	    function setValueForKnownAttribute(node, name, value) {
	      if (null === value) node.removeAttribute(name);
	      else {
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	          case "boolean":
	            node.removeAttribute(name);
	            return;
	        }
	        checkAttributeStringCoercion(value, name);
	        node.setAttribute(name, "" + value);
	      }
	    }
	    function setValueForNamespacedAttribute(node, namespace, name, value) {
	      if (null === value) node.removeAttribute(name);
	      else {
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	          case "boolean":
	            node.removeAttribute(name);
	            return;
	        }
	        checkAttributeStringCoercion(value, name);
	        node.setAttributeNS(namespace, name, "" + value);
	      }
	    }
	    function disabledLog() {}
	    function disableLogs() {
	      if (0 === disabledDepth) {
	        prevLog = console.log;
	        prevInfo = console.info;
	        prevWarn = console.warn;
	        prevError = console.error;
	        prevGroup = console.group;
	        prevGroupCollapsed = console.groupCollapsed;
	        prevGroupEnd = console.groupEnd;
	        var props = {
	          configurable: true,
	          enumerable: true,
	          value: disabledLog,
	          writable: true
	        };
	        Object.defineProperties(console, {
	          info: props,
	          log: props,
	          warn: props,
	          error: props,
	          group: props,
	          groupCollapsed: props,
	          groupEnd: props
	        });
	      }
	      disabledDepth++;
	    }
	    function reenableLogs() {
	      disabledDepth--;
	      if (0 === disabledDepth) {
	        var props = { configurable: true, enumerable: true, writable: true };
	        Object.defineProperties(console, {
	          log: assign({}, props, { value: prevLog }),
	          info: assign({}, props, { value: prevInfo }),
	          warn: assign({}, props, { value: prevWarn }),
	          error: assign({}, props, { value: prevError }),
	          group: assign({}, props, { value: prevGroup }),
	          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),
	          groupEnd: assign({}, props, { value: prevGroupEnd })
	        });
	      }
	      0 > disabledDepth &&
	        console.error(
	          "disabledDepth fell below zero. This is a bug in React. Please file an issue."
	        );
	    }
	    function describeBuiltInComponentFrame(name) {
	      if (void 0 === prefix)
	        try {
	          throw Error();
	        } catch (x) {
	          var match = x.stack.trim().match(/\n( *(at )?)/);
	          prefix = (match && match[1]) || "";
	          suffix =
	            -1 < x.stack.indexOf("\n    at")
	              ? " (<anonymous>)"
	              : -1 < x.stack.indexOf("@")
	                ? "@unknown:0:0"
	                : "";
	        }
	      return "\n" + prefix + name + suffix;
	    }
	    function describeNativeComponentFrame(fn, construct) {
	      if (!fn || reentry) return "";
	      var frame = componentFrameCache.get(fn);
	      if (void 0 !== frame) return frame;
	      reentry = true;
	      frame = Error.prepareStackTrace;
	      Error.prepareStackTrace = void 0;
	      var previousDispatcher = null;
	      previousDispatcher = ReactSharedInternals.H;
	      ReactSharedInternals.H = null;
	      disableLogs();
	      try {
	        var RunInRootFrame = {
	          DetermineComponentFrameRoot: function () {
	            try {
	              if (construct) {
	                var Fake = function () {
	                  throw Error();
	                };
	                Object.defineProperty(Fake.prototype, "props", {
	                  set: function () {
	                    throw Error();
	                  }
	                });
	                if ("object" === typeof Reflect && Reflect.construct) {
	                  try {
	                    Reflect.construct(Fake, []);
	                  } catch (x) {
	                    var control = x;
	                  }
	                  Reflect.construct(fn, [], Fake);
	                } else {
	                  try {
	                    Fake.call();
	                  } catch (x$0) {
	                    control = x$0;
	                  }
	                  fn.call(Fake.prototype);
	                }
	              } else {
	                try {
	                  throw Error();
	                } catch (x$1) {
	                  control = x$1;
	                }
	                (Fake = fn()) &&
	                  "function" === typeof Fake.catch &&
	                  Fake.catch(function () {});
	              }
	            } catch (sample) {
	              if (sample && control && "string" === typeof sample.stack)
	                return [sample.stack, control.stack];
	            }
	            return [null, null];
	          }
	        };
	        RunInRootFrame.DetermineComponentFrameRoot.displayName =
	          "DetermineComponentFrameRoot";
	        var namePropDescriptor = Object.getOwnPropertyDescriptor(
	          RunInRootFrame.DetermineComponentFrameRoot,
	          "name"
	        );
	        namePropDescriptor &&
	          namePropDescriptor.configurable &&
	          Object.defineProperty(
	            RunInRootFrame.DetermineComponentFrameRoot,
	            "name",
	            { value: "DetermineComponentFrameRoot" }
	          );
	        var _RunInRootFrame$Deter =
	            RunInRootFrame.DetermineComponentFrameRoot(),
	          sampleStack = _RunInRootFrame$Deter[0],
	          controlStack = _RunInRootFrame$Deter[1];
	        if (sampleStack && controlStack) {
	          var sampleLines = sampleStack.split("\n"),
	            controlLines = controlStack.split("\n");
	          for (
	            _RunInRootFrame$Deter = namePropDescriptor = 0;
	            namePropDescriptor < sampleLines.length &&
	            !sampleLines[namePropDescriptor].includes(
	              "DetermineComponentFrameRoot"
	            );

	          )
	            namePropDescriptor++;
	          for (
	            ;
	            _RunInRootFrame$Deter < controlLines.length &&
	            !controlLines[_RunInRootFrame$Deter].includes(
	              "DetermineComponentFrameRoot"
	            );

	          )
	            _RunInRootFrame$Deter++;
	          if (
	            namePropDescriptor === sampleLines.length ||
	            _RunInRootFrame$Deter === controlLines.length
	          )
	            for (
	              namePropDescriptor = sampleLines.length - 1,
	                _RunInRootFrame$Deter = controlLines.length - 1;
	              1 <= namePropDescriptor &&
	              0 <= _RunInRootFrame$Deter &&
	              sampleLines[namePropDescriptor] !==
	                controlLines[_RunInRootFrame$Deter];

	            )
	              _RunInRootFrame$Deter--;
	          for (
	            ;
	            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;
	            namePropDescriptor--, _RunInRootFrame$Deter--
	          )
	            if (
	              sampleLines[namePropDescriptor] !==
	              controlLines[_RunInRootFrame$Deter]
	            ) {
	              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
	                do
	                  if (
	                    (namePropDescriptor--,
	                    _RunInRootFrame$Deter--,
	                    0 > _RunInRootFrame$Deter ||
	                      sampleLines[namePropDescriptor] !==
	                        controlLines[_RunInRootFrame$Deter])
	                  ) {
	                    var _frame =
	                      "\n" +
	                      sampleLines[namePropDescriptor].replace(
	                        " at new ",
	                        " at "
	                      );
	                    fn.displayName &&
	                      _frame.includes("<anonymous>") &&
	                      (_frame = _frame.replace("<anonymous>", fn.displayName));
	                    "function" === typeof fn &&
	                      componentFrameCache.set(fn, _frame);
	                    return _frame;
	                  }
	                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
	              }
	              break;
	            }
	        }
	      } finally {
	        (reentry = false),
	          (ReactSharedInternals.H = previousDispatcher),
	          reenableLogs(),
	          (Error.prepareStackTrace = frame);
	      }
	      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "")
	        ? describeBuiltInComponentFrame(sampleLines)
	        : "";
	      "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
	      return sampleLines;
	    }
	    function formatOwnerStack(error) {
	      var prevPrepareStackTrace = Error.prepareStackTrace;
	      Error.prepareStackTrace = void 0;
	      error = error.stack;
	      Error.prepareStackTrace = prevPrepareStackTrace;
	      error.startsWith("Error: react-stack-top-frame\n") &&
	        (error = error.slice(29));
	      prevPrepareStackTrace = error.indexOf("\n");
	      -1 !== prevPrepareStackTrace &&
	        (error = error.slice(prevPrepareStackTrace + 1));
	      prevPrepareStackTrace = error.indexOf("react_stack_bottom_frame");
	      -1 !== prevPrepareStackTrace &&
	        (prevPrepareStackTrace = error.lastIndexOf(
	          "\n",
	          prevPrepareStackTrace
	        ));
	      if (-1 !== prevPrepareStackTrace)
	        error = error.slice(0, prevPrepareStackTrace);
	      else return "";
	      return error;
	    }
	    function describeFiber(fiber) {
	      switch (fiber.tag) {
	        case 26:
	        case 27:
	        case 5:
	          return describeBuiltInComponentFrame(fiber.type);
	        case 16:
	          return describeBuiltInComponentFrame("Lazy");
	        case 13:
	          return describeBuiltInComponentFrame("Suspense");
	        case 19:
	          return describeBuiltInComponentFrame("SuspenseList");
	        case 0:
	        case 15:
	          return describeNativeComponentFrame(fiber.type, false);
	        case 11:
	          return describeNativeComponentFrame(fiber.type.render, false);
	        case 1:
	          return describeNativeComponentFrame(fiber.type, true);
	        case 31:
	          return describeBuiltInComponentFrame("Activity");
	        default:
	          return "";
	      }
	    }
	    function getStackByFiberInDevAndProd(workInProgress) {
	      try {
	        var info = "";
	        do {
	          info += describeFiber(workInProgress);
	          var debugInfo = workInProgress._debugInfo;
	          if (debugInfo)
	            for (var i = debugInfo.length - 1; 0 <= i; i--) {
	              var entry = debugInfo[i];
	              if ("string" === typeof entry.name) {
	                var JSCompiler_temp_const = info,
	                  env = entry.env;
	                var JSCompiler_inline_result = describeBuiltInComponentFrame(
	                  entry.name + (env ? " [" + env + "]" : "")
	                );
	                info = JSCompiler_temp_const + JSCompiler_inline_result;
	              }
	            }
	          workInProgress = workInProgress.return;
	        } while (workInProgress);
	        return info;
	      } catch (x) {
	        return "\nError generating stack: " + x.message + "\n" + x.stack;
	      }
	    }
	    function describeFunctionComponentFrameWithoutLineNumber(fn) {
	      return (fn = fn ? fn.displayName || fn.name : "")
	        ? describeBuiltInComponentFrame(fn)
	        : "";
	    }
	    function getCurrentFiberOwnerNameInDevOrNull() {
	      if (null === current) return null;
	      var owner = current._debugOwner;
	      return null != owner ? getComponentNameFromOwner(owner) : null;
	    }
	    function getCurrentFiberStackInDev() {
	      if (null === current) return "";
	      var workInProgress = current;
	      try {
	        var info = "";
	        6 === workInProgress.tag && (workInProgress = workInProgress.return);
	        switch (workInProgress.tag) {
	          case 26:
	          case 27:
	          case 5:
	            info += describeBuiltInComponentFrame(workInProgress.type);
	            break;
	          case 13:
	            info += describeBuiltInComponentFrame("Suspense");
	            break;
	          case 19:
	            info += describeBuiltInComponentFrame("SuspenseList");
	            break;
	          case 31:
	            info += describeBuiltInComponentFrame("Activity");
	            break;
	          case 30:
	          case 0:
	          case 15:
	          case 1:
	            workInProgress._debugOwner ||
	              "" !== info ||
	              (info += describeFunctionComponentFrameWithoutLineNumber(
	                workInProgress.type
	              ));
	            break;
	          case 11:
	            workInProgress._debugOwner ||
	              "" !== info ||
	              (info += describeFunctionComponentFrameWithoutLineNumber(
	                workInProgress.type.render
	              ));
	        }
	        for (; workInProgress; )
	          if ("number" === typeof workInProgress.tag) {
	            var fiber = workInProgress;
	            workInProgress = fiber._debugOwner;
	            var debugStack = fiber._debugStack;
	            workInProgress &&
	              debugStack &&
	              ("string" !== typeof debugStack &&
	                (fiber._debugStack = debugStack = formatOwnerStack(debugStack)),
	              "" !== debugStack && (info += "\n" + debugStack));
	          } else if (null != workInProgress.debugStack) {
	            var ownerStack = workInProgress.debugStack;
	            (workInProgress = workInProgress.owner) &&
	              ownerStack &&
	              (info += "\n" + formatOwnerStack(ownerStack));
	          } else break;
	        var JSCompiler_inline_result = info;
	      } catch (x) {
	        JSCompiler_inline_result =
	          "\nError generating stack: " + x.message + "\n" + x.stack;
	      }
	      return JSCompiler_inline_result;
	    }
	    function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {
	      var previousFiber = current;
	      setCurrentFiber(fiber);
	      try {
	        return null !== fiber && fiber._debugTask
	          ? fiber._debugTask.run(
	              callback.bind(null, arg0, arg1, arg2, arg3, arg4)
	            )
	          : callback(arg0, arg1, arg2, arg3, arg4);
	      } finally {
	        setCurrentFiber(previousFiber);
	      }
	      throw Error(
	        "runWithFiberInDEV should never be called in production. This is a bug in React."
	      );
	    }
	    function setCurrentFiber(fiber) {
	      ReactSharedInternals.getCurrentStack =
	        null === fiber ? null : getCurrentFiberStackInDev;
	      isRendering = false;
	      current = fiber;
	    }
	    function getToStringValue(value) {
	      switch (typeof value) {
	        case "bigint":
	        case "boolean":
	        case "number":
	        case "string":
	        case "undefined":
	          return value;
	        case "object":
	          return checkFormFieldValueStringCoercion(value), value;
	        default:
	          return "";
	      }
	    }
	    function isCheckable(elem) {
	      var type = elem.type;
	      return (
	        (elem = elem.nodeName) &&
	        "input" === elem.toLowerCase() &&
	        ("checkbox" === type || "radio" === type)
	      );
	    }
	    function trackValueOnNode(node) {
	      var valueField = isCheckable(node) ? "checked" : "value",
	        descriptor = Object.getOwnPropertyDescriptor(
	          node.constructor.prototype,
	          valueField
	        );
	      checkFormFieldValueStringCoercion(node[valueField]);
	      var currentValue = "" + node[valueField];
	      if (
	        !node.hasOwnProperty(valueField) &&
	        "undefined" !== typeof descriptor &&
	        "function" === typeof descriptor.get &&
	        "function" === typeof descriptor.set
	      ) {
	        var get = descriptor.get,
	          set = descriptor.set;
	        Object.defineProperty(node, valueField, {
	          configurable: true,
	          get: function () {
	            return get.call(this);
	          },
	          set: function (value) {
	            checkFormFieldValueStringCoercion(value);
	            currentValue = "" + value;
	            set.call(this, value);
	          }
	        });
	        Object.defineProperty(node, valueField, {
	          enumerable: descriptor.enumerable
	        });
	        return {
	          getValue: function () {
	            return currentValue;
	          },
	          setValue: function (value) {
	            checkFormFieldValueStringCoercion(value);
	            currentValue = "" + value;
	          },
	          stopTracking: function () {
	            node._valueTracker = null;
	            delete node[valueField];
	          }
	        };
	      }
	    }
	    function track(node) {
	      node._valueTracker || (node._valueTracker = trackValueOnNode(node));
	    }
	    function updateValueIfChanged(node) {
	      if (!node) return false;
	      var tracker = node._valueTracker;
	      if (!tracker) return true;
	      var lastValue = tracker.getValue();
	      var value = "";
	      node &&
	        (value = isCheckable(node)
	          ? node.checked
	            ? "true"
	            : "false"
	          : node.value);
	      node = value;
	      return node !== lastValue ? (tracker.setValue(node), true) : false;
	    }
	    function getActiveElement(doc) {
	      doc = doc || ("undefined" !== typeof document ? document : void 0);
	      if ("undefined" === typeof doc) return null;
	      try {
	        return doc.activeElement || doc.body;
	      } catch (e) {
	        return doc.body;
	      }
	    }
	    function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
	      return value.replace(
	        escapeSelectorAttributeValueInsideDoubleQuotesRegex,
	        function (ch) {
	          return "\\" + ch.charCodeAt(0).toString(16) + " ";
	        }
	      );
	    }
	    function validateInputProps(element, props) {
	      void 0 === props.checked ||
	        void 0 === props.defaultChecked ||
	        didWarnCheckedDefaultChecked ||
	        (console.error(
	          "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
	          getCurrentFiberOwnerNameInDevOrNull() || "A component",
	          props.type
	        ),
	        (didWarnCheckedDefaultChecked = true));
	      void 0 === props.value ||
	        void 0 === props.defaultValue ||
	        didWarnValueDefaultValue$1 ||
	        (console.error(
	          "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components",
	          getCurrentFiberOwnerNameInDevOrNull() || "A component",
	          props.type
	        ),
	        (didWarnValueDefaultValue$1 = true));
	    }
	    function updateInput(
	      element,
	      value,
	      defaultValue,
	      lastDefaultValue,
	      checked,
	      defaultChecked,
	      type,
	      name
	    ) {
	      element.name = "";
	      null != type &&
	      "function" !== typeof type &&
	      "symbol" !== typeof type &&
	      "boolean" !== typeof type
	        ? (checkAttributeStringCoercion(type, "type"), (element.type = type))
	        : element.removeAttribute("type");
	      if (null != value)
	        if ("number" === type) {
	          if ((0 === value && "" === element.value) || element.value != value)
	            element.value = "" + getToStringValue(value);
	        } else
	          element.value !== "" + getToStringValue(value) &&
	            (element.value = "" + getToStringValue(value));
	      else
	        ("submit" !== type && "reset" !== type) ||
	          element.removeAttribute("value");
	      null != value
	        ? setDefaultValue(element, type, getToStringValue(value))
	        : null != defaultValue
	          ? setDefaultValue(element, type, getToStringValue(defaultValue))
	          : null != lastDefaultValue && element.removeAttribute("value");
	      null == checked &&
	        null != defaultChecked &&
	        (element.defaultChecked = !!defaultChecked);
	      null != checked &&
	        (element.checked =
	          checked &&
	          "function" !== typeof checked &&
	          "symbol" !== typeof checked);
	      null != name &&
	      "function" !== typeof name &&
	      "symbol" !== typeof name &&
	      "boolean" !== typeof name
	        ? (checkAttributeStringCoercion(name, "name"),
	          (element.name = "" + getToStringValue(name)))
	        : element.removeAttribute("name");
	    }
	    function initInput(
	      element,
	      value,
	      defaultValue,
	      checked,
	      defaultChecked,
	      type,
	      name,
	      isHydrating
	    ) {
	      null != type &&
	        "function" !== typeof type &&
	        "symbol" !== typeof type &&
	        "boolean" !== typeof type &&
	        (checkAttributeStringCoercion(type, "type"), (element.type = type));
	      if (null != value || null != defaultValue) {
	        if (
	          !(
	            ("submit" !== type && "reset" !== type) ||
	            (void 0 !== value && null !== value)
	          )
	        )
	          return;
	        defaultValue =
	          null != defaultValue ? "" + getToStringValue(defaultValue) : "";
	        value = null != value ? "" + getToStringValue(value) : defaultValue;
	        isHydrating || value === element.value || (element.value = value);
	        element.defaultValue = value;
	      }
	      checked = null != checked ? checked : defaultChecked;
	      checked =
	        "function" !== typeof checked &&
	        "symbol" !== typeof checked &&
	        !!checked;
	      element.checked = isHydrating ? element.checked : !!checked;
	      element.defaultChecked = !!checked;
	      null != name &&
	        "function" !== typeof name &&
	        "symbol" !== typeof name &&
	        "boolean" !== typeof name &&
	        (checkAttributeStringCoercion(name, "name"), (element.name = name));
	    }
	    function setDefaultValue(node, type, value) {
	      ("number" === type && getActiveElement(node.ownerDocument) === node) ||
	        node.defaultValue === "" + value ||
	        (node.defaultValue = "" + value);
	    }
	    function validateOptionProps(element, props) {
	      null == props.value &&
	        ("object" === typeof props.children && null !== props.children
	          ? React.Children.forEach(props.children, function (child) {
	              null == child ||
	                "string" === typeof child ||
	                "number" === typeof child ||
	                "bigint" === typeof child ||
	                didWarnInvalidChild ||
	                ((didWarnInvalidChild = true),
	                console.error(
	                  "Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."
	                ));
	            })
	          : null == props.dangerouslySetInnerHTML ||
	            didWarnInvalidInnerHTML ||
	            ((didWarnInvalidInnerHTML = true),
	            console.error(
	              "Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."
	            )));
	      null == props.selected ||
	        didWarnSelectedSetOnOption ||
	        (console.error(
	          "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
	        ),
	        (didWarnSelectedSetOnOption = true));
	    }
	    function getDeclarationErrorAddendum() {
	      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
	      return ownerName
	        ? "\n\nCheck the render method of `" + ownerName + "`."
	        : "";
	    }
	    function updateOptions(node, multiple, propValue, setDefaultSelected) {
	      node = node.options;
	      if (multiple) {
	        multiple = {};
	        for (var i = 0; i < propValue.length; i++)
	          multiple["$" + propValue[i]] = true;
	        for (propValue = 0; propValue < node.length; propValue++)
	          (i = multiple.hasOwnProperty("$" + node[propValue].value)),
	            node[propValue].selected !== i && (node[propValue].selected = i),
	            i && setDefaultSelected && (node[propValue].defaultSelected = true);
	      } else {
	        propValue = "" + getToStringValue(propValue);
	        multiple = null;
	        for (i = 0; i < node.length; i++) {
	          if (node[i].value === propValue) {
	            node[i].selected = true;
	            setDefaultSelected && (node[i].defaultSelected = true);
	            return;
	          }
	          null !== multiple || node[i].disabled || (multiple = node[i]);
	        }
	        null !== multiple && (multiple.selected = true);
	      }
	    }
	    function validateSelectProps(element, props) {
	      for (element = 0; element < valuePropNames.length; element++) {
	        var propName = valuePropNames[element];
	        if (null != props[propName]) {
	          var propNameIsArray = isArrayImpl(props[propName]);
	          props.multiple && !propNameIsArray
	            ? console.error(
	                "The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",
	                propName,
	                getDeclarationErrorAddendum()
	              )
	            : !props.multiple &&
	              propNameIsArray &&
	              console.error(
	                "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",
	                propName,
	                getDeclarationErrorAddendum()
	              );
	        }
	      }
	      void 0 === props.value ||
	        void 0 === props.defaultValue ||
	        didWarnValueDefaultValue ||
	        (console.error(
	          "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"
	        ),
	        (didWarnValueDefaultValue = true));
	    }
	    function validateTextareaProps(element, props) {
	      void 0 === props.value ||
	        void 0 === props.defaultValue ||
	        didWarnValDefaultVal ||
	        (console.error(
	          "%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components",
	          getCurrentFiberOwnerNameInDevOrNull() || "A component"
	        ),
	        (didWarnValDefaultVal = true));
	      null != props.children &&
	        null == props.value &&
	        console.error(
	          "Use the `defaultValue` or `value` props instead of setting children on <textarea>."
	        );
	    }
	    function updateTextarea(element, value, defaultValue) {
	      if (
	        null != value &&
	        ((value = "" + getToStringValue(value)),
	        value !== element.value && (element.value = value),
	        null == defaultValue)
	      ) {
	        element.defaultValue !== value && (element.defaultValue = value);
	        return;
	      }
	      element.defaultValue =
	        null != defaultValue ? "" + getToStringValue(defaultValue) : "";
	    }
	    function initTextarea(element, value, defaultValue, children) {
	      if (null == value) {
	        if (null != children) {
	          if (null != defaultValue)
	            throw Error(
	              "If you supply `defaultValue` on a <textarea>, do not pass children."
	            );
	          if (isArrayImpl(children)) {
	            if (1 < children.length)
	              throw Error("<textarea> can only have at most one child.");
	            children = children[0];
	          }
	          defaultValue = children;
	        }
	        null == defaultValue && (defaultValue = "");
	        value = defaultValue;
	      }
	      defaultValue = getToStringValue(value);
	      element.defaultValue = defaultValue;
	      children = element.textContent;
	      children === defaultValue &&
	        "" !== children &&
	        null !== children &&
	        (element.value = children);
	    }
	    function findNotableNode(node, indent) {
	      return void 0 === node.serverProps &&
	        0 === node.serverTail.length &&
	        1 === node.children.length &&
	        3 < node.distanceFromLeaf &&
	        node.distanceFromLeaf > 15 - indent
	        ? findNotableNode(node.children[0], indent)
	        : node;
	    }
	    function indentation(indent) {
	      return "  " + "  ".repeat(indent);
	    }
	    function added(indent) {
	      return "+ " + "  ".repeat(indent);
	    }
	    function removed(indent) {
	      return "- " + "  ".repeat(indent);
	    }
	    function describeFiberType(fiber) {
	      switch (fiber.tag) {
	        case 26:
	        case 27:
	        case 5:
	          return fiber.type;
	        case 16:
	          return "Lazy";
	        case 13:
	          return "Suspense";
	        case 19:
	          return "SuspenseList";
	        case 0:
	        case 15:
	          return (fiber = fiber.type), fiber.displayName || fiber.name || null;
	        case 11:
	          return (
	            (fiber = fiber.type.render), fiber.displayName || fiber.name || null
	          );
	        case 1:
	          return (fiber = fiber.type), fiber.displayName || fiber.name || null;
	        default:
	          return null;
	      }
	    }
	    function describeTextNode(content, maxLength) {
	      return needsEscaping.test(content)
	        ? ((content = JSON.stringify(content)),
	          content.length > maxLength - 2
	            ? 8 > maxLength
	              ? '{"..."}'
	              : "{" + content.slice(0, maxLength - 7) + '..."}'
	            : "{" + content + "}")
	        : content.length > maxLength
	          ? 5 > maxLength
	            ? '{"..."}'
	            : content.slice(0, maxLength - 3) + "..."
	          : content;
	    }
	    function describeTextDiff(clientText, serverProps, indent) {
	      var maxLength = 120 - 2 * indent;
	      if (null === serverProps)
	        return added(indent) + describeTextNode(clientText, maxLength) + "\n";
	      if ("string" === typeof serverProps) {
	        for (
	          var firstDiff = 0;
	          firstDiff < serverProps.length &&
	          firstDiff < clientText.length &&
	          serverProps.charCodeAt(firstDiff) ===
	            clientText.charCodeAt(firstDiff);
	          firstDiff++
	        );
	        firstDiff > maxLength - 8 &&
	          10 < firstDiff &&
	          ((clientText = "..." + clientText.slice(firstDiff - 8)),
	          (serverProps = "..." + serverProps.slice(firstDiff - 8)));
	        return (
	          added(indent) +
	          describeTextNode(clientText, maxLength) +
	          "\n" +
	          removed(indent) +
	          describeTextNode(serverProps, maxLength) +
	          "\n"
	        );
	      }
	      return (
	        indentation(indent) + describeTextNode(clientText, maxLength) + "\n"
	      );
	    }
	    function objectName(object) {
	      return Object.prototype.toString
	        .call(object)
	        .replace(/^\[object (.*)\]$/, function (m, p0) {
	          return p0;
	        });
	    }
	    function describeValue(value, maxLength) {
	      switch (typeof value) {
	        case "string":
	          return (
	            (value = JSON.stringify(value)),
	            value.length > maxLength
	              ? 5 > maxLength
	                ? '"..."'
	                : value.slice(0, maxLength - 4) + '..."'
	              : value
	          );
	        case "object":
	          if (null === value) return "null";
	          if (isArrayImpl(value)) return "[...]";
	          if (value.$$typeof === REACT_ELEMENT_TYPE)
	            return (maxLength = getComponentNameFromType(value.type))
	              ? "<" + maxLength + ">"
	              : "<...>";
	          var name = objectName(value);
	          if ("Object" === name) {
	            name = "";
	            maxLength -= 2;
	            for (var propName in value)
	              if (value.hasOwnProperty(propName)) {
	                var jsonPropName = JSON.stringify(propName);
	                jsonPropName !== '"' + propName + '"' &&
	                  (propName = jsonPropName);
	                maxLength -= propName.length - 2;
	                jsonPropName = describeValue(
	                  value[propName],
	                  15 > maxLength ? maxLength : 15
	                );
	                maxLength -= jsonPropName.length;
	                if (0 > maxLength) {
	                  name += "" === name ? "..." : ", ...";
	                  break;
	                }
	                name +=
	                  ("" === name ? "" : ",") + propName + ":" + jsonPropName;
	              }
	            return "{" + name + "}";
	          }
	          return name;
	        case "function":
	          return (maxLength = value.displayName || value.name)
	            ? "function " + maxLength
	            : "function";
	        default:
	          return String(value);
	      }
	    }
	    function describePropValue(value, maxLength) {
	      return "string" !== typeof value || needsEscaping.test(value)
	        ? "{" + describeValue(value, maxLength - 2) + "}"
	        : value.length > maxLength - 2
	          ? 5 > maxLength
	            ? '"..."'
	            : '"' + value.slice(0, maxLength - 5) + '..."'
	          : '"' + value + '"';
	    }
	    function describeExpandedElement(type, props, rowPrefix) {
	      var remainingRowLength = 120 - rowPrefix.length - type.length,
	        properties = [],
	        propName;
	      for (propName in props)
	        if (props.hasOwnProperty(propName) && "children" !== propName) {
	          var propValue = describePropValue(
	            props[propName],
	            120 - rowPrefix.length - propName.length - 1
	          );
	          remainingRowLength -= propName.length + propValue.length + 2;
	          properties.push(propName + "=" + propValue);
	        }
	      return 0 === properties.length
	        ? rowPrefix + "<" + type + ">\n"
	        : 0 < remainingRowLength
	          ? rowPrefix + "<" + type + " " + properties.join(" ") + ">\n"
	          : rowPrefix +
	            "<" +
	            type +
	            "\n" +
	            rowPrefix +
	            "  " +
	            properties.join("\n" + rowPrefix + "  ") +
	            "\n" +
	            rowPrefix +
	            ">\n";
	    }
	    function describePropertiesDiff(clientObject, serverObject, indent) {
	      var properties = "",
	        remainingServerProperties = assign({}, serverObject),
	        propName;
	      for (propName in clientObject)
	        if (clientObject.hasOwnProperty(propName)) {
	          delete remainingServerProperties[propName];
	          var maxLength = 120 - 2 * indent - propName.length - 2,
	            clientPropValue = describeValue(clientObject[propName], maxLength);
	          serverObject.hasOwnProperty(propName)
	            ? ((maxLength = describeValue(serverObject[propName], maxLength)),
	              (properties +=
	                added(indent) + propName + ": " + clientPropValue + "\n"),
	              (properties +=
	                removed(indent) + propName + ": " + maxLength + "\n"))
	            : (properties +=
	                added(indent) + propName + ": " + clientPropValue + "\n");
	        }
	      for (var _propName in remainingServerProperties)
	        remainingServerProperties.hasOwnProperty(_propName) &&
	          ((clientObject = describeValue(
	            remainingServerProperties[_propName],
	            120 - 2 * indent - _propName.length - 2
	          )),
	          (properties +=
	            removed(indent) + _propName + ": " + clientObject + "\n"));
	      return properties;
	    }
	    function describeElementDiff(type, clientProps, serverProps, indent) {
	      var content = "",
	        serverPropNames = new Map();
	      for (propName$jscomp$0 in serverProps)
	        serverProps.hasOwnProperty(propName$jscomp$0) &&
	          serverPropNames.set(
	            propName$jscomp$0.toLowerCase(),
	            propName$jscomp$0
	          );
	      if (1 === serverPropNames.size && serverPropNames.has("children"))
	        content += describeExpandedElement(
	          type,
	          clientProps,
	          indentation(indent)
	        );
	      else {
	        for (var _propName2 in clientProps)
	          if (
	            clientProps.hasOwnProperty(_propName2) &&
	            "children" !== _propName2
	          ) {
	            var maxLength$jscomp$0 =
	                120 - 2 * (indent + 1) - _propName2.length - 1,
	              serverPropName = serverPropNames.get(_propName2.toLowerCase());
	            if (void 0 !== serverPropName) {
	              serverPropNames.delete(_propName2.toLowerCase());
	              var propName$jscomp$0 = clientProps[_propName2];
	              serverPropName = serverProps[serverPropName];
	              var clientPropValue = describePropValue(
	                propName$jscomp$0,
	                maxLength$jscomp$0
	              );
	              maxLength$jscomp$0 = describePropValue(
	                serverPropName,
	                maxLength$jscomp$0
	              );
	              "object" === typeof propName$jscomp$0 &&
	              null !== propName$jscomp$0 &&
	              "object" === typeof serverPropName &&
	              null !== serverPropName &&
	              "Object" === objectName(propName$jscomp$0) &&
	              "Object" === objectName(serverPropName) &&
	              (2 < Object.keys(propName$jscomp$0).length ||
	                2 < Object.keys(serverPropName).length ||
	                -1 < clientPropValue.indexOf("...") ||
	                -1 < maxLength$jscomp$0.indexOf("..."))
	                ? (content +=
	                    indentation(indent + 1) +
	                    _propName2 +
	                    "={{\n" +
	                    describePropertiesDiff(
	                      propName$jscomp$0,
	                      serverPropName,
	                      indent + 2
	                    ) +
	                    indentation(indent + 1) +
	                    "}}\n")
	                : ((content +=
	                    added(indent + 1) +
	                    _propName2 +
	                    "=" +
	                    clientPropValue +
	                    "\n"),
	                  (content +=
	                    removed(indent + 1) +
	                    _propName2 +
	                    "=" +
	                    maxLength$jscomp$0 +
	                    "\n"));
	            } else
	              content +=
	                indentation(indent + 1) +
	                _propName2 +
	                "=" +
	                describePropValue(clientProps[_propName2], maxLength$jscomp$0) +
	                "\n";
	          }
	        serverPropNames.forEach(function (propName) {
	          if ("children" !== propName) {
	            var maxLength = 120 - 2 * (indent + 1) - propName.length - 1;
	            content +=
	              removed(indent + 1) +
	              propName +
	              "=" +
	              describePropValue(serverProps[propName], maxLength) +
	              "\n";
	          }
	        });
	        content =
	          "" === content
	            ? indentation(indent) + "<" + type + ">\n"
	            : indentation(indent) +
	              "<" +
	              type +
	              "\n" +
	              content +
	              indentation(indent) +
	              ">\n";
	      }
	      type = serverProps.children;
	      clientProps = clientProps.children;
	      if (
	        "string" === typeof type ||
	        "number" === typeof type ||
	        "bigint" === typeof type
	      ) {
	        serverPropNames = "";
	        if (
	          "string" === typeof clientProps ||
	          "number" === typeof clientProps ||
	          "bigint" === typeof clientProps
	        )
	          serverPropNames = "" + clientProps;
	        content += describeTextDiff(serverPropNames, "" + type, indent + 1);
	      } else if (
	        "string" === typeof clientProps ||
	        "number" === typeof clientProps ||
	        "bigint" === typeof clientProps
	      )
	        content =
	          null == type
	            ? content + describeTextDiff("" + clientProps, null, indent + 1)
	            : content + describeTextDiff("" + clientProps, void 0, indent + 1);
	      return content;
	    }
	    function describeSiblingFiber(fiber, indent) {
	      var type = describeFiberType(fiber);
	      if (null === type) {
	        type = "";
	        for (fiber = fiber.child; fiber; )
	          (type += describeSiblingFiber(fiber, indent)),
	            (fiber = fiber.sibling);
	        return type;
	      }
	      return indentation(indent) + "<" + type + ">\n";
	    }
	    function describeNode(node, indent) {
	      var skipToNode = findNotableNode(node, indent);
	      if (
	        skipToNode !== node &&
	        (1 !== node.children.length || node.children[0] !== skipToNode)
	      )
	        return (
	          indentation(indent) + "...\n" + describeNode(skipToNode, indent + 1)
	        );
	      skipToNode = "";
	      var debugInfo = node.fiber._debugInfo;
	      if (debugInfo)
	        for (var i = 0; i < debugInfo.length; i++) {
	          var serverComponentName = debugInfo[i].name;
	          "string" === typeof serverComponentName &&
	            ((skipToNode +=
	              indentation(indent) + "<" + serverComponentName + ">\n"),
	            indent++);
	        }
	      debugInfo = "";
	      i = node.fiber.pendingProps;
	      if (6 === node.fiber.tag)
	        (debugInfo = describeTextDiff(i, node.serverProps, indent)), indent++;
	      else if (
	        ((serverComponentName = describeFiberType(node.fiber)),
	        null !== serverComponentName)
	      )
	        if (void 0 === node.serverProps) {
	          debugInfo = indent;
	          var maxLength = 120 - 2 * debugInfo - serverComponentName.length - 2,
	            content = "";
	          for (propName in i)
	            if (i.hasOwnProperty(propName) && "children" !== propName) {
	              var propValue = describePropValue(i[propName], 15);
	              maxLength -= propName.length + propValue.length + 2;
	              if (0 > maxLength) {
	                content += " ...";
	                break;
	              }
	              content += " " + propName + "=" + propValue;
	            }
	          debugInfo =
	            indentation(debugInfo) +
	            "<" +
	            serverComponentName +
	            content +
	            ">\n";
	          indent++;
	        } else
	          null === node.serverProps
	            ? ((debugInfo = describeExpandedElement(
	                serverComponentName,
	                i,
	                added(indent)
	              )),
	              indent++)
	            : "string" === typeof node.serverProps
	              ? console.error(
	                  "Should not have matched a non HostText fiber to a Text node. This is a bug in React."
	                )
	              : ((debugInfo = describeElementDiff(
	                  serverComponentName,
	                  i,
	                  node.serverProps,
	                  indent
	                )),
	                indent++);
	      var propName = "";
	      i = node.fiber.child;
	      for (
	        serverComponentName = 0;
	        i && serverComponentName < node.children.length;

	      )
	        (maxLength = node.children[serverComponentName]),
	          maxLength.fiber === i
	            ? ((propName += describeNode(maxLength, indent)),
	              serverComponentName++)
	            : (propName += describeSiblingFiber(i, indent)),
	          (i = i.sibling);
	      i &&
	        0 < node.children.length &&
	        (propName += indentation(indent) + "...\n");
	      i = node.serverTail;
	      null === node.serverProps && indent--;
	      for (node = 0; node < i.length; node++)
	        (serverComponentName = i[node]),
	          (propName =
	            "string" === typeof serverComponentName
	              ? propName +
	                (removed(indent) +
	                  describeTextNode(serverComponentName, 120 - 2 * indent) +
	                  "\n")
	              : propName +
	                describeExpandedElement(
	                  serverComponentName.type,
	                  serverComponentName.props,
	                  removed(indent)
	                ));
	      return skipToNode + debugInfo + propName;
	    }
	    function describeDiff(rootNode) {
	      try {
	        return "\n\n" + describeNode(rootNode, 0);
	      } catch (x) {
	        return "";
	      }
	    }
	    function describeAncestors(ancestor, child, props) {
	      for (var fiber = child, node = null, distanceFromLeaf = 0; fiber; )
	        fiber === ancestor && (distanceFromLeaf = 0),
	          (node = {
	            fiber: fiber,
	            children: null !== node ? [node] : [],
	            serverProps:
	              fiber === child ? props : fiber === ancestor ? null : void 0,
	            serverTail: [],
	            distanceFromLeaf: distanceFromLeaf
	          }),
	          distanceFromLeaf++,
	          (fiber = fiber.return);
	      return null !== node ? describeDiff(node).replaceAll(/^[+-]/gm, ">") : "";
	    }
	    function updatedAncestorInfoDev(oldInfo, tag) {
	      var ancestorInfo = assign({}, oldInfo || emptyAncestorInfoDev),
	        info = { tag: tag };
	      -1 !== inScopeTags.indexOf(tag) &&
	        ((ancestorInfo.aTagInScope = null),
	        (ancestorInfo.buttonTagInScope = null),
	        (ancestorInfo.nobrTagInScope = null));
	      -1 !== buttonScopeTags.indexOf(tag) &&
	        (ancestorInfo.pTagInButtonScope = null);
	      -1 !== specialTags.indexOf(tag) &&
	        "address" !== tag &&
	        "div" !== tag &&
	        "p" !== tag &&
	        ((ancestorInfo.listItemTagAutoclosing = null),
	        (ancestorInfo.dlItemTagAutoclosing = null));
	      ancestorInfo.current = info;
	      "form" === tag && (ancestorInfo.formTag = info);
	      "a" === tag && (ancestorInfo.aTagInScope = info);
	      "button" === tag && (ancestorInfo.buttonTagInScope = info);
	      "nobr" === tag && (ancestorInfo.nobrTagInScope = info);
	      "p" === tag && (ancestorInfo.pTagInButtonScope = info);
	      "li" === tag && (ancestorInfo.listItemTagAutoclosing = info);
	      if ("dd" === tag || "dt" === tag)
	        ancestorInfo.dlItemTagAutoclosing = info;
	      "#document" === tag || "html" === tag
	        ? (ancestorInfo.containerTagInScope = null)
	        : ancestorInfo.containerTagInScope ||
	          (ancestorInfo.containerTagInScope = info);
	      null !== oldInfo ||
	      ("#document" !== tag && "html" !== tag && "body" !== tag)
	        ? true === ancestorInfo.implicitRootScope &&
	          (ancestorInfo.implicitRootScope = false)
	        : (ancestorInfo.implicitRootScope = true);
	      return ancestorInfo;
	    }
	    function isTagValidWithParent(tag, parentTag, implicitRootScope) {
	      switch (parentTag) {
	        case "select":
	          return (
	            "hr" === tag ||
	            "option" === tag ||
	            "optgroup" === tag ||
	            "script" === tag ||
	            "template" === tag ||
	            "#text" === tag
	          );
	        case "optgroup":
	          return "option" === tag || "#text" === tag;
	        case "option":
	          return "#text" === tag;
	        case "tr":
	          return (
	            "th" === tag ||
	            "td" === tag ||
	            "style" === tag ||
	            "script" === tag ||
	            "template" === tag
	          );
	        case "tbody":
	        case "thead":
	        case "tfoot":
	          return (
	            "tr" === tag ||
	            "style" === tag ||
	            "script" === tag ||
	            "template" === tag
	          );
	        case "colgroup":
	          return "col" === tag || "template" === tag;
	        case "table":
	          return (
	            "caption" === tag ||
	            "colgroup" === tag ||
	            "tbody" === tag ||
	            "tfoot" === tag ||
	            "thead" === tag ||
	            "style" === tag ||
	            "script" === tag ||
	            "template" === tag
	          );
	        case "head":
	          return (
	            "base" === tag ||
	            "basefont" === tag ||
	            "bgsound" === tag ||
	            "link" === tag ||
	            "meta" === tag ||
	            "title" === tag ||
	            "noscript" === tag ||
	            "noframes" === tag ||
	            "style" === tag ||
	            "script" === tag ||
	            "template" === tag
	          );
	        case "html":
	          if (implicitRootScope) break;
	          return "head" === tag || "body" === tag || "frameset" === tag;
	        case "frameset":
	          return "frame" === tag;
	        case "#document":
	          if (!implicitRootScope) return "html" === tag;
	      }
	      switch (tag) {
	        case "h1":
	        case "h2":
	        case "h3":
	        case "h4":
	        case "h5":
	        case "h6":
	          return (
	            "h1" !== parentTag &&
	            "h2" !== parentTag &&
	            "h3" !== parentTag &&
	            "h4" !== parentTag &&
	            "h5" !== parentTag &&
	            "h6" !== parentTag
	          );
	        case "rp":
	        case "rt":
	          return -1 === impliedEndTags.indexOf(parentTag);
	        case "caption":
	        case "col":
	        case "colgroup":
	        case "frameset":
	        case "frame":
	        case "tbody":
	        case "td":
	        case "tfoot":
	        case "th":
	        case "thead":
	        case "tr":
	          return null == parentTag;
	        case "head":
	          return implicitRootScope || null === parentTag;
	        case "html":
	          return (
	            (implicitRootScope && "#document" === parentTag) ||
	            null === parentTag
	          );
	        case "body":
	          return (
	            (implicitRootScope &&
	              ("#document" === parentTag || "html" === parentTag)) ||
	            null === parentTag
	          );
	      }
	      return true;
	    }
	    function findInvalidAncestorForTag(tag, ancestorInfo) {
	      switch (tag) {
	        case "address":
	        case "article":
	        case "aside":
	        case "blockquote":
	        case "center":
	        case "details":
	        case "dialog":
	        case "dir":
	        case "div":
	        case "dl":
	        case "fieldset":
	        case "figcaption":
	        case "figure":
	        case "footer":
	        case "header":
	        case "hgroup":
	        case "main":
	        case "menu":
	        case "nav":
	        case "ol":
	        case "p":
	        case "section":
	        case "summary":
	        case "ul":
	        case "pre":
	        case "listing":
	        case "table":
	        case "hr":
	        case "xmp":
	        case "h1":
	        case "h2":
	        case "h3":
	        case "h4":
	        case "h5":
	        case "h6":
	          return ancestorInfo.pTagInButtonScope;
	        case "form":
	          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	        case "li":
	          return ancestorInfo.listItemTagAutoclosing;
	        case "dd":
	        case "dt":
	          return ancestorInfo.dlItemTagAutoclosing;
	        case "button":
	          return ancestorInfo.buttonTagInScope;
	        case "a":
	          return ancestorInfo.aTagInScope;
	        case "nobr":
	          return ancestorInfo.nobrTagInScope;
	      }
	      return null;
	    }
	    function findAncestor(parent, tagName) {
	      for (; parent; ) {
	        switch (parent.tag) {
	          case 5:
	          case 26:
	          case 27:
	            if (parent.type === tagName) return parent;
	        }
	        parent = parent.return;
	      }
	      return null;
	    }
	    function validateDOMNesting(childTag, ancestorInfo) {
	      ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
	      var parentInfo = ancestorInfo.current;
	      ancestorInfo = (parentInfo = isTagValidWithParent(
	        childTag,
	        parentInfo && parentInfo.tag,
	        ancestorInfo.implicitRootScope
	      )
	        ? null
	        : parentInfo)
	        ? null
	        : findInvalidAncestorForTag(childTag, ancestorInfo);
	      ancestorInfo = parentInfo || ancestorInfo;
	      if (!ancestorInfo) return true;
	      var ancestorTag = ancestorInfo.tag;
	      ancestorInfo = String(!!parentInfo) + "|" + childTag + "|" + ancestorTag;
	      if (didWarn[ancestorInfo]) return false;
	      didWarn[ancestorInfo] = true;
	      var ancestor = (ancestorInfo = current)
	          ? findAncestor(ancestorInfo.return, ancestorTag)
	          : null,
	        ancestorDescription =
	          null !== ancestorInfo && null !== ancestor
	            ? describeAncestors(ancestor, ancestorInfo, null)
	            : "",
	        tagDisplayName = "<" + childTag + ">";
	      parentInfo
	        ? ((parentInfo = ""),
	          "table" === ancestorTag &&
	            "tr" === childTag &&
	            (parentInfo +=
	              " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."),
	          console.error(
	            "In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s",
	            tagDisplayName,
	            ancestorTag,
	            parentInfo,
	            ancestorDescription
	          ))
	        : console.error(
	            "In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s",
	            tagDisplayName,
	            ancestorTag,
	            ancestorDescription
	          );
	      ancestorInfo &&
	        ((childTag = ancestorInfo.return),
	        null === ancestor ||
	          null === childTag ||
	          (ancestor === childTag &&
	            childTag._debugOwner === ancestorInfo._debugOwner) ||
	          runWithFiberInDEV(ancestor, function () {
	            console.error(
	              "<%s> cannot contain a nested %s.\nSee this log for the ancestor stack trace.",
	              ancestorTag,
	              tagDisplayName
	            );
	          }));
	      return false;
	    }
	    function validateTextNesting(childText, parentTag, implicitRootScope) {
	      if (implicitRootScope || isTagValidWithParent("#text", parentTag, false))
	        return true;
	      implicitRootScope = "#text|" + parentTag;
	      if (didWarn[implicitRootScope]) return false;
	      didWarn[implicitRootScope] = true;
	      var ancestor = (implicitRootScope = current)
	        ? findAncestor(implicitRootScope, parentTag)
	        : null;
	      implicitRootScope =
	        null !== implicitRootScope && null !== ancestor
	          ? describeAncestors(
	              ancestor,
	              implicitRootScope,
	              6 !== implicitRootScope.tag ? { children: null } : null
	            )
	          : "";
	      /\S/.test(childText)
	        ? console.error(
	            "In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s",
	            parentTag,
	            implicitRootScope
	          )
	        : console.error(
	            "In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s",
	            parentTag,
	            implicitRootScope
	          );
	      return false;
	    }
	    function setTextContent(node, text) {
	      if (text) {
	        var firstChild = node.firstChild;
	        if (
	          firstChild &&
	          firstChild === node.lastChild &&
	          3 === firstChild.nodeType
	        ) {
	          firstChild.nodeValue = text;
	          return;
	        }
	      }
	      node.textContent = text;
	    }
	    function camelize(string) {
	      return string.replace(hyphenPattern, function (_, character) {
	        return character.toUpperCase();
	      });
	    }
	    function setValueForStyle(style, styleName, value) {
	      var isCustomProperty = 0 === styleName.indexOf("--");
	      isCustomProperty ||
	        (-1 < styleName.indexOf("-")
	          ? (warnedStyleNames.hasOwnProperty(styleName) &&
	              warnedStyleNames[styleName]) ||
	            ((warnedStyleNames[styleName] = true),
	            console.error(
	              "Unsupported style property %s. Did you mean %s?",
	              styleName,
	              camelize(styleName.replace(msPattern, "ms-"))
	            ))
	          : badVendoredStyleNamePattern.test(styleName)
	            ? (warnedStyleNames.hasOwnProperty(styleName) &&
	                warnedStyleNames[styleName]) ||
	              ((warnedStyleNames[styleName] = true),
	              console.error(
	                "Unsupported vendor-prefixed style property %s. Did you mean %s?",
	                styleName,
	                styleName.charAt(0).toUpperCase() + styleName.slice(1)
	              ))
	            : !badStyleValueWithSemicolonPattern.test(value) ||
	              (warnedStyleValues.hasOwnProperty(value) &&
	                warnedStyleValues[value]) ||
	              ((warnedStyleValues[value] = true),
	              console.error(
	                'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',
	                styleName,
	                value.replace(badStyleValueWithSemicolonPattern, "")
	              )),
	        "number" === typeof value &&
	          (isNaN(value)
	            ? warnedForNaNValue ||
	              ((warnedForNaNValue = true),
	              console.error(
	                "`NaN` is an invalid value for the `%s` css style property.",
	                styleName
	              ))
	            : isFinite(value) ||
	              warnedForInfinityValue ||
	              ((warnedForInfinityValue = true),
	              console.error(
	                "`Infinity` is an invalid value for the `%s` css style property.",
	                styleName
	              ))));
	      null == value || "boolean" === typeof value || "" === value
	        ? isCustomProperty
	          ? style.setProperty(styleName, "")
	          : "float" === styleName
	            ? (style.cssFloat = "")
	            : (style[styleName] = "")
	        : isCustomProperty
	          ? style.setProperty(styleName, value)
	          : "number" !== typeof value ||
	              0 === value ||
	              unitlessNumbers.has(styleName)
	            ? "float" === styleName
	              ? (style.cssFloat = value)
	              : (checkCSSPropertyStringCoercion(value, styleName),
	                (style[styleName] = ("" + value).trim()))
	            : (style[styleName] = value + "px");
	    }
	    function setValueForStyles(node, styles, prevStyles) {
	      if (null != styles && "object" !== typeof styles)
	        throw Error(
	          "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
	        );
	      styles && Object.freeze(styles);
	      node = node.style;
	      if (null != prevStyles) {
	        if (styles) {
	          var expandedUpdates = {};
	          if (prevStyles)
	            for (var key in prevStyles)
	              if (prevStyles.hasOwnProperty(key) && !styles.hasOwnProperty(key))
	                for (
	                  var longhands = shorthandToLonghand[key] || [key], i = 0;
	                  i < longhands.length;
	                  i++
	                )
	                  expandedUpdates[longhands[i]] = key;
	          for (var _key in styles)
	            if (
	              styles.hasOwnProperty(_key) &&
	              (!prevStyles || prevStyles[_key] !== styles[_key])
	            )
	              for (
	                key = shorthandToLonghand[_key] || [_key], longhands = 0;
	                longhands < key.length;
	                longhands++
	              )
	                expandedUpdates[key[longhands]] = _key;
	          _key = {};
	          for (var key$jscomp$0 in styles)
	            for (
	              key = shorthandToLonghand[key$jscomp$0] || [key$jscomp$0],
	                longhands = 0;
	              longhands < key.length;
	              longhands++
	            )
	              _key[key[longhands]] = key$jscomp$0;
	          key$jscomp$0 = {};
	          for (var _key2 in expandedUpdates)
	            if (
	              ((key = expandedUpdates[_key2]),
	              (longhands = _key[_key2]) &&
	                key !== longhands &&
	                ((i = key + "," + longhands), !key$jscomp$0[i]))
	            ) {
	              key$jscomp$0[i] = true;
	              i = console;
	              var value = styles[key];
	              i.error.call(
	                i,
	                "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
	                null == value || "boolean" === typeof value || "" === value
	                  ? "Removing"
	                  : "Updating",
	                key,
	                longhands
	              );
	            }
	        }
	        for (var styleName in prevStyles)
	          !prevStyles.hasOwnProperty(styleName) ||
	            (null != styles && styles.hasOwnProperty(styleName)) ||
	            (0 === styleName.indexOf("--")
	              ? node.setProperty(styleName, "")
	              : "float" === styleName
	                ? (node.cssFloat = "")
	                : (node[styleName] = ""));
	        for (var _styleName in styles)
	          (_key2 = styles[_styleName]),
	            styles.hasOwnProperty(_styleName) &&
	              prevStyles[_styleName] !== _key2 &&
	              setValueForStyle(node, _styleName, _key2);
	      } else
	        for (expandedUpdates in styles)
	          styles.hasOwnProperty(expandedUpdates) &&
	            setValueForStyle(node, expandedUpdates, styles[expandedUpdates]);
	    }
	    function isCustomElement(tagName) {
	      if (-1 === tagName.indexOf("-")) return false;
	      switch (tagName) {
	        case "annotation-xml":
	        case "color-profile":
	        case "font-face":
	        case "font-face-src":
	        case "font-face-uri":
	        case "font-face-format":
	        case "font-face-name":
	        case "missing-glyph":
	          return false;
	        default:
	          return true;
	      }
	    }
	    function getAttributeAlias(name) {
	      return aliases.get(name) || name;
	    }
	    function validateProperty$1(tagName, name) {
	      if (
	        hasOwnProperty.call(warnedProperties$1, name) &&
	        warnedProperties$1[name]
	      )
	        return true;
	      if (rARIACamel$1.test(name)) {
	        tagName = "aria-" + name.slice(4).toLowerCase();
	        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
	        if (null == tagName)
	          return (
	            console.error(
	              "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
	              name
	            ),
	            (warnedProperties$1[name] = true)
	          );
	        if (name !== tagName)
	          return (
	            console.error(
	              "Invalid ARIA attribute `%s`. Did you mean `%s`?",
	              name,
	              tagName
	            ),
	            (warnedProperties$1[name] = true)
	          );
	      }
	      if (rARIA$1.test(name)) {
	        tagName = name.toLowerCase();
	        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
	        if (null == tagName) return (warnedProperties$1[name] = true), false;
	        name !== tagName &&
	          (console.error(
	            "Unknown ARIA attribute `%s`. Did you mean `%s`?",
	            name,
	            tagName
	          ),
	          (warnedProperties$1[name] = true));
	      }
	      return true;
	    }
	    function validateProperties$2(type, props) {
	      var invalidProps = [],
	        key;
	      for (key in props)
	        validateProperty$1(type, key) || invalidProps.push(key);
	      props = invalidProps
	        .map(function (prop) {
	          return "`" + prop + "`";
	        })
	        .join(", ");
	      1 === invalidProps.length
	        ? console.error(
	            "Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
	            props,
	            type
	          )
	        : 1 < invalidProps.length &&
	          console.error(
	            "Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props",
	            props,
	            type
	          );
	    }
	    function validateProperty(tagName, name, value, eventRegistry) {
	      if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
	        return true;
	      var lowerCasedName = name.toLowerCase();
	      if ("onfocusin" === lowerCasedName || "onfocusout" === lowerCasedName)
	        return (
	          console.error(
	            "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
	          ),
	          (warnedProperties[name] = true)
	        );
	      if (
	        "function" === typeof value &&
	        (("form" === tagName && "action" === name) ||
	          ("input" === tagName && "formAction" === name) ||
	          ("button" === tagName && "formAction" === name))
	      )
	        return true;
	      if (null != eventRegistry) {
	        tagName = eventRegistry.possibleRegistrationNames;
	        if (eventRegistry.registrationNameDependencies.hasOwnProperty(name))
	          return true;
	        eventRegistry = tagName.hasOwnProperty(lowerCasedName)
	          ? tagName[lowerCasedName]
	          : null;
	        if (null != eventRegistry)
	          return (
	            console.error(
	              "Invalid event handler property `%s`. Did you mean `%s`?",
	              name,
	              eventRegistry
	            ),
	            (warnedProperties[name] = true)
	          );
	        if (EVENT_NAME_REGEX.test(name))
	          return (
	            console.error(
	              "Unknown event handler property `%s`. It will be ignored.",
	              name
	            ),
	            (warnedProperties[name] = true)
	          );
	      } else if (EVENT_NAME_REGEX.test(name))
	        return (
	          INVALID_EVENT_NAME_REGEX.test(name) &&
	            console.error(
	              "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
	              name
	            ),
	          (warnedProperties[name] = true)
	        );
	      if (rARIA.test(name) || rARIACamel.test(name)) return true;
	      if ("innerhtml" === lowerCasedName)
	        return (
	          console.error(
	            "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
	          ),
	          (warnedProperties[name] = true)
	        );
	      if ("aria" === lowerCasedName)
	        return (
	          console.error(
	            "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
	          ),
	          (warnedProperties[name] = true)
	        );
	      if (
	        "is" === lowerCasedName &&
	        null !== value &&
	        void 0 !== value &&
	        "string" !== typeof value
	      )
	        return (
	          console.error(
	            "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
	            typeof value
	          ),
	          (warnedProperties[name] = true)
	        );
	      if ("number" === typeof value && isNaN(value))
	        return (
	          console.error(
	            "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
	            name
	          ),
	          (warnedProperties[name] = true)
	        );
	      if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	        if (
	          ((lowerCasedName = possibleStandardNames[lowerCasedName]),
	          lowerCasedName !== name)
	        )
	          return (
	            console.error(
	              "Invalid DOM property `%s`. Did you mean `%s`?",
	              name,
	              lowerCasedName
	            ),
	            (warnedProperties[name] = true)
	          );
	      } else if (name !== lowerCasedName)
	        return (
	          console.error(
	            "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
	            name,
	            lowerCasedName
	          ),
	          (warnedProperties[name] = true)
	        );
	      switch (name) {
	        case "dangerouslySetInnerHTML":
	        case "children":
	        case "style":
	        case "suppressContentEditableWarning":
	        case "suppressHydrationWarning":
	        case "defaultValue":
	        case "defaultChecked":
	        case "innerHTML":
	        case "ref":
	          return true;
	        case "innerText":
	        case "textContent":
	          return true;
	      }
	      switch (typeof value) {
	        case "boolean":
	          switch (name) {
	            case "autoFocus":
	            case "checked":
	            case "multiple":
	            case "muted":
	            case "selected":
	            case "contentEditable":
	            case "spellCheck":
	            case "draggable":
	            case "value":
	            case "autoReverse":
	            case "externalResourcesRequired":
	            case "focusable":
	            case "preserveAlpha":
	            case "allowFullScreen":
	            case "async":
	            case "autoPlay":
	            case "controls":
	            case "default":
	            case "defer":
	            case "disabled":
	            case "disablePictureInPicture":
	            case "disableRemotePlayback":
	            case "formNoValidate":
	            case "hidden":
	            case "loop":
	            case "noModule":
	            case "noValidate":
	            case "open":
	            case "playsInline":
	            case "readOnly":
	            case "required":
	            case "reversed":
	            case "scoped":
	            case "seamless":
	            case "itemScope":
	            case "capture":
	            case "download":
	            case "inert":
	              return true;
	            default:
	              lowerCasedName = name.toLowerCase().slice(0, 5);
	              if ("data-" === lowerCasedName || "aria-" === lowerCasedName)
	                return true;
	              value
	                ? console.error(
	                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
	                    value,
	                    name,
	                    name,
	                    value,
	                    name
	                  )
	                : console.error(
	                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
	                    value,
	                    name,
	                    name,
	                    value,
	                    name,
	                    name,
	                    name
	                  );
	              return (warnedProperties[name] = true);
	          }
	        case "function":
	        case "symbol":
	          return (warnedProperties[name] = true), false;
	        case "string":
	          if ("false" === value || "true" === value) {
	            switch (name) {
	              case "checked":
	              case "selected":
	              case "multiple":
	              case "muted":
	              case "allowFullScreen":
	              case "async":
	              case "autoPlay":
	              case "controls":
	              case "default":
	              case "defer":
	              case "disabled":
	              case "disablePictureInPicture":
	              case "disableRemotePlayback":
	              case "formNoValidate":
	              case "hidden":
	              case "loop":
	              case "noModule":
	              case "noValidate":
	              case "open":
	              case "playsInline":
	              case "readOnly":
	              case "required":
	              case "reversed":
	              case "scoped":
	              case "seamless":
	              case "itemScope":
	              case "inert":
	                break;
	              default:
	                return true;
	            }
	            console.error(
	              "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
	              value,
	              name,
	              "false" === value
	                ? "The browser will interpret it as a truthy value."
	                : 'Although this works, it will not work as expected if you pass the string "false".',
	              name,
	              value
	            );
	            warnedProperties[name] = true;
	          }
	      }
	      return true;
	    }
	    function warnUnknownProperties(type, props, eventRegistry) {
	      var unknownProps = [],
	        key;
	      for (key in props)
	        validateProperty(type, key, props[key], eventRegistry) ||
	          unknownProps.push(key);
	      props = unknownProps
	        .map(function (prop) {
	          return "`" + prop + "`";
	        })
	        .join(", ");
	      1 === unknownProps.length
	        ? console.error(
	            "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ",
	            props,
	            type
	          )
	        : 1 < unknownProps.length &&
	          console.error(
	            "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ",
	            props,
	            type
	          );
	    }
	    function sanitizeURL(url) {
	      return isJavaScriptProtocol.test("" + url)
	        ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')"
	        : url;
	    }
	    function getEventTarget(nativeEvent) {
	      nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
	      nativeEvent.correspondingUseElement &&
	        (nativeEvent = nativeEvent.correspondingUseElement);
	      return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
	    }
	    function restoreStateOfTarget(target) {
	      var internalInstance = getInstanceFromNode(target);
	      if (internalInstance && (target = internalInstance.stateNode)) {
	        var props = target[internalPropsKey] || null;
	        a: switch (
	          ((target = internalInstance.stateNode), internalInstance.type)
	        ) {
	          case "input":
	            updateInput(
	              target,
	              props.value,
	              props.defaultValue,
	              props.defaultValue,
	              props.checked,
	              props.defaultChecked,
	              props.type,
	              props.name
	            );
	            internalInstance = props.name;
	            if ("radio" === props.type && null != internalInstance) {
	              for (props = target; props.parentNode; ) props = props.parentNode;
	              checkAttributeStringCoercion(internalInstance, "name");
	              props = props.querySelectorAll(
	                'input[name="' +
	                  escapeSelectorAttributeValueInsideDoubleQuotes(
	                    "" + internalInstance
	                  ) +
	                  '"][type="radio"]'
	              );
	              for (
	                internalInstance = 0;
	                internalInstance < props.length;
	                internalInstance++
	              ) {
	                var otherNode = props[internalInstance];
	                if (otherNode !== target && otherNode.form === target.form) {
	                  var otherProps = otherNode[internalPropsKey] || null;
	                  if (!otherProps)
	                    throw Error(
	                      "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."
	                    );
	                  updateInput(
	                    otherNode,
	                    otherProps.value,
	                    otherProps.defaultValue,
	                    otherProps.defaultValue,
	                    otherProps.checked,
	                    otherProps.defaultChecked,
	                    otherProps.type,
	                    otherProps.name
	                  );
	                }
	              }
	              for (
	                internalInstance = 0;
	                internalInstance < props.length;
	                internalInstance++
	              )
	                (otherNode = props[internalInstance]),
	                  otherNode.form === target.form &&
	                    updateValueIfChanged(otherNode);
	            }
	            break a;
	          case "textarea":
	            updateTextarea(target, props.value, props.defaultValue);
	            break a;
	          case "select":
	            (internalInstance = props.value),
	              null != internalInstance &&
	                updateOptions(target, !!props.multiple, internalInstance, false);
	        }
	      }
	    }
	    function batchedUpdates$1(fn, a, b) {
	      if (isInsideEventHandler) return fn(a, b);
	      isInsideEventHandler = true;
	      try {
	        var JSCompiler_inline_result = fn(a);
	        return JSCompiler_inline_result;
	      } finally {
	        if (
	          ((isInsideEventHandler = false),
	          null !== restoreTarget || null !== restoreQueue)
	        )
	          if (
	            (flushSyncWork$1(),
	            restoreTarget &&
	              ((a = restoreTarget),
	              (fn = restoreQueue),
	              (restoreQueue = restoreTarget = null),
	              restoreStateOfTarget(a),
	              fn))
	          )
	            for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
	      }
	    }
	    function getListener(inst, registrationName) {
	      var stateNode = inst.stateNode;
	      if (null === stateNode) return null;
	      var props = stateNode[internalPropsKey] || null;
	      if (null === props) return null;
	      stateNode = props[registrationName];
	      a: switch (registrationName) {
	        case "onClick":
	        case "onClickCapture":
	        case "onDoubleClick":
	        case "onDoubleClickCapture":
	        case "onMouseDown":
	        case "onMouseDownCapture":
	        case "onMouseMove":
	        case "onMouseMoveCapture":
	        case "onMouseUp":
	        case "onMouseUpCapture":
	        case "onMouseEnter":
	          (props = !props.disabled) ||
	            ((inst = inst.type),
	            (props = !(
	              "button" === inst ||
	              "input" === inst ||
	              "select" === inst ||
	              "textarea" === inst
	            )));
	          inst = !props;
	          break a;
	        default:
	          inst = false;
	      }
	      if (inst) return null;
	      if (stateNode && "function" !== typeof stateNode)
	        throw Error(
	          "Expected `" +
	            registrationName +
	            "` listener to be a function, instead got a value of `" +
	            typeof stateNode +
	            "` type."
	        );
	      return stateNode;
	    }
	    function getData() {
	      if (fallbackText) return fallbackText;
	      var start,
	        startValue = startText,
	        startLength = startValue.length,
	        end,
	        endValue = "value" in root ? root.value : root.textContent,
	        endLength = endValue.length;
	      for (
	        start = 0;
	        start < startLength && startValue[start] === endValue[start];
	        start++
	      );
	      var minEnd = startLength - start;
	      for (
	        end = 1;
	        end <= minEnd &&
	        startValue[startLength - end] === endValue[endLength - end];
	        end++
	      );
	      return (fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0));
	    }
	    function getEventCharCode(nativeEvent) {
	      var keyCode = nativeEvent.keyCode;
	      "charCode" in nativeEvent
	        ? ((nativeEvent = nativeEvent.charCode),
	          0 === nativeEvent && 13 === keyCode && (nativeEvent = 13))
	        : (nativeEvent = keyCode);
	      10 === nativeEvent && (nativeEvent = 13);
	      return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
	    }
	    function functionThatReturnsTrue() {
	      return true;
	    }
	    function functionThatReturnsFalse() {
	      return false;
	    }
	    function createSyntheticEvent(Interface) {
	      function SyntheticBaseEvent(
	        reactName,
	        reactEventType,
	        targetInst,
	        nativeEvent,
	        nativeEventTarget
	      ) {
	        this._reactName = reactName;
	        this._targetInst = targetInst;
	        this.type = reactEventType;
	        this.nativeEvent = nativeEvent;
	        this.target = nativeEventTarget;
	        this.currentTarget = null;
	        for (var propName in Interface)
	          Interface.hasOwnProperty(propName) &&
	            ((reactName = Interface[propName]),
	            (this[propName] = reactName
	              ? reactName(nativeEvent)
	              : nativeEvent[propName]));
	        this.isDefaultPrevented = (
	          null != nativeEvent.defaultPrevented
	            ? nativeEvent.defaultPrevented
	            : false === nativeEvent.returnValue
	        )
	          ? functionThatReturnsTrue
	          : functionThatReturnsFalse;
	        this.isPropagationStopped = functionThatReturnsFalse;
	        return this;
	      }
	      assign(SyntheticBaseEvent.prototype, {
	        preventDefault: function () {
	          this.defaultPrevented = true;
	          var event = this.nativeEvent;
	          event &&
	            (event.preventDefault
	              ? event.preventDefault()
	              : "unknown" !== typeof event.returnValue &&
	                (event.returnValue = false),
	            (this.isDefaultPrevented = functionThatReturnsTrue));
	        },
	        stopPropagation: function () {
	          var event = this.nativeEvent;
	          event &&
	            (event.stopPropagation
	              ? event.stopPropagation()
	              : "unknown" !== typeof event.cancelBubble &&
	                (event.cancelBubble = true),
	            (this.isPropagationStopped = functionThatReturnsTrue));
	        },
	        persist: function () {},
	        isPersistent: functionThatReturnsTrue
	      });
	      return SyntheticBaseEvent;
	    }
	    function modifierStateGetter(keyArg) {
	      var nativeEvent = this.nativeEvent;
	      return nativeEvent.getModifierState
	        ? nativeEvent.getModifierState(keyArg)
	        : (keyArg = modifierKeyToProp[keyArg])
	          ? !!nativeEvent[keyArg]
	          : false;
	    }
	    function getEventModifierState() {
	      return modifierStateGetter;
	    }
	    function isFallbackCompositionEnd(domEventName, nativeEvent) {
	      switch (domEventName) {
	        case "keyup":
	          return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
	        case "keydown":
	          return nativeEvent.keyCode !== START_KEYCODE;
	        case "keypress":
	        case "mousedown":
	        case "focusout":
	          return true;
	        default:
	          return false;
	      }
	    }
	    function getDataFromCustomEvent(nativeEvent) {
	      nativeEvent = nativeEvent.detail;
	      return "object" === typeof nativeEvent && "data" in nativeEvent
	        ? nativeEvent.data
	        : null;
	    }
	    function getNativeBeforeInputChars(domEventName, nativeEvent) {
	      switch (domEventName) {
	        case "compositionend":
	          return getDataFromCustomEvent(nativeEvent);
	        case "keypress":
	          if (nativeEvent.which !== SPACEBAR_CODE) return null;
	          hasSpaceKeypress = true;
	          return SPACEBAR_CHAR;
	        case "textInput":
	          return (
	            (domEventName = nativeEvent.data),
	            domEventName === SPACEBAR_CHAR && hasSpaceKeypress
	              ? null
	              : domEventName
	          );
	        default:
	          return null;
	      }
	    }
	    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
	      if (isComposing)
	        return "compositionend" === domEventName ||
	          (!canUseCompositionEvent &&
	            isFallbackCompositionEnd(domEventName, nativeEvent))
	          ? ((domEventName = getData()),
	            (fallbackText = startText = root = null),
	            (isComposing = false),
	            domEventName)
	          : null;
	      switch (domEventName) {
	        case "paste":
	          return null;
	        case "keypress":
	          if (
	            !(
	              nativeEvent.ctrlKey ||
	              nativeEvent.altKey ||
	              nativeEvent.metaKey
	            ) ||
	            (nativeEvent.ctrlKey && nativeEvent.altKey)
	          ) {
	            if (nativeEvent.char && 1 < nativeEvent.char.length)
	              return nativeEvent.char;
	            if (nativeEvent.which)
	              return String.fromCharCode(nativeEvent.which);
	          }
	          return null;
	        case "compositionend":
	          return useFallbackCompositionData && "ko" !== nativeEvent.locale
	            ? null
	            : nativeEvent.data;
	        default:
	          return null;
	      }
	    }
	    function isTextInputElement(elem) {
	      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	      return "input" === nodeName
	        ? !!supportedInputTypes[elem.type]
	        : "textarea" === nodeName
	          ? true
	          : false;
	    }
	    function isEventSupported(eventNameSuffix) {
	      if (!canUseDOM) return false;
	      eventNameSuffix = "on" + eventNameSuffix;
	      var isSupported = eventNameSuffix in document;
	      isSupported ||
	        ((isSupported = document.createElement("div")),
	        isSupported.setAttribute(eventNameSuffix, "return;"),
	        (isSupported = "function" === typeof isSupported[eventNameSuffix]));
	      return isSupported;
	    }
	    function createAndAccumulateChangeEvent(
	      dispatchQueue,
	      inst,
	      nativeEvent,
	      target
	    ) {
	      restoreTarget
	        ? restoreQueue
	          ? restoreQueue.push(target)
	          : (restoreQueue = [target])
	        : (restoreTarget = target);
	      inst = accumulateTwoPhaseListeners(inst, "onChange");
	      0 < inst.length &&
	        ((nativeEvent = new SyntheticEvent(
	          "onChange",
	          "change",
	          null,
	          nativeEvent,
	          target
	        )),
	        dispatchQueue.push({ event: nativeEvent, listeners: inst }));
	    }
	    function runEventInBatch(dispatchQueue) {
	      processDispatchQueue(dispatchQueue, 0);
	    }
	    function getInstIfValueChanged(targetInst) {
	      var targetNode = getNodeFromInstance(targetInst);
	      if (updateValueIfChanged(targetNode)) return targetInst;
	    }
	    function getTargetInstForChangeEvent(domEventName, targetInst) {
	      if ("change" === domEventName) return targetInst;
	    }
	    function stopWatchingForValueChange() {
	      activeElement$1 &&
	        (activeElement$1.detachEvent("onpropertychange", handlePropertyChange),
	        (activeElementInst$1 = activeElement$1 = null));
	    }
	    function handlePropertyChange(nativeEvent) {
	      if (
	        "value" === nativeEvent.propertyName &&
	        getInstIfValueChanged(activeElementInst$1)
	      ) {
	        var dispatchQueue = [];
	        createAndAccumulateChangeEvent(
	          dispatchQueue,
	          activeElementInst$1,
	          nativeEvent,
	          getEventTarget(nativeEvent)
	        );
	        batchedUpdates$1(runEventInBatch, dispatchQueue);
	      }
	    }
	    function handleEventsForInputEventPolyfill(
	      domEventName,
	      target,
	      targetInst
	    ) {
	      "focusin" === domEventName
	        ? (stopWatchingForValueChange(),
	          (activeElement$1 = target),
	          (activeElementInst$1 = targetInst),
	          activeElement$1.attachEvent("onpropertychange", handlePropertyChange))
	        : "focusout" === domEventName && stopWatchingForValueChange();
	    }
	    function getTargetInstForInputEventPolyfill(domEventName) {
	      if (
	        "selectionchange" === domEventName ||
	        "keyup" === domEventName ||
	        "keydown" === domEventName
	      )
	        return getInstIfValueChanged(activeElementInst$1);
	    }
	    function getTargetInstForClickEvent(domEventName, targetInst) {
	      if ("click" === domEventName) return getInstIfValueChanged(targetInst);
	    }
	    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
	      if ("input" === domEventName || "change" === domEventName)
	        return getInstIfValueChanged(targetInst);
	    }
	    function is(x, y) {
	      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
	    }
	    function shallowEqual(objA, objB) {
	      if (objectIs(objA, objB)) return true;
	      if (
	        "object" !== typeof objA ||
	        null === objA ||
	        "object" !== typeof objB ||
	        null === objB
	      )
	        return false;
	      var keysA = Object.keys(objA),
	        keysB = Object.keys(objB);
	      if (keysA.length !== keysB.length) return false;
	      for (keysB = 0; keysB < keysA.length; keysB++) {
	        var currentKey = keysA[keysB];
	        if (
	          !hasOwnProperty.call(objB, currentKey) ||
	          !objectIs(objA[currentKey], objB[currentKey])
	        )
	          return false;
	      }
	      return true;
	    }
	    function getLeafNode(node) {
	      for (; node && node.firstChild; ) node = node.firstChild;
	      return node;
	    }
	    function getNodeForCharacterOffset(root, offset) {
	      var node = getLeafNode(root);
	      root = 0;
	      for (var nodeEnd; node; ) {
	        if (3 === node.nodeType) {
	          nodeEnd = root + node.textContent.length;
	          if (root <= offset && nodeEnd >= offset)
	            return { node: node, offset: offset - root };
	          root = nodeEnd;
	        }
	        a: {
	          for (; node; ) {
	            if (node.nextSibling) {
	              node = node.nextSibling;
	              break a;
	            }
	            node = node.parentNode;
	          }
	          node = void 0;
	        }
	        node = getLeafNode(node);
	      }
	    }
	    function containsNode(outerNode, innerNode) {
	      return outerNode && innerNode
	        ? outerNode === innerNode
	          ? true
	          : outerNode && 3 === outerNode.nodeType
	            ? false
	            : innerNode && 3 === innerNode.nodeType
	              ? containsNode(outerNode, innerNode.parentNode)
	              : "contains" in outerNode
	                ? outerNode.contains(innerNode)
	                : outerNode.compareDocumentPosition
	                  ? !!(outerNode.compareDocumentPosition(innerNode) & 16)
	                  : false
	        : false;
	    }
	    function getActiveElementDeep(containerInfo) {
	      containerInfo =
	        null != containerInfo &&
	        null != containerInfo.ownerDocument &&
	        null != containerInfo.ownerDocument.defaultView
	          ? containerInfo.ownerDocument.defaultView
	          : window;
	      for (
	        var element = getActiveElement(containerInfo.document);
	        element instanceof containerInfo.HTMLIFrameElement;

	      ) {
	        try {
	          var JSCompiler_inline_result =
	            "string" === typeof element.contentWindow.location.href;
	        } catch (err) {
	          JSCompiler_inline_result = false;
	        }
	        if (JSCompiler_inline_result) containerInfo = element.contentWindow;
	        else break;
	        element = getActiveElement(containerInfo.document);
	      }
	      return element;
	    }
	    function hasSelectionCapabilities(elem) {
	      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	      return (
	        nodeName &&
	        (("input" === nodeName &&
	          ("text" === elem.type ||
	            "search" === elem.type ||
	            "tel" === elem.type ||
	            "url" === elem.type ||
	            "password" === elem.type)) ||
	          "textarea" === nodeName ||
	          "true" === elem.contentEditable)
	      );
	    }
	    function constructSelectEvent(
	      dispatchQueue,
	      nativeEvent,
	      nativeEventTarget
	    ) {
	      var doc =
	        nativeEventTarget.window === nativeEventTarget
	          ? nativeEventTarget.document
	          : 9 === nativeEventTarget.nodeType
	            ? nativeEventTarget
	            : nativeEventTarget.ownerDocument;
	      mouseDown ||
	        null == activeElement ||
	        activeElement !== getActiveElement(doc) ||
	        ((doc = activeElement),
	        "selectionStart" in doc && hasSelectionCapabilities(doc)
	          ? (doc = { start: doc.selectionStart, end: doc.selectionEnd })
	          : ((doc = (
	              (doc.ownerDocument && doc.ownerDocument.defaultView) ||
	              window
	            ).getSelection()),
	            (doc = {
	              anchorNode: doc.anchorNode,
	              anchorOffset: doc.anchorOffset,
	              focusNode: doc.focusNode,
	              focusOffset: doc.focusOffset
	            })),
	        (lastSelection && shallowEqual(lastSelection, doc)) ||
	          ((lastSelection = doc),
	          (doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect")),
	          0 < doc.length &&
	            ((nativeEvent = new SyntheticEvent(
	              "onSelect",
	              "select",
	              null,
	              nativeEvent,
	              nativeEventTarget
	            )),
	            dispatchQueue.push({ event: nativeEvent, listeners: doc }),
	            (nativeEvent.target = activeElement))));
	    }
	    function makePrefixMap(styleProp, eventName) {
	      var prefixes = {};
	      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	      prefixes["Webkit" + styleProp] = "webkit" + eventName;
	      prefixes["Moz" + styleProp] = "moz" + eventName;
	      return prefixes;
	    }
	    function getVendorPrefixedEventName(eventName) {
	      if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
	      if (!vendorPrefixes[eventName]) return eventName;
	      var prefixMap = vendorPrefixes[eventName],
	        styleProp;
	      for (styleProp in prefixMap)
	        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
	          return (prefixedEventNames[eventName] = prefixMap[styleProp]);
	      return eventName;
	    }
	    function registerSimpleEvent(domEventName, reactName) {
	      topLevelEventsToReactNames.set(domEventName, reactName);
	      registerTwoPhaseEvent(reactName, [domEventName]);
	    }
	    function createCapturedValueAtFiber(value, source) {
	      if ("object" === typeof value && null !== value) {
	        var existing = CapturedStacks.get(value);
	        if (void 0 !== existing) return existing;
	        source = {
	          value: value,
	          source: source,
	          stack: getStackByFiberInDevAndProd(source)
	        };
	        CapturedStacks.set(value, source);
	        return source;
	      }
	      return {
	        value: value,
	        source: source,
	        stack: getStackByFiberInDevAndProd(source)
	      };
	    }
	    function finishQueueingConcurrentUpdates() {
	      for (
	        var endIndex = concurrentQueuesIndex,
	          i = (concurrentlyUpdatedLanes = concurrentQueuesIndex = 0);
	        i < endIndex;

	      ) {
	        var fiber = concurrentQueues[i];
	        concurrentQueues[i++] = null;
	        var queue = concurrentQueues[i];
	        concurrentQueues[i++] = null;
	        var update = concurrentQueues[i];
	        concurrentQueues[i++] = null;
	        var lane = concurrentQueues[i];
	        concurrentQueues[i++] = null;
	        if (null !== queue && null !== update) {
	          var pending = queue.pending;
	          null === pending
	            ? (update.next = update)
	            : ((update.next = pending.next), (pending.next = update));
	          queue.pending = update;
	        }
	        0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
	      }
	    }
	    function enqueueUpdate$1(fiber, queue, update, lane) {
	      concurrentQueues[concurrentQueuesIndex++] = fiber;
	      concurrentQueues[concurrentQueuesIndex++] = queue;
	      concurrentQueues[concurrentQueuesIndex++] = update;
	      concurrentQueues[concurrentQueuesIndex++] = lane;
	      concurrentlyUpdatedLanes |= lane;
	      fiber.lanes |= lane;
	      fiber = fiber.alternate;
	      null !== fiber && (fiber.lanes |= lane);
	    }
	    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
	      enqueueUpdate$1(fiber, queue, update, lane);
	      return getRootForUpdatedFiber(fiber);
	    }
	    function enqueueConcurrentRenderForLane(fiber, lane) {
	      enqueueUpdate$1(fiber, null, null, lane);
	      return getRootForUpdatedFiber(fiber);
	    }
	    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
	      sourceFiber.lanes |= lane;
	      var alternate = sourceFiber.alternate;
	      null !== alternate && (alternate.lanes |= lane);
	      for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
	        (parent.childLanes |= lane),
	          (alternate = parent.alternate),
	          null !== alternate && (alternate.childLanes |= lane),
	          22 === parent.tag &&
	            ((sourceFiber = parent.stateNode),
	            null === sourceFiber ||
	              sourceFiber._visibility & OffscreenVisible ||
	              (isHidden = true)),
	          (sourceFiber = parent),
	          (parent = parent.return);
	      return 3 === sourceFiber.tag
	        ? ((parent = sourceFiber.stateNode),
	          isHidden &&
	            null !== update &&
	            ((isHidden = 31 - clz32(lane)),
	            (sourceFiber = parent.hiddenUpdates),
	            (alternate = sourceFiber[isHidden]),
	            null === alternate
	              ? (sourceFiber[isHidden] = [update])
	              : alternate.push(update),
	            (update.lane = lane | 536870912)),
	          parent)
	        : null;
	    }
	    function getRootForUpdatedFiber(sourceFiber) {
	      if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
	        throw (
	          ((nestedPassiveUpdateCount = nestedUpdateCount = 0),
	          (rootWithPassiveNestedUpdates = rootWithNestedUpdates = null),
	          Error(
	            "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
	          ))
	        );
	      nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT &&
	        ((nestedPassiveUpdateCount = 0),
	        (rootWithPassiveNestedUpdates = null),
	        console.error(
	          "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
	        ));
	      null === sourceFiber.alternate &&
	        0 !== (sourceFiber.flags & 4098) &&
	        warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	      for (var node = sourceFiber, parent = node.return; null !== parent; )
	        null === node.alternate &&
	          0 !== (node.flags & 4098) &&
	          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber),
	          (node = parent),
	          (parent = node.return);
	      return 3 === node.tag ? node.stateNode : null;
	    }
	    function resolveFunctionForHotReloading(type) {
	      if (null === resolveFamily) return type;
	      var family = resolveFamily(type);
	      return void 0 === family ? type : family.current;
	    }
	    function resolveForwardRefForHotReloading(type) {
	      if (null === resolveFamily) return type;
	      var family = resolveFamily(type);
	      return void 0 === family
	        ? null !== type &&
	          void 0 !== type &&
	          "function" === typeof type.render &&
	          ((family = resolveFunctionForHotReloading(type.render)),
	          type.render !== family)
	          ? ((family = { $$typeof: REACT_FORWARD_REF_TYPE, render: family }),
	            void 0 !== type.displayName &&
	              (family.displayName = type.displayName),
	            family)
	          : type
	        : family.current;
	    }
	    function isCompatibleFamilyForHotReloading(fiber, element) {
	      if (null === resolveFamily) return false;
	      var prevType = fiber.elementType;
	      element = element.type;
	      var needsCompareFamilies = false,
	        $$typeofNextType =
	          "object" === typeof element && null !== element
	            ? element.$$typeof
	            : null;
	      switch (fiber.tag) {
	        case 1:
	          "function" === typeof element && (needsCompareFamilies = true);
	          break;
	        case 0:
	          "function" === typeof element
	            ? (needsCompareFamilies = true)
	            : $$typeofNextType === REACT_LAZY_TYPE &&
	              (needsCompareFamilies = true);
	          break;
	        case 11:
	          $$typeofNextType === REACT_FORWARD_REF_TYPE
	            ? (needsCompareFamilies = true)
	            : $$typeofNextType === REACT_LAZY_TYPE &&
	              (needsCompareFamilies = true);
	          break;
	        case 14:
	        case 15:
	          $$typeofNextType === REACT_MEMO_TYPE
	            ? (needsCompareFamilies = true)
	            : $$typeofNextType === REACT_LAZY_TYPE &&
	              (needsCompareFamilies = true);
	          break;
	        default:
	          return false;
	      }
	      return needsCompareFamilies &&
	        ((fiber = resolveFamily(prevType)),
	        void 0 !== fiber && fiber === resolveFamily(element))
	        ? true
	        : false;
	    }
	    function markFailedErrorBoundaryForHotReloading(fiber) {
	      null !== resolveFamily &&
	        "function" === typeof WeakSet &&
	        (null === failedBoundaries && (failedBoundaries = new WeakSet()),
	        failedBoundaries.add(fiber));
	    }
	    function scheduleFibersWithFamiliesRecursively(
	      fiber,
	      updatedFamilies,
	      staleFamilies
	    ) {
	      var alternate = fiber.alternate,
	        child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type,
	        candidateType = null;
	      switch (tag) {
	        case 0:
	        case 15:
	        case 1:
	          candidateType = type;
	          break;
	        case 11:
	          candidateType = type.render;
	      }
	      if (null === resolveFamily)
	        throw Error("Expected resolveFamily to be set during hot reload.");
	      var needsRender = false;
	      type = false;
	      null !== candidateType &&
	        ((candidateType = resolveFamily(candidateType)),
	        void 0 !== candidateType &&
	          (staleFamilies.has(candidateType)
	            ? (type = true)
	            : updatedFamilies.has(candidateType) &&
	              (1 === tag ? (type = true) : (needsRender = true))));
	      null !== failedBoundaries &&
	        (failedBoundaries.has(fiber) ||
	          (null !== alternate && failedBoundaries.has(alternate))) &&
	        (type = true);
	      type && (fiber._debugNeedsRemount = true);
	      if (type || needsRender)
	        (alternate = enqueueConcurrentRenderForLane(fiber, 2)),
	          null !== alternate && scheduleUpdateOnFiber(alternate, fiber, 2);
	      null === child ||
	        type ||
	        scheduleFibersWithFamiliesRecursively(
	          child,
	          updatedFamilies,
	          staleFamilies
	        );
	      null !== sibling &&
	        scheduleFibersWithFamiliesRecursively(
	          sibling,
	          updatedFamilies,
	          staleFamilies
	        );
	    }
	    function FiberNode(tag, pendingProps, key, mode) {
	      this.tag = tag;
	      this.key = key;
	      this.sibling =
	        this.child =
	        this.return =
	        this.stateNode =
	        this.type =
	        this.elementType =
	          null;
	      this.index = 0;
	      this.refCleanup = this.ref = null;
	      this.pendingProps = pendingProps;
	      this.dependencies =
	        this.memoizedState =
	        this.updateQueue =
	        this.memoizedProps =
	          null;
	      this.mode = mode;
	      this.subtreeFlags = this.flags = 0;
	      this.deletions = null;
	      this.childLanes = this.lanes = 0;
	      this.alternate = null;
	      this.actualDuration = -0;
	      this.actualStartTime = -1.1;
	      this.treeBaseDuration = this.selfBaseDuration = -0;
	      this._debugTask =
	        this._debugStack =
	        this._debugOwner =
	        this._debugInfo =
	          null;
	      this._debugNeedsRemount = false;
	      this._debugHookTypes = null;
	      hasBadMapPolyfill ||
	        "function" !== typeof Object.preventExtensions ||
	        Object.preventExtensions(this);
	    }
	    function shouldConstruct(Component) {
	      Component = Component.prototype;
	      return !(!Component || !Component.isReactComponent);
	    }
	    function createWorkInProgress(current, pendingProps) {
	      var workInProgress = current.alternate;
	      null === workInProgress
	        ? ((workInProgress = createFiber(
	            current.tag,
	            pendingProps,
	            current.key,
	            current.mode
	          )),
	          (workInProgress.elementType = current.elementType),
	          (workInProgress.type = current.type),
	          (workInProgress.stateNode = current.stateNode),
	          (workInProgress._debugOwner = current._debugOwner),
	          (workInProgress._debugStack = current._debugStack),
	          (workInProgress._debugTask = current._debugTask),
	          (workInProgress._debugHookTypes = current._debugHookTypes),
	          (workInProgress.alternate = current),
	          (current.alternate = workInProgress))
	        : ((workInProgress.pendingProps = pendingProps),
	          (workInProgress.type = current.type),
	          (workInProgress.flags = 0),
	          (workInProgress.subtreeFlags = 0),
	          (workInProgress.deletions = null),
	          (workInProgress.actualDuration = -0),
	          (workInProgress.actualStartTime = -1.1));
	      workInProgress.flags = current.flags & 65011712;
	      workInProgress.childLanes = current.childLanes;
	      workInProgress.lanes = current.lanes;
	      workInProgress.child = current.child;
	      workInProgress.memoizedProps = current.memoizedProps;
	      workInProgress.memoizedState = current.memoizedState;
	      workInProgress.updateQueue = current.updateQueue;
	      pendingProps = current.dependencies;
	      workInProgress.dependencies =
	        null === pendingProps
	          ? null
	          : {
	              lanes: pendingProps.lanes,
	              firstContext: pendingProps.firstContext,
	              _debugThenableState: pendingProps._debugThenableState
	            };
	      workInProgress.sibling = current.sibling;
	      workInProgress.index = current.index;
	      workInProgress.ref = current.ref;
	      workInProgress.refCleanup = current.refCleanup;
	      workInProgress.selfBaseDuration = current.selfBaseDuration;
	      workInProgress.treeBaseDuration = current.treeBaseDuration;
	      workInProgress._debugInfo = current._debugInfo;
	      workInProgress._debugNeedsRemount = current._debugNeedsRemount;
	      switch (workInProgress.tag) {
	        case 0:
	        case 15:
	          workInProgress.type = resolveFunctionForHotReloading(current.type);
	          break;
	        case 1:
	          workInProgress.type = resolveFunctionForHotReloading(current.type);
	          break;
	        case 11:
	          workInProgress.type = resolveForwardRefForHotReloading(current.type);
	      }
	      return workInProgress;
	    }
	    function resetWorkInProgress(workInProgress, renderLanes) {
	      workInProgress.flags &= 65011714;
	      var current = workInProgress.alternate;
	      null === current
	        ? ((workInProgress.childLanes = 0),
	          (workInProgress.lanes = renderLanes),
	          (workInProgress.child = null),
	          (workInProgress.subtreeFlags = 0),
	          (workInProgress.memoizedProps = null),
	          (workInProgress.memoizedState = null),
	          (workInProgress.updateQueue = null),
	          (workInProgress.dependencies = null),
	          (workInProgress.stateNode = null),
	          (workInProgress.selfBaseDuration = 0),
	          (workInProgress.treeBaseDuration = 0))
	        : ((workInProgress.childLanes = current.childLanes),
	          (workInProgress.lanes = current.lanes),
	          (workInProgress.child = current.child),
	          (workInProgress.subtreeFlags = 0),
	          (workInProgress.deletions = null),
	          (workInProgress.memoizedProps = current.memoizedProps),
	          (workInProgress.memoizedState = current.memoizedState),
	          (workInProgress.updateQueue = current.updateQueue),
	          (workInProgress.type = current.type),
	          (renderLanes = current.dependencies),
	          (workInProgress.dependencies =
	            null === renderLanes
	              ? null
	              : {
	                  lanes: renderLanes.lanes,
	                  firstContext: renderLanes.firstContext,
	                  _debugThenableState: renderLanes._debugThenableState
	                }),
	          (workInProgress.selfBaseDuration = current.selfBaseDuration),
	          (workInProgress.treeBaseDuration = current.treeBaseDuration));
	      return workInProgress;
	    }
	    function createFiberFromTypeAndProps(
	      type,
	      key,
	      pendingProps,
	      owner,
	      mode,
	      lanes
	    ) {
	      var fiberTag = 0,
	        resolvedType = type;
	      if ("function" === typeof type)
	        shouldConstruct(type) && (fiberTag = 1),
	          (resolvedType = resolveFunctionForHotReloading(resolvedType));
	      else if ("string" === typeof type)
	        (fiberTag = getHostContext()),
	          (fiberTag = isHostHoistableType(type, pendingProps, fiberTag)
	            ? 26
	            : "html" === type || "head" === type || "body" === type
	              ? 27
	              : 5);
	      else
	        a: switch (type) {
	          case REACT_ACTIVITY_TYPE:
	            return (
	              (key = createFiber(31, pendingProps, key, mode)),
	              (key.elementType = REACT_ACTIVITY_TYPE),
	              (key.lanes = lanes),
	              key
	            );
	          case REACT_FRAGMENT_TYPE:
	            return createFiberFromFragment(
	              pendingProps.children,
	              mode,
	              lanes,
	              key
	            );
	          case REACT_STRICT_MODE_TYPE:
	            fiberTag = 8;
	            mode |= StrictLegacyMode;
	            mode |= StrictEffectsMode;
	            break;
	          case REACT_PROFILER_TYPE:
	            return (
	              (type = pendingProps),
	              (owner = mode),
	              "string" !== typeof type.id &&
	                console.error(
	                  'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
	                  typeof type.id
	                ),
	              (key = createFiber(12, type, key, owner | ProfileMode)),
	              (key.elementType = REACT_PROFILER_TYPE),
	              (key.lanes = lanes),
	              (key.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }),
	              key
	            );
	          case REACT_SUSPENSE_TYPE:
	            return (
	              (key = createFiber(13, pendingProps, key, mode)),
	              (key.elementType = REACT_SUSPENSE_TYPE),
	              (key.lanes = lanes),
	              key
	            );
	          case REACT_SUSPENSE_LIST_TYPE:
	            return (
	              (key = createFiber(19, pendingProps, key, mode)),
	              (key.elementType = REACT_SUSPENSE_LIST_TYPE),
	              (key.lanes = lanes),
	              key
	            );
	          default:
	            if ("object" === typeof type && null !== type)
	              switch (type.$$typeof) {
	                case REACT_PROVIDER_TYPE:
	                case REACT_CONTEXT_TYPE:
	                  fiberTag = 10;
	                  break a;
	                case REACT_CONSUMER_TYPE:
	                  fiberTag = 9;
	                  break a;
	                case REACT_FORWARD_REF_TYPE:
	                  fiberTag = 11;
	                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
	                  break a;
	                case REACT_MEMO_TYPE:
	                  fiberTag = 14;
	                  break a;
	                case REACT_LAZY_TYPE:
	                  fiberTag = 16;
	                  resolvedType = null;
	                  break a;
	              }
	            resolvedType = "";
	            if (
	              void 0 === type ||
	              ("object" === typeof type &&
	                null !== type &&
	                0 === Object.keys(type).length)
	            )
	              resolvedType +=
	                " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
	            null === type
	              ? (pendingProps = "null")
	              : isArrayImpl(type)
	                ? (pendingProps = "array")
	                : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE
	                  ? ((pendingProps =
	                      "<" +
	                      (getComponentNameFromType(type.type) || "Unknown") +
	                      " />"),
	                    (resolvedType =
	                      " Did you accidentally export a JSX literal instead of a component?"))
	                  : (pendingProps = typeof type);
	            (fiberTag = owner ? getComponentNameFromOwner(owner) : null) &&
	              (resolvedType +=
	                "\n\nCheck the render method of `" + fiberTag + "`.");
	            fiberTag = 29;
	            pendingProps = Error(
	              "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " +
	                (pendingProps + "." + resolvedType)
	            );
	            resolvedType = null;
	        }
	      key = createFiber(fiberTag, pendingProps, key, mode);
	      key.elementType = type;
	      key.type = resolvedType;
	      key.lanes = lanes;
	      key._debugOwner = owner;
	      return key;
	    }
	    function createFiberFromElement(element, mode, lanes) {
	      mode = createFiberFromTypeAndProps(
	        element.type,
	        element.key,
	        element.props,
	        element._owner,
	        mode,
	        lanes
	      );
	      mode._debugOwner = element._owner;
	      mode._debugStack = element._debugStack;
	      mode._debugTask = element._debugTask;
	      return mode;
	    }
	    function createFiberFromFragment(elements, mode, lanes, key) {
	      elements = createFiber(7, elements, key, mode);
	      elements.lanes = lanes;
	      return elements;
	    }
	    function createFiberFromText(content, mode, lanes) {
	      content = createFiber(6, content, null, mode);
	      content.lanes = lanes;
	      return content;
	    }
	    function createFiberFromPortal(portal, mode, lanes) {
	      mode = createFiber(
	        4,
	        null !== portal.children ? portal.children : [],
	        portal.key,
	        mode
	      );
	      mode.lanes = lanes;
	      mode.stateNode = {
	        containerInfo: portal.containerInfo,
	        pendingChildren: null,
	        implementation: portal.implementation
	      };
	      return mode;
	    }
	    function pushTreeFork(workInProgress, totalChildren) {
	      warnIfNotHydrating();
	      forkStack[forkStackIndex++] = treeForkCount;
	      forkStack[forkStackIndex++] = treeForkProvider;
	      treeForkProvider = workInProgress;
	      treeForkCount = totalChildren;
	    }
	    function pushTreeId(workInProgress, totalChildren, index) {
	      warnIfNotHydrating();
	      idStack[idStackIndex++] = treeContextId;
	      idStack[idStackIndex++] = treeContextOverflow;
	      idStack[idStackIndex++] = treeContextProvider;
	      treeContextProvider = workInProgress;
	      var baseIdWithLeadingBit = treeContextId;
	      workInProgress = treeContextOverflow;
	      var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
	      baseIdWithLeadingBit &= ~(1 << baseLength);
	      index += 1;
	      var length = 32 - clz32(totalChildren) + baseLength;
	      if (30 < length) {
	        var numberOfOverflowBits = baseLength - (baseLength % 5);
	        length = (
	          baseIdWithLeadingBit &
	          ((1 << numberOfOverflowBits) - 1)
	        ).toString(32);
	        baseIdWithLeadingBit >>= numberOfOverflowBits;
	        baseLength -= numberOfOverflowBits;
	        treeContextId =
	          (1 << (32 - clz32(totalChildren) + baseLength)) |
	          (index << baseLength) |
	          baseIdWithLeadingBit;
	        treeContextOverflow = length + workInProgress;
	      } else
	        (treeContextId =
	          (1 << length) | (index << baseLength) | baseIdWithLeadingBit),
	          (treeContextOverflow = workInProgress);
	    }
	    function pushMaterializedTreeId(workInProgress) {
	      warnIfNotHydrating();
	      null !== workInProgress.return &&
	        (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));
	    }
	    function popTreeContext(workInProgress) {
	      for (; workInProgress === treeForkProvider; )
	        (treeForkProvider = forkStack[--forkStackIndex]),
	          (forkStack[forkStackIndex] = null),
	          (treeForkCount = forkStack[--forkStackIndex]),
	          (forkStack[forkStackIndex] = null);
	      for (; workInProgress === treeContextProvider; )
	        (treeContextProvider = idStack[--idStackIndex]),
	          (idStack[idStackIndex] = null),
	          (treeContextOverflow = idStack[--idStackIndex]),
	          (idStack[idStackIndex] = null),
	          (treeContextId = idStack[--idStackIndex]),
	          (idStack[idStackIndex] = null);
	    }
	    function warnIfNotHydrating() {
	      isHydrating ||
	        console.error(
	          "Expected to be hydrating. This is a bug in React. Please file an issue."
	        );
	    }
	    function buildHydrationDiffNode(fiber, distanceFromLeaf) {
	      if (null === fiber.return) {
	        if (null === hydrationDiffRootDEV)
	          hydrationDiffRootDEV = {
	            fiber: fiber,
	            children: [],
	            serverProps: void 0,
	            serverTail: [],
	            distanceFromLeaf: distanceFromLeaf
	          };
	        else {
	          if (hydrationDiffRootDEV.fiber !== fiber)
	            throw Error(
	              "Saw multiple hydration diff roots in a pass. This is a bug in React."
	            );
	          hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf &&
	            (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);
	        }
	        return hydrationDiffRootDEV;
	      }
	      var siblings = buildHydrationDiffNode(
	        fiber.return,
	        distanceFromLeaf + 1
	      ).children;
	      if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber)
	        return (
	          (siblings = siblings[siblings.length - 1]),
	          siblings.distanceFromLeaf > distanceFromLeaf &&
	            (siblings.distanceFromLeaf = distanceFromLeaf),
	          siblings
	        );
	      distanceFromLeaf = {
	        fiber: fiber,
	        children: [],
	        serverProps: void 0,
	        serverTail: [],
	        distanceFromLeaf: distanceFromLeaf
	      };
	      siblings.push(distanceFromLeaf);
	      return distanceFromLeaf;
	    }
	    function warnNonHydratedInstance(fiber, rejectedCandidate) {
	      didSuspendOrErrorDEV ||
	        ((fiber = buildHydrationDiffNode(fiber, 0)),
	        (fiber.serverProps = null),
	        null !== rejectedCandidate &&
	          ((rejectedCandidate =
	            describeHydratableInstanceForDevWarnings(rejectedCandidate)),
	          fiber.serverTail.push(rejectedCandidate)));
	    }
	    function throwOnHydrationMismatch(fiber) {
	      var diff = "",
	        diffRoot = hydrationDiffRootDEV;
	      null !== diffRoot &&
	        ((hydrationDiffRootDEV = null), (diff = describeDiff(diffRoot)));
	      queueHydrationError(
	        createCapturedValueAtFiber(
	          Error(
	            "Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch" +
	              diff
	          ),
	          fiber
	        )
	      );
	      throw HydrationMismatchException;
	    }
	    function prepareToHydrateHostInstance(fiber) {
	      var didHydrate = fiber.stateNode;
	      var type = fiber.type,
	        props = fiber.memoizedProps;
	      didHydrate[internalInstanceKey] = fiber;
	      didHydrate[internalPropsKey] = props;
	      validatePropertiesInDevelopment(type, props);
	      switch (type) {
	        case "dialog":
	          listenToNonDelegatedEvent("cancel", didHydrate);
	          listenToNonDelegatedEvent("close", didHydrate);
	          break;
	        case "iframe":
	        case "object":
	        case "embed":
	          listenToNonDelegatedEvent("load", didHydrate);
	          break;
	        case "video":
	        case "audio":
	          for (type = 0; type < mediaEventTypes.length; type++)
	            listenToNonDelegatedEvent(mediaEventTypes[type], didHydrate);
	          break;
	        case "source":
	          listenToNonDelegatedEvent("error", didHydrate);
	          break;
	        case "img":
	        case "image":
	        case "link":
	          listenToNonDelegatedEvent("error", didHydrate);
	          listenToNonDelegatedEvent("load", didHydrate);
	          break;
	        case "details":
	          listenToNonDelegatedEvent("toggle", didHydrate);
	          break;
	        case "input":
	          checkControlledValueProps("input", props);
	          listenToNonDelegatedEvent("invalid", didHydrate);
	          validateInputProps(didHydrate, props);
	          initInput(
	            didHydrate,
	            props.value,
	            props.defaultValue,
	            props.checked,
	            props.defaultChecked,
	            props.type,
	            props.name,
	            true
	          );
	          track(didHydrate);
	          break;
	        case "option":
	          validateOptionProps(didHydrate, props);
	          break;
	        case "select":
	          checkControlledValueProps("select", props);
	          listenToNonDelegatedEvent("invalid", didHydrate);
	          validateSelectProps(didHydrate, props);
	          break;
	        case "textarea":
	          checkControlledValueProps("textarea", props),
	            listenToNonDelegatedEvent("invalid", didHydrate),
	            validateTextareaProps(didHydrate, props),
	            initTextarea(
	              didHydrate,
	              props.value,
	              props.defaultValue,
	              props.children
	            ),
	            track(didHydrate);
	      }
	      type = props.children;
	      ("string" !== typeof type &&
	        "number" !== typeof type &&
	        "bigint" !== typeof type) ||
	      didHydrate.textContent === "" + type ||
	      true === props.suppressHydrationWarning ||
	      checkForUnmatchedText(didHydrate.textContent, type)
	        ? (null != props.popover &&
	            (listenToNonDelegatedEvent("beforetoggle", didHydrate),
	            listenToNonDelegatedEvent("toggle", didHydrate)),
	          null != props.onScroll &&
	            listenToNonDelegatedEvent("scroll", didHydrate),
	          null != props.onScrollEnd &&
	            listenToNonDelegatedEvent("scrollend", didHydrate),
	          null != props.onClick && (didHydrate.onclick = noop$1),
	          (didHydrate = true))
	        : (didHydrate = false);
	      didHydrate || throwOnHydrationMismatch(fiber);
	    }
	    function popToNextHostParent(fiber) {
	      for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
	        switch (hydrationParentFiber.tag) {
	          case 5:
	          case 13:
	            rootOrSingletonContext = false;
	            return;
	          case 27:
	          case 3:
	            rootOrSingletonContext = true;
	            return;
	          default:
	            hydrationParentFiber = hydrationParentFiber.return;
	        }
	    }
	    function popHydrationState(fiber) {
	      if (fiber !== hydrationParentFiber) return false;
	      if (!isHydrating)
	        return popToNextHostParent(fiber), (isHydrating = true), false;
	      var tag = fiber.tag,
	        JSCompiler_temp;
	      if ((JSCompiler_temp = 3 !== tag && 27 !== tag)) {
	        if ((JSCompiler_temp = 5 === tag))
	          (JSCompiler_temp = fiber.type),
	            (JSCompiler_temp =
	              !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) ||
	              shouldSetTextContent(fiber.type, fiber.memoizedProps));
	        JSCompiler_temp = !JSCompiler_temp;
	      }
	      if (JSCompiler_temp && nextHydratableInstance) {
	        for (JSCompiler_temp = nextHydratableInstance; JSCompiler_temp; ) {
	          var diffNode = buildHydrationDiffNode(fiber, 0),
	            description =
	              describeHydratableInstanceForDevWarnings(JSCompiler_temp);
	          diffNode.serverTail.push(description);
	          JSCompiler_temp =
	            "Suspense" === description.type
	              ? getNextHydratableInstanceAfterSuspenseInstance(JSCompiler_temp)
	              : getNextHydratable(JSCompiler_temp.nextSibling);
	        }
	        throwOnHydrationMismatch(fiber);
	      }
	      popToNextHostParent(fiber);
	      if (13 === tag) {
	        fiber = fiber.memoizedState;
	        fiber = null !== fiber ? fiber.dehydrated : null;
	        if (!fiber)
	          throw Error(
	            "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
	          );
	        nextHydratableInstance =
	          getNextHydratableInstanceAfterSuspenseInstance(fiber);
	      } else
	        27 === tag
	          ? ((tag = nextHydratableInstance),
	            isSingletonScope(fiber.type)
	              ? ((fiber = previousHydratableOnEnteringScopedSingleton),
	                (previousHydratableOnEnteringScopedSingleton = null),
	                (nextHydratableInstance = fiber))
	              : (nextHydratableInstance = tag))
	          : (nextHydratableInstance = hydrationParentFiber
	              ? getNextHydratable(fiber.stateNode.nextSibling)
	              : null);
	      return true;
	    }
	    function resetHydrationState() {
	      nextHydratableInstance = hydrationParentFiber = null;
	      didSuspendOrErrorDEV = isHydrating = false;
	    }
	    function upgradeHydrationErrorsToRecoverable() {
	      var queuedErrors = hydrationErrors;
	      null !== queuedErrors &&
	        (null === workInProgressRootRecoverableErrors
	          ? (workInProgressRootRecoverableErrors = queuedErrors)
	          : workInProgressRootRecoverableErrors.push.apply(
	              workInProgressRootRecoverableErrors,
	              queuedErrors
	            ),
	        (hydrationErrors = null));
	      return queuedErrors;
	    }
	    function queueHydrationError(error) {
	      null === hydrationErrors
	        ? (hydrationErrors = [error])
	        : hydrationErrors.push(error);
	    }
	    function emitPendingHydrationWarnings() {
	      var diffRoot = hydrationDiffRootDEV;
	      if (null !== diffRoot) {
	        hydrationDiffRootDEV = null;
	        for (var diff = describeDiff(diffRoot); 0 < diffRoot.children.length; )
	          diffRoot = diffRoot.children[0];
	        runWithFiberInDEV(diffRoot.fiber, function () {
	          console.error(
	            "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s",
	            "https://react.dev/link/hydration-mismatch",
	            diff
	          );
	        });
	      }
	    }
	    function resetContextDependencies() {
	      lastContextDependency = currentlyRenderingFiber$1 = null;
	      isDisallowedContextReadInDEV = false;
	    }
	    function pushProvider(providerFiber, context, nextValue) {
	      push(valueCursor, context._currentValue, providerFiber);
	      context._currentValue = nextValue;
	      push(rendererCursorDEV, context._currentRenderer, providerFiber);
	      void 0 !== context._currentRenderer &&
	        null !== context._currentRenderer &&
	        context._currentRenderer !== rendererSigil &&
	        console.error(
	          "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
	        );
	      context._currentRenderer = rendererSigil;
	    }
	    function popProvider(context, providerFiber) {
	      context._currentValue = valueCursor.current;
	      var currentRenderer = rendererCursorDEV.current;
	      pop(rendererCursorDEV, providerFiber);
	      context._currentRenderer = currentRenderer;
	      pop(valueCursor, providerFiber);
	    }
	    function scheduleContextWorkOnParentPath(
	      parent,
	      renderLanes,
	      propagationRoot
	    ) {
	      for (; null !== parent; ) {
	        var alternate = parent.alternate;
	        (parent.childLanes & renderLanes) !== renderLanes
	          ? ((parent.childLanes |= renderLanes),
	            null !== alternate && (alternate.childLanes |= renderLanes))
	          : null !== alternate &&
	            (alternate.childLanes & renderLanes) !== renderLanes &&
	            (alternate.childLanes |= renderLanes);
	        if (parent === propagationRoot) break;
	        parent = parent.return;
	      }
	      parent !== propagationRoot &&
	        console.error(
	          "Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue."
	        );
	    }
	    function propagateContextChanges(
	      workInProgress,
	      contexts,
	      renderLanes,
	      forcePropagateEntireTree
	    ) {
	      var fiber = workInProgress.child;
	      null !== fiber && (fiber.return = workInProgress);
	      for (; null !== fiber; ) {
	        var list = fiber.dependencies;
	        if (null !== list) {
	          var nextFiber = fiber.child;
	          list = list.firstContext;
	          a: for (; null !== list; ) {
	            var dependency = list;
	            list = fiber;
	            for (var i = 0; i < contexts.length; i++)
	              if (dependency.context === contexts[i]) {
	                list.lanes |= renderLanes;
	                dependency = list.alternate;
	                null !== dependency && (dependency.lanes |= renderLanes);
	                scheduleContextWorkOnParentPath(
	                  list.return,
	                  renderLanes,
	                  workInProgress
	                );
	                forcePropagateEntireTree || (nextFiber = null);
	                break a;
	              }
	            list = dependency.next;
	          }
	        } else if (18 === fiber.tag) {
	          nextFiber = fiber.return;
	          if (null === nextFiber)
	            throw Error(
	              "We just came from a parent so we must have had a parent. This is a bug in React."
	            );
	          nextFiber.lanes |= renderLanes;
	          list = nextFiber.alternate;
	          null !== list && (list.lanes |= renderLanes);
	          scheduleContextWorkOnParentPath(
	            nextFiber,
	            renderLanes,
	            workInProgress
	          );
	          nextFiber = null;
	        } else nextFiber = fiber.child;
	        if (null !== nextFiber) nextFiber.return = fiber;
	        else
	          for (nextFiber = fiber; null !== nextFiber; ) {
	            if (nextFiber === workInProgress) {
	              nextFiber = null;
	              break;
	            }
	            fiber = nextFiber.sibling;
	            if (null !== fiber) {
	              fiber.return = nextFiber.return;
	              nextFiber = fiber;
	              break;
	            }
	            nextFiber = nextFiber.return;
	          }
	        fiber = nextFiber;
	      }
	    }
	    function propagateParentContextChanges(
	      current,
	      workInProgress,
	      renderLanes,
	      forcePropagateEntireTree
	    ) {
	      current = null;
	      for (
	        var parent = workInProgress, isInsidePropagationBailout = false;
	        null !== parent;

	      ) {
	        if (!isInsidePropagationBailout)
	          if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
	          else if (0 !== (parent.flags & 262144)) break;
	        if (10 === parent.tag) {
	          var currentParent = parent.alternate;
	          if (null === currentParent)
	            throw Error("Should have a current fiber. This is a bug in React.");
	          currentParent = currentParent.memoizedProps;
	          if (null !== currentParent) {
	            var context = parent.type;
	            objectIs(parent.pendingProps.value, currentParent.value) ||
	              (null !== current
	                ? current.push(context)
	                : (current = [context]));
	          }
	        } else if (parent === hostTransitionProviderCursor.current) {
	          currentParent = parent.alternate;
	          if (null === currentParent)
	            throw Error("Should have a current fiber. This is a bug in React.");
	          currentParent.memoizedState.memoizedState !==
	            parent.memoizedState.memoizedState &&
	            (null !== current
	              ? current.push(HostTransitionContext)
	              : (current = [HostTransitionContext]));
	        }
	        parent = parent.return;
	      }
	      null !== current &&
	        propagateContextChanges(
	          workInProgress,
	          current,
	          renderLanes,
	          forcePropagateEntireTree
	        );
	      workInProgress.flags |= 262144;
	    }
	    function checkIfContextChanged(currentDependencies) {
	      for (
	        currentDependencies = currentDependencies.firstContext;
	        null !== currentDependencies;

	      ) {
	        if (
	          !objectIs(
	            currentDependencies.context._currentValue,
	            currentDependencies.memoizedValue
	          )
	        )
	          return true;
	        currentDependencies = currentDependencies.next;
	      }
	      return false;
	    }
	    function prepareToReadContext(workInProgress) {
	      currentlyRenderingFiber$1 = workInProgress;
	      lastContextDependency = null;
	      workInProgress = workInProgress.dependencies;
	      null !== workInProgress && (workInProgress.firstContext = null);
	    }
	    function readContext(context) {
	      isDisallowedContextReadInDEV &&
	        console.error(
	          "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
	        );
	      return readContextForConsumer(currentlyRenderingFiber$1, context);
	    }
	    function readContextDuringReconciliation(consumer, context) {
	      null === currentlyRenderingFiber$1 && prepareToReadContext(consumer);
	      return readContextForConsumer(consumer, context);
	    }
	    function readContextForConsumer(consumer, context) {
	      var value = context._currentValue;
	      context = { context: context, memoizedValue: value, next: null };
	      if (null === lastContextDependency) {
	        if (null === consumer)
	          throw Error(
	            "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
	          );
	        lastContextDependency = context;
	        consumer.dependencies = {
	          lanes: 0,
	          firstContext: context,
	          _debugThenableState: null
	        };
	        consumer.flags |= 524288;
	      } else lastContextDependency = lastContextDependency.next = context;
	      return value;
	    }
	    function createCache() {
	      return {
	        controller: new AbortControllerLocal(),
	        data: new Map(),
	        refCount: 0
	      };
	    }
	    function retainCache(cache) {
	      cache.controller.signal.aborted &&
	        console.warn(
	          "A cache instance was retained after it was already freed. This likely indicates a bug in React."
	        );
	      cache.refCount++;
	    }
	    function releaseCache(cache) {
	      cache.refCount--;
	      0 > cache.refCount &&
	        console.warn(
	          "A cache instance was released after it was already freed. This likely indicates a bug in React."
	        );
	      0 === cache.refCount &&
	        scheduleCallback$2(NormalPriority, function () {
	          cache.controller.abort();
	        });
	    }
	    function pushNestedEffectDurations() {
	      var prevEffectDuration = profilerEffectDuration;
	      profilerEffectDuration = 0;
	      return prevEffectDuration;
	    }
	    function popNestedEffectDurations(prevEffectDuration) {
	      var elapsedTime = profilerEffectDuration;
	      profilerEffectDuration = prevEffectDuration;
	      return elapsedTime;
	    }
	    function bubbleNestedEffectDurations(prevEffectDuration) {
	      var elapsedTime = profilerEffectDuration;
	      profilerEffectDuration += prevEffectDuration;
	      return elapsedTime;
	    }
	    function startProfilerTimer(fiber) {
	      profilerStartTime = now();
	      0 > fiber.actualStartTime && (fiber.actualStartTime = profilerStartTime);
	    }
	    function stopProfilerTimerIfRunningAndRecordDuration(fiber) {
	      if (0 <= profilerStartTime) {
	        var elapsedTime = now() - profilerStartTime;
	        fiber.actualDuration += elapsedTime;
	        fiber.selfBaseDuration = elapsedTime;
	        profilerStartTime = -1;
	      }
	    }
	    function stopProfilerTimerIfRunningAndRecordIncompleteDuration(fiber) {
	      if (0 <= profilerStartTime) {
	        var elapsedTime = now() - profilerStartTime;
	        fiber.actualDuration += elapsedTime;
	        profilerStartTime = -1;
	      }
	    }
	    function recordEffectDuration() {
	      if (0 <= profilerStartTime) {
	        var elapsedTime = now() - profilerStartTime;
	        profilerStartTime = -1;
	        profilerEffectDuration += elapsedTime;
	      }
	    }
	    function startEffectTimer() {
	      profilerStartTime = now();
	    }
	    function transferActualDuration(fiber) {
	      for (var child = fiber.child; child; )
	        (fiber.actualDuration += child.actualDuration), (child = child.sibling);
	    }
	    function entangleAsyncAction(transition, thenable) {
	      if (null === currentEntangledListeners) {
	        var entangledListeners = (currentEntangledListeners = []);
	        currentEntangledPendingCount = 0;
	        currentEntangledLane = requestTransitionLane();
	        currentEntangledActionThenable = {
	          status: "pending",
	          value: void 0,
	          then: function (resolve) {
	            entangledListeners.push(resolve);
	          }
	        };
	      }
	      currentEntangledPendingCount++;
	      thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
	      return thenable;
	    }
	    function pingEngtangledActionScope() {
	      if (
	        0 === --currentEntangledPendingCount &&
	        null !== currentEntangledListeners
	      ) {
	        null !== currentEntangledActionThenable &&
	          (currentEntangledActionThenable.status = "fulfilled");
	        var listeners = currentEntangledListeners;
	        currentEntangledListeners = null;
	        currentEntangledLane = 0;
	        currentEntangledActionThenable = null;
	        for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
	      }
	    }
	    function chainThenableValue(thenable, result) {
	      var listeners = [],
	        thenableWithOverride = {
	          status: "pending",
	          value: null,
	          reason: null,
	          then: function (resolve) {
	            listeners.push(resolve);
	          }
	        };
	      thenable.then(
	        function () {
	          thenableWithOverride.status = "fulfilled";
	          thenableWithOverride.value = result;
	          for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
	        },
	        function (error) {
	          thenableWithOverride.status = "rejected";
	          thenableWithOverride.reason = error;
	          for (error = 0; error < listeners.length; error++)
	            (0, listeners[error])(void 0);
	        }
	      );
	      return thenableWithOverride;
	    }
	    function peekCacheFromPool() {
	      var cacheResumedFromPreviousRender = resumedCache.current;
	      return null !== cacheResumedFromPreviousRender
	        ? cacheResumedFromPreviousRender
	        : workInProgressRoot.pooledCache;
	    }
	    function pushTransition(offscreenWorkInProgress, prevCachePool) {
	      null === prevCachePool
	        ? push(resumedCache, resumedCache.current, offscreenWorkInProgress)
	        : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
	    }
	    function getSuspendedCache() {
	      var cacheFromPool = peekCacheFromPool();
	      return null === cacheFromPool
	        ? null
	        : { parent: CacheContext._currentValue, pool: cacheFromPool };
	    }
	    function createThenableState() {
	      return { didWarnAboutUncachedPromise: false, thenables: [] };
	    }
	    function isThenableResolved(thenable) {
	      thenable = thenable.status;
	      return "fulfilled" === thenable || "rejected" === thenable;
	    }
	    function noop$3() {}
	    function trackUsedThenable(thenableState, thenable, index) {
	      null !== ReactSharedInternals.actQueue &&
	        (ReactSharedInternals.didUsePromise = true);
	      var trackedThenables = thenableState.thenables;
	      index = trackedThenables[index];
	      void 0 === index
	        ? trackedThenables.push(thenable)
	        : index !== thenable &&
	          (thenableState.didWarnAboutUncachedPromise ||
	            ((thenableState.didWarnAboutUncachedPromise = true),
	            console.error(
	              "A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework."
	            )),
	          thenable.then(noop$3, noop$3),
	          (thenable = index));
	      switch (thenable.status) {
	        case "fulfilled":
	          return thenable.value;
	        case "rejected":
	          throw (
	            ((thenableState = thenable.reason),
	            checkIfUseWrappedInAsyncCatch(thenableState),
	            thenableState)
	          );
	        default:
	          if ("string" === typeof thenable.status)
	            thenable.then(noop$3, noop$3);
	          else {
	            thenableState = workInProgressRoot;
	            if (
	              null !== thenableState &&
	              100 < thenableState.shellSuspendCounter
	            )
	              throw Error(
	                "An unknown Component is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
	              );
	            thenableState = thenable;
	            thenableState.status = "pending";
	            thenableState.then(
	              function (fulfilledValue) {
	                if ("pending" === thenable.status) {
	                  var fulfilledThenable = thenable;
	                  fulfilledThenable.status = "fulfilled";
	                  fulfilledThenable.value = fulfilledValue;
	                }
	              },
	              function (error) {
	                if ("pending" === thenable.status) {
	                  var rejectedThenable = thenable;
	                  rejectedThenable.status = "rejected";
	                  rejectedThenable.reason = error;
	                }
	              }
	            );
	          }
	          switch (thenable.status) {
	            case "fulfilled":
	              return thenable.value;
	            case "rejected":
	              throw (
	                ((thenableState = thenable.reason),
	                checkIfUseWrappedInAsyncCatch(thenableState),
	                thenableState)
	              );
	          }
	          suspendedThenable = thenable;
	          needsToResetSuspendedThenableDEV = true;
	          throw SuspenseException;
	      }
	    }
	    function getSuspendedThenable() {
	      if (null === suspendedThenable)
	        throw Error(
	          "Expected a suspended thenable. This is a bug in React. Please file an issue."
	        );
	      var thenable = suspendedThenable;
	      suspendedThenable = null;
	      needsToResetSuspendedThenableDEV = false;
	      return thenable;
	    }
	    function checkIfUseWrappedInAsyncCatch(rejectedReason) {
	      if (
	        rejectedReason === SuspenseException ||
	        rejectedReason === SuspenseActionException
	      )
	        throw Error(
	          "Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
	        );
	    }
	    function initializeUpdateQueue(fiber) {
	      fiber.updateQueue = {
	        baseState: fiber.memoizedState,
	        firstBaseUpdate: null,
	        lastBaseUpdate: null,
	        shared: { pending: null, lanes: 0, hiddenCallbacks: null },
	        callbacks: null
	      };
	    }
	    function cloneUpdateQueue(current, workInProgress) {
	      current = current.updateQueue;
	      workInProgress.updateQueue === current &&
	        (workInProgress.updateQueue = {
	          baseState: current.baseState,
	          firstBaseUpdate: current.firstBaseUpdate,
	          lastBaseUpdate: current.lastBaseUpdate,
	          shared: current.shared,
	          callbacks: null
	        });
	    }
	    function createUpdate(lane) {
	      return {
	        lane: lane,
	        tag: UpdateState,
	        payload: null,
	        callback: null,
	        next: null
	      };
	    }
	    function enqueueUpdate(fiber, update, lane) {
	      var updateQueue = fiber.updateQueue;
	      if (null === updateQueue) return null;
	      updateQueue = updateQueue.shared;
	      if (
	        currentlyProcessingQueue === updateQueue &&
	        !didWarnUpdateInsideUpdate
	      ) {
	        var componentName = getComponentNameFromFiber(fiber);
	        console.error(
	          "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",
	          componentName
	        );
	        didWarnUpdateInsideUpdate = true;
	      }
	      if ((executionContext & RenderContext) !== NoContext)
	        return (
	          (componentName = updateQueue.pending),
	          null === componentName
	            ? (update.next = update)
	            : ((update.next = componentName.next),
	              (componentName.next = update)),
	          (updateQueue.pending = update),
	          (update = getRootForUpdatedFiber(fiber)),
	          markUpdateLaneFromFiberToRoot(fiber, null, lane),
	          update
	        );
	      enqueueUpdate$1(fiber, updateQueue, update, lane);
	      return getRootForUpdatedFiber(fiber);
	    }
	    function entangleTransitions(root, fiber, lane) {
	      fiber = fiber.updateQueue;
	      if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194048))) {
	        var queueLanes = fiber.lanes;
	        queueLanes &= root.pendingLanes;
	        lane |= queueLanes;
	        fiber.lanes = lane;
	        markRootEntangled(root, lane);
	      }
	    }
	    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
	      var queue = workInProgress.updateQueue,
	        current = workInProgress.alternate;
	      if (
	        null !== current &&
	        ((current = current.updateQueue), queue === current)
	      ) {
	        var newFirst = null,
	          newLast = null;
	        queue = queue.firstBaseUpdate;
	        if (null !== queue) {
	          do {
	            var clone = {
	              lane: queue.lane,
	              tag: queue.tag,
	              payload: queue.payload,
	              callback: null,
	              next: null
	            };
	            null === newLast
	              ? (newFirst = newLast = clone)
	              : (newLast = newLast.next = clone);
	            queue = queue.next;
	          } while (null !== queue);
	          null === newLast
	            ? (newFirst = newLast = capturedUpdate)
	            : (newLast = newLast.next = capturedUpdate);
	        } else newFirst = newLast = capturedUpdate;
	        queue = {
	          baseState: current.baseState,
	          firstBaseUpdate: newFirst,
	          lastBaseUpdate: newLast,
	          shared: current.shared,
	          callbacks: current.callbacks
	        };
	        workInProgress.updateQueue = queue;
	        return;
	      }
	      workInProgress = queue.lastBaseUpdate;
	      null === workInProgress
	        ? (queue.firstBaseUpdate = capturedUpdate)
	        : (workInProgress.next = capturedUpdate);
	      queue.lastBaseUpdate = capturedUpdate;
	    }
	    function suspendIfUpdateReadFromEntangledAsyncAction() {
	      if (didReadFromEntangledAsyncAction) {
	        var entangledActionThenable = currentEntangledActionThenable;
	        if (null !== entangledActionThenable) throw entangledActionThenable;
	      }
	    }
	    function processUpdateQueue(
	      workInProgress,
	      props,
	      instance$jscomp$0,
	      renderLanes
	    ) {
	      didReadFromEntangledAsyncAction = false;
	      var queue = workInProgress.updateQueue;
	      hasForceUpdate = false;
	      currentlyProcessingQueue = queue.shared;
	      var firstBaseUpdate = queue.firstBaseUpdate,
	        lastBaseUpdate = queue.lastBaseUpdate,
	        pendingQueue = queue.shared.pending;
	      if (null !== pendingQueue) {
	        queue.shared.pending = null;
	        var lastPendingUpdate = pendingQueue,
	          firstPendingUpdate = lastPendingUpdate.next;
	        lastPendingUpdate.next = null;
	        null === lastBaseUpdate
	          ? (firstBaseUpdate = firstPendingUpdate)
	          : (lastBaseUpdate.next = firstPendingUpdate);
	        lastBaseUpdate = lastPendingUpdate;
	        var current = workInProgress.alternate;
	        null !== current &&
	          ((current = current.updateQueue),
	          (pendingQueue = current.lastBaseUpdate),
	          pendingQueue !== lastBaseUpdate &&
	            (null === pendingQueue
	              ? (current.firstBaseUpdate = firstPendingUpdate)
	              : (pendingQueue.next = firstPendingUpdate),
	            (current.lastBaseUpdate = lastPendingUpdate)));
	      }
	      if (null !== firstBaseUpdate) {
	        var newState = queue.baseState;
	        lastBaseUpdate = 0;
	        current = firstPendingUpdate = lastPendingUpdate = null;
	        pendingQueue = firstBaseUpdate;
	        do {
	          var updateLane = pendingQueue.lane & -536870913,
	            isHiddenUpdate = updateLane !== pendingQueue.lane;
	          if (
	            isHiddenUpdate
	              ? (workInProgressRootRenderLanes & updateLane) === updateLane
	              : (renderLanes & updateLane) === updateLane
	          ) {
	            0 !== updateLane &&
	              updateLane === currentEntangledLane &&
	              (didReadFromEntangledAsyncAction = true);
	            null !== current &&
	              (current = current.next =
	                {
	                  lane: 0,
	                  tag: pendingQueue.tag,
	                  payload: pendingQueue.payload,
	                  callback: null,
	                  next: null
	                });
	            a: {
	              updateLane = workInProgress;
	              var partialState = pendingQueue;
	              var nextProps = props,
	                instance = instance$jscomp$0;
	              switch (partialState.tag) {
	                case ReplaceState:
	                  partialState = partialState.payload;
	                  if ("function" === typeof partialState) {
	                    isDisallowedContextReadInDEV = true;
	                    var nextState = partialState.call(
	                      instance,
	                      newState,
	                      nextProps
	                    );
	                    if (updateLane.mode & StrictLegacyMode) {
	                      setIsStrictModeForDevtools(true);
	                      try {
	                        partialState.call(instance, newState, nextProps);
	                      } finally {
	                        setIsStrictModeForDevtools(false);
	                      }
	                    }
	                    isDisallowedContextReadInDEV = false;
	                    newState = nextState;
	                    break a;
	                  }
	                  newState = partialState;
	                  break a;
	                case CaptureUpdate:
	                  updateLane.flags = (updateLane.flags & -65537) | 128;
	                case UpdateState:
	                  nextState = partialState.payload;
	                  if ("function" === typeof nextState) {
	                    isDisallowedContextReadInDEV = true;
	                    partialState = nextState.call(
	                      instance,
	                      newState,
	                      nextProps
	                    );
	                    if (updateLane.mode & StrictLegacyMode) {
	                      setIsStrictModeForDevtools(true);
	                      try {
	                        nextState.call(instance, newState, nextProps);
	                      } finally {
	                        setIsStrictModeForDevtools(false);
	                      }
	                    }
	                    isDisallowedContextReadInDEV = false;
	                  } else partialState = nextState;
	                  if (null === partialState || void 0 === partialState) break a;
	                  newState = assign({}, newState, partialState);
	                  break a;
	                case ForceUpdate:
	                  hasForceUpdate = true;
	              }
	            }
	            updateLane = pendingQueue.callback;
	            null !== updateLane &&
	              ((workInProgress.flags |= 64),
	              isHiddenUpdate && (workInProgress.flags |= 8192),
	              (isHiddenUpdate = queue.callbacks),
	              null === isHiddenUpdate
	                ? (queue.callbacks = [updateLane])
	                : isHiddenUpdate.push(updateLane));
	          } else
	            (isHiddenUpdate = {
	              lane: updateLane,
	              tag: pendingQueue.tag,
	              payload: pendingQueue.payload,
	              callback: pendingQueue.callback,
	              next: null
	            }),
	              null === current
	                ? ((firstPendingUpdate = current = isHiddenUpdate),
	                  (lastPendingUpdate = newState))
	                : (current = current.next = isHiddenUpdate),
	              (lastBaseUpdate |= updateLane);
	          pendingQueue = pendingQueue.next;
	          if (null === pendingQueue)
	            if (((pendingQueue = queue.shared.pending), null === pendingQueue))
	              break;
	            else
	              (isHiddenUpdate = pendingQueue),
	                (pendingQueue = isHiddenUpdate.next),
	                (isHiddenUpdate.next = null),
	                (queue.lastBaseUpdate = isHiddenUpdate),
	                (queue.shared.pending = null);
	        } while (1);
	        null === current && (lastPendingUpdate = newState);
	        queue.baseState = lastPendingUpdate;
	        queue.firstBaseUpdate = firstPendingUpdate;
	        queue.lastBaseUpdate = current;
	        null === firstBaseUpdate && (queue.shared.lanes = 0);
	        workInProgressRootSkippedLanes |= lastBaseUpdate;
	        workInProgress.lanes = lastBaseUpdate;
	        workInProgress.memoizedState = newState;
	      }
	      currentlyProcessingQueue = null;
	    }
	    function callCallback(callback, context) {
	      if ("function" !== typeof callback)
	        throw Error(
	          "Invalid argument passed as callback. Expected a function. Instead received: " +
	            callback
	        );
	      callback.call(context);
	    }
	    function commitHiddenCallbacks(updateQueue, context) {
	      var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
	      if (null !== hiddenCallbacks)
	        for (
	          updateQueue.shared.hiddenCallbacks = null, updateQueue = 0;
	          updateQueue < hiddenCallbacks.length;
	          updateQueue++
	        )
	          callCallback(hiddenCallbacks[updateQueue], context);
	    }
	    function commitCallbacks(updateQueue, context) {
	      var callbacks = updateQueue.callbacks;
	      if (null !== callbacks)
	        for (
	          updateQueue.callbacks = null, updateQueue = 0;
	          updateQueue < callbacks.length;
	          updateQueue++
	        )
	          callCallback(callbacks[updateQueue], context);
	    }
	    function pushHiddenContext(fiber, context) {
	      var prevEntangledRenderLanes = entangledRenderLanes;
	      push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);
	      push(currentTreeHiddenStackCursor, context, fiber);
	      entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;
	    }
	    function reuseHiddenContextOnStack(fiber) {
	      push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);
	      push(
	        currentTreeHiddenStackCursor,
	        currentTreeHiddenStackCursor.current,
	        fiber
	      );
	    }
	    function popHiddenContext(fiber) {
	      entangledRenderLanes = prevEntangledRenderLanesCursor.current;
	      pop(currentTreeHiddenStackCursor, fiber);
	      pop(prevEntangledRenderLanesCursor, fiber);
	    }
	    function mountHookTypesDev() {
	      var hookName = currentHookNameInDev;
	      null === hookTypesDev
	        ? (hookTypesDev = [hookName])
	        : hookTypesDev.push(hookName);
	    }
	    function updateHookTypesDev() {
	      var hookName = currentHookNameInDev;
	      if (
	        null !== hookTypesDev &&
	        (hookTypesUpdateIndexDev++,
	        hookTypesDev[hookTypesUpdateIndexDev] !== hookName)
	      ) {
	        var componentName = getComponentNameFromFiber(currentlyRenderingFiber);
	        if (
	          !didWarnAboutMismatchedHooksForComponent.has(componentName) &&
	          (didWarnAboutMismatchedHooksForComponent.add(componentName),
	          null !== hookTypesDev)
	        ) {
	          for (var table = "", i = 0; i <= hookTypesUpdateIndexDev; i++) {
	            var oldHookName = hookTypesDev[i],
	              newHookName =
	                i === hookTypesUpdateIndexDev ? hookName : oldHookName;
	            for (
	              oldHookName = i + 1 + ". " + oldHookName;
	              30 > oldHookName.length;

	            )
	              oldHookName += " ";
	            oldHookName += newHookName + "\n";
	            table += oldHookName;
	          }
	          console.error(
	            "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
	            componentName,
	            table
	          );
	        }
	      }
	    }
	    function checkDepsAreArrayDev(deps) {
	      void 0 === deps ||
	        null === deps ||
	        isArrayImpl(deps) ||
	        console.error(
	          "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
	          currentHookNameInDev,
	          typeof deps
	        );
	    }
	    function warnOnUseFormStateInDev() {
	      var componentName = getComponentNameFromFiber(currentlyRenderingFiber);
	      didWarnAboutUseFormState.has(componentName) ||
	        (didWarnAboutUseFormState.add(componentName),
	        console.error(
	          "ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",
	          componentName
	        ));
	    }
	    function throwInvalidHookError() {
	      throw Error(
	        "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
	      );
	    }
	    function areHookInputsEqual(nextDeps, prevDeps) {
	      if (ignorePreviousDependencies) return false;
	      if (null === prevDeps)
	        return (
	          console.error(
	            "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
	            currentHookNameInDev
	          ),
	          false
	        );
	      nextDeps.length !== prevDeps.length &&
	        console.error(
	          "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
	          currentHookNameInDev,
	          "[" + prevDeps.join(", ") + "]",
	          "[" + nextDeps.join(", ") + "]"
	        );
	      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
	        if (!objectIs(nextDeps[i], prevDeps[i])) return false;
	      return true;
	    }
	    function renderWithHooks(
	      current,
	      workInProgress,
	      Component,
	      props,
	      secondArg,
	      nextRenderLanes
	    ) {
	      renderLanes = nextRenderLanes;
	      currentlyRenderingFiber = workInProgress;
	      hookTypesDev = null !== current ? current._debugHookTypes : null;
	      hookTypesUpdateIndexDev = -1;
	      ignorePreviousDependencies =
	        null !== current && current.type !== workInProgress.type;
	      if (
	        "[object AsyncFunction]" ===
	          Object.prototype.toString.call(Component) ||
	        "[object AsyncGeneratorFunction]" ===
	          Object.prototype.toString.call(Component)
	      )
	        (nextRenderLanes = getComponentNameFromFiber(currentlyRenderingFiber)),
	          didWarnAboutAsyncClientComponent.has(nextRenderLanes) ||
	            (didWarnAboutAsyncClientComponent.add(nextRenderLanes),
	            console.error(
	              "%s is an async Client Component. Only Server Components can be async at the moment. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.",
	              null === nextRenderLanes
	                ? "An unknown Component"
	                : "<" + nextRenderLanes + ">"
	            ));
	      workInProgress.memoizedState = null;
	      workInProgress.updateQueue = null;
	      workInProgress.lanes = 0;
	      ReactSharedInternals.H =
	        null !== current && null !== current.memoizedState
	          ? HooksDispatcherOnUpdateInDEV
	          : null !== hookTypesDev
	            ? HooksDispatcherOnMountWithHookTypesInDEV
	            : HooksDispatcherOnMountInDEV;
	      shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes =
	        (workInProgress.mode & StrictLegacyMode) !== NoMode;
	      var children = callComponentInDEV(Component, props, secondArg);
	      shouldDoubleInvokeUserFnsInHooksDEV = false;
	      didScheduleRenderPhaseUpdateDuringThisPass &&
	        (children = renderWithHooksAgain(
	          workInProgress,
	          Component,
	          props,
	          secondArg
	        ));
	      if (nextRenderLanes) {
	        setIsStrictModeForDevtools(true);
	        try {
	          children = renderWithHooksAgain(
	            workInProgress,
	            Component,
	            props,
	            secondArg
	          );
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	      finishRenderingHooks(current, workInProgress);
	      return children;
	    }
	    function finishRenderingHooks(current, workInProgress) {
	      workInProgress._debugHookTypes = hookTypesDev;
	      null === workInProgress.dependencies
	        ? null !== thenableState$1 &&
	          (workInProgress.dependencies = {
	            lanes: 0,
	            firstContext: null,
	            _debugThenableState: thenableState$1
	          })
	        : (workInProgress.dependencies._debugThenableState = thenableState$1);
	      ReactSharedInternals.H = ContextOnlyDispatcher;
	      var didRenderTooFewHooks =
	        null !== currentHook && null !== currentHook.next;
	      renderLanes = 0;
	      hookTypesDev =
	        currentHookNameInDev =
	        workInProgressHook =
	        currentHook =
	        currentlyRenderingFiber =
	          null;
	      hookTypesUpdateIndexDev = -1;
	      null !== current &&
	        (current.flags & 65011712) !== (workInProgress.flags & 65011712) &&
	        console.error(
	          "Internal React error: Expected static flag was missing. Please notify the React team."
	        );
	      didScheduleRenderPhaseUpdate = false;
	      thenableIndexCounter$1 = 0;
	      thenableState$1 = null;
	      if (didRenderTooFewHooks)
	        throw Error(
	          "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
	        );
	      null === current ||
	        didReceiveUpdate ||
	        ((current = current.dependencies),
	        null !== current &&
	          checkIfContextChanged(current) &&
	          (didReceiveUpdate = true));
	      needsToResetSuspendedThenableDEV
	        ? ((needsToResetSuspendedThenableDEV = false), (current = true))
	        : (current = false);
	      current &&
	        ((workInProgress =
	          getComponentNameFromFiber(workInProgress) || "Unknown"),
	        didWarnAboutUseWrappedInTryCatch.has(workInProgress) ||
	          didWarnAboutAsyncClientComponent.has(workInProgress) ||
	          (didWarnAboutUseWrappedInTryCatch.add(workInProgress),
	          console.error(
	            "`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary."
	          )));
	    }
	    function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
	      currentlyRenderingFiber = workInProgress;
	      var numberOfReRenders = 0;
	      do {
	        didScheduleRenderPhaseUpdateDuringThisPass && (thenableState$1 = null);
	        thenableIndexCounter$1 = 0;
	        didScheduleRenderPhaseUpdateDuringThisPass = false;
	        if (numberOfReRenders >= RE_RENDER_LIMIT)
	          throw Error(
	            "Too many re-renders. React limits the number of renders to prevent an infinite loop."
	          );
	        numberOfReRenders += 1;
	        ignorePreviousDependencies = false;
	        workInProgressHook = currentHook = null;
	        if (null != workInProgress.updateQueue) {
	          var children = workInProgress.updateQueue;
	          children.lastEffect = null;
	          children.events = null;
	          children.stores = null;
	          null != children.memoCache && (children.memoCache.index = 0);
	        }
	        hookTypesUpdateIndexDev = -1;
	        ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;
	        children = callComponentInDEV(Component, props, secondArg);
	      } while (didScheduleRenderPhaseUpdateDuringThisPass);
	      return children;
	    }
	    function TransitionAwareHostComponent() {
	      var dispatcher = ReactSharedInternals.H,
	        maybeThenable = dispatcher.useState()[0];
	      maybeThenable =
	        "function" === typeof maybeThenable.then
	          ? useThenable(maybeThenable)
	          : maybeThenable;
	      dispatcher = dispatcher.useState()[0];
	      (null !== currentHook ? currentHook.memoizedState : null) !==
	        dispatcher && (currentlyRenderingFiber.flags |= 1024);
	      return maybeThenable;
	    }
	    function checkDidRenderIdHook() {
	      var didRenderIdHook = 0 !== localIdCounter;
	      localIdCounter = 0;
	      return didRenderIdHook;
	    }
	    function bailoutHooks(current, workInProgress, lanes) {
	      workInProgress.updateQueue = current.updateQueue;
	      workInProgress.flags =
	        (workInProgress.mode & StrictEffectsMode) !== NoMode
	          ? workInProgress.flags & -402655237
	          : workInProgress.flags & -2053;
	      current.lanes &= ~lanes;
	    }
	    function resetHooksOnUnwind(workInProgress) {
	      if (didScheduleRenderPhaseUpdate) {
	        for (
	          workInProgress = workInProgress.memoizedState;
	          null !== workInProgress;

	        ) {
	          var queue = workInProgress.queue;
	          null !== queue && (queue.pending = null);
	          workInProgress = workInProgress.next;
	        }
	        didScheduleRenderPhaseUpdate = false;
	      }
	      renderLanes = 0;
	      hookTypesDev =
	        workInProgressHook =
	        currentHook =
	        currentlyRenderingFiber =
	          null;
	      hookTypesUpdateIndexDev = -1;
	      currentHookNameInDev = null;
	      didScheduleRenderPhaseUpdateDuringThisPass = false;
	      thenableIndexCounter$1 = localIdCounter = 0;
	      thenableState$1 = null;
	    }
	    function mountWorkInProgressHook() {
	      var hook = {
	        memoizedState: null,
	        baseState: null,
	        baseQueue: null,
	        queue: null,
	        next: null
	      };
	      null === workInProgressHook
	        ? (currentlyRenderingFiber.memoizedState = workInProgressHook = hook)
	        : (workInProgressHook = workInProgressHook.next = hook);
	      return workInProgressHook;
	    }
	    function updateWorkInProgressHook() {
	      if (null === currentHook) {
	        var nextCurrentHook = currentlyRenderingFiber.alternate;
	        nextCurrentHook =
	          null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
	      } else nextCurrentHook = currentHook.next;
	      var nextWorkInProgressHook =
	        null === workInProgressHook
	          ? currentlyRenderingFiber.memoizedState
	          : workInProgressHook.next;
	      if (null !== nextWorkInProgressHook)
	        (workInProgressHook = nextWorkInProgressHook),
	          (currentHook = nextCurrentHook);
	      else {
	        if (null === nextCurrentHook) {
	          if (null === currentlyRenderingFiber.alternate)
	            throw Error(
	              "Update hook called on initial render. This is likely a bug in React. Please file an issue."
	            );
	          throw Error("Rendered more hooks than during the previous render.");
	        }
	        currentHook = nextCurrentHook;
	        nextCurrentHook = {
	          memoizedState: currentHook.memoizedState,
	          baseState: currentHook.baseState,
	          baseQueue: currentHook.baseQueue,
	          queue: currentHook.queue,
	          next: null
	        };
	        null === workInProgressHook
	          ? (currentlyRenderingFiber.memoizedState = workInProgressHook =
	              nextCurrentHook)
	          : (workInProgressHook = workInProgressHook.next = nextCurrentHook);
	      }
	      return workInProgressHook;
	    }
	    function createFunctionComponentUpdateQueue() {
	      return { lastEffect: null, events: null, stores: null, memoCache: null };
	    }
	    function useThenable(thenable) {
	      var index = thenableIndexCounter$1;
	      thenableIndexCounter$1 += 1;
	      null === thenableState$1 && (thenableState$1 = createThenableState());
	      thenable = trackUsedThenable(thenableState$1, thenable, index);
	      index = currentlyRenderingFiber;
	      null ===
	        (null === workInProgressHook
	          ? index.memoizedState
	          : workInProgressHook.next) &&
	        ((index = index.alternate),
	        (ReactSharedInternals.H =
	          null !== index && null !== index.memoizedState
	            ? HooksDispatcherOnUpdateInDEV
	            : HooksDispatcherOnMountInDEV));
	      return thenable;
	    }
	    function use(usable) {
	      if (null !== usable && "object" === typeof usable) {
	        if ("function" === typeof usable.then) return useThenable(usable);
	        if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
	      }
	      throw Error("An unsupported type was passed to use(): " + String(usable));
	    }
	    function useMemoCache(size) {
	      var memoCache = null,
	        updateQueue = currentlyRenderingFiber.updateQueue;
	      null !== updateQueue && (memoCache = updateQueue.memoCache);
	      if (null == memoCache) {
	        var current = currentlyRenderingFiber.alternate;
	        null !== current &&
	          ((current = current.updateQueue),
	          null !== current &&
	            ((current = current.memoCache),
	            null != current &&
	              (memoCache = {
	                data: current.data.map(function (array) {
	                  return array.slice();
	                }),
	                index: 0
	              })));
	      }
	      null == memoCache && (memoCache = { data: [], index: 0 });
	      null === updateQueue &&
	        ((updateQueue = createFunctionComponentUpdateQueue()),
	        (currentlyRenderingFiber.updateQueue = updateQueue));
	      updateQueue.memoCache = memoCache;
	      updateQueue = memoCache.data[memoCache.index];
	      if (void 0 === updateQueue || ignorePreviousDependencies)
	        for (
	          updateQueue = memoCache.data[memoCache.index] = Array(size),
	            current = 0;
	          current < size;
	          current++
	        )
	          updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
	      else
	        updateQueue.length !== size &&
	          console.error(
	            "Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",
	            updateQueue.length,
	            size
	          );
	      memoCache.index++;
	      return updateQueue;
	    }
	    function basicStateReducer(state, action) {
	      return "function" === typeof action ? action(state) : action;
	    }
	    function mountReducer(reducer, initialArg, init) {
	      var hook = mountWorkInProgressHook();
	      if (void 0 !== init) {
	        var initialState = init(initialArg);
	        if (shouldDoubleInvokeUserFnsInHooksDEV) {
	          setIsStrictModeForDevtools(true);
	          try {
	            init(initialArg);
	          } finally {
	            setIsStrictModeForDevtools(false);
	          }
	        }
	      } else initialState = initialArg;
	      hook.memoizedState = hook.baseState = initialState;
	      reducer = {
	        pending: null,
	        lanes: 0,
	        dispatch: null,
	        lastRenderedReducer: reducer,
	        lastRenderedState: initialState
	      };
	      hook.queue = reducer;
	      reducer = reducer.dispatch = dispatchReducerAction.bind(
	        null,
	        currentlyRenderingFiber,
	        reducer
	      );
	      return [hook.memoizedState, reducer];
	    }
	    function updateReducer(reducer) {
	      var hook = updateWorkInProgressHook();
	      return updateReducerImpl(hook, currentHook, reducer);
	    }
	    function updateReducerImpl(hook, current, reducer) {
	      var queue = hook.queue;
	      if (null === queue)
	        throw Error(
	          "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
	        );
	      queue.lastRenderedReducer = reducer;
	      var baseQueue = hook.baseQueue,
	        pendingQueue = queue.pending;
	      if (null !== pendingQueue) {
	        if (null !== baseQueue) {
	          var baseFirst = baseQueue.next;
	          baseQueue.next = pendingQueue.next;
	          pendingQueue.next = baseFirst;
	        }
	        current.baseQueue !== baseQueue &&
	          console.error(
	            "Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
	          );
	        current.baseQueue = baseQueue = pendingQueue;
	        queue.pending = null;
	      }
	      pendingQueue = hook.baseState;
	      if (null === baseQueue) hook.memoizedState = pendingQueue;
	      else {
	        current = baseQueue.next;
	        var newBaseQueueFirst = (baseFirst = null),
	          newBaseQueueLast = null,
	          update = current,
	          didReadFromEntangledAsyncAction = false;
	        do {
	          var updateLane = update.lane & -536870913;
	          if (
	            updateLane !== update.lane
	              ? (workInProgressRootRenderLanes & updateLane) === updateLane
	              : (renderLanes & updateLane) === updateLane
	          ) {
	            var revertLane = update.revertLane;
	            if (0 === revertLane)
	              null !== newBaseQueueLast &&
	                (newBaseQueueLast = newBaseQueueLast.next =
	                  {
	                    lane: 0,
	                    revertLane: 0,
	                    action: update.action,
	                    hasEagerState: update.hasEagerState,
	                    eagerState: update.eagerState,
	                    next: null
	                  }),
	                updateLane === currentEntangledLane &&
	                  (didReadFromEntangledAsyncAction = true);
	            else if ((renderLanes & revertLane) === revertLane) {
	              update = update.next;
	              revertLane === currentEntangledLane &&
	                (didReadFromEntangledAsyncAction = true);
	              continue;
	            } else
	              (updateLane = {
	                lane: 0,
	                revertLane: update.revertLane,
	                action: update.action,
	                hasEagerState: update.hasEagerState,
	                eagerState: update.eagerState,
	                next: null
	              }),
	                null === newBaseQueueLast
	                  ? ((newBaseQueueFirst = newBaseQueueLast = updateLane),
	                    (baseFirst = pendingQueue))
	                  : (newBaseQueueLast = newBaseQueueLast.next = updateLane),
	                (currentlyRenderingFiber.lanes |= revertLane),
	                (workInProgressRootSkippedLanes |= revertLane);
	            updateLane = update.action;
	            shouldDoubleInvokeUserFnsInHooksDEV &&
	              reducer(pendingQueue, updateLane);
	            pendingQueue = update.hasEagerState
	              ? update.eagerState
	              : reducer(pendingQueue, updateLane);
	          } else
	            (revertLane = {
	              lane: updateLane,
	              revertLane: update.revertLane,
	              action: update.action,
	              hasEagerState: update.hasEagerState,
	              eagerState: update.eagerState,
	              next: null
	            }),
	              null === newBaseQueueLast
	                ? ((newBaseQueueFirst = newBaseQueueLast = revertLane),
	                  (baseFirst = pendingQueue))
	                : (newBaseQueueLast = newBaseQueueLast.next = revertLane),
	              (currentlyRenderingFiber.lanes |= updateLane),
	              (workInProgressRootSkippedLanes |= updateLane);
	          update = update.next;
	        } while (null !== update && update !== current);
	        null === newBaseQueueLast
	          ? (baseFirst = pendingQueue)
	          : (newBaseQueueLast.next = newBaseQueueFirst);
	        if (
	          !objectIs(pendingQueue, hook.memoizedState) &&
	          ((didReceiveUpdate = true),
	          didReadFromEntangledAsyncAction &&
	            ((reducer = currentEntangledActionThenable), null !== reducer))
	        )
	          throw reducer;
	        hook.memoizedState = pendingQueue;
	        hook.baseState = baseFirst;
	        hook.baseQueue = newBaseQueueLast;
	        queue.lastRenderedState = pendingQueue;
	      }
	      null === baseQueue && (queue.lanes = 0);
	      return [hook.memoizedState, queue.dispatch];
	    }
	    function rerenderReducer(reducer) {
	      var hook = updateWorkInProgressHook(),
	        queue = hook.queue;
	      if (null === queue)
	        throw Error(
	          "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
	        );
	      queue.lastRenderedReducer = reducer;
	      var dispatch = queue.dispatch,
	        lastRenderPhaseUpdate = queue.pending,
	        newState = hook.memoizedState;
	      if (null !== lastRenderPhaseUpdate) {
	        queue.pending = null;
	        var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);
	        do
	          (newState = reducer(newState, update.action)), (update = update.next);
	        while (update !== lastRenderPhaseUpdate);
	        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
	        hook.memoizedState = newState;
	        null === hook.baseQueue && (hook.baseState = newState);
	        queue.lastRenderedState = newState;
	      }
	      return [newState, dispatch];
	    }
	    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	      var fiber = currentlyRenderingFiber,
	        hook = mountWorkInProgressHook();
	      if (isHydrating) {
	        if (void 0 === getServerSnapshot)
	          throw Error(
	            "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
	          );
	        var nextSnapshot = getServerSnapshot();
	        didWarnUncachedGetSnapshot ||
	          nextSnapshot === getServerSnapshot() ||
	          (console.error(
	            "The result of getServerSnapshot should be cached to avoid an infinite loop"
	          ),
	          (didWarnUncachedGetSnapshot = true));
	      } else {
	        nextSnapshot = getSnapshot();
	        didWarnUncachedGetSnapshot ||
	          ((getServerSnapshot = getSnapshot()),
	          objectIs(nextSnapshot, getServerSnapshot) ||
	            (console.error(
	              "The result of getSnapshot should be cached to avoid an infinite loop"
	            ),
	            (didWarnUncachedGetSnapshot = true)));
	        if (null === workInProgressRoot)
	          throw Error(
	            "Expected a work-in-progress root. This is a bug in React. Please file an issue."
	          );
	        0 !== (workInProgressRootRenderLanes & 124) ||
	          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
	      }
	      hook.memoizedState = nextSnapshot;
	      getServerSnapshot = { value: nextSnapshot, getSnapshot: getSnapshot };
	      hook.queue = getServerSnapshot;
	      mountEffect(
	        subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe),
	        [subscribe]
	      );
	      fiber.flags |= 2048;
	      pushSimpleEffect(
	        HasEffect | Passive,
	        createEffectInstance(),
	        updateStoreInstance.bind(
	          null,
	          fiber,
	          getServerSnapshot,
	          nextSnapshot,
	          getSnapshot
	        ),
	        null
	      );
	      return nextSnapshot;
	    }
	    function updateSyncExternalStore(
	      subscribe,
	      getSnapshot,
	      getServerSnapshot
	    ) {
	      var fiber = currentlyRenderingFiber,
	        hook = updateWorkInProgressHook(),
	        isHydrating$jscomp$0 = isHydrating;
	      if (isHydrating$jscomp$0) {
	        if (void 0 === getServerSnapshot)
	          throw Error(
	            "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
	          );
	        getServerSnapshot = getServerSnapshot();
	      } else if (
	        ((getServerSnapshot = getSnapshot()), !didWarnUncachedGetSnapshot)
	      ) {
	        var cachedSnapshot = getSnapshot();
	        objectIs(getServerSnapshot, cachedSnapshot) ||
	          (console.error(
	            "The result of getSnapshot should be cached to avoid an infinite loop"
	          ),
	          (didWarnUncachedGetSnapshot = true));
	      }
	      if (
	        (cachedSnapshot = !objectIs(
	          (currentHook || hook).memoizedState,
	          getServerSnapshot
	        ))
	      )
	        (hook.memoizedState = getServerSnapshot), (didReceiveUpdate = true);
	      hook = hook.queue;
	      var create = subscribeToStore.bind(null, fiber, hook, subscribe);
	      updateEffectImpl(2048, Passive, create, [subscribe]);
	      if (
	        hook.getSnapshot !== getSnapshot ||
	        cachedSnapshot ||
	        (null !== workInProgressHook &&
	          workInProgressHook.memoizedState.tag & HasEffect)
	      ) {
	        fiber.flags |= 2048;
	        pushSimpleEffect(
	          HasEffect | Passive,
	          createEffectInstance(),
	          updateStoreInstance.bind(
	            null,
	            fiber,
	            hook,
	            getServerSnapshot,
	            getSnapshot
	          ),
	          null
	        );
	        if (null === workInProgressRoot)
	          throw Error(
	            "Expected a work-in-progress root. This is a bug in React. Please file an issue."
	          );
	        isHydrating$jscomp$0 ||
	          0 !== (renderLanes & 124) ||
	          pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
	      }
	      return getServerSnapshot;
	    }
	    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
	      fiber.flags |= 16384;
	      fiber = { getSnapshot: getSnapshot, value: renderedSnapshot };
	      getSnapshot = currentlyRenderingFiber.updateQueue;
	      null === getSnapshot
	        ? ((getSnapshot = createFunctionComponentUpdateQueue()),
	          (currentlyRenderingFiber.updateQueue = getSnapshot),
	          (getSnapshot.stores = [fiber]))
	        : ((renderedSnapshot = getSnapshot.stores),
	          null === renderedSnapshot
	            ? (getSnapshot.stores = [fiber])
	            : renderedSnapshot.push(fiber));
	    }
	    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
	      inst.value = nextSnapshot;
	      inst.getSnapshot = getSnapshot;
	      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
	    }
	    function subscribeToStore(fiber, inst, subscribe) {
	      return subscribe(function () {
	        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
	      });
	    }
	    function checkIfSnapshotChanged(inst) {
	      var latestGetSnapshot = inst.getSnapshot;
	      inst = inst.value;
	      try {
	        var nextValue = latestGetSnapshot();
	        return !objectIs(inst, nextValue);
	      } catch (error) {
	        return true;
	      }
	    }
	    function forceStoreRerender(fiber) {
	      var root = enqueueConcurrentRenderForLane(fiber, 2);
	      null !== root && scheduleUpdateOnFiber(root, fiber, 2);
	    }
	    function mountStateImpl(initialState) {
	      var hook = mountWorkInProgressHook();
	      if ("function" === typeof initialState) {
	        var initialStateInitializer = initialState;
	        initialState = initialStateInitializer();
	        if (shouldDoubleInvokeUserFnsInHooksDEV) {
	          setIsStrictModeForDevtools(true);
	          try {
	            initialStateInitializer();
	          } finally {
	            setIsStrictModeForDevtools(false);
	          }
	        }
	      }
	      hook.memoizedState = hook.baseState = initialState;
	      hook.queue = {
	        pending: null,
	        lanes: 0,
	        dispatch: null,
	        lastRenderedReducer: basicStateReducer,
	        lastRenderedState: initialState
	      };
	      return hook;
	    }
	    function mountState(initialState) {
	      initialState = mountStateImpl(initialState);
	      var queue = initialState.queue,
	        dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
	      queue.dispatch = dispatch;
	      return [initialState.memoizedState, dispatch];
	    }
	    function mountOptimistic(passthrough) {
	      var hook = mountWorkInProgressHook();
	      hook.memoizedState = hook.baseState = passthrough;
	      var queue = {
	        pending: null,
	        lanes: 0,
	        dispatch: null,
	        lastRenderedReducer: null,
	        lastRenderedState: null
	      };
	      hook.queue = queue;
	      hook = dispatchOptimisticSetState.bind(
	        null,
	        currentlyRenderingFiber,
	        true,
	        queue
	      );
	      queue.dispatch = hook;
	      return [passthrough, hook];
	    }
	    function updateOptimistic(passthrough, reducer) {
	      var hook = updateWorkInProgressHook();
	      return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
	    }
	    function updateOptimisticImpl(hook, current, passthrough, reducer) {
	      hook.baseState = passthrough;
	      return updateReducerImpl(
	        hook,
	        currentHook,
	        "function" === typeof reducer ? reducer : basicStateReducer
	      );
	    }
	    function rerenderOptimistic(passthrough, reducer) {
	      var hook = updateWorkInProgressHook();
	      if (null !== currentHook)
	        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
	      hook.baseState = passthrough;
	      return [passthrough, hook.queue.dispatch];
	    }
	    function dispatchActionState(
	      fiber,
	      actionQueue,
	      setPendingState,
	      setState,
	      payload
	    ) {
	      if (isRenderPhaseUpdate(fiber))
	        throw Error("Cannot update form state while rendering.");
	      fiber = actionQueue.action;
	      if (null !== fiber) {
	        var actionNode = {
	          payload: payload,
	          action: fiber,
	          next: null,
	          isTransition: true,
	          status: "pending",
	          value: null,
	          reason: null,
	          listeners: [],
	          then: function (listener) {
	            actionNode.listeners.push(listener);
	          }
	        };
	        null !== ReactSharedInternals.T
	          ? setPendingState(true)
	          : (actionNode.isTransition = false);
	        setState(actionNode);
	        setPendingState = actionQueue.pending;
	        null === setPendingState
	          ? ((actionNode.next = actionQueue.pending = actionNode),
	            runActionStateAction(actionQueue, actionNode))
	          : ((actionNode.next = setPendingState.next),
	            (actionQueue.pending = setPendingState.next = actionNode));
	      }
	    }
	    function runActionStateAction(actionQueue, node) {
	      var action = node.action,
	        payload = node.payload,
	        prevState = actionQueue.state;
	      if (node.isTransition) {
	        var prevTransition = ReactSharedInternals.T,
	          currentTransition = {};
	        ReactSharedInternals.T = currentTransition;
	        ReactSharedInternals.T._updatedFibers = new Set();
	        try {
	          var returnValue = action(prevState, payload),
	            onStartTransitionFinish = ReactSharedInternals.S;
	          null !== onStartTransitionFinish &&
	            onStartTransitionFinish(currentTransition, returnValue);
	          handleActionReturnValue(actionQueue, node, returnValue);
	        } catch (error) {
	          onActionError(actionQueue, node, error);
	        } finally {
	          (ReactSharedInternals.T = prevTransition),
	            null === prevTransition &&
	              currentTransition._updatedFibers &&
	              ((actionQueue = currentTransition._updatedFibers.size),
	              currentTransition._updatedFibers.clear(),
	              10 < actionQueue &&
	                console.warn(
	                  "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
	                ));
	        }
	      } else
	        try {
	          (currentTransition = action(prevState, payload)),
	            handleActionReturnValue(actionQueue, node, currentTransition);
	        } catch (error$4) {
	          onActionError(actionQueue, node, error$4);
	        }
	    }
	    function handleActionReturnValue(actionQueue, node, returnValue) {
	      null !== returnValue &&
	      "object" === typeof returnValue &&
	      "function" === typeof returnValue.then
	        ? (returnValue.then(
	            function (nextState) {
	              onActionSuccess(actionQueue, node, nextState);
	            },
	            function (error) {
	              return onActionError(actionQueue, node, error);
	            }
	          ),
	          node.isTransition ||
	            console.error(
	              "An async function with useActionState was called outside of a transition. This is likely not what you intended (for example, isPending will not update correctly). Either call the returned function inside startTransition, or pass it to an `action` or `formAction` prop."
	            ))
	        : onActionSuccess(actionQueue, node, returnValue);
	    }
	    function onActionSuccess(actionQueue, actionNode, nextState) {
	      actionNode.status = "fulfilled";
	      actionNode.value = nextState;
	      notifyActionListeners(actionNode);
	      actionQueue.state = nextState;
	      actionNode = actionQueue.pending;
	      null !== actionNode &&
	        ((nextState = actionNode.next),
	        nextState === actionNode
	          ? (actionQueue.pending = null)
	          : ((nextState = nextState.next),
	            (actionNode.next = nextState),
	            runActionStateAction(actionQueue, nextState)));
	    }
	    function onActionError(actionQueue, actionNode, error) {
	      var last = actionQueue.pending;
	      actionQueue.pending = null;
	      if (null !== last) {
	        last = last.next;
	        do
	          (actionNode.status = "rejected"),
	            (actionNode.reason = error),
	            notifyActionListeners(actionNode),
	            (actionNode = actionNode.next);
	        while (actionNode !== last);
	      }
	      actionQueue.action = null;
	    }
	    function notifyActionListeners(actionNode) {
	      actionNode = actionNode.listeners;
	      for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
	    }
	    function actionStateReducer(oldState, newState) {
	      return newState;
	    }
	    function mountActionState(action, initialStateProp) {
	      if (isHydrating) {
	        var ssrFormState = workInProgressRoot.formState;
	        if (null !== ssrFormState) {
	          a: {
	            var isMatching = currentlyRenderingFiber;
	            if (isHydrating) {
	              if (nextHydratableInstance) {
	                b: {
	                  var markerInstance = nextHydratableInstance;
	                  for (
	                    var inRootOrSingleton = rootOrSingletonContext;
	                    8 !== markerInstance.nodeType;

	                  ) {
	                    if (!inRootOrSingleton) {
	                      markerInstance = null;
	                      break b;
	                    }
	                    markerInstance = getNextHydratable(
	                      markerInstance.nextSibling
	                    );
	                    if (null === markerInstance) {
	                      markerInstance = null;
	                      break b;
	                    }
	                  }
	                  inRootOrSingleton = markerInstance.data;
	                  markerInstance =
	                    inRootOrSingleton === FORM_STATE_IS_MATCHING ||
	                    inRootOrSingleton === FORM_STATE_IS_NOT_MATCHING
	                      ? markerInstance
	                      : null;
	                }
	                if (markerInstance) {
	                  nextHydratableInstance = getNextHydratable(
	                    markerInstance.nextSibling
	                  );
	                  isMatching = markerInstance.data === FORM_STATE_IS_MATCHING;
	                  break a;
	                }
	              }
	              throwOnHydrationMismatch(isMatching);
	            }
	            isMatching = false;
	          }
	          isMatching && (initialStateProp = ssrFormState[0]);
	        }
	      }
	      ssrFormState = mountWorkInProgressHook();
	      ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
	      isMatching = {
	        pending: null,
	        lanes: 0,
	        dispatch: null,
	        lastRenderedReducer: actionStateReducer,
	        lastRenderedState: initialStateProp
	      };
	      ssrFormState.queue = isMatching;
	      ssrFormState = dispatchSetState.bind(
	        null,
	        currentlyRenderingFiber,
	        isMatching
	      );
	      isMatching.dispatch = ssrFormState;
	      isMatching = mountStateImpl(false);
	      inRootOrSingleton = dispatchOptimisticSetState.bind(
	        null,
	        currentlyRenderingFiber,
	        false,
	        isMatching.queue
	      );
	      isMatching = mountWorkInProgressHook();
	      markerInstance = {
	        state: initialStateProp,
	        dispatch: null,
	        action: action,
	        pending: null
	      };
	      isMatching.queue = markerInstance;
	      ssrFormState = dispatchActionState.bind(
	        null,
	        currentlyRenderingFiber,
	        markerInstance,
	        inRootOrSingleton,
	        ssrFormState
	      );
	      markerInstance.dispatch = ssrFormState;
	      isMatching.memoizedState = action;
	      return [initialStateProp, ssrFormState, false];
	    }
	    function updateActionState(action) {
	      var stateHook = updateWorkInProgressHook();
	      return updateActionStateImpl(stateHook, currentHook, action);
	    }
	    function updateActionStateImpl(stateHook, currentStateHook, action) {
	      currentStateHook = updateReducerImpl(
	        stateHook,
	        currentStateHook,
	        actionStateReducer
	      )[0];
	      stateHook = updateReducer(basicStateReducer)[0];
	      if (
	        "object" === typeof currentStateHook &&
	        null !== currentStateHook &&
	        "function" === typeof currentStateHook.then
	      )
	        try {
	          var state = useThenable(currentStateHook);
	        } catch (x) {
	          if (x === SuspenseException) throw SuspenseActionException;
	          throw x;
	        }
	      else state = currentStateHook;
	      currentStateHook = updateWorkInProgressHook();
	      var actionQueue = currentStateHook.queue,
	        dispatch = actionQueue.dispatch;
	      action !== currentStateHook.memoizedState &&
	        ((currentlyRenderingFiber.flags |= 2048),
	        pushSimpleEffect(
	          HasEffect | Passive,
	          createEffectInstance(),
	          actionStateActionEffect.bind(null, actionQueue, action),
	          null
	        ));
	      return [state, dispatch, stateHook];
	    }
	    function actionStateActionEffect(actionQueue, action) {
	      actionQueue.action = action;
	    }
	    function rerenderActionState(action) {
	      var stateHook = updateWorkInProgressHook(),
	        currentStateHook = currentHook;
	      if (null !== currentStateHook)
	        return updateActionStateImpl(stateHook, currentStateHook, action);
	      updateWorkInProgressHook();
	      stateHook = stateHook.memoizedState;
	      currentStateHook = updateWorkInProgressHook();
	      var dispatch = currentStateHook.queue.dispatch;
	      currentStateHook.memoizedState = action;
	      return [stateHook, dispatch, false];
	    }
	    function pushSimpleEffect(tag, inst, create, createDeps) {
	      tag = {
	        tag: tag,
	        create: create,
	        deps: createDeps,
	        inst: inst,
	        next: null
	      };
	      inst = currentlyRenderingFiber.updateQueue;
	      null === inst &&
	        ((inst = createFunctionComponentUpdateQueue()),
	        (currentlyRenderingFiber.updateQueue = inst));
	      create = inst.lastEffect;
	      null === create
	        ? (inst.lastEffect = tag.next = tag)
	        : ((createDeps = create.next),
	          (create.next = tag),
	          (tag.next = createDeps),
	          (inst.lastEffect = tag));
	      return tag;
	    }
	    function createEffectInstance() {
	      return { destroy: void 0, resource: void 0 };
	    }
	    function mountRef(initialValue) {
	      var hook = mountWorkInProgressHook();
	      initialValue = { current: initialValue };
	      return (hook.memoizedState = initialValue);
	    }
	    function mountEffectImpl(fiberFlags, hookFlags, create, createDeps) {
	      var hook = mountWorkInProgressHook();
	      createDeps = void 0 === createDeps ? null : createDeps;
	      currentlyRenderingFiber.flags |= fiberFlags;
	      hook.memoizedState = pushSimpleEffect(
	        HasEffect | hookFlags,
	        createEffectInstance(),
	        create,
	        createDeps
	      );
	    }
	    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
	      var hook = updateWorkInProgressHook();
	      deps = void 0 === deps ? null : deps;
	      var inst = hook.memoizedState.inst;
	      null !== currentHook &&
	      null !== deps &&
	      areHookInputsEqual(deps, currentHook.memoizedState.deps)
	        ? (hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps))
	        : ((currentlyRenderingFiber.flags |= fiberFlags),
	          (hook.memoizedState = pushSimpleEffect(
	            HasEffect | hookFlags,
	            inst,
	            create,
	            deps
	          )));
	    }
	    function mountEffect(create, createDeps) {
	      (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode &&
	      (currentlyRenderingFiber.mode & NoStrictPassiveEffectsMode) === NoMode
	        ? mountEffectImpl(276826112, Passive, create, createDeps)
	        : mountEffectImpl(8390656, Passive, create, createDeps);
	    }
	    function mountLayoutEffect(create, deps) {
	      var fiberFlags = 4194308;
	      (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode &&
	        (fiberFlags |= 134217728);
	      return mountEffectImpl(fiberFlags, Layout, create, deps);
	    }
	    function imperativeHandleEffect(create, ref) {
	      if ("function" === typeof ref) {
	        create = create();
	        var refCleanup = ref(create);
	        return function () {
	          "function" === typeof refCleanup ? refCleanup() : ref(null);
	        };
	      }
	      if (null !== ref && void 0 !== ref)
	        return (
	          ref.hasOwnProperty("current") ||
	            console.error(
	              "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
	              "an object with keys {" + Object.keys(ref).join(", ") + "}"
	            ),
	          (create = create()),
	          (ref.current = create),
	          function () {
	            ref.current = null;
	          }
	        );
	    }
	    function mountImperativeHandle(ref, create, deps) {
	      "function" !== typeof create &&
	        console.error(
	          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
	          null !== create ? typeof create : "null"
	        );
	      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
	      var fiberFlags = 4194308;
	      (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode &&
	        (fiberFlags |= 134217728);
	      mountEffectImpl(
	        fiberFlags,
	        Layout,
	        imperativeHandleEffect.bind(null, create, ref),
	        deps
	      );
	    }
	    function updateImperativeHandle(ref, create, deps) {
	      "function" !== typeof create &&
	        console.error(
	          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
	          null !== create ? typeof create : "null"
	        );
	      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
	      updateEffectImpl(
	        4,
	        Layout,
	        imperativeHandleEffect.bind(null, create, ref),
	        deps
	      );
	    }
	    function mountCallback(callback, deps) {
	      mountWorkInProgressHook().memoizedState = [
	        callback,
	        void 0 === deps ? null : deps
	      ];
	      return callback;
	    }
	    function updateCallback(callback, deps) {
	      var hook = updateWorkInProgressHook();
	      deps = void 0 === deps ? null : deps;
	      var prevState = hook.memoizedState;
	      if (null !== deps && areHookInputsEqual(deps, prevState[1]))
	        return prevState[0];
	      hook.memoizedState = [callback, deps];
	      return callback;
	    }
	    function mountMemo(nextCreate, deps) {
	      var hook = mountWorkInProgressHook();
	      deps = void 0 === deps ? null : deps;
	      var nextValue = nextCreate();
	      if (shouldDoubleInvokeUserFnsInHooksDEV) {
	        setIsStrictModeForDevtools(true);
	        try {
	          nextCreate();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	      hook.memoizedState = [nextValue, deps];
	      return nextValue;
	    }
	    function updateMemo(nextCreate, deps) {
	      var hook = updateWorkInProgressHook();
	      deps = void 0 === deps ? null : deps;
	      var prevState = hook.memoizedState;
	      if (null !== deps && areHookInputsEqual(deps, prevState[1]))
	        return prevState[0];
	      prevState = nextCreate();
	      if (shouldDoubleInvokeUserFnsInHooksDEV) {
	        setIsStrictModeForDevtools(true);
	        try {
	          nextCreate();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	      hook.memoizedState = [prevState, deps];
	      return prevState;
	    }
	    function mountDeferredValue(value, initialValue) {
	      var hook = mountWorkInProgressHook();
	      return mountDeferredValueImpl(hook, value, initialValue);
	    }
	    function updateDeferredValue(value, initialValue) {
	      var hook = updateWorkInProgressHook();
	      return updateDeferredValueImpl(
	        hook,
	        currentHook.memoizedState,
	        value,
	        initialValue
	      );
	    }
	    function rerenderDeferredValue(value, initialValue) {
	      var hook = updateWorkInProgressHook();
	      return null === currentHook
	        ? mountDeferredValueImpl(hook, value, initialValue)
	        : updateDeferredValueImpl(
	            hook,
	            currentHook.memoizedState,
	            value,
	            initialValue
	          );
	    }
	    function mountDeferredValueImpl(hook, value, initialValue) {
	      if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
	        return (hook.memoizedState = value);
	      hook.memoizedState = initialValue;
	      hook = requestDeferredLane();
	      currentlyRenderingFiber.lanes |= hook;
	      workInProgressRootSkippedLanes |= hook;
	      return initialValue;
	    }
	    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
	      if (objectIs(value, prevValue)) return value;
	      if (null !== currentTreeHiddenStackCursor.current)
	        return (
	          (hook = mountDeferredValueImpl(hook, value, initialValue)),
	          objectIs(hook, prevValue) || (didReceiveUpdate = true),
	          hook
	        );
	      if (0 === (renderLanes & 42))
	        return (didReceiveUpdate = true), (hook.memoizedState = value);
	      hook = requestDeferredLane();
	      currentlyRenderingFiber.lanes |= hook;
	      workInProgressRootSkippedLanes |= hook;
	      return prevValue;
	    }
	    function startTransition(
	      fiber,
	      queue,
	      pendingState,
	      finishedState,
	      callback
	    ) {
	      var previousPriority = ReactDOMSharedInternals.p;
	      ReactDOMSharedInternals.p =
	        0 !== previousPriority && previousPriority < ContinuousEventPriority
	          ? previousPriority
	          : ContinuousEventPriority;
	      var prevTransition = ReactSharedInternals.T,
	        currentTransition = {};
	      ReactSharedInternals.T = currentTransition;
	      dispatchOptimisticSetState(fiber, false, queue, pendingState);
	      currentTransition._updatedFibers = new Set();
	      try {
	        var returnValue = callback(),
	          onStartTransitionFinish = ReactSharedInternals.S;
	        null !== onStartTransitionFinish &&
	          onStartTransitionFinish(currentTransition, returnValue);
	        if (
	          null !== returnValue &&
	          "object" === typeof returnValue &&
	          "function" === typeof returnValue.then
	        ) {
	          var thenableForFinishedState = chainThenableValue(
	            returnValue,
	            finishedState
	          );
	          dispatchSetStateInternal(
	            fiber,
	            queue,
	            thenableForFinishedState,
	            requestUpdateLane(fiber)
	          );
	        } else
	          dispatchSetStateInternal(
	            fiber,
	            queue,
	            finishedState,
	            requestUpdateLane(fiber)
	          );
	      } catch (error) {
	        dispatchSetStateInternal(
	          fiber,
	          queue,
	          { then: function () {}, status: "rejected", reason: error },
	          requestUpdateLane(fiber)
	        );
	      } finally {
	        (ReactDOMSharedInternals.p = previousPriority),
	          (ReactSharedInternals.T = prevTransition),
	          null === prevTransition &&
	            currentTransition._updatedFibers &&
	            ((fiber = currentTransition._updatedFibers.size),
	            currentTransition._updatedFibers.clear(),
	            10 < fiber &&
	              console.warn(
	                "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
	              ));
	      }
	    }
	    function startHostTransition(formFiber, pendingState, action, formData) {
	      if (5 !== formFiber.tag)
	        throw Error(
	          "Expected the form instance to be a HostComponent. This is a bug in React."
	        );
	      var queue = ensureFormComponentIsStateful(formFiber).queue;
	      startTransition(
	        formFiber,
	        queue,
	        pendingState,
	        NotPendingTransition,
	        null === action
	          ? noop$2
	          : function () {
	              requestFormReset$1(formFiber);
	              return action(formData);
	            }
	      );
	    }
	    function ensureFormComponentIsStateful(formFiber) {
	      var existingStateHook = formFiber.memoizedState;
	      if (null !== existingStateHook) return existingStateHook;
	      existingStateHook = {
	        memoizedState: NotPendingTransition,
	        baseState: NotPendingTransition,
	        baseQueue: null,
	        queue: {
	          pending: null,
	          lanes: 0,
	          dispatch: null,
	          lastRenderedReducer: basicStateReducer,
	          lastRenderedState: NotPendingTransition
	        },
	        next: null
	      };
	      var initialResetState = {};
	      existingStateHook.next = {
	        memoizedState: initialResetState,
	        baseState: initialResetState,
	        baseQueue: null,
	        queue: {
	          pending: null,
	          lanes: 0,
	          dispatch: null,
	          lastRenderedReducer: basicStateReducer,
	          lastRenderedState: initialResetState
	        },
	        next: null
	      };
	      formFiber.memoizedState = existingStateHook;
	      formFiber = formFiber.alternate;
	      null !== formFiber && (formFiber.memoizedState = existingStateHook);
	      return existingStateHook;
	    }
	    function requestFormReset$1(formFiber) {
	      null === ReactSharedInternals.T &&
	        console.error(
	          "requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."
	        );
	      var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
	      dispatchSetStateInternal(
	        formFiber,
	        resetStateQueue,
	        {},
	        requestUpdateLane(formFiber)
	      );
	    }
	    function mountTransition() {
	      var stateHook = mountStateImpl(false);
	      stateHook = startTransition.bind(
	        null,
	        currentlyRenderingFiber,
	        stateHook.queue,
	        true,
	        false
	      );
	      mountWorkInProgressHook().memoizedState = stateHook;
	      return [false, stateHook];
	    }
	    function updateTransition() {
	      var booleanOrThenable = updateReducer(basicStateReducer)[0],
	        start = updateWorkInProgressHook().memoizedState;
	      return [
	        "boolean" === typeof booleanOrThenable
	          ? booleanOrThenable
	          : useThenable(booleanOrThenable),
	        start
	      ];
	    }
	    function rerenderTransition() {
	      var booleanOrThenable = rerenderReducer(basicStateReducer)[0],
	        start = updateWorkInProgressHook().memoizedState;
	      return [
	        "boolean" === typeof booleanOrThenable
	          ? booleanOrThenable
	          : useThenable(booleanOrThenable),
	        start
	      ];
	    }
	    function useHostTransitionStatus() {
	      return readContext(HostTransitionContext);
	    }
	    function mountId() {
	      var hook = mountWorkInProgressHook(),
	        identifierPrefix = workInProgressRoot.identifierPrefix;
	      if (isHydrating) {
	        var treeId = treeContextOverflow;
	        var idWithLeadingBit = treeContextId;
	        treeId =
	          (
	            idWithLeadingBit & ~(1 << (32 - clz32(idWithLeadingBit) - 1))
	          ).toString(32) + treeId;
	        identifierPrefix = "\u00ab" + identifierPrefix + "R" + treeId;
	        treeId = localIdCounter++;
	        0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
	        identifierPrefix += "\u00bb";
	      } else
	        (treeId = globalClientIdCounter++),
	          (identifierPrefix =
	            "\u00ab" + identifierPrefix + "r" + treeId.toString(32) + "\u00bb");
	      return (hook.memoizedState = identifierPrefix);
	    }
	    function mountRefresh() {
	      return (mountWorkInProgressHook().memoizedState = refreshCache.bind(
	        null,
	        currentlyRenderingFiber
	      ));
	    }
	    function refreshCache(fiber, seedKey) {
	      for (var provider = fiber.return; null !== provider; ) {
	        switch (provider.tag) {
	          case 24:
	          case 3:
	            var lane = requestUpdateLane(provider);
	            fiber = createUpdate(lane);
	            var root = enqueueUpdate(provider, fiber, lane);
	            null !== root &&
	              (scheduleUpdateOnFiber(root, provider, lane),
	              entangleTransitions(root, provider, lane));
	            provider = createCache();
	            null !== seedKey &&
	              void 0 !== seedKey &&
	              null !== root &&
	              console.error(
	                "The seed argument is not enabled outside experimental channels."
	              );
	            fiber.payload = { cache: provider };
	            return;
	        }
	        provider = provider.return;
	      }
	    }
	    function dispatchReducerAction(fiber, queue, action) {
	      var args = arguments;
	      "function" === typeof args[3] &&
	        console.error(
	          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
	        );
	      args = requestUpdateLane(fiber);
	      var update = {
	        lane: args,
	        revertLane: 0,
	        action: action,
	        hasEagerState: false,
	        eagerState: null,
	        next: null
	      };
	      isRenderPhaseUpdate(fiber)
	        ? enqueueRenderPhaseUpdate(queue, update)
	        : ((update = enqueueConcurrentHookUpdate(fiber, queue, update, args)),
	          null !== update &&
	            (scheduleUpdateOnFiber(update, fiber, args),
	            entangleTransitionUpdate(update, queue, args)));
	      markStateUpdateScheduled(fiber, args);
	    }
	    function dispatchSetState(fiber, queue, action) {
	      var args = arguments;
	      "function" === typeof args[3] &&
	        console.error(
	          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
	        );
	      args = requestUpdateLane(fiber);
	      dispatchSetStateInternal(fiber, queue, action, args);
	      markStateUpdateScheduled(fiber, args);
	    }
	    function dispatchSetStateInternal(fiber, queue, action, lane) {
	      var update = {
	        lane: lane,
	        revertLane: 0,
	        action: action,
	        hasEagerState: false,
	        eagerState: null,
	        next: null
	      };
	      if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
	      else {
	        var alternate = fiber.alternate;
	        if (
	          0 === fiber.lanes &&
	          (null === alternate || 0 === alternate.lanes) &&
	          ((alternate = queue.lastRenderedReducer), null !== alternate)
	        ) {
	          var prevDispatcher = ReactSharedInternals.H;
	          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	          try {
	            var currentState = queue.lastRenderedState,
	              eagerState = alternate(currentState, action);
	            update.hasEagerState = true;
	            update.eagerState = eagerState;
	            if (objectIs(eagerState, currentState))
	              return (
	                enqueueUpdate$1(fiber, queue, update, 0),
	                null === workInProgressRoot &&
	                  finishQueueingConcurrentUpdates(),
	                false
	              );
	          } catch (error) {
	          } finally {
	            ReactSharedInternals.H = prevDispatcher;
	          }
	        }
	        action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
	        if (null !== action)
	          return (
	            scheduleUpdateOnFiber(action, fiber, lane),
	            entangleTransitionUpdate(action, queue, lane),
	            true
	          );
	      }
	      return false;
	    }
	    function dispatchOptimisticSetState(
	      fiber,
	      throwIfDuringRender,
	      queue,
	      action
	    ) {
	      null === ReactSharedInternals.T &&
	        0 === currentEntangledLane &&
	        console.error(
	          "An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."
	        );
	      action = {
	        lane: 2,
	        revertLane: requestTransitionLane(),
	        action: action,
	        hasEagerState: false,
	        eagerState: null,
	        next: null
	      };
	      if (isRenderPhaseUpdate(fiber)) {
	        if (throwIfDuringRender)
	          throw Error("Cannot update optimistic state while rendering.");
	        console.error("Cannot call startTransition while rendering.");
	      } else
	        (throwIfDuringRender = enqueueConcurrentHookUpdate(
	          fiber,
	          queue,
	          action,
	          2
	        )),
	          null !== throwIfDuringRender &&
	            scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
	      markStateUpdateScheduled(fiber, 2);
	    }
	    function isRenderPhaseUpdate(fiber) {
	      var alternate = fiber.alternate;
	      return (
	        fiber === currentlyRenderingFiber ||
	        (null !== alternate && alternate === currentlyRenderingFiber)
	      );
	    }
	    function enqueueRenderPhaseUpdate(queue, update) {
	      didScheduleRenderPhaseUpdateDuringThisPass =
	        didScheduleRenderPhaseUpdate = true;
	      var pending = queue.pending;
	      null === pending
	        ? (update.next = update)
	        : ((update.next = pending.next), (pending.next = update));
	      queue.pending = update;
	    }
	    function entangleTransitionUpdate(root, queue, lane) {
	      if (0 !== (lane & 4194048)) {
	        var queueLanes = queue.lanes;
	        queueLanes &= root.pendingLanes;
	        lane |= queueLanes;
	        queue.lanes = lane;
	        markRootEntangled(root, lane);
	      }
	    }
	    function pushDebugInfo(debugInfo) {
	      var previousDebugInfo = currentDebugInfo;
	      null != debugInfo &&
	        (currentDebugInfo =
	          null === previousDebugInfo
	            ? debugInfo
	            : previousDebugInfo.concat(debugInfo));
	      return previousDebugInfo;
	    }
	    function validateFragmentProps(element, fiber, returnFiber) {
	      for (var keys = Object.keys(element.props), i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        if ("children" !== key && "key" !== key) {
	          null === fiber &&
	            ((fiber = createFiberFromElement(element, returnFiber.mode, 0)),
	            (fiber._debugInfo = currentDebugInfo),
	            (fiber.return = returnFiber));
	          runWithFiberInDEV(
	            fiber,
	            function (erroredKey) {
	              console.error(
	                "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
	                erroredKey
	              );
	            },
	            key
	          );
	          break;
	        }
	      }
	    }
	    function unwrapThenable(thenable) {
	      var index = thenableIndexCounter;
	      thenableIndexCounter += 1;
	      null === thenableState && (thenableState = createThenableState());
	      return trackUsedThenable(thenableState, thenable, index);
	    }
	    function coerceRef(workInProgress, element) {
	      element = element.props.ref;
	      workInProgress.ref = void 0 !== element ? element : null;
	    }
	    function throwOnInvalidObjectType(returnFiber, newChild) {
	      if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
	        throw Error(
	          'A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.'
	        );
	      returnFiber = Object.prototype.toString.call(newChild);
	      throw Error(
	        "Objects are not valid as a React child (found: " +
	          ("[object Object]" === returnFiber
	            ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
	            : returnFiber) +
	          "). If you meant to render a collection of children, use an array instead."
	      );
	    }
	    function warnOnFunctionType(returnFiber, invalidChild) {
	      var parentName = getComponentNameFromFiber(returnFiber) || "Component";
	      ownerHasFunctionTypeWarning[parentName] ||
	        ((ownerHasFunctionTypeWarning[parentName] = true),
	        (invalidChild =
	          invalidChild.displayName || invalidChild.name || "Component"),
	        3 === returnFiber.tag
	          ? console.error(
	              "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",
	              invalidChild,
	              invalidChild,
	              invalidChild
	            )
	          : console.error(
	              "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",
	              invalidChild,
	              invalidChild,
	              parentName,
	              invalidChild,
	              parentName
	            ));
	    }
	    function warnOnSymbolType(returnFiber, invalidChild) {
	      var parentName = getComponentNameFromFiber(returnFiber) || "Component";
	      ownerHasSymbolTypeWarning[parentName] ||
	        ((ownerHasSymbolTypeWarning[parentName] = true),
	        (invalidChild = String(invalidChild)),
	        3 === returnFiber.tag
	          ? console.error(
	              "Symbols are not valid as a React child.\n  root.render(%s)",
	              invalidChild
	            )
	          : console.error(
	              "Symbols are not valid as a React child.\n  <%s>%s</%s>",
	              parentName,
	              invalidChild,
	              parentName
	            ));
	    }
	    function createChildReconciler(shouldTrackSideEffects) {
	      function deleteChild(returnFiber, childToDelete) {
	        if (shouldTrackSideEffects) {
	          var deletions = returnFiber.deletions;
	          null === deletions
	            ? ((returnFiber.deletions = [childToDelete]),
	              (returnFiber.flags |= 16))
	            : deletions.push(childToDelete);
	        }
	      }
	      function deleteRemainingChildren(returnFiber, currentFirstChild) {
	        if (!shouldTrackSideEffects) return null;
	        for (; null !== currentFirstChild; )
	          deleteChild(returnFiber, currentFirstChild),
	            (currentFirstChild = currentFirstChild.sibling);
	        return null;
	      }
	      function mapRemainingChildren(currentFirstChild) {
	        for (var existingChildren = new Map(); null !== currentFirstChild; )
	          null !== currentFirstChild.key
	            ? existingChildren.set(currentFirstChild.key, currentFirstChild)
	            : existingChildren.set(currentFirstChild.index, currentFirstChild),
	            (currentFirstChild = currentFirstChild.sibling);
	        return existingChildren;
	      }
	      function useFiber(fiber, pendingProps) {
	        fiber = createWorkInProgress(fiber, pendingProps);
	        fiber.index = 0;
	        fiber.sibling = null;
	        return fiber;
	      }
	      function placeChild(newFiber, lastPlacedIndex, newIndex) {
	        newFiber.index = newIndex;
	        if (!shouldTrackSideEffects)
	          return (newFiber.flags |= 1048576), lastPlacedIndex;
	        newIndex = newFiber.alternate;
	        if (null !== newIndex)
	          return (
	            (newIndex = newIndex.index),
	            newIndex < lastPlacedIndex
	              ? ((newFiber.flags |= 67108866), lastPlacedIndex)
	              : newIndex
	          );
	        newFiber.flags |= 67108866;
	        return lastPlacedIndex;
	      }
	      function placeSingleChild(newFiber) {
	        shouldTrackSideEffects &&
	          null === newFiber.alternate &&
	          (newFiber.flags |= 67108866);
	        return newFiber;
	      }
	      function updateTextNode(returnFiber, current, textContent, lanes) {
	        if (null === current || 6 !== current.tag)
	          return (
	            (current = createFiberFromText(
	              textContent,
	              returnFiber.mode,
	              lanes
	            )),
	            (current.return = returnFiber),
	            (current._debugOwner = returnFiber),
	            (current._debugTask = returnFiber._debugTask),
	            (current._debugInfo = currentDebugInfo),
	            current
	          );
	        current = useFiber(current, textContent);
	        current.return = returnFiber;
	        current._debugInfo = currentDebugInfo;
	        return current;
	      }
	      function updateElement(returnFiber, current, element, lanes) {
	        var elementType = element.type;
	        if (elementType === REACT_FRAGMENT_TYPE)
	          return (
	            (current = updateFragment(
	              returnFiber,
	              current,
	              element.props.children,
	              lanes,
	              element.key
	            )),
	            validateFragmentProps(element, current, returnFiber),
	            current
	          );
	        if (
	          null !== current &&
	          (current.elementType === elementType ||
	            isCompatibleFamilyForHotReloading(current, element) ||
	            ("object" === typeof elementType &&
	              null !== elementType &&
	              elementType.$$typeof === REACT_LAZY_TYPE &&
	              callLazyInitInDEV(elementType) === current.type))
	        )
	          return (
	            (current = useFiber(current, element.props)),
	            coerceRef(current, element),
	            (current.return = returnFiber),
	            (current._debugOwner = element._owner),
	            (current._debugInfo = currentDebugInfo),
	            current
	          );
	        current = createFiberFromElement(element, returnFiber.mode, lanes);
	        coerceRef(current, element);
	        current.return = returnFiber;
	        current._debugInfo = currentDebugInfo;
	        return current;
	      }
	      function updatePortal(returnFiber, current, portal, lanes) {
	        if (
	          null === current ||
	          4 !== current.tag ||
	          current.stateNode.containerInfo !== portal.containerInfo ||
	          current.stateNode.implementation !== portal.implementation
	        )
	          return (
	            (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),
	            (current.return = returnFiber),
	            (current._debugInfo = currentDebugInfo),
	            current
	          );
	        current = useFiber(current, portal.children || []);
	        current.return = returnFiber;
	        current._debugInfo = currentDebugInfo;
	        return current;
	      }
	      function updateFragment(returnFiber, current, fragment, lanes, key) {
	        if (null === current || 7 !== current.tag)
	          return (
	            (current = createFiberFromFragment(
	              fragment,
	              returnFiber.mode,
	              lanes,
	              key
	            )),
	            (current.return = returnFiber),
	            (current._debugOwner = returnFiber),
	            (current._debugTask = returnFiber._debugTask),
	            (current._debugInfo = currentDebugInfo),
	            current
	          );
	        current = useFiber(current, fragment);
	        current.return = returnFiber;
	        current._debugInfo = currentDebugInfo;
	        return current;
	      }
	      function createChild(returnFiber, newChild, lanes) {
	        if (
	          ("string" === typeof newChild && "" !== newChild) ||
	          "number" === typeof newChild ||
	          "bigint" === typeof newChild
	        )
	          return (
	            (newChild = createFiberFromText(
	              "" + newChild,
	              returnFiber.mode,
	              lanes
	            )),
	            (newChild.return = returnFiber),
	            (newChild._debugOwner = returnFiber),
	            (newChild._debugTask = returnFiber._debugTask),
	            (newChild._debugInfo = currentDebugInfo),
	            newChild
	          );
	        if ("object" === typeof newChild && null !== newChild) {
	          switch (newChild.$$typeof) {
	            case REACT_ELEMENT_TYPE:
	              return (
	                (lanes = createFiberFromElement(
	                  newChild,
	                  returnFiber.mode,
	                  lanes
	                )),
	                coerceRef(lanes, newChild),
	                (lanes.return = returnFiber),
	                (returnFiber = pushDebugInfo(newChild._debugInfo)),
	                (lanes._debugInfo = currentDebugInfo),
	                (currentDebugInfo = returnFiber),
	                lanes
	              );
	            case REACT_PORTAL_TYPE:
	              return (
	                (newChild = createFiberFromPortal(
	                  newChild,
	                  returnFiber.mode,
	                  lanes
	                )),
	                (newChild.return = returnFiber),
	                (newChild._debugInfo = currentDebugInfo),
	                newChild
	              );
	            case REACT_LAZY_TYPE:
	              var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);
	              newChild = callLazyInitInDEV(newChild);
	              returnFiber = createChild(returnFiber, newChild, lanes);
	              currentDebugInfo = _prevDebugInfo;
	              return returnFiber;
	          }
	          if (isArrayImpl(newChild) || getIteratorFn(newChild))
	            return (
	              (lanes = createFiberFromFragment(
	                newChild,
	                returnFiber.mode,
	                lanes,
	                null
	              )),
	              (lanes.return = returnFiber),
	              (lanes._debugOwner = returnFiber),
	              (lanes._debugTask = returnFiber._debugTask),
	              (returnFiber = pushDebugInfo(newChild._debugInfo)),
	              (lanes._debugInfo = currentDebugInfo),
	              (currentDebugInfo = returnFiber),
	              lanes
	            );
	          if ("function" === typeof newChild.then)
	            return (
	              (_prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = createChild(
	                returnFiber,
	                unwrapThenable(newChild),
	                lanes
	              )),
	              (currentDebugInfo = _prevDebugInfo),
	              returnFiber
	            );
	          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	            return createChild(
	              returnFiber,
	              readContextDuringReconciliation(returnFiber, newChild),
	              lanes
	            );
	          throwOnInvalidObjectType(returnFiber, newChild);
	        }
	        "function" === typeof newChild &&
	          warnOnFunctionType(returnFiber, newChild);
	        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
	        return null;
	      }
	      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
	        var key = null !== oldFiber ? oldFiber.key : null;
	        if (
	          ("string" === typeof newChild && "" !== newChild) ||
	          "number" === typeof newChild ||
	          "bigint" === typeof newChild
	        )
	          return null !== key
	            ? null
	            : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
	        if ("object" === typeof newChild && null !== newChild) {
	          switch (newChild.$$typeof) {
	            case REACT_ELEMENT_TYPE:
	              return newChild.key === key
	                ? ((key = pushDebugInfo(newChild._debugInfo)),
	                  (returnFiber = updateElement(
	                    returnFiber,
	                    oldFiber,
	                    newChild,
	                    lanes
	                  )),
	                  (currentDebugInfo = key),
	                  returnFiber)
	                : null;
	            case REACT_PORTAL_TYPE:
	              return newChild.key === key
	                ? updatePortal(returnFiber, oldFiber, newChild, lanes)
	                : null;
	            case REACT_LAZY_TYPE:
	              return (
	                (key = pushDebugInfo(newChild._debugInfo)),
	                (newChild = callLazyInitInDEV(newChild)),
	                (returnFiber = updateSlot(
	                  returnFiber,
	                  oldFiber,
	                  newChild,
	                  lanes
	                )),
	                (currentDebugInfo = key),
	                returnFiber
	              );
	          }
	          if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
	            if (null !== key) return null;
	            key = pushDebugInfo(newChild._debugInfo);
	            returnFiber = updateFragment(
	              returnFiber,
	              oldFiber,
	              newChild,
	              lanes,
	              null
	            );
	            currentDebugInfo = key;
	            return returnFiber;
	          }
	          if ("function" === typeof newChild.then)
	            return (
	              (key = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = updateSlot(
	                returnFiber,
	                oldFiber,
	                unwrapThenable(newChild),
	                lanes
	              )),
	              (currentDebugInfo = key),
	              returnFiber
	            );
	          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	            return updateSlot(
	              returnFiber,
	              oldFiber,
	              readContextDuringReconciliation(returnFiber, newChild),
	              lanes
	            );
	          throwOnInvalidObjectType(returnFiber, newChild);
	        }
	        "function" === typeof newChild &&
	          warnOnFunctionType(returnFiber, newChild);
	        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
	        return null;
	      }
	      function updateFromMap(
	        existingChildren,
	        returnFiber,
	        newIdx,
	        newChild,
	        lanes
	      ) {
	        if (
	          ("string" === typeof newChild && "" !== newChild) ||
	          "number" === typeof newChild ||
	          "bigint" === typeof newChild
	        )
	          return (
	            (existingChildren = existingChildren.get(newIdx) || null),
	            updateTextNode(returnFiber, existingChildren, "" + newChild, lanes)
	          );
	        if ("object" === typeof newChild && null !== newChild) {
	          switch (newChild.$$typeof) {
	            case REACT_ELEMENT_TYPE:
	              return (
	                (newIdx =
	                  existingChildren.get(
	                    null === newChild.key ? newIdx : newChild.key
	                  ) || null),
	                (existingChildren = pushDebugInfo(newChild._debugInfo)),
	                (returnFiber = updateElement(
	                  returnFiber,
	                  newIdx,
	                  newChild,
	                  lanes
	                )),
	                (currentDebugInfo = existingChildren),
	                returnFiber
	              );
	            case REACT_PORTAL_TYPE:
	              return (
	                (existingChildren =
	                  existingChildren.get(
	                    null === newChild.key ? newIdx : newChild.key
	                  ) || null),
	                updatePortal(returnFiber, existingChildren, newChild, lanes)
	              );
	            case REACT_LAZY_TYPE:
	              var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);
	              newChild = callLazyInitInDEV(newChild);
	              returnFiber = updateFromMap(
	                existingChildren,
	                returnFiber,
	                newIdx,
	                newChild,
	                lanes
	              );
	              currentDebugInfo = _prevDebugInfo7;
	              return returnFiber;
	          }
	          if (isArrayImpl(newChild) || getIteratorFn(newChild))
	            return (
	              (newIdx = existingChildren.get(newIdx) || null),
	              (existingChildren = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = updateFragment(
	                returnFiber,
	                newIdx,
	                newChild,
	                lanes,
	                null
	              )),
	              (currentDebugInfo = existingChildren),
	              returnFiber
	            );
	          if ("function" === typeof newChild.then)
	            return (
	              (_prevDebugInfo7 = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = updateFromMap(
	                existingChildren,
	                returnFiber,
	                newIdx,
	                unwrapThenable(newChild),
	                lanes
	              )),
	              (currentDebugInfo = _prevDebugInfo7),
	              returnFiber
	            );
	          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	            return updateFromMap(
	              existingChildren,
	              returnFiber,
	              newIdx,
	              readContextDuringReconciliation(returnFiber, newChild),
	              lanes
	            );
	          throwOnInvalidObjectType(returnFiber, newChild);
	        }
	        "function" === typeof newChild &&
	          warnOnFunctionType(returnFiber, newChild);
	        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
	        return null;
	      }
	      function warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys) {
	        if ("object" !== typeof child || null === child) return knownKeys;
	        switch (child.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            warnForMissingKey(returnFiber, workInProgress, child);
	            var key = child.key;
	            if ("string" !== typeof key) break;
	            if (null === knownKeys) {
	              knownKeys = new Set();
	              knownKeys.add(key);
	              break;
	            }
	            if (!knownKeys.has(key)) {
	              knownKeys.add(key);
	              break;
	            }
	            runWithFiberInDEV(workInProgress, function () {
	              console.error(
	                "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.",
	                key
	              );
	            });
	            break;
	          case REACT_LAZY_TYPE:
	            (child = callLazyInitInDEV(child)),
	              warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys);
	        }
	        return knownKeys;
	      }
	      function reconcileChildrenArray(
	        returnFiber,
	        currentFirstChild,
	        newChildren,
	        lanes
	      ) {
	        for (
	          var knownKeys = null,
	            resultingFirstChild = null,
	            previousNewFiber = null,
	            oldFiber = currentFirstChild,
	            newIdx = (currentFirstChild = 0),
	            nextOldFiber = null;
	          null !== oldFiber && newIdx < newChildren.length;
	          newIdx++
	        ) {
	          oldFiber.index > newIdx
	            ? ((nextOldFiber = oldFiber), (oldFiber = null))
	            : (nextOldFiber = oldFiber.sibling);
	          var newFiber = updateSlot(
	            returnFiber,
	            oldFiber,
	            newChildren[newIdx],
	            lanes
	          );
	          if (null === newFiber) {
	            null === oldFiber && (oldFiber = nextOldFiber);
	            break;
	          }
	          knownKeys = warnOnInvalidKey(
	            returnFiber,
	            newFiber,
	            newChildren[newIdx],
	            knownKeys
	          );
	          shouldTrackSideEffects &&
	            oldFiber &&
	            null === newFiber.alternate &&
	            deleteChild(returnFiber, oldFiber);
	          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
	          null === previousNewFiber
	            ? (resultingFirstChild = newFiber)
	            : (previousNewFiber.sibling = newFiber);
	          previousNewFiber = newFiber;
	          oldFiber = nextOldFiber;
	        }
	        if (newIdx === newChildren.length)
	          return (
	            deleteRemainingChildren(returnFiber, oldFiber),
	            isHydrating && pushTreeFork(returnFiber, newIdx),
	            resultingFirstChild
	          );
	        if (null === oldFiber) {
	          for (; newIdx < newChildren.length; newIdx++)
	            (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),
	              null !== oldFiber &&
	                ((knownKeys = warnOnInvalidKey(
	                  returnFiber,
	                  oldFiber,
	                  newChildren[newIdx],
	                  knownKeys
	                )),
	                (currentFirstChild = placeChild(
	                  oldFiber,
	                  currentFirstChild,
	                  newIdx
	                )),
	                null === previousNewFiber
	                  ? (resultingFirstChild = oldFiber)
	                  : (previousNewFiber.sibling = oldFiber),
	                (previousNewFiber = oldFiber));
	          isHydrating && pushTreeFork(returnFiber, newIdx);
	          return resultingFirstChild;
	        }
	        for (
	          oldFiber = mapRemainingChildren(oldFiber);
	          newIdx < newChildren.length;
	          newIdx++
	        )
	          (nextOldFiber = updateFromMap(
	            oldFiber,
	            returnFiber,
	            newIdx,
	            newChildren[newIdx],
	            lanes
	          )),
	            null !== nextOldFiber &&
	              ((knownKeys = warnOnInvalidKey(
	                returnFiber,
	                nextOldFiber,
	                newChildren[newIdx],
	                knownKeys
	              )),
	              shouldTrackSideEffects &&
	                null !== nextOldFiber.alternate &&
	                oldFiber.delete(
	                  null === nextOldFiber.key ? newIdx : nextOldFiber.key
	                ),
	              (currentFirstChild = placeChild(
	                nextOldFiber,
	                currentFirstChild,
	                newIdx
	              )),
	              null === previousNewFiber
	                ? (resultingFirstChild = nextOldFiber)
	                : (previousNewFiber.sibling = nextOldFiber),
	              (previousNewFiber = nextOldFiber));
	        shouldTrackSideEffects &&
	          oldFiber.forEach(function (child) {
	            return deleteChild(returnFiber, child);
	          });
	        isHydrating && pushTreeFork(returnFiber, newIdx);
	        return resultingFirstChild;
	      }
	      function reconcileChildrenIterator(
	        returnFiber,
	        currentFirstChild,
	        newChildren,
	        lanes
	      ) {
	        if (null == newChildren)
	          throw Error("An iterable object provided no iterator.");
	        for (
	          var resultingFirstChild = null,
	            previousNewFiber = null,
	            oldFiber = currentFirstChild,
	            newIdx = (currentFirstChild = 0),
	            nextOldFiber = null,
	            knownKeys = null,
	            step = newChildren.next();
	          null !== oldFiber && !step.done;
	          newIdx++, step = newChildren.next()
	        ) {
	          oldFiber.index > newIdx
	            ? ((nextOldFiber = oldFiber), (oldFiber = null))
	            : (nextOldFiber = oldFiber.sibling);
	          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
	          if (null === newFiber) {
	            null === oldFiber && (oldFiber = nextOldFiber);
	            break;
	          }
	          knownKeys = warnOnInvalidKey(
	            returnFiber,
	            newFiber,
	            step.value,
	            knownKeys
	          );
	          shouldTrackSideEffects &&
	            oldFiber &&
	            null === newFiber.alternate &&
	            deleteChild(returnFiber, oldFiber);
	          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
	          null === previousNewFiber
	            ? (resultingFirstChild = newFiber)
	            : (previousNewFiber.sibling = newFiber);
	          previousNewFiber = newFiber;
	          oldFiber = nextOldFiber;
	        }
	        if (step.done)
	          return (
	            deleteRemainingChildren(returnFiber, oldFiber),
	            isHydrating && pushTreeFork(returnFiber, newIdx),
	            resultingFirstChild
	          );
	        if (null === oldFiber) {
	          for (; !step.done; newIdx++, step = newChildren.next())
	            (oldFiber = createChild(returnFiber, step.value, lanes)),
	              null !== oldFiber &&
	                ((knownKeys = warnOnInvalidKey(
	                  returnFiber,
	                  oldFiber,
	                  step.value,
	                  knownKeys
	                )),
	                (currentFirstChild = placeChild(
	                  oldFiber,
	                  currentFirstChild,
	                  newIdx
	                )),
	                null === previousNewFiber
	                  ? (resultingFirstChild = oldFiber)
	                  : (previousNewFiber.sibling = oldFiber),
	                (previousNewFiber = oldFiber));
	          isHydrating && pushTreeFork(returnFiber, newIdx);
	          return resultingFirstChild;
	        }
	        for (
	          oldFiber = mapRemainingChildren(oldFiber);
	          !step.done;
	          newIdx++, step = newChildren.next()
	        )
	          (nextOldFiber = updateFromMap(
	            oldFiber,
	            returnFiber,
	            newIdx,
	            step.value,
	            lanes
	          )),
	            null !== nextOldFiber &&
	              ((knownKeys = warnOnInvalidKey(
	                returnFiber,
	                nextOldFiber,
	                step.value,
	                knownKeys
	              )),
	              shouldTrackSideEffects &&
	                null !== nextOldFiber.alternate &&
	                oldFiber.delete(
	                  null === nextOldFiber.key ? newIdx : nextOldFiber.key
	                ),
	              (currentFirstChild = placeChild(
	                nextOldFiber,
	                currentFirstChild,
	                newIdx
	              )),
	              null === previousNewFiber
	                ? (resultingFirstChild = nextOldFiber)
	                : (previousNewFiber.sibling = nextOldFiber),
	              (previousNewFiber = nextOldFiber));
	        shouldTrackSideEffects &&
	          oldFiber.forEach(function (child) {
	            return deleteChild(returnFiber, child);
	          });
	        isHydrating && pushTreeFork(returnFiber, newIdx);
	        return resultingFirstChild;
	      }
	      function reconcileChildFibersImpl(
	        returnFiber,
	        currentFirstChild,
	        newChild,
	        lanes
	      ) {
	        "object" === typeof newChild &&
	          null !== newChild &&
	          newChild.type === REACT_FRAGMENT_TYPE &&
	          null === newChild.key &&
	          (validateFragmentProps(newChild, null, returnFiber),
	          (newChild = newChild.props.children));
	        if ("object" === typeof newChild && null !== newChild) {
	          switch (newChild.$$typeof) {
	            case REACT_ELEMENT_TYPE:
	              var prevDebugInfo = pushDebugInfo(newChild._debugInfo);
	              a: {
	                for (var key = newChild.key; null !== currentFirstChild; ) {
	                  if (currentFirstChild.key === key) {
	                    key = newChild.type;
	                    if (key === REACT_FRAGMENT_TYPE) {
	                      if (7 === currentFirstChild.tag) {
	                        deleteRemainingChildren(
	                          returnFiber,
	                          currentFirstChild.sibling
	                        );
	                        lanes = useFiber(
	                          currentFirstChild,
	                          newChild.props.children
	                        );
	                        lanes.return = returnFiber;
	                        lanes._debugOwner = newChild._owner;
	                        lanes._debugInfo = currentDebugInfo;
	                        validateFragmentProps(newChild, lanes, returnFiber);
	                        returnFiber = lanes;
	                        break a;
	                      }
	                    } else if (
	                      currentFirstChild.elementType === key ||
	                      isCompatibleFamilyForHotReloading(
	                        currentFirstChild,
	                        newChild
	                      ) ||
	                      ("object" === typeof key &&
	                        null !== key &&
	                        key.$$typeof === REACT_LAZY_TYPE &&
	                        callLazyInitInDEV(key) === currentFirstChild.type)
	                    ) {
	                      deleteRemainingChildren(
	                        returnFiber,
	                        currentFirstChild.sibling
	                      );
	                      lanes = useFiber(currentFirstChild, newChild.props);
	                      coerceRef(lanes, newChild);
	                      lanes.return = returnFiber;
	                      lanes._debugOwner = newChild._owner;
	                      lanes._debugInfo = currentDebugInfo;
	                      returnFiber = lanes;
	                      break a;
	                    }
	                    deleteRemainingChildren(returnFiber, currentFirstChild);
	                    break;
	                  } else deleteChild(returnFiber, currentFirstChild);
	                  currentFirstChild = currentFirstChild.sibling;
	                }
	                newChild.type === REACT_FRAGMENT_TYPE
	                  ? ((lanes = createFiberFromFragment(
	                      newChild.props.children,
	                      returnFiber.mode,
	                      lanes,
	                      newChild.key
	                    )),
	                    (lanes.return = returnFiber),
	                    (lanes._debugOwner = returnFiber),
	                    (lanes._debugTask = returnFiber._debugTask),
	                    (lanes._debugInfo = currentDebugInfo),
	                    validateFragmentProps(newChild, lanes, returnFiber),
	                    (returnFiber = lanes))
	                  : ((lanes = createFiberFromElement(
	                      newChild,
	                      returnFiber.mode,
	                      lanes
	                    )),
	                    coerceRef(lanes, newChild),
	                    (lanes.return = returnFiber),
	                    (lanes._debugInfo = currentDebugInfo),
	                    (returnFiber = lanes));
	              }
	              returnFiber = placeSingleChild(returnFiber);
	              currentDebugInfo = prevDebugInfo;
	              return returnFiber;
	            case REACT_PORTAL_TYPE:
	              a: {
	                prevDebugInfo = newChild;
	                for (
	                  newChild = prevDebugInfo.key;
	                  null !== currentFirstChild;

	                ) {
	                  if (currentFirstChild.key === newChild)
	                    if (
	                      4 === currentFirstChild.tag &&
	                      currentFirstChild.stateNode.containerInfo ===
	                        prevDebugInfo.containerInfo &&
	                      currentFirstChild.stateNode.implementation ===
	                        prevDebugInfo.implementation
	                    ) {
	                      deleteRemainingChildren(
	                        returnFiber,
	                        currentFirstChild.sibling
	                      );
	                      lanes = useFiber(
	                        currentFirstChild,
	                        prevDebugInfo.children || []
	                      );
	                      lanes.return = returnFiber;
	                      returnFiber = lanes;
	                      break a;
	                    } else {
	                      deleteRemainingChildren(returnFiber, currentFirstChild);
	                      break;
	                    }
	                  else deleteChild(returnFiber, currentFirstChild);
	                  currentFirstChild = currentFirstChild.sibling;
	                }
	                lanes = createFiberFromPortal(
	                  prevDebugInfo,
	                  returnFiber.mode,
	                  lanes
	                );
	                lanes.return = returnFiber;
	                returnFiber = lanes;
	              }
	              return placeSingleChild(returnFiber);
	            case REACT_LAZY_TYPE:
	              return (
	                (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
	                (newChild = callLazyInitInDEV(newChild)),
	                (returnFiber = reconcileChildFibersImpl(
	                  returnFiber,
	                  currentFirstChild,
	                  newChild,
	                  lanes
	                )),
	                (currentDebugInfo = prevDebugInfo),
	                returnFiber
	              );
	          }
	          if (isArrayImpl(newChild))
	            return (
	              (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = reconcileChildrenArray(
	                returnFiber,
	                currentFirstChild,
	                newChild,
	                lanes
	              )),
	              (currentDebugInfo = prevDebugInfo),
	              returnFiber
	            );
	          if (getIteratorFn(newChild)) {
	            prevDebugInfo = pushDebugInfo(newChild._debugInfo);
	            key = getIteratorFn(newChild);
	            if ("function" !== typeof key)
	              throw Error(
	                "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
	              );
	            var newChildren = key.call(newChild);
	            if (newChildren === newChild) {
	              if (
	                0 !== returnFiber.tag ||
	                "[object GeneratorFunction]" !==
	                  Object.prototype.toString.call(returnFiber.type) ||
	                "[object Generator]" !==
	                  Object.prototype.toString.call(newChildren)
	              )
	                didWarnAboutGenerators ||
	                  console.error(
	                    "Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."
	                  ),
	                  (didWarnAboutGenerators = true);
	            } else
	              newChild.entries !== key ||
	                didWarnAboutMaps ||
	                (console.error(
	                  "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
	                ),
	                (didWarnAboutMaps = true));
	            returnFiber = reconcileChildrenIterator(
	              returnFiber,
	              currentFirstChild,
	              newChildren,
	              lanes
	            );
	            currentDebugInfo = prevDebugInfo;
	            return returnFiber;
	          }
	          if ("function" === typeof newChild.then)
	            return (
	              (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
	              (returnFiber = reconcileChildFibersImpl(
	                returnFiber,
	                currentFirstChild,
	                unwrapThenable(newChild),
	                lanes
	              )),
	              (currentDebugInfo = prevDebugInfo),
	              returnFiber
	            );
	          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
	            return reconcileChildFibersImpl(
	              returnFiber,
	              currentFirstChild,
	              readContextDuringReconciliation(returnFiber, newChild),
	              lanes
	            );
	          throwOnInvalidObjectType(returnFiber, newChild);
	        }
	        if (
	          ("string" === typeof newChild && "" !== newChild) ||
	          "number" === typeof newChild ||
	          "bigint" === typeof newChild
	        )
	          return (
	            (prevDebugInfo = "" + newChild),
	            null !== currentFirstChild && 6 === currentFirstChild.tag
	              ? (deleteRemainingChildren(
	                  returnFiber,
	                  currentFirstChild.sibling
	                ),
	                (lanes = useFiber(currentFirstChild, prevDebugInfo)),
	                (lanes.return = returnFiber),
	                (returnFiber = lanes))
	              : (deleteRemainingChildren(returnFiber, currentFirstChild),
	                (lanes = createFiberFromText(
	                  prevDebugInfo,
	                  returnFiber.mode,
	                  lanes
	                )),
	                (lanes.return = returnFiber),
	                (lanes._debugOwner = returnFiber),
	                (lanes._debugTask = returnFiber._debugTask),
	                (lanes._debugInfo = currentDebugInfo),
	                (returnFiber = lanes)),
	            placeSingleChild(returnFiber)
	          );
	        "function" === typeof newChild &&
	          warnOnFunctionType(returnFiber, newChild);
	        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
	        return deleteRemainingChildren(returnFiber, currentFirstChild);
	      }
	      return function (returnFiber, currentFirstChild, newChild, lanes) {
	        var prevDebugInfo = currentDebugInfo;
	        currentDebugInfo = null;
	        try {
	          thenableIndexCounter = 0;
	          var firstChildFiber = reconcileChildFibersImpl(
	            returnFiber,
	            currentFirstChild,
	            newChild,
	            lanes
	          );
	          thenableState = null;
	          return firstChildFiber;
	        } catch (x) {
	          if (x === SuspenseException || x === SuspenseActionException) throw x;
	          var fiber = createFiber(29, x, null, returnFiber.mode);
	          fiber.lanes = lanes;
	          fiber.return = returnFiber;
	          var debugInfo = (fiber._debugInfo = currentDebugInfo);
	          fiber._debugOwner = returnFiber._debugOwner;
	          fiber._debugTask = returnFiber._debugTask;
	          if (null != debugInfo)
	            for (var i = debugInfo.length - 1; 0 <= i; i--)
	              if ("string" === typeof debugInfo[i].stack) {
	                fiber._debugOwner = debugInfo[i];
	                fiber._debugTask = debugInfo[i].debugTask;
	                break;
	              }
	          return fiber;
	        } finally {
	          currentDebugInfo = prevDebugInfo;
	        }
	      };
	    }
	    function pushPrimaryTreeSuspenseHandler(handler) {
	      var current = handler.alternate;
	      push(
	        suspenseStackCursor,
	        suspenseStackCursor.current & SubtreeSuspenseContextMask,
	        handler
	      );
	      push(suspenseHandlerStackCursor, handler, handler);
	      null === shellBoundary &&
	        (null === current || null !== currentTreeHiddenStackCursor.current
	          ? (shellBoundary = handler)
	          : null !== current.memoizedState && (shellBoundary = handler));
	    }
	    function pushOffscreenSuspenseHandler(fiber) {
	      if (22 === fiber.tag) {
	        if (
	          (push(suspenseStackCursor, suspenseStackCursor.current, fiber),
	          push(suspenseHandlerStackCursor, fiber, fiber),
	          null === shellBoundary)
	        ) {
	          var current = fiber.alternate;
	          null !== current &&
	            null !== current.memoizedState &&
	            (shellBoundary = fiber);
	        }
	      } else reuseSuspenseHandlerOnStack(fiber);
	    }
	    function reuseSuspenseHandlerOnStack(fiber) {
	      push(suspenseStackCursor, suspenseStackCursor.current, fiber);
	      push(
	        suspenseHandlerStackCursor,
	        suspenseHandlerStackCursor.current,
	        fiber
	      );
	    }
	    function popSuspenseHandler(fiber) {
	      pop(suspenseHandlerStackCursor, fiber);
	      shellBoundary === fiber && (shellBoundary = null);
	      pop(suspenseStackCursor, fiber);
	    }
	    function findFirstSuspended(row) {
	      for (var node = row; null !== node; ) {
	        if (13 === node.tag) {
	          var state = node.memoizedState;
	          if (
	            null !== state &&
	            ((state = state.dehydrated),
	            null === state ||
	              state.data === SUSPENSE_PENDING_START_DATA ||
	              isSuspenseInstanceFallback(state))
	          )
	            return node;
	        } else if (
	          19 === node.tag &&
	          void 0 !== node.memoizedProps.revealOrder
	        ) {
	          if (0 !== (node.flags & 128)) return node;
	        } else if (null !== node.child) {
	          node.child.return = node;
	          node = node.child;
	          continue;
	        }
	        if (node === row) break;
	        for (; null === node.sibling; ) {
	          if (null === node.return || node.return === row) return null;
	          node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	      }
	      return null;
	    }
	    function warnOnInvalidCallback(callback) {
	      if (null !== callback && "function" !== typeof callback) {
	        var key = String(callback);
	        didWarnOnInvalidCallback.has(key) ||
	          (didWarnOnInvalidCallback.add(key),
	          console.error(
	            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
	            callback
	          ));
	      }
	    }
	    function applyDerivedStateFromProps(
	      workInProgress,
	      ctor,
	      getDerivedStateFromProps,
	      nextProps
	    ) {
	      var prevState = workInProgress.memoizedState,
	        partialState = getDerivedStateFromProps(nextProps, prevState);
	      if (workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);
	        try {
	          partialState = getDerivedStateFromProps(nextProps, prevState);
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	      void 0 === partialState &&
	        ((ctor = getComponentNameFromType(ctor) || "Component"),
	        didWarnAboutUndefinedDerivedState.has(ctor) ||
	          (didWarnAboutUndefinedDerivedState.add(ctor),
	          console.error(
	            "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
	            ctor
	          )));
	      prevState =
	        null === partialState || void 0 === partialState
	          ? prevState
	          : assign({}, prevState, partialState);
	      workInProgress.memoizedState = prevState;
	      0 === workInProgress.lanes &&
	        (workInProgress.updateQueue.baseState = prevState);
	    }
	    function checkShouldComponentUpdate(
	      workInProgress,
	      ctor,
	      oldProps,
	      newProps,
	      oldState,
	      newState,
	      nextContext
	    ) {
	      var instance = workInProgress.stateNode;
	      if ("function" === typeof instance.shouldComponentUpdate) {
	        oldProps = instance.shouldComponentUpdate(
	          newProps,
	          newState,
	          nextContext
	        );
	        if (workInProgress.mode & StrictLegacyMode) {
	          setIsStrictModeForDevtools(true);
	          try {
	            oldProps = instance.shouldComponentUpdate(
	              newProps,
	              newState,
	              nextContext
	            );
	          } finally {
	            setIsStrictModeForDevtools(false);
	          }
	        }
	        void 0 === oldProps &&
	          console.error(
	            "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
	            getComponentNameFromType(ctor) || "Component"
	          );
	        return oldProps;
	      }
	      return ctor.prototype && ctor.prototype.isPureReactComponent
	        ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)
	        : true;
	    }
	    function callComponentWillReceiveProps(
	      workInProgress,
	      instance,
	      newProps,
	      nextContext
	    ) {
	      var oldState = instance.state;
	      "function" === typeof instance.componentWillReceiveProps &&
	        instance.componentWillReceiveProps(newProps, nextContext);
	      "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
	        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	      instance.state !== oldState &&
	        ((workInProgress =
	          getComponentNameFromFiber(workInProgress) || "Component"),
	        didWarnAboutStateAssignmentForComponent.has(workInProgress) ||
	          (didWarnAboutStateAssignmentForComponent.add(workInProgress),
	          console.error(
	            "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
	            workInProgress
	          )),
	        classComponentUpdater.enqueueReplaceState(
	          instance,
	          instance.state,
	          null
	        ));
	    }
	    function resolveClassComponentProps(Component, baseProps) {
	      var newProps = baseProps;
	      if ("ref" in baseProps) {
	        newProps = {};
	        for (var propName in baseProps)
	          "ref" !== propName && (newProps[propName] = baseProps[propName]);
	      }
	      if ((Component = Component.defaultProps)) {
	        newProps === baseProps && (newProps = assign({}, newProps));
	        for (var _propName in Component)
	          void 0 === newProps[_propName] &&
	            (newProps[_propName] = Component[_propName]);
	      }
	      return newProps;
	    }
	    function defaultOnUncaughtError(error) {
	      reportGlobalError(error);
	      console.warn(
	        "%s\n\n%s\n",
	        componentName
	          ? "An error occurred in the <" + componentName + "> component."
	          : "An error occurred in one of your React components.",
	        "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries."
	      );
	    }
	    function defaultOnCaughtError(error) {
	      var componentNameMessage = componentName
	          ? "The above error occurred in the <" + componentName + "> component."
	          : "The above error occurred in one of your React components.",
	        recreateMessage =
	          "React will try to recreate this component tree from scratch using the error boundary you provided, " +
	          ((errorBoundaryName || "Anonymous") + ".");
	      if (
	        "object" === typeof error &&
	        null !== error &&
	        "string" === typeof error.environmentName
	      ) {
	        var JSCompiler_inline_result = error.environmentName;
	        error = [
	          "%o\n\n%s\n\n%s\n",
	          error,
	          componentNameMessage,
	          recreateMessage
	        ].slice(0);
	        "string" === typeof error[0]
	          ? error.splice(
	              0,
	              1,
	              badgeFormat + error[0],
	              badgeStyle,
	              pad + JSCompiler_inline_result + pad,
	              resetStyle
	            )
	          : error.splice(
	              0,
	              0,
	              badgeFormat,
	              badgeStyle,
	              pad + JSCompiler_inline_result + pad,
	              resetStyle
	            );
	        error.unshift(console);
	        JSCompiler_inline_result = bind.apply(console.error, error);
	        JSCompiler_inline_result();
	      } else
	        console.error(
	          "%o\n\n%s\n\n%s\n",
	          error,
	          componentNameMessage,
	          recreateMessage
	        );
	    }
	    function defaultOnRecoverableError(error) {
	      reportGlobalError(error);
	    }
	    function logUncaughtError(root, errorInfo) {
	      try {
	        componentName = errorInfo.source
	          ? getComponentNameFromFiber(errorInfo.source)
	          : null;
	        errorBoundaryName = null;
	        var error = errorInfo.value;
	        if (null !== ReactSharedInternals.actQueue)
	          ReactSharedInternals.thrownErrors.push(error);
	        else {
	          var onUncaughtError = root.onUncaughtError;
	          onUncaughtError(error, { componentStack: errorInfo.stack });
	        }
	      } catch (e$5) {
	        setTimeout(function () {
	          throw e$5;
	        });
	      }
	    }
	    function logCaughtError(root, boundary, errorInfo) {
	      try {
	        componentName = errorInfo.source
	          ? getComponentNameFromFiber(errorInfo.source)
	          : null;
	        errorBoundaryName = getComponentNameFromFiber(boundary);
	        var onCaughtError = root.onCaughtError;
	        onCaughtError(errorInfo.value, {
	          componentStack: errorInfo.stack,
	          errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
	        });
	      } catch (e$6) {
	        setTimeout(function () {
	          throw e$6;
	        });
	      }
	    }
	    function createRootErrorUpdate(root, errorInfo, lane) {
	      lane = createUpdate(lane);
	      lane.tag = CaptureUpdate;
	      lane.payload = { element: null };
	      lane.callback = function () {
	        runWithFiberInDEV(errorInfo.source, logUncaughtError, root, errorInfo);
	      };
	      return lane;
	    }
	    function createClassErrorUpdate(lane) {
	      lane = createUpdate(lane);
	      lane.tag = CaptureUpdate;
	      return lane;
	    }
	    function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
	      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
	      if ("function" === typeof getDerivedStateFromError) {
	        var error = errorInfo.value;
	        update.payload = function () {
	          return getDerivedStateFromError(error);
	        };
	        update.callback = function () {
	          markFailedErrorBoundaryForHotReloading(fiber);
	          runWithFiberInDEV(
	            errorInfo.source,
	            logCaughtError,
	            root,
	            fiber,
	            errorInfo
	          );
	        };
	      }
	      var inst = fiber.stateNode;
	      null !== inst &&
	        "function" === typeof inst.componentDidCatch &&
	        (update.callback = function () {
	          markFailedErrorBoundaryForHotReloading(fiber);
	          runWithFiberInDEV(
	            errorInfo.source,
	            logCaughtError,
	            root,
	            fiber,
	            errorInfo
	          );
	          "function" !== typeof getDerivedStateFromError &&
	            (null === legacyErrorBoundariesThatAlreadyFailed
	              ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))
	              : legacyErrorBoundariesThatAlreadyFailed.add(this));
	          callComponentDidCatchInDEV(this, errorInfo);
	          "function" === typeof getDerivedStateFromError ||
	            (0 === (fiber.lanes & 2) &&
	              console.error(
	                "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
	                getComponentNameFromFiber(fiber) || "Unknown"
	              ));
	        });
	    }
	    function throwException(
	      root,
	      returnFiber,
	      sourceFiber,
	      value,
	      rootRenderLanes
	    ) {
	      sourceFiber.flags |= 32768;
	      isDevToolsPresent && restorePendingUpdaters(root, rootRenderLanes);
	      if (
	        null !== value &&
	        "object" === typeof value &&
	        "function" === typeof value.then
	      ) {
	        returnFiber = sourceFiber.alternate;
	        null !== returnFiber &&
	          propagateParentContextChanges(
	            returnFiber,
	            sourceFiber,
	            rootRenderLanes,
	            true
	          );
	        isHydrating && (didSuspendOrErrorDEV = true);
	        sourceFiber = suspenseHandlerStackCursor.current;
	        if (null !== sourceFiber) {
	          switch (sourceFiber.tag) {
	            case 13:
	              return (
	                null === shellBoundary
	                  ? renderDidSuspendDelayIfPossible()
	                  : null === sourceFiber.alternate &&
	                    workInProgressRootExitStatus === RootInProgress &&
	                    (workInProgressRootExitStatus = RootSuspended),
	                (sourceFiber.flags &= -257),
	                (sourceFiber.flags |= 65536),
	                (sourceFiber.lanes = rootRenderLanes),
	                value === noopSuspenseyCommitThenable
	                  ? (sourceFiber.flags |= 16384)
	                  : ((returnFiber = sourceFiber.updateQueue),
	                    null === returnFiber
	                      ? (sourceFiber.updateQueue = new Set([value]))
	                      : returnFiber.add(value),
	                    attachPingListener(root, value, rootRenderLanes)),
	                false
	              );
	            case 22:
	              return (
	                (sourceFiber.flags |= 65536),
	                value === noopSuspenseyCommitThenable
	                  ? (sourceFiber.flags |= 16384)
	                  : ((returnFiber = sourceFiber.updateQueue),
	                    null === returnFiber
	                      ? ((returnFiber = {
	                          transitions: null,
	                          markerInstances: null,
	                          retryQueue: new Set([value])
	                        }),
	                        (sourceFiber.updateQueue = returnFiber))
	                      : ((sourceFiber = returnFiber.retryQueue),
	                        null === sourceFiber
	                          ? (returnFiber.retryQueue = new Set([value]))
	                          : sourceFiber.add(value)),
	                    attachPingListener(root, value, rootRenderLanes)),
	                false
	              );
	          }
	          throw Error(
	            "Unexpected Suspense handler tag (" +
	              sourceFiber.tag +
	              "). This is a bug in React."
	          );
	        }
	        attachPingListener(root, value, rootRenderLanes);
	        renderDidSuspendDelayIfPossible();
	        return false;
	      }
	      if (isHydrating)
	        return (
	          (didSuspendOrErrorDEV = true),
	          (returnFiber = suspenseHandlerStackCursor.current),
	          null !== returnFiber
	            ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256),
	              (returnFiber.flags |= 65536),
	              (returnFiber.lanes = rootRenderLanes),
	              value !== HydrationMismatchException &&
	                queueHydrationError(
	                  createCapturedValueAtFiber(
	                    Error(
	                      "There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",
	                      { cause: value }
	                    ),
	                    sourceFiber
	                  )
	                ))
	            : (value !== HydrationMismatchException &&
	                queueHydrationError(
	                  createCapturedValueAtFiber(
	                    Error(
	                      "There was an error while hydrating but React was able to recover by instead client rendering the entire root.",
	                      { cause: value }
	                    ),
	                    sourceFiber
	                  )
	                ),
	              (root = root.current.alternate),
	              (root.flags |= 65536),
	              (rootRenderLanes &= -rootRenderLanes),
	              (root.lanes |= rootRenderLanes),
	              (value = createCapturedValueAtFiber(value, sourceFiber)),
	              (rootRenderLanes = createRootErrorUpdate(
	                root.stateNode,
	                value,
	                rootRenderLanes
	              )),
	              enqueueCapturedUpdate(root, rootRenderLanes),
	              workInProgressRootExitStatus !== RootSuspendedWithDelay &&
	                (workInProgressRootExitStatus = RootErrored)),
	          false
	        );
	      var error = createCapturedValueAtFiber(
	        Error(
	          "There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",
	          { cause: value }
	        ),
	        sourceFiber
	      );
	      null === workInProgressRootConcurrentErrors
	        ? (workInProgressRootConcurrentErrors = [error])
	        : workInProgressRootConcurrentErrors.push(error);
	      workInProgressRootExitStatus !== RootSuspendedWithDelay &&
	        (workInProgressRootExitStatus = RootErrored);
	      if (null === returnFiber) return true;
	      value = createCapturedValueAtFiber(value, sourceFiber);
	      sourceFiber = returnFiber;
	      do {
	        switch (sourceFiber.tag) {
	          case 3:
	            return (
	              (sourceFiber.flags |= 65536),
	              (root = rootRenderLanes & -rootRenderLanes),
	              (sourceFiber.lanes |= root),
	              (root = createRootErrorUpdate(
	                sourceFiber.stateNode,
	                value,
	                root
	              )),
	              enqueueCapturedUpdate(sourceFiber, root),
	              false
	            );
	          case 1:
	            if (
	              ((returnFiber = sourceFiber.type),
	              (error = sourceFiber.stateNode),
	              0 === (sourceFiber.flags & 128) &&
	                ("function" === typeof returnFiber.getDerivedStateFromError ||
	                  (null !== error &&
	                    "function" === typeof error.componentDidCatch &&
	                    (null === legacyErrorBoundariesThatAlreadyFailed ||
	                      !legacyErrorBoundariesThatAlreadyFailed.has(error)))))
	            )
	              return (
	                (sourceFiber.flags |= 65536),
	                (rootRenderLanes &= -rootRenderLanes),
	                (sourceFiber.lanes |= rootRenderLanes),
	                (rootRenderLanes = createClassErrorUpdate(rootRenderLanes)),
	                initializeClassErrorUpdate(
	                  rootRenderLanes,
	                  root,
	                  sourceFiber,
	                  value
	                ),
	                enqueueCapturedUpdate(sourceFiber, rootRenderLanes),
	                false
	              );
	        }
	        sourceFiber = sourceFiber.return;
	      } while (null !== sourceFiber);
	      return false;
	    }
	    function reconcileChildren(
	      current,
	      workInProgress,
	      nextChildren,
	      renderLanes
	    ) {
	      workInProgress.child =
	        null === current
	          ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)
	          : reconcileChildFibers(
	              workInProgress,
	              current.child,
	              nextChildren,
	              renderLanes
	            );
	    }
	    function updateForwardRef(
	      current,
	      workInProgress,
	      Component,
	      nextProps,
	      renderLanes
	    ) {
	      Component = Component.render;
	      var ref = workInProgress.ref;
	      if ("ref" in nextProps) {
	        var propsWithoutRef = {};
	        for (var key in nextProps)
	          "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
	      } else propsWithoutRef = nextProps;
	      prepareToReadContext(workInProgress);
	      markComponentRenderStarted(workInProgress);
	      nextProps = renderWithHooks(
	        current,
	        workInProgress,
	        Component,
	        propsWithoutRef,
	        ref,
	        renderLanes
	      );
	      key = checkDidRenderIdHook();
	      markComponentRenderStopped();
	      if (null !== current && !didReceiveUpdate)
	        return (
	          bailoutHooks(current, workInProgress, renderLanes),
	          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	        );
	      isHydrating && key && pushMaterializedTreeId(workInProgress);
	      workInProgress.flags |= 1;
	      reconcileChildren(current, workInProgress, nextProps, renderLanes);
	      return workInProgress.child;
	    }
	    function updateMemoComponent(
	      current,
	      workInProgress,
	      Component,
	      nextProps,
	      renderLanes
	    ) {
	      if (null === current) {
	        var type = Component.type;
	        if (
	          "function" === typeof type &&
	          !shouldConstruct(type) &&
	          void 0 === type.defaultProps &&
	          null === Component.compare
	        )
	          return (
	            (Component = resolveFunctionForHotReloading(type)),
	            (workInProgress.tag = 15),
	            (workInProgress.type = Component),
	            validateFunctionComponentInDev(workInProgress, type),
	            updateSimpleMemoComponent(
	              current,
	              workInProgress,
	              Component,
	              nextProps,
	              renderLanes
	            )
	          );
	        current = createFiberFromTypeAndProps(
	          Component.type,
	          null,
	          nextProps,
	          workInProgress,
	          workInProgress.mode,
	          renderLanes
	        );
	        current.ref = workInProgress.ref;
	        current.return = workInProgress;
	        return (workInProgress.child = current);
	      }
	      type = current.child;
	      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
	        var prevProps = type.memoizedProps;
	        Component = Component.compare;
	        Component = null !== Component ? Component : shallowEqual;
	        if (
	          Component(prevProps, nextProps) &&
	          current.ref === workInProgress.ref
	        )
	          return bailoutOnAlreadyFinishedWork(
	            current,
	            workInProgress,
	            renderLanes
	          );
	      }
	      workInProgress.flags |= 1;
	      current = createWorkInProgress(type, nextProps);
	      current.ref = workInProgress.ref;
	      current.return = workInProgress;
	      return (workInProgress.child = current);
	    }
	    function updateSimpleMemoComponent(
	      current,
	      workInProgress,
	      Component,
	      nextProps,
	      renderLanes
	    ) {
	      if (null !== current) {
	        var prevProps = current.memoizedProps;
	        if (
	          shallowEqual(prevProps, nextProps) &&
	          current.ref === workInProgress.ref &&
	          workInProgress.type === current.type
	        )
	          if (
	            ((didReceiveUpdate = false),
	            (workInProgress.pendingProps = nextProps = prevProps),
	            checkScheduledUpdateOrContext(current, renderLanes))
	          )
	            0 !== (current.flags & 131072) && (didReceiveUpdate = true);
	          else
	            return (
	              (workInProgress.lanes = current.lanes),
	              bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	            );
	      }
	      return updateFunctionComponent(
	        current,
	        workInProgress,
	        Component,
	        nextProps,
	        renderLanes
	      );
	    }
	    function updateOffscreenComponent(current, workInProgress, renderLanes) {
	      var nextProps = workInProgress.pendingProps,
	        nextChildren = nextProps.children,
	        prevState = null !== current ? current.memoizedState : null;
	      if ("hidden" === nextProps.mode) {
	        if (0 !== (workInProgress.flags & 128)) {
	          nextProps =
	            null !== prevState
	              ? prevState.baseLanes | renderLanes
	              : renderLanes;
	          if (null !== current) {
	            nextChildren = workInProgress.child = current.child;
	            for (prevState = 0; null !== nextChildren; )
	              (prevState =
	                prevState | nextChildren.lanes | nextChildren.childLanes),
	                (nextChildren = nextChildren.sibling);
	            workInProgress.childLanes = prevState & ~nextProps;
	          } else (workInProgress.childLanes = 0), (workInProgress.child = null);
	          return deferHiddenOffscreenComponent(
	            current,
	            workInProgress,
	            nextProps,
	            renderLanes
	          );
	        }
	        if (0 !== (renderLanes & 536870912))
	          (workInProgress.memoizedState = { baseLanes: 0, cachePool: null }),
	            null !== current &&
	              pushTransition(
	                workInProgress,
	                null !== prevState ? prevState.cachePool : null
	              ),
	            null !== prevState
	              ? pushHiddenContext(workInProgress, prevState)
	              : reuseHiddenContextOnStack(workInProgress),
	            pushOffscreenSuspenseHandler(workInProgress);
	        else
	          return (
	            (workInProgress.lanes = workInProgress.childLanes = 536870912),
	            deferHiddenOffscreenComponent(
	              current,
	              workInProgress,
	              null !== prevState
	                ? prevState.baseLanes | renderLanes
	                : renderLanes,
	              renderLanes
	            )
	          );
	      } else
	        null !== prevState
	          ? (pushTransition(workInProgress, prevState.cachePool),
	            pushHiddenContext(workInProgress, prevState),
	            reuseSuspenseHandlerOnStack(workInProgress),
	            (workInProgress.memoizedState = null))
	          : (null !== current && pushTransition(workInProgress, null),
	            reuseHiddenContextOnStack(workInProgress),
	            reuseSuspenseHandlerOnStack(workInProgress));
	      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	      return workInProgress.child;
	    }
	    function deferHiddenOffscreenComponent(
	      current,
	      workInProgress,
	      nextBaseLanes,
	      renderLanes
	    ) {
	      var JSCompiler_inline_result = peekCacheFromPool();
	      JSCompiler_inline_result =
	        null === JSCompiler_inline_result
	          ? null
	          : {
	              parent: CacheContext._currentValue,
	              pool: JSCompiler_inline_result
	            };
	      workInProgress.memoizedState = {
	        baseLanes: nextBaseLanes,
	        cachePool: JSCompiler_inline_result
	      };
	      null !== current && pushTransition(workInProgress, null);
	      reuseHiddenContextOnStack(workInProgress);
	      pushOffscreenSuspenseHandler(workInProgress);
	      null !== current &&
	        propagateParentContextChanges(current, workInProgress, renderLanes, true);
	      return null;
	    }
	    function markRef(current, workInProgress) {
	      var ref = workInProgress.ref;
	      if (null === ref)
	        null !== current &&
	          null !== current.ref &&
	          (workInProgress.flags |= 4194816);
	      else {
	        if ("function" !== typeof ref && "object" !== typeof ref)
	          throw Error(
	            "Expected ref to be a function, an object returned by React.createRef(), or undefined/null."
	          );
	        if (null === current || current.ref !== ref)
	          workInProgress.flags |= 4194816;
	      }
	    }
	    function updateFunctionComponent(
	      current,
	      workInProgress,
	      Component,
	      nextProps,
	      renderLanes
	    ) {
	      if (
	        Component.prototype &&
	        "function" === typeof Component.prototype.render
	      ) {
	        var componentName = getComponentNameFromType(Component) || "Unknown";
	        didWarnAboutBadClass[componentName] ||
	          (console.error(
	            "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
	            componentName,
	            componentName
	          ),
	          (didWarnAboutBadClass[componentName] = true));
	      }
	      workInProgress.mode & StrictLegacyMode &&
	        ReactStrictModeWarnings.recordLegacyContextWarning(
	          workInProgress,
	          null
	        );
	      null === current &&
	        (validateFunctionComponentInDev(workInProgress, workInProgress.type),
	        Component.contextTypes &&
	          ((componentName = getComponentNameFromType(Component) || "Unknown"),
	          didWarnAboutContextTypes[componentName] ||
	            ((didWarnAboutContextTypes[componentName] = true),
	            console.error(
	              "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",
	              componentName
	            ))));
	      prepareToReadContext(workInProgress);
	      markComponentRenderStarted(workInProgress);
	      Component = renderWithHooks(
	        current,
	        workInProgress,
	        Component,
	        nextProps,
	        void 0,
	        renderLanes
	      );
	      nextProps = checkDidRenderIdHook();
	      markComponentRenderStopped();
	      if (null !== current && !didReceiveUpdate)
	        return (
	          bailoutHooks(current, workInProgress, renderLanes),
	          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	        );
	      isHydrating && nextProps && pushMaterializedTreeId(workInProgress);
	      workInProgress.flags |= 1;
	      reconcileChildren(current, workInProgress, Component, renderLanes);
	      return workInProgress.child;
	    }
	    function replayFunctionComponent(
	      current,
	      workInProgress,
	      nextProps,
	      Component,
	      secondArg,
	      renderLanes
	    ) {
	      prepareToReadContext(workInProgress);
	      markComponentRenderStarted(workInProgress);
	      hookTypesUpdateIndexDev = -1;
	      ignorePreviousDependencies =
	        null !== current && current.type !== workInProgress.type;
	      workInProgress.updateQueue = null;
	      nextProps = renderWithHooksAgain(
	        workInProgress,
	        Component,
	        nextProps,
	        secondArg
	      );
	      finishRenderingHooks(current, workInProgress);
	      Component = checkDidRenderIdHook();
	      markComponentRenderStopped();
	      if (null !== current && !didReceiveUpdate)
	        return (
	          bailoutHooks(current, workInProgress, renderLanes),
	          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
	        );
	      isHydrating && Component && pushMaterializedTreeId(workInProgress);
	      workInProgress.flags |= 1;
	      reconcileChildren(current, workInProgress, nextProps, renderLanes);
	      return workInProgress.child;
	    }
	    function updateClassComponent(
	      current,
	      workInProgress,
	      Component,
	      nextProps,
	      renderLanes
	    ) {
	      switch (shouldErrorImpl(workInProgress)) {
	        case false:
	          var _instance = workInProgress.stateNode,
	            state = new workInProgress.type(
	              workInProgress.memoizedProps,
	              _instance.context
	            ).state;
	          _instance.updater.enqueueSetState(_instance, state, null);
	          break;
	        case true:
	          workInProgress.flags |= 128;
	          workInProgress.flags |= 65536;
	          _instance = Error("Simulated error coming from DevTools");
	          var lane = renderLanes & -renderLanes;
	          workInProgress.lanes |= lane;
	          state = workInProgressRoot;
	          if (null === state)
	            throw Error(
	              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
	            );
	          lane = createClassErrorUpdate(lane);
	          initializeClassErrorUpdate(
	            lane,
	            state,
	            workInProgress,
	            createCapturedValueAtFiber(_instance, workInProgress)
	          );
	          enqueueCapturedUpdate(workInProgress, lane);
	      }
	      prepareToReadContext(workInProgress);
	      if (null === workInProgress.stateNode) {
	        state = emptyContextObject;
	        _instance = Component.contextType;
	        "contextType" in Component &&
	          null !== _instance &&
	          (void 0 === _instance || _instance.$$typeof !== REACT_CONTEXT_TYPE) &&
	          !didWarnAboutInvalidateContextType.has(Component) &&
	          (didWarnAboutInvalidateContextType.add(Component),
	          (lane =
	            void 0 === _instance
	              ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file."
	              : "object" !== typeof _instance
	                ? " However, it is set to a " + typeof _instance + "."
	                : _instance.$$typeof === REACT_CONSUMER_TYPE
	                  ? " Did you accidentally pass the Context.Consumer instead?"
	                  : " However, it is set to an object with keys {" +
	                    Object.keys(_instance).join(", ") +
	                    "}."),
	          console.error(
	            "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
	            getComponentNameFromType(Component) || "Component",
	            lane
	          ));
	        "object" === typeof _instance &&
	          null !== _instance &&
	          (state = readContext(_instance));
	        _instance = new Component(nextProps, state);
	        if (workInProgress.mode & StrictLegacyMode) {
	          setIsStrictModeForDevtools(true);
	          try {
	            _instance = new Component(nextProps, state);
	          } finally {
	            setIsStrictModeForDevtools(false);
	          }
	        }
	        state = workInProgress.memoizedState =
	          null !== _instance.state && void 0 !== _instance.state
	            ? _instance.state
	            : null;
	        _instance.updater = classComponentUpdater;
	        workInProgress.stateNode = _instance;
	        _instance._reactInternals = workInProgress;
	        _instance._reactInternalInstance = fakeInternalInstance;
	        "function" === typeof Component.getDerivedStateFromProps &&
	          null === state &&
	          ((state = getComponentNameFromType(Component) || "Component"),
	          didWarnAboutUninitializedState.has(state) ||
	            (didWarnAboutUninitializedState.add(state),
	            console.error(
	              "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
	              state,
	              null === _instance.state ? "null" : "undefined",
	              state
	            )));
	        if (
	          "function" === typeof Component.getDerivedStateFromProps ||
	          "function" === typeof _instance.getSnapshotBeforeUpdate
	        ) {
	          var foundWillUpdateName = (lane = state = null);
	          "function" === typeof _instance.componentWillMount &&
	          true !== _instance.componentWillMount.__suppressDeprecationWarning
	            ? (state = "componentWillMount")
	            : "function" === typeof _instance.UNSAFE_componentWillMount &&
	              (state = "UNSAFE_componentWillMount");
	          "function" === typeof _instance.componentWillReceiveProps &&
	          true !==
	            _instance.componentWillReceiveProps.__suppressDeprecationWarning
	            ? (lane = "componentWillReceiveProps")
	            : "function" ===
	                typeof _instance.UNSAFE_componentWillReceiveProps &&
	              (lane = "UNSAFE_componentWillReceiveProps");
	          "function" === typeof _instance.componentWillUpdate &&
	          true !== _instance.componentWillUpdate.__suppressDeprecationWarning
	            ? (foundWillUpdateName = "componentWillUpdate")
	            : "function" === typeof _instance.UNSAFE_componentWillUpdate &&
	              (foundWillUpdateName = "UNSAFE_componentWillUpdate");
	          if (null !== state || null !== lane || null !== foundWillUpdateName) {
	            _instance = getComponentNameFromType(Component) || "Component";
	            var newApiName =
	              "function" === typeof Component.getDerivedStateFromProps
	                ? "getDerivedStateFromProps()"
	                : "getSnapshotBeforeUpdate()";
	            didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) ||
	              (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance),
	              console.error(
	                "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",
	                _instance,
	                newApiName,
	                null !== state ? "\n  " + state : "",
	                null !== lane ? "\n  " + lane : "",
	                null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""
	              ));
	          }
	        }
	        _instance = workInProgress.stateNode;
	        state = getComponentNameFromType(Component) || "Component";
	        _instance.render ||
	          (Component.prototype &&
	          "function" === typeof Component.prototype.render
	            ? console.error(
	                "No `render` method found on the %s instance: did you accidentally return an object from the constructor?",
	                state
	              )
	            : console.error(
	                "No `render` method found on the %s instance: you may have forgotten to define `render`.",
	                state
	              ));
	        !_instance.getInitialState ||
	          _instance.getInitialState.isReactClassApproved ||
	          _instance.state ||
	          console.error(
	            "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
	            state
	          );
	        _instance.getDefaultProps &&
	          !_instance.getDefaultProps.isReactClassApproved &&
	          console.error(
	            "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
	            state
	          );
	        _instance.contextType &&
	          console.error(
	            "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
	            state
	          );
	        Component.childContextTypes &&
	          !didWarnAboutChildContextTypes.has(Component) &&
	          (didWarnAboutChildContextTypes.add(Component),
	          console.error(
	            "%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",
	            state
	          ));
	        Component.contextTypes &&
	          !didWarnAboutContextTypes$1.has(Component) &&
	          (didWarnAboutContextTypes$1.add(Component),
	          console.error(
	            "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",
	            state
	          ));
	        "function" === typeof _instance.componentShouldUpdate &&
	          console.error(
	            "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
	            state
	          );
	        Component.prototype &&
	          Component.prototype.isPureReactComponent &&
	          "undefined" !== typeof _instance.shouldComponentUpdate &&
	          console.error(
	            "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
	            getComponentNameFromType(Component) || "A pure component"
	          );
	        "function" === typeof _instance.componentDidUnmount &&
	          console.error(
	            "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
	            state
	          );
	        "function" === typeof _instance.componentDidReceiveProps &&
	          console.error(
	            "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
	            state
	          );
	        "function" === typeof _instance.componentWillRecieveProps &&
	          console.error(
	            "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
	            state
	          );
	        "function" === typeof _instance.UNSAFE_componentWillRecieveProps &&
	          console.error(
	            "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
	            state
	          );
	        lane = _instance.props !== nextProps;
	        void 0 !== _instance.props &&
	          lane &&
	          console.error(
	            "When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
	            state
	          );
	        _instance.defaultProps &&
	          console.error(
	            "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
	            state,
	            state
	          );
	        "function" !== typeof _instance.getSnapshotBeforeUpdate ||
	          "function" === typeof _instance.componentDidUpdate ||
	          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component) ||
	          (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component),
	          console.error(
	            "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
	            getComponentNameFromType(Component)
	          ));
	        "function" === typeof _instance.getDerivedStateFromProps &&
	          console.error(
	            "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
	            state
	          );
	        "function" === typeof _instance.getDerivedStateFromError &&
	          console.error(
	            "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
	            state
	          );
	        "function" === typeof Component.getSnapshotBeforeUpdate &&
	          console.error(
	            "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
	            state
	          );
	        (lane = _instance.state) &&
	          ("object" !== typeof lane || isArrayImpl(lane)) &&
	          console.error("%s.state: must be set to an object or null", state);
	        "function" === typeof _instance.getChildContext &&
	          "object" !== typeof Component.childContextTypes &&
	          console.error(
	            "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
	            state
	          );
	        _instance = workInProgress.stateNode;
	        _instance.props = nextProps;
	        _instance.state = workInProgress.memoizedState;
	        _instance.refs = {};
	        initializeUpdateQueue(workInProgress);
	        state = Component.contextType;
	        _instance.context =
	          "object" === typeof state && null !== state
	            ? readContext(state)
	            : emptyContextObject;
	        _instance.state === nextProps &&
	          ((state = getComponentNameFromType(Component) || "Component"),
	          didWarnAboutDirectlyAssigningPropsToState.has(state) ||
	            (didWarnAboutDirectlyAssigningPropsToState.add(state),
	            console.error(
	              "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
	              state
	            )));
	        workInProgress.mode & StrictLegacyMode &&
	          ReactStrictModeWarnings.recordLegacyContextWarning(
	            workInProgress,
	            _instance
	          );
	        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
	          workInProgress,
	          _instance
	        );
	        _instance.state = workInProgress.memoizedState;
	        state = Component.getDerivedStateFromProps;
	        "function" === typeof state &&
	          (applyDerivedStateFromProps(
	            workInProgress,
	            Component,
	            state,
	            nextProps
	          ),
	          (_instance.state = workInProgress.memoizedState));
	        "function" === typeof Component.getDerivedStateFromProps ||
	          "function" === typeof _instance.getSnapshotBeforeUpdate ||
	          ("function" !== typeof _instance.UNSAFE_componentWillMount &&
	            "function" !== typeof _instance.componentWillMount) ||
	          ((state = _instance.state),
	          "function" === typeof _instance.componentWillMount &&
	            _instance.componentWillMount(),
	          "function" === typeof _instance.UNSAFE_componentWillMount &&
	            _instance.UNSAFE_componentWillMount(),
	          state !== _instance.state &&
	            (console.error(
	              "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
	              getComponentNameFromFiber(workInProgress) || "Component"
	            ),
	            classComponentUpdater.enqueueReplaceState(
	              _instance,
	              _instance.state,
	              null
	            )),
	          processUpdateQueue(workInProgress, nextProps, _instance, renderLanes),
	          suspendIfUpdateReadFromEntangledAsyncAction(),
	          (_instance.state = workInProgress.memoizedState));
	        "function" === typeof _instance.componentDidMount &&
	          (workInProgress.flags |= 4194308);
	        (workInProgress.mode & StrictEffectsMode) !== NoMode &&
	          (workInProgress.flags |= 134217728);
	        _instance = true;
	      } else if (null === current) {
	        _instance = workInProgress.stateNode;
	        var unresolvedOldProps = workInProgress.memoizedProps;
	        lane = resolveClassComponentProps(Component, unresolvedOldProps);
	        _instance.props = lane;
	        var oldContext = _instance.context;
	        foundWillUpdateName = Component.contextType;
	        state = emptyContextObject;
	        "object" === typeof foundWillUpdateName &&
	          null !== foundWillUpdateName &&
	          (state = readContext(foundWillUpdateName));
	        newApiName = Component.getDerivedStateFromProps;
	        foundWillUpdateName =
	          "function" === typeof newApiName ||
	          "function" === typeof _instance.getSnapshotBeforeUpdate;
	        unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
	        foundWillUpdateName ||
	          ("function" !== typeof _instance.UNSAFE_componentWillReceiveProps &&
	            "function" !== typeof _instance.componentWillReceiveProps) ||
	          ((unresolvedOldProps || oldContext !== state) &&
	            callComponentWillReceiveProps(
	              workInProgress,
	              _instance,
	              nextProps,
	              state
	            ));
	        hasForceUpdate = false;
	        var oldState = workInProgress.memoizedState;
	        _instance.state = oldState;
	        processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);
	        suspendIfUpdateReadFromEntangledAsyncAction();
	        oldContext = workInProgress.memoizedState;
	        unresolvedOldProps || oldState !== oldContext || hasForceUpdate
	          ? ("function" === typeof newApiName &&
	              (applyDerivedStateFromProps(
	                workInProgress,
	                Component,
	                newApiName,
	                nextProps
	              ),
	              (oldContext = workInProgress.memoizedState)),
	            (lane =
	              hasForceUpdate ||
	              checkShouldComponentUpdate(
	                workInProgress,
	                Component,
	                lane,
	                nextProps,
	                oldState,
	                oldContext,
	                state
	              ))
	              ? (foundWillUpdateName ||
	                  ("function" !== typeof _instance.UNSAFE_componentWillMount &&
	                    "function" !== typeof _instance.componentWillMount) ||
	                  ("function" === typeof _instance.componentWillMount &&
	                    _instance.componentWillMount(),
	                  "function" === typeof _instance.UNSAFE_componentWillMount &&
	                    _instance.UNSAFE_componentWillMount()),
	                "function" === typeof _instance.componentDidMount &&
	                  (workInProgress.flags |= 4194308),
	                (workInProgress.mode & StrictEffectsMode) !== NoMode &&
	                  (workInProgress.flags |= 134217728))
	              : ("function" === typeof _instance.componentDidMount &&
	                  (workInProgress.flags |= 4194308),
	                (workInProgress.mode & StrictEffectsMode) !== NoMode &&
	                  (workInProgress.flags |= 134217728),
	                (workInProgress.memoizedProps = nextProps),
	                (workInProgress.memoizedState = oldContext)),
	            (_instance.props = nextProps),
	            (_instance.state = oldContext),
	            (_instance.context = state),
	            (_instance = lane))
	          : ("function" === typeof _instance.componentDidMount &&
	              (workInProgress.flags |= 4194308),
	            (workInProgress.mode & StrictEffectsMode) !== NoMode &&
	              (workInProgress.flags |= 134217728),
	            (_instance = false));
	      } else {
	        _instance = workInProgress.stateNode;
	        cloneUpdateQueue(current, workInProgress);
	        state = workInProgress.memoizedProps;
	        foundWillUpdateName = resolveClassComponentProps(Component, state);
	        _instance.props = foundWillUpdateName;
	        newApiName = workInProgress.pendingProps;
	        oldState = _instance.context;
	        oldContext = Component.contextType;
	        lane = emptyContextObject;
	        "object" === typeof oldContext &&
	          null !== oldContext &&
	          (lane = readContext(oldContext));
	        unresolvedOldProps = Component.getDerivedStateFromProps;
	        (oldContext =
	          "function" === typeof unresolvedOldProps ||
	          "function" === typeof _instance.getSnapshotBeforeUpdate) ||
	          ("function" !== typeof _instance.UNSAFE_componentWillReceiveProps &&
	            "function" !== typeof _instance.componentWillReceiveProps) ||
	          ((state !== newApiName || oldState !== lane) &&
	            callComponentWillReceiveProps(
	              workInProgress,
	              _instance,
	              nextProps,
	              lane
	            ));
	        hasForceUpdate = false;
	        oldState = workInProgress.memoizedState;
	        _instance.state = oldState;
	        processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);
	        suspendIfUpdateReadFromEntangledAsyncAction();
	        var newState = workInProgress.memoizedState;
	        state !== newApiName ||
	        oldState !== newState ||
	        hasForceUpdate ||
	        (null !== current &&
	          null !== current.dependencies &&
	          checkIfContextChanged(current.dependencies))
	          ? ("function" === typeof unresolvedOldProps &&
	              (applyDerivedStateFromProps(
	                workInProgress,
	                Component,
	                unresolvedOldProps,
	                nextProps
	              ),
	              (newState = workInProgress.memoizedState)),
	            (foundWillUpdateName =
	              hasForceUpdate ||
	              checkShouldComponentUpdate(
	                workInProgress,
	                Component,
	                foundWillUpdateName,
	                nextProps,
	                oldState,
	                newState,
	                lane
	              ) ||
	              (null !== current &&
	                null !== current.dependencies &&
	                checkIfContextChanged(current.dependencies)))
	              ? (oldContext ||
	                  ("function" !== typeof _instance.UNSAFE_componentWillUpdate &&
	                    "function" !== typeof _instance.componentWillUpdate) ||
	                  ("function" === typeof _instance.componentWillUpdate &&
	                    _instance.componentWillUpdate(nextProps, newState, lane),
	                  "function" === typeof _instance.UNSAFE_componentWillUpdate &&
	                    _instance.UNSAFE_componentWillUpdate(
	                      nextProps,
	                      newState,
	                      lane
	                    )),
	                "function" === typeof _instance.componentDidUpdate &&
	                  (workInProgress.flags |= 4),
	                "function" === typeof _instance.getSnapshotBeforeUpdate &&
	                  (workInProgress.flags |= 1024))
	              : ("function" !== typeof _instance.componentDidUpdate ||
	                  (state === current.memoizedProps &&
	                    oldState === current.memoizedState) ||
	                  (workInProgress.flags |= 4),
	                "function" !== typeof _instance.getSnapshotBeforeUpdate ||
	                  (state === current.memoizedProps &&
	                    oldState === current.memoizedState) ||
	                  (workInProgress.flags |= 1024),
	                (workInProgress.memoizedProps = nextProps),
	                (workInProgress.memoizedState = newState)),
	            (_instance.props = nextProps),
	            (_instance.state = newState),
	            (_instance.context = lane),
	            (_instance = foundWillUpdateName))
	          : ("function" !== typeof _instance.componentDidUpdate ||
	              (state === current.memoizedProps &&
	                oldState === current.memoizedState) ||
	              (workInProgress.flags |= 4),
	            "function" !== typeof _instance.getSnapshotBeforeUpdate ||
	              (state === current.memoizedProps &&
	                oldState === current.memoizedState) ||
	              (workInProgress.flags |= 1024),
	            (_instance = false));
	      }
	      lane = _instance;
	      markRef(current, workInProgress);
	      state = 0 !== (workInProgress.flags & 128);
	      if (lane || state) {
	        lane = workInProgress.stateNode;
	        setCurrentFiber(workInProgress);
	        if (state && "function" !== typeof Component.getDerivedStateFromError)
	          (Component = null), (profilerStartTime = -1);
	        else {
	          markComponentRenderStarted(workInProgress);
	          Component = callRenderInDEV(lane);
	          if (workInProgress.mode & StrictLegacyMode) {
	            setIsStrictModeForDevtools(true);
	            try {
	              callRenderInDEV(lane);
	            } finally {
	              setIsStrictModeForDevtools(false);
	            }
	          }
	          markComponentRenderStopped();
	        }
	        workInProgress.flags |= 1;
	        null !== current && state
	          ? ((workInProgress.child = reconcileChildFibers(
	              workInProgress,
	              current.child,
	              null,
	              renderLanes
	            )),
	            (workInProgress.child = reconcileChildFibers(
	              workInProgress,
	              null,
	              Component,
	              renderLanes
	            )))
	          : reconcileChildren(current, workInProgress, Component, renderLanes);
	        workInProgress.memoizedState = lane.state;
	        current = workInProgress.child;
	      } else
	        current = bailoutOnAlreadyFinishedWork(
	          current,
	          workInProgress,
	          renderLanes
	        );
	      renderLanes = workInProgress.stateNode;
	      _instance &&
	        renderLanes.props !== nextProps &&
	        (didWarnAboutReassigningProps ||
	          console.error(
	            "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
	            getComponentNameFromFiber(workInProgress) || "a component"
	          ),
	        (didWarnAboutReassigningProps = true));
	      return current;
	    }
	    function mountHostRootWithoutHydrating(
	      current,
	      workInProgress,
	      nextChildren,
	      renderLanes
	    ) {
	      resetHydrationState();
	      workInProgress.flags |= 256;
	      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	      return workInProgress.child;
	    }
	    function validateFunctionComponentInDev(workInProgress, Component) {
	      Component &&
	        Component.childContextTypes &&
	        console.error(
	          "childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",
	          Component.displayName || Component.name || "Component"
	        );
	      "function" === typeof Component.getDerivedStateFromProps &&
	        ((workInProgress = getComponentNameFromType(Component) || "Unknown"),
	        didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] ||
	          (console.error(
	            "%s: Function components do not support getDerivedStateFromProps.",
	            workInProgress
	          ),
	          (didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] =
	            true)));
	      "object" === typeof Component.contextType &&
	        null !== Component.contextType &&
	        ((Component = getComponentNameFromType(Component) || "Unknown"),
	        didWarnAboutContextTypeOnFunctionComponent[Component] ||
	          (console.error(
	            "%s: Function components do not support contextType.",
	            Component
	          ),
	          (didWarnAboutContextTypeOnFunctionComponent[Component] = true)));
	    }
	    function mountSuspenseOffscreenState(renderLanes) {
	      return { baseLanes: renderLanes, cachePool: getSuspendedCache() };
	    }
	    function getRemainingWorkInPrimaryTree(
	      current,
	      primaryTreeDidDefer,
	      renderLanes
	    ) {
	      current = null !== current ? current.childLanes & ~renderLanes : 0;
	      primaryTreeDidDefer && (current |= workInProgressDeferredLane);
	      return current;
	    }
	    function updateSuspenseComponent(current, workInProgress, renderLanes) {
	      var JSCompiler_object_inline_digest_2451;
	      var JSCompiler_object_inline_stack_2452 = workInProgress.pendingProps;
	      shouldSuspendImpl(workInProgress) && (workInProgress.flags |= 128);
	      var JSCompiler_object_inline_componentStack_2453 = false;
	      var didSuspend = 0 !== (workInProgress.flags & 128);
	      (JSCompiler_object_inline_digest_2451 = didSuspend) ||
	        (JSCompiler_object_inline_digest_2451 =
	          null !== current && null === current.memoizedState
	            ? false
	            : 0 !== (suspenseStackCursor.current & ForceSuspenseFallback));
	      JSCompiler_object_inline_digest_2451 &&
	        ((JSCompiler_object_inline_componentStack_2453 = true),
	        (workInProgress.flags &= -129));
	      JSCompiler_object_inline_digest_2451 = 0 !== (workInProgress.flags & 32);
	      workInProgress.flags &= -33;
	      if (null === current) {
	        if (isHydrating) {
	          JSCompiler_object_inline_componentStack_2453
	            ? pushPrimaryTreeSuspenseHandler(workInProgress)
	            : reuseSuspenseHandlerOnStack(workInProgress);
	          if (isHydrating) {
	            var JSCompiler_object_inline_message_2450 = nextHydratableInstance;
	            var JSCompiler_temp;
	            if (!(JSCompiler_temp = !JSCompiler_object_inline_message_2450)) {
	              c: {
	                var instance = JSCompiler_object_inline_message_2450;
	                for (
	                  JSCompiler_temp = rootOrSingletonContext;
	                  8 !== instance.nodeType;

	                ) {
	                  if (!JSCompiler_temp) {
	                    JSCompiler_temp = null;
	                    break c;
	                  }
	                  instance = getNextHydratable(instance.nextSibling);
	                  if (null === instance) {
	                    JSCompiler_temp = null;
	                    break c;
	                  }
	                }
	                JSCompiler_temp = instance;
	              }
	              null !== JSCompiler_temp
	                ? (warnIfNotHydrating(),
	                  (workInProgress.memoizedState = {
	                    dehydrated: JSCompiler_temp,
	                    treeContext:
	                      null !== treeContextProvider
	                        ? { id: treeContextId, overflow: treeContextOverflow }
	                        : null,
	                    retryLane: 536870912,
	                    hydrationErrors: null
	                  }),
	                  (instance = createFiber(18, null, null, NoMode)),
	                  (instance.stateNode = JSCompiler_temp),
	                  (instance.return = workInProgress),
	                  (workInProgress.child = instance),
	                  (hydrationParentFiber = workInProgress),
	                  (nextHydratableInstance = null),
	                  (JSCompiler_temp = true))
	                : (JSCompiler_temp = false);
	              JSCompiler_temp = !JSCompiler_temp;
	            }
	            JSCompiler_temp &&
	              (warnNonHydratedInstance(
	                workInProgress,
	                JSCompiler_object_inline_message_2450
	              ),
	              throwOnHydrationMismatch(workInProgress));
	          }
	          JSCompiler_object_inline_message_2450 = workInProgress.memoizedState;
	          if (
	            null !== JSCompiler_object_inline_message_2450 &&
	            ((JSCompiler_object_inline_message_2450 =
	              JSCompiler_object_inline_message_2450.dehydrated),
	            null !== JSCompiler_object_inline_message_2450)
	          )
	            return (
	              isSuspenseInstanceFallback(JSCompiler_object_inline_message_2450)
	                ? (workInProgress.lanes = 32)
	                : (workInProgress.lanes = 536870912),
	              null
	            );
	          popSuspenseHandler(workInProgress);
	        }
	        JSCompiler_object_inline_message_2450 =
	          JSCompiler_object_inline_stack_2452.children;
	        JSCompiler_object_inline_stack_2452 =
	          JSCompiler_object_inline_stack_2452.fallback;
	        if (JSCompiler_object_inline_componentStack_2453)
	          return (
	            reuseSuspenseHandlerOnStack(workInProgress),
	            (JSCompiler_object_inline_componentStack_2453 =
	              workInProgress.mode),
	            (JSCompiler_object_inline_message_2450 =
	              mountWorkInProgressOffscreenFiber(
	                {
	                  mode: "hidden",
	                  children: JSCompiler_object_inline_message_2450
	                },
	                JSCompiler_object_inline_componentStack_2453
	              )),
	            (JSCompiler_object_inline_stack_2452 = createFiberFromFragment(
	              JSCompiler_object_inline_stack_2452,
	              JSCompiler_object_inline_componentStack_2453,
	              renderLanes,
	              null
	            )),
	            (JSCompiler_object_inline_message_2450.return = workInProgress),
	            (JSCompiler_object_inline_stack_2452.return = workInProgress),
	            (JSCompiler_object_inline_message_2450.sibling =
	              JSCompiler_object_inline_stack_2452),
	            (workInProgress.child = JSCompiler_object_inline_message_2450),
	            (JSCompiler_object_inline_componentStack_2453 =
	              workInProgress.child),
	            (JSCompiler_object_inline_componentStack_2453.memoizedState =
	              mountSuspenseOffscreenState(renderLanes)),
	            (JSCompiler_object_inline_componentStack_2453.childLanes =
	              getRemainingWorkInPrimaryTree(
	                current,
	                JSCompiler_object_inline_digest_2451,
	                renderLanes
	              )),
	            (workInProgress.memoizedState = SUSPENDED_MARKER),
	            JSCompiler_object_inline_stack_2452
	          );
	        pushPrimaryTreeSuspenseHandler(workInProgress);
	        return mountSuspensePrimaryChildren(
	          workInProgress,
	          JSCompiler_object_inline_message_2450
	        );
	      }
	      var prevState = current.memoizedState;
	      if (
	        null !== prevState &&
	        ((JSCompiler_object_inline_message_2450 = prevState.dehydrated),
	        null !== JSCompiler_object_inline_message_2450)
	      ) {
	        if (didSuspend)
	          workInProgress.flags & 256
	            ? (pushPrimaryTreeSuspenseHandler(workInProgress),
	              (workInProgress.flags &= -257),
	              (workInProgress = retrySuspenseComponentWithoutHydrating(
	                current,
	                workInProgress,
	                renderLanes
	              )))
	            : null !== workInProgress.memoizedState
	              ? (reuseSuspenseHandlerOnStack(workInProgress),
	                (workInProgress.child = current.child),
	                (workInProgress.flags |= 128),
	                (workInProgress = null))
	              : (reuseSuspenseHandlerOnStack(workInProgress),
	                (JSCompiler_object_inline_componentStack_2453 =
	                  JSCompiler_object_inline_stack_2452.fallback),
	                (JSCompiler_object_inline_message_2450 = workInProgress.mode),
	                (JSCompiler_object_inline_stack_2452 =
	                  mountWorkInProgressOffscreenFiber(
	                    {
	                      mode: "visible",
	                      children: JSCompiler_object_inline_stack_2452.children
	                    },
	                    JSCompiler_object_inline_message_2450
	                  )),
	                (JSCompiler_object_inline_componentStack_2453 =
	                  createFiberFromFragment(
	                    JSCompiler_object_inline_componentStack_2453,
	                    JSCompiler_object_inline_message_2450,
	                    renderLanes,
	                    null
	                  )),
	                (JSCompiler_object_inline_componentStack_2453.flags |= 2),
	                (JSCompiler_object_inline_stack_2452.return = workInProgress),
	                (JSCompiler_object_inline_componentStack_2453.return =
	                  workInProgress),
	                (JSCompiler_object_inline_stack_2452.sibling =
	                  JSCompiler_object_inline_componentStack_2453),
	                (workInProgress.child = JSCompiler_object_inline_stack_2452),
	                reconcileChildFibers(
	                  workInProgress,
	                  current.child,
	                  null,
	                  renderLanes
	                ),
	                (JSCompiler_object_inline_stack_2452 = workInProgress.child),
	                (JSCompiler_object_inline_stack_2452.memoizedState =
	                  mountSuspenseOffscreenState(renderLanes)),
	                (JSCompiler_object_inline_stack_2452.childLanes =
	                  getRemainingWorkInPrimaryTree(
	                    current,
	                    JSCompiler_object_inline_digest_2451,
	                    renderLanes
	                  )),
	                (workInProgress.memoizedState = SUSPENDED_MARKER),
	                (workInProgress =
	                  JSCompiler_object_inline_componentStack_2453));
	        else if (
	          (pushPrimaryTreeSuspenseHandler(workInProgress),
	          isHydrating &&
	            console.error(
	              "We should not be hydrating here. This is a bug in React. Please file a bug."
	            ),
	          isSuspenseInstanceFallback(JSCompiler_object_inline_message_2450))
	        ) {
	          JSCompiler_object_inline_digest_2451 =
	            JSCompiler_object_inline_message_2450.nextSibling &&
	            JSCompiler_object_inline_message_2450.nextSibling.dataset;
	          if (JSCompiler_object_inline_digest_2451) {
	            JSCompiler_temp = JSCompiler_object_inline_digest_2451.dgst;
	            var message = JSCompiler_object_inline_digest_2451.msg;
	            instance = JSCompiler_object_inline_digest_2451.stck;
	            var componentStack = JSCompiler_object_inline_digest_2451.cstck;
	          }
	          JSCompiler_object_inline_message_2450 = message;
	          JSCompiler_object_inline_digest_2451 = JSCompiler_temp;
	          JSCompiler_object_inline_stack_2452 = instance;
	          JSCompiler_temp = JSCompiler_object_inline_componentStack_2453 =
	            componentStack;
	          JSCompiler_object_inline_componentStack_2453 =
	            JSCompiler_object_inline_message_2450
	              ? Error(JSCompiler_object_inline_message_2450)
	              : Error(
	                  "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."
	                );
	          JSCompiler_object_inline_componentStack_2453.stack =
	            JSCompiler_object_inline_stack_2452 || "";
	          JSCompiler_object_inline_componentStack_2453.digest =
	            JSCompiler_object_inline_digest_2451;
	          JSCompiler_object_inline_digest_2451 =
	            void 0 === JSCompiler_temp ? null : JSCompiler_temp;
	          JSCompiler_object_inline_stack_2452 = {
	            value: JSCompiler_object_inline_componentStack_2453,
	            source: null,
	            stack: JSCompiler_object_inline_digest_2451
	          };
	          "string" === typeof JSCompiler_object_inline_digest_2451 &&
	            CapturedStacks.set(
	              JSCompiler_object_inline_componentStack_2453,
	              JSCompiler_object_inline_stack_2452
	            );
	          queueHydrationError(JSCompiler_object_inline_stack_2452);
	          workInProgress = retrySuspenseComponentWithoutHydrating(
	            current,
	            workInProgress,
	            renderLanes
	          );
	        } else if (
	          (didReceiveUpdate ||
	            propagateParentContextChanges(
	              current,
	              workInProgress,
	              renderLanes,
	              false
	            ),
	          (JSCompiler_object_inline_digest_2451 =
	            0 !== (renderLanes & current.childLanes)),
	          didReceiveUpdate || JSCompiler_object_inline_digest_2451)
	        ) {
	          JSCompiler_object_inline_digest_2451 = workInProgressRoot;
	          if (
	            null !== JSCompiler_object_inline_digest_2451 &&
	            ((JSCompiler_object_inline_stack_2452 = renderLanes & -renderLanes),
	            (JSCompiler_object_inline_stack_2452 =
	              0 !== (JSCompiler_object_inline_stack_2452 & 42)
	                ? 1
	                : getBumpedLaneForHydrationByLane(
	                    JSCompiler_object_inline_stack_2452
	                  )),
	            (JSCompiler_object_inline_stack_2452 =
	              0 !==
	              (JSCompiler_object_inline_stack_2452 &
	                (JSCompiler_object_inline_digest_2451.suspendedLanes |
	                  renderLanes))
	                ? 0
	                : JSCompiler_object_inline_stack_2452),
	            0 !== JSCompiler_object_inline_stack_2452 &&
	              JSCompiler_object_inline_stack_2452 !== prevState.retryLane)
	          )
	            throw (
	              ((prevState.retryLane = JSCompiler_object_inline_stack_2452),
	              enqueueConcurrentRenderForLane(
	                current,
	                JSCompiler_object_inline_stack_2452
	              ),
	              scheduleUpdateOnFiber(
	                JSCompiler_object_inline_digest_2451,
	                current,
	                JSCompiler_object_inline_stack_2452
	              ),
	              SelectiveHydrationException)
	            );
	          JSCompiler_object_inline_message_2450.data ===
	            SUSPENSE_PENDING_START_DATA || renderDidSuspendDelayIfPossible();
	          workInProgress = retrySuspenseComponentWithoutHydrating(
	            current,
	            workInProgress,
	            renderLanes
	          );
	        } else
	          JSCompiler_object_inline_message_2450.data ===
	          SUSPENSE_PENDING_START_DATA
	            ? ((workInProgress.flags |= 192),
	              (workInProgress.child = current.child),
	              (workInProgress = null))
	            : ((current = prevState.treeContext),
	              (nextHydratableInstance = getNextHydratable(
	                JSCompiler_object_inline_message_2450.nextSibling
	              )),
	              (hydrationParentFiber = workInProgress),
	              (isHydrating = true),
	              (hydrationErrors = null),
	              (didSuspendOrErrorDEV = false),
	              (hydrationDiffRootDEV = null),
	              (rootOrSingletonContext = false),
	              null !== current &&
	                (warnIfNotHydrating(),
	                (idStack[idStackIndex++] = treeContextId),
	                (idStack[idStackIndex++] = treeContextOverflow),
	                (idStack[idStackIndex++] = treeContextProvider),
	                (treeContextId = current.id),
	                (treeContextOverflow = current.overflow),
	                (treeContextProvider = workInProgress)),
	              (workInProgress = mountSuspensePrimaryChildren(
	                workInProgress,
	                JSCompiler_object_inline_stack_2452.children
	              )),
	              (workInProgress.flags |= 4096));
	        return workInProgress;
	      }
	      if (JSCompiler_object_inline_componentStack_2453)
	        return (
	          reuseSuspenseHandlerOnStack(workInProgress),
	          (JSCompiler_object_inline_componentStack_2453 =
	            JSCompiler_object_inline_stack_2452.fallback),
	          (JSCompiler_object_inline_message_2450 = workInProgress.mode),
	          (JSCompiler_temp = current.child),
	          (instance = JSCompiler_temp.sibling),
	          (JSCompiler_object_inline_stack_2452 = createWorkInProgress(
	            JSCompiler_temp,
	            {
	              mode: "hidden",
	              children: JSCompiler_object_inline_stack_2452.children
	            }
	          )),
	          (JSCompiler_object_inline_stack_2452.subtreeFlags =
	            JSCompiler_temp.subtreeFlags & 65011712),
	          null !== instance
	            ? (JSCompiler_object_inline_componentStack_2453 =
	                createWorkInProgress(
	                  instance,
	                  JSCompiler_object_inline_componentStack_2453
	                ))
	            : ((JSCompiler_object_inline_componentStack_2453 =
	                createFiberFromFragment(
	                  JSCompiler_object_inline_componentStack_2453,
	                  JSCompiler_object_inline_message_2450,
	                  renderLanes,
	                  null
	                )),
	              (JSCompiler_object_inline_componentStack_2453.flags |= 2)),
	          (JSCompiler_object_inline_componentStack_2453.return =
	            workInProgress),
	          (JSCompiler_object_inline_stack_2452.return = workInProgress),
	          (JSCompiler_object_inline_stack_2452.sibling =
	            JSCompiler_object_inline_componentStack_2453),
	          (workInProgress.child = JSCompiler_object_inline_stack_2452),
	          (JSCompiler_object_inline_stack_2452 =
	            JSCompiler_object_inline_componentStack_2453),
	          (JSCompiler_object_inline_componentStack_2453 = workInProgress.child),
	          (JSCompiler_object_inline_message_2450 = current.child.memoizedState),
	          null === JSCompiler_object_inline_message_2450
	            ? (JSCompiler_object_inline_message_2450 =
	                mountSuspenseOffscreenState(renderLanes))
	            : ((JSCompiler_temp =
	                JSCompiler_object_inline_message_2450.cachePool),
	              null !== JSCompiler_temp
	                ? ((instance = CacheContext._currentValue),
	                  (JSCompiler_temp =
	                    JSCompiler_temp.parent !== instance
	                      ? { parent: instance, pool: instance }
	                      : JSCompiler_temp))
	                : (JSCompiler_temp = getSuspendedCache()),
	              (JSCompiler_object_inline_message_2450 = {
	                baseLanes:
	                  JSCompiler_object_inline_message_2450.baseLanes | renderLanes,
	                cachePool: JSCompiler_temp
	              })),
	          (JSCompiler_object_inline_componentStack_2453.memoizedState =
	            JSCompiler_object_inline_message_2450),
	          (JSCompiler_object_inline_componentStack_2453.childLanes =
	            getRemainingWorkInPrimaryTree(
	              current,
	              JSCompiler_object_inline_digest_2451,
	              renderLanes
	            )),
	          (workInProgress.memoizedState = SUSPENDED_MARKER),
	          JSCompiler_object_inline_stack_2452
	        );
	      pushPrimaryTreeSuspenseHandler(workInProgress);
	      renderLanes = current.child;
	      current = renderLanes.sibling;
	      renderLanes = createWorkInProgress(renderLanes, {
	        mode: "visible",
	        children: JSCompiler_object_inline_stack_2452.children
	      });
	      renderLanes.return = workInProgress;
	      renderLanes.sibling = null;
	      null !== current &&
	        ((JSCompiler_object_inline_digest_2451 = workInProgress.deletions),
	        null === JSCompiler_object_inline_digest_2451
	          ? ((workInProgress.deletions = [current]),
	            (workInProgress.flags |= 16))
	          : JSCompiler_object_inline_digest_2451.push(current));
	      workInProgress.child = renderLanes;
	      workInProgress.memoizedState = null;
	      return renderLanes;
	    }
	    function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
	      primaryChildren = mountWorkInProgressOffscreenFiber(
	        { mode: "visible", children: primaryChildren },
	        workInProgress.mode
	      );
	      primaryChildren.return = workInProgress;
	      return (workInProgress.child = primaryChildren);
	    }
	    function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
	      offscreenProps = createFiber(22, offscreenProps, null, mode);
	      offscreenProps.lanes = 0;
	      offscreenProps.stateNode = {
	        _visibility: OffscreenVisible,
	        _pendingMarkers: null,
	        _retryCache: null,
	        _transitions: null
	      };
	      return offscreenProps;
	    }
	    function retrySuspenseComponentWithoutHydrating(
	      current,
	      workInProgress,
	      renderLanes
	    ) {
	      reconcileChildFibers(workInProgress, current.child, null, renderLanes);
	      current = mountSuspensePrimaryChildren(
	        workInProgress,
	        workInProgress.pendingProps.children
	      );
	      current.flags |= 2;
	      workInProgress.memoizedState = null;
	      return current;
	    }
	    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
	      fiber.lanes |= renderLanes;
	      var alternate = fiber.alternate;
	      null !== alternate && (alternate.lanes |= renderLanes);
	      scheduleContextWorkOnParentPath(
	        fiber.return,
	        renderLanes,
	        propagationRoot
	      );
	    }
	    function validateSuspenseListNestedChild(childSlot, index) {
	      var isAnArray = isArrayImpl(childSlot);
	      childSlot = !isAnArray && "function" === typeof getIteratorFn(childSlot);
	      return isAnArray || childSlot
	        ? ((isAnArray = isAnArray ? "array" : "iterable"),
	          console.error(
	            "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
	            isAnArray,
	            index,
	            isAnArray
	          ),
	          false)
	        : true;
	    }
	    function initSuspenseListRenderState(
	      workInProgress,
	      isBackwards,
	      tail,
	      lastContentRow,
	      tailMode
	    ) {
	      var renderState = workInProgress.memoizedState;
	      null === renderState
	        ? (workInProgress.memoizedState = {
	            isBackwards: isBackwards,
	            rendering: null,
	            renderingStartTime: 0,
	            last: lastContentRow,
	            tail: tail,
	            tailMode: tailMode
	          })
	        : ((renderState.isBackwards = isBackwards),
	          (renderState.rendering = null),
	          (renderState.renderingStartTime = 0),
	          (renderState.last = lastContentRow),
	          (renderState.tail = tail),
	          (renderState.tailMode = tailMode));
	    }
	    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
	      var nextProps = workInProgress.pendingProps,
	        revealOrder = nextProps.revealOrder,
	        tailMode = nextProps.tail;
	      nextProps = nextProps.children;
	      if (
	        void 0 !== revealOrder &&
	        "forwards" !== revealOrder &&
	        "backwards" !== revealOrder &&
	        "together" !== revealOrder &&
	        !didWarnAboutRevealOrder[revealOrder]
	      )
	        if (
	          ((didWarnAboutRevealOrder[revealOrder] = true),
	          "string" === typeof revealOrder)
	        )
	          switch (revealOrder.toLowerCase()) {
	            case "together":
	            case "forwards":
	            case "backwards":
	              console.error(
	                '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
	                revealOrder,
	                revealOrder.toLowerCase()
	              );
	              break;
	            case "forward":
	            case "backward":
	              console.error(
	                '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
	                revealOrder,
	                revealOrder.toLowerCase()
	              );
	              break;
	            default:
	              console.error(
	                '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
	                revealOrder
	              );
	          }
	        else
	          console.error(
	            '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
	            revealOrder
	          );
	      void 0 === tailMode ||
	        didWarnAboutTailOptions[tailMode] ||
	        ("collapsed" !== tailMode && "hidden" !== tailMode
	          ? ((didWarnAboutTailOptions[tailMode] = true),
	            console.error(
	              '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
	              tailMode
	            ))
	          : "forwards" !== revealOrder &&
	            "backwards" !== revealOrder &&
	            ((didWarnAboutTailOptions[tailMode] = true),
	            console.error(
	              '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
	              tailMode
	            )));
	      a: if (
	        ("forwards" === revealOrder || "backwards" === revealOrder) &&
	        void 0 !== nextProps &&
	        null !== nextProps &&
	        false !== nextProps
	      )
	        if (isArrayImpl(nextProps))
	          for (var i = 0; i < nextProps.length; i++) {
	            if (!validateSuspenseListNestedChild(nextProps[i], i)) break a;
	          }
	        else if (((i = getIteratorFn(nextProps)), "function" === typeof i)) {
	          if ((i = i.call(nextProps)))
	            for (var step = i.next(), _i = 0; !step.done; step = i.next()) {
	              if (!validateSuspenseListNestedChild(step.value, _i)) break a;
	              _i++;
	            }
	        } else
	          console.error(
	            'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
	            revealOrder
	          );
	      reconcileChildren(current, workInProgress, nextProps, renderLanes);
	      nextProps = suspenseStackCursor.current;
	      if (0 !== (nextProps & ForceSuspenseFallback))
	        (nextProps =
	          (nextProps & SubtreeSuspenseContextMask) | ForceSuspenseFallback),
	          (workInProgress.flags |= 128);
	      else {
	        if (null !== current && 0 !== (current.flags & 128))
	          a: for (current = workInProgress.child; null !== current; ) {
	            if (13 === current.tag)
	              null !== current.memoizedState &&
	                scheduleSuspenseWorkOnFiber(
	                  current,
	                  renderLanes,
	                  workInProgress
	                );
	            else if (19 === current.tag)
	              scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
	            else if (null !== current.child) {
	              current.child.return = current;
	              current = current.child;
	              continue;
	            }
	            if (current === workInProgress) break a;
	            for (; null === current.sibling; ) {
	              if (null === current.return || current.return === workInProgress)
	                break a;
	              current = current.return;
	            }
	            current.sibling.return = current.return;
	            current = current.sibling;
	          }
	        nextProps &= SubtreeSuspenseContextMask;
	      }
	      push(suspenseStackCursor, nextProps, workInProgress);
	      switch (revealOrder) {
	        case "forwards":
	          renderLanes = workInProgress.child;
	          for (revealOrder = null; null !== renderLanes; )
	            (current = renderLanes.alternate),
	              null !== current &&
	                null === findFirstSuspended(current) &&
	                (revealOrder = renderLanes),
	              (renderLanes = renderLanes.sibling);
	          renderLanes = revealOrder;
	          null === renderLanes
	            ? ((revealOrder = workInProgress.child),
	              (workInProgress.child = null))
	            : ((revealOrder = renderLanes.sibling),
	              (renderLanes.sibling = null));
	          initSuspenseListRenderState(
	            workInProgress,
	            false,
	            revealOrder,
	            renderLanes,
	            tailMode
	          );
	          break;
	        case "backwards":
	          renderLanes = null;
	          revealOrder = workInProgress.child;
	          for (workInProgress.child = null; null !== revealOrder; ) {
	            current = revealOrder.alternate;
	            if (null !== current && null === findFirstSuspended(current)) {
	              workInProgress.child = revealOrder;
	              break;
	            }
	            current = revealOrder.sibling;
	            revealOrder.sibling = renderLanes;
	            renderLanes = revealOrder;
	            revealOrder = current;
	          }
	          initSuspenseListRenderState(
	            workInProgress,
	            true,
	            renderLanes,
	            null,
	            tailMode
	          );
	          break;
	        case "together":
	          initSuspenseListRenderState(workInProgress, false, null, null, void 0);
	          break;
	        default:
	          workInProgress.memoizedState = null;
	      }
	      return workInProgress.child;
	    }
	    function bailoutOnAlreadyFinishedWork(
	      current,
	      workInProgress,
	      renderLanes
	    ) {
	      null !== current && (workInProgress.dependencies = current.dependencies);
	      profilerStartTime = -1;
	      workInProgressRootSkippedLanes |= workInProgress.lanes;
	      if (0 === (renderLanes & workInProgress.childLanes))
	        if (null !== current) {
	          if (
	            (propagateParentContextChanges(
	              current,
	              workInProgress,
	              renderLanes,
	              false
	            ),
	            0 === (renderLanes & workInProgress.childLanes))
	          )
	            return null;
	        } else return null;
	      if (null !== current && workInProgress.child !== current.child)
	        throw Error("Resuming work not yet implemented.");
	      if (null !== workInProgress.child) {
	        current = workInProgress.child;
	        renderLanes = createWorkInProgress(current, current.pendingProps);
	        workInProgress.child = renderLanes;
	        for (renderLanes.return = workInProgress; null !== current.sibling; )
	          (current = current.sibling),
	            (renderLanes = renderLanes.sibling =
	              createWorkInProgress(current, current.pendingProps)),
	            (renderLanes.return = workInProgress);
	        renderLanes.sibling = null;
	      }
	      return workInProgress.child;
	    }
	    function checkScheduledUpdateOrContext(current, renderLanes) {
	      if (0 !== (current.lanes & renderLanes)) return true;
	      current = current.dependencies;
	      return null !== current && checkIfContextChanged(current) ? true : false;
	    }
	    function attemptEarlyBailoutIfNoScheduledUpdate(
	      current,
	      workInProgress,
	      renderLanes
	    ) {
	      switch (workInProgress.tag) {
	        case 3:
	          pushHostContainer(
	            workInProgress,
	            workInProgress.stateNode.containerInfo
	          );
	          pushProvider(
	            workInProgress,
	            CacheContext,
	            current.memoizedState.cache
	          );
	          resetHydrationState();
	          break;
	        case 27:
	        case 5:
	          pushHostContext(workInProgress);
	          break;
	        case 4:
	          pushHostContainer(
	            workInProgress,
	            workInProgress.stateNode.containerInfo
	          );
	          break;
	        case 10:
	          pushProvider(
	            workInProgress,
	            workInProgress.type,
	            workInProgress.memoizedProps.value
	          );
	          break;
	        case 12:
	          0 !== (renderLanes & workInProgress.childLanes) &&
	            (workInProgress.flags |= 4);
	          workInProgress.flags |= 2048;
	          var stateNode = workInProgress.stateNode;
	          stateNode.effectDuration = -0;
	          stateNode.passiveEffectDuration = -0;
	          break;
	        case 13:
	          stateNode = workInProgress.memoizedState;
	          if (null !== stateNode) {
	            if (null !== stateNode.dehydrated)
	              return (
	                pushPrimaryTreeSuspenseHandler(workInProgress),
	                (workInProgress.flags |= 128),
	                null
	              );
	            if (0 !== (renderLanes & workInProgress.child.childLanes))
	              return updateSuspenseComponent(
	                current,
	                workInProgress,
	                renderLanes
	              );
	            pushPrimaryTreeSuspenseHandler(workInProgress);
	            current = bailoutOnAlreadyFinishedWork(
	              current,
	              workInProgress,
	              renderLanes
	            );
	            return null !== current ? current.sibling : null;
	          }
	          pushPrimaryTreeSuspenseHandler(workInProgress);
	          break;
	        case 19:
	          var didSuspendBefore = 0 !== (current.flags & 128);
	          stateNode = 0 !== (renderLanes & workInProgress.childLanes);
	          stateNode ||
	            (propagateParentContextChanges(
	              current,
	              workInProgress,
	              renderLanes,
	              false
	            ),
	            (stateNode = 0 !== (renderLanes & workInProgress.childLanes)));
	          if (didSuspendBefore) {
	            if (stateNode)
	              return updateSuspenseListComponent(
	                current,
	                workInProgress,
	                renderLanes
	              );
	            workInProgress.flags |= 128;
	          }
	          didSuspendBefore = workInProgress.memoizedState;
	          null !== didSuspendBefore &&
	            ((didSuspendBefore.rendering = null),
	            (didSuspendBefore.tail = null),
	            (didSuspendBefore.lastEffect = null));
	          push(
	            suspenseStackCursor,
	            suspenseStackCursor.current,
	            workInProgress
	          );
	          if (stateNode) break;
	          else return null;
	        case 22:
	        case 23:
	          return (
	            (workInProgress.lanes = 0),
	            updateOffscreenComponent(current, workInProgress, renderLanes)
	          );
	        case 24:
	          pushProvider(
	            workInProgress,
	            CacheContext,
	            current.memoizedState.cache
	          );
	      }
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    }
	    function beginWork(current, workInProgress, renderLanes) {
	      if (workInProgress._debugNeedsRemount && null !== current) {
	        renderLanes = createFiberFromTypeAndProps(
	          workInProgress.type,
	          workInProgress.key,
	          workInProgress.pendingProps,
	          workInProgress._debugOwner || null,
	          workInProgress.mode,
	          workInProgress.lanes
	        );
	        renderLanes._debugStack = workInProgress._debugStack;
	        renderLanes._debugTask = workInProgress._debugTask;
	        var returnFiber = workInProgress.return;
	        if (null === returnFiber) throw Error("Cannot swap the root fiber.");
	        current.alternate = null;
	        workInProgress.alternate = null;
	        renderLanes.index = workInProgress.index;
	        renderLanes.sibling = workInProgress.sibling;
	        renderLanes.return = workInProgress.return;
	        renderLanes.ref = workInProgress.ref;
	        renderLanes._debugInfo = workInProgress._debugInfo;
	        if (workInProgress === returnFiber.child)
	          returnFiber.child = renderLanes;
	        else {
	          var prevSibling = returnFiber.child;
	          if (null === prevSibling)
	            throw Error("Expected parent to have a child.");
	          for (; prevSibling.sibling !== workInProgress; )
	            if (((prevSibling = prevSibling.sibling), null === prevSibling))
	              throw Error("Expected to find the previous sibling.");
	          prevSibling.sibling = renderLanes;
	        }
	        workInProgress = returnFiber.deletions;
	        null === workInProgress
	          ? ((returnFiber.deletions = [current]), (returnFiber.flags |= 16))
	          : workInProgress.push(current);
	        renderLanes.flags |= 2;
	        return renderLanes;
	      }
	      if (null !== current)
	        if (
	          current.memoizedProps !== workInProgress.pendingProps ||
	          workInProgress.type !== current.type
	        )
	          didReceiveUpdate = true;
	        else {
	          if (
	            !checkScheduledUpdateOrContext(current, renderLanes) &&
	            0 === (workInProgress.flags & 128)
	          )
	            return (
	              (didReceiveUpdate = false),
	              attemptEarlyBailoutIfNoScheduledUpdate(
	                current,
	                workInProgress,
	                renderLanes
	              )
	            );
	          didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
	        }
	      else {
	        didReceiveUpdate = false;
	        if ((returnFiber = isHydrating))
	          warnIfNotHydrating(),
	            (returnFiber = 0 !== (workInProgress.flags & 1048576));
	        returnFiber &&
	          ((returnFiber = workInProgress.index),
	          warnIfNotHydrating(),
	          pushTreeId(workInProgress, treeForkCount, returnFiber));
	      }
	      workInProgress.lanes = 0;
	      switch (workInProgress.tag) {
	        case 16:
	          a: if (
	            ((returnFiber = workInProgress.pendingProps),
	            (current = callLazyInitInDEV(workInProgress.elementType)),
	            (workInProgress.type = current),
	            "function" === typeof current)
	          )
	            shouldConstruct(current)
	              ? ((returnFiber = resolveClassComponentProps(
	                  current,
	                  returnFiber
	                )),
	                (workInProgress.tag = 1),
	                (workInProgress.type = current =
	                  resolveFunctionForHotReloading(current)),
	                (workInProgress = updateClassComponent(
	                  null,
	                  workInProgress,
	                  current,
	                  returnFiber,
	                  renderLanes
	                )))
	              : ((workInProgress.tag = 0),
	                validateFunctionComponentInDev(workInProgress, current),
	                (workInProgress.type = current =
	                  resolveFunctionForHotReloading(current)),
	                (workInProgress = updateFunctionComponent(
	                  null,
	                  workInProgress,
	                  current,
	                  returnFiber,
	                  renderLanes
	                )));
	          else {
	            if (void 0 !== current && null !== current)
	              if (
	                ((prevSibling = current.$$typeof),
	                prevSibling === REACT_FORWARD_REF_TYPE)
	              ) {
	                workInProgress.tag = 11;
	                workInProgress.type = current =
	                  resolveForwardRefForHotReloading(current);
	                workInProgress = updateForwardRef(
	                  null,
	                  workInProgress,
	                  current,
	                  returnFiber,
	                  renderLanes
	                );
	                break a;
	              } else if (prevSibling === REACT_MEMO_TYPE) {
	                workInProgress.tag = 14;
	                workInProgress = updateMemoComponent(
	                  null,
	                  workInProgress,
	                  current,
	                  returnFiber,
	                  renderLanes
	                );
	                break a;
	              }
	            workInProgress = "";
	            null !== current &&
	              "object" === typeof current &&
	              current.$$typeof === REACT_LAZY_TYPE &&
	              (workInProgress =
	                " Did you wrap a component in React.lazy() more than once?");
	            current = getComponentNameFromType(current) || current;
	            throw Error(
	              "Element type is invalid. Received a promise that resolves to: " +
	                current +
	                ". Lazy element type must resolve to a class or function." +
	                workInProgress
	            );
	          }
	          return workInProgress;
	        case 0:
	          return updateFunctionComponent(
	            current,
	            workInProgress,
	            workInProgress.type,
	            workInProgress.pendingProps,
	            renderLanes
	          );
	        case 1:
	          return (
	            (returnFiber = workInProgress.type),
	            (prevSibling = resolveClassComponentProps(
	              returnFiber,
	              workInProgress.pendingProps
	            )),
	            updateClassComponent(
	              current,
	              workInProgress,
	              returnFiber,
	              prevSibling,
	              renderLanes
	            )
	          );
	        case 3:
	          a: {
	            pushHostContainer(
	              workInProgress,
	              workInProgress.stateNode.containerInfo
	            );
	            if (null === current)
	              throw Error(
	                "Should have a current fiber. This is a bug in React."
	              );
	            returnFiber = workInProgress.pendingProps;
	            var prevState = workInProgress.memoizedState;
	            prevSibling = prevState.element;
	            cloneUpdateQueue(current, workInProgress);
	            processUpdateQueue(workInProgress, returnFiber, null, renderLanes);
	            var nextState = workInProgress.memoizedState;
	            returnFiber = nextState.cache;
	            pushProvider(workInProgress, CacheContext, returnFiber);
	            returnFiber !== prevState.cache &&
	              propagateContextChanges(
	                workInProgress,
	                [CacheContext],
	                renderLanes,
	                true
	              );
	            suspendIfUpdateReadFromEntangledAsyncAction();
	            returnFiber = nextState.element;
	            if (prevState.isDehydrated)
	              if (
	                ((prevState = {
	                  element: returnFiber,
	                  isDehydrated: false,
	                  cache: nextState.cache
	                }),
	                (workInProgress.updateQueue.baseState = prevState),
	                (workInProgress.memoizedState = prevState),
	                workInProgress.flags & 256)
	              ) {
	                workInProgress = mountHostRootWithoutHydrating(
	                  current,
	                  workInProgress,
	                  returnFiber,
	                  renderLanes
	                );
	                break a;
	              } else if (returnFiber !== prevSibling) {
	                prevSibling = createCapturedValueAtFiber(
	                  Error(
	                    "This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."
	                  ),
	                  workInProgress
	                );
	                queueHydrationError(prevSibling);
	                workInProgress = mountHostRootWithoutHydrating(
	                  current,
	                  workInProgress,
	                  returnFiber,
	                  renderLanes
	                );
	                break a;
	              } else {
	                current = workInProgress.stateNode.containerInfo;
	                switch (current.nodeType) {
	                  case 9:
	                    current = current.body;
	                    break;
	                  default:
	                    current =
	                      "HTML" === current.nodeName
	                        ? current.ownerDocument.body
	                        : current;
	                }
	                nextHydratableInstance = getNextHydratable(current.firstChild);
	                hydrationParentFiber = workInProgress;
	                isHydrating = true;
	                hydrationErrors = null;
	                didSuspendOrErrorDEV = false;
	                hydrationDiffRootDEV = null;
	                rootOrSingletonContext = true;
	                current = mountChildFibers(
	                  workInProgress,
	                  null,
	                  returnFiber,
	                  renderLanes
	                );
	                for (workInProgress.child = current; current; )
	                  (current.flags = (current.flags & -3) | 4096),
	                    (current = current.sibling);
	              }
	            else {
	              resetHydrationState();
	              if (returnFiber === prevSibling) {
	                workInProgress = bailoutOnAlreadyFinishedWork(
	                  current,
	                  workInProgress,
	                  renderLanes
	                );
	                break a;
	              }
	              reconcileChildren(
	                current,
	                workInProgress,
	                returnFiber,
	                renderLanes
	              );
	            }
	            workInProgress = workInProgress.child;
	          }
	          return workInProgress;
	        case 26:
	          return (
	            markRef(current, workInProgress),
	            null === current
	              ? (current = getResource(
	                  workInProgress.type,
	                  null,
	                  workInProgress.pendingProps,
	                  null
	                ))
	                ? (workInProgress.memoizedState = current)
	                : isHydrating ||
	                  ((current = workInProgress.type),
	                  (renderLanes = workInProgress.pendingProps),
	                  (returnFiber = requiredContext(
	                    rootInstanceStackCursor.current
	                  )),
	                  (returnFiber =
	                    getOwnerDocumentFromRootContainer(
	                      returnFiber
	                    ).createElement(current)),
	                  (returnFiber[internalInstanceKey] = workInProgress),
	                  (returnFiber[internalPropsKey] = renderLanes),
	                  setInitialProperties(returnFiber, current, renderLanes),
	                  markNodeAsHoistable(returnFiber),
	                  (workInProgress.stateNode = returnFiber))
	              : (workInProgress.memoizedState = getResource(
	                  workInProgress.type,
	                  current.memoizedProps,
	                  workInProgress.pendingProps,
	                  current.memoizedState
	                )),
	            null
	          );
	        case 27:
	          return (
	            pushHostContext(workInProgress),
	            null === current &&
	              isHydrating &&
	              ((returnFiber = requiredContext(rootInstanceStackCursor.current)),
	              (prevSibling = getHostContext()),
	              (returnFiber = workInProgress.stateNode =
	                resolveSingletonInstance(
	                  workInProgress.type,
	                  workInProgress.pendingProps,
	                  returnFiber,
	                  prevSibling,
	                  false
	                )),
	              didSuspendOrErrorDEV ||
	                ((prevSibling = diffHydratedProperties(
	                  returnFiber,
	                  workInProgress.type,
	                  workInProgress.pendingProps,
	                  prevSibling
	                )),
	                null !== prevSibling &&
	                  (buildHydrationDiffNode(workInProgress, 0).serverProps =
	                    prevSibling)),
	              (hydrationParentFiber = workInProgress),
	              (rootOrSingletonContext = true),
	              (prevSibling = nextHydratableInstance),
	              isSingletonScope(workInProgress.type)
	                ? ((previousHydratableOnEnteringScopedSingleton = prevSibling),
	                  (nextHydratableInstance = getNextHydratable(
	                    returnFiber.firstChild
	                  )))
	                : (nextHydratableInstance = prevSibling)),
	            reconcileChildren(
	              current,
	              workInProgress,
	              workInProgress.pendingProps.children,
	              renderLanes
	            ),
	            markRef(current, workInProgress),
	            null === current && (workInProgress.flags |= 4194304),
	            workInProgress.child
	          );
	        case 5:
	          return (
	            null === current &&
	              isHydrating &&
	              ((prevState = getHostContext()),
	              (returnFiber = validateDOMNesting(
	                workInProgress.type,
	                prevState.ancestorInfo
	              )),
	              (prevSibling = nextHydratableInstance),
	              (nextState = !prevSibling) ||
	                ((nextState = canHydrateInstance(
	                  prevSibling,
	                  workInProgress.type,
	                  workInProgress.pendingProps,
	                  rootOrSingletonContext
	                )),
	                null !== nextState
	                  ? ((workInProgress.stateNode = nextState),
	                    didSuspendOrErrorDEV ||
	                      ((prevState = diffHydratedProperties(
	                        nextState,
	                        workInProgress.type,
	                        workInProgress.pendingProps,
	                        prevState
	                      )),
	                      null !== prevState &&
	                        (buildHydrationDiffNode(workInProgress, 0).serverProps =
	                          prevState)),
	                    (hydrationParentFiber = workInProgress),
	                    (nextHydratableInstance = getNextHydratable(
	                      nextState.firstChild
	                    )),
	                    (rootOrSingletonContext = false),
	                    (prevState = true))
	                  : (prevState = false),
	                (nextState = !prevState)),
	              nextState &&
	                (returnFiber &&
	                  warnNonHydratedInstance(workInProgress, prevSibling),
	                throwOnHydrationMismatch(workInProgress))),
	            pushHostContext(workInProgress),
	            (prevSibling = workInProgress.type),
	            (prevState = workInProgress.pendingProps),
	            (nextState = null !== current ? current.memoizedProps : null),
	            (returnFiber = prevState.children),
	            shouldSetTextContent(prevSibling, prevState)
	              ? (returnFiber = null)
	              : null !== nextState &&
	                shouldSetTextContent(prevSibling, nextState) &&
	                (workInProgress.flags |= 32),
	            null !== workInProgress.memoizedState &&
	              ((prevSibling = renderWithHooks(
	                current,
	                workInProgress,
	                TransitionAwareHostComponent,
	                null,
	                null,
	                renderLanes
	              )),
	              (HostTransitionContext._currentValue = prevSibling)),
	            markRef(current, workInProgress),
	            reconcileChildren(
	              current,
	              workInProgress,
	              returnFiber,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 6:
	          return (
	            null === current &&
	              isHydrating &&
	              ((current = workInProgress.pendingProps),
	              (renderLanes = getHostContext()),
	              (returnFiber = renderLanes.ancestorInfo.current),
	              (current =
	                null != returnFiber
	                  ? validateTextNesting(
	                      current,
	                      returnFiber.tag,
	                      renderLanes.ancestorInfo.implicitRootScope
	                    )
	                  : true),
	              (renderLanes = nextHydratableInstance),
	              (returnFiber = !renderLanes) ||
	                ((returnFiber = canHydrateTextInstance(
	                  renderLanes,
	                  workInProgress.pendingProps,
	                  rootOrSingletonContext
	                )),
	                null !== returnFiber
	                  ? ((workInProgress.stateNode = returnFiber),
	                    (hydrationParentFiber = workInProgress),
	                    (nextHydratableInstance = null),
	                    (returnFiber = true))
	                  : (returnFiber = false),
	                (returnFiber = !returnFiber)),
	              returnFiber &&
	                (current &&
	                  warnNonHydratedInstance(workInProgress, renderLanes),
	                throwOnHydrationMismatch(workInProgress))),
	            null
	          );
	        case 13:
	          return updateSuspenseComponent(current, workInProgress, renderLanes);
	        case 4:
	          return (
	            pushHostContainer(
	              workInProgress,
	              workInProgress.stateNode.containerInfo
	            ),
	            (returnFiber = workInProgress.pendingProps),
	            null === current
	              ? (workInProgress.child = reconcileChildFibers(
	                  workInProgress,
	                  null,
	                  returnFiber,
	                  renderLanes
	                ))
	              : reconcileChildren(
	                  current,
	                  workInProgress,
	                  returnFiber,
	                  renderLanes
	                ),
	            workInProgress.child
	          );
	        case 11:
	          return updateForwardRef(
	            current,
	            workInProgress,
	            workInProgress.type,
	            workInProgress.pendingProps,
	            renderLanes
	          );
	        case 7:
	          return (
	            reconcileChildren(
	              current,
	              workInProgress,
	              workInProgress.pendingProps,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 8:
	          return (
	            reconcileChildren(
	              current,
	              workInProgress,
	              workInProgress.pendingProps.children,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 12:
	          return (
	            (workInProgress.flags |= 4),
	            (workInProgress.flags |= 2048),
	            (returnFiber = workInProgress.stateNode),
	            (returnFiber.effectDuration = -0),
	            (returnFiber.passiveEffectDuration = -0),
	            reconcileChildren(
	              current,
	              workInProgress,
	              workInProgress.pendingProps.children,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 10:
	          return (
	            (returnFiber = workInProgress.type),
	            (prevSibling = workInProgress.pendingProps),
	            (prevState = prevSibling.value),
	            "value" in prevSibling ||
	              hasWarnedAboutUsingNoValuePropOnContextProvider ||
	              ((hasWarnedAboutUsingNoValuePropOnContextProvider = true),
	              console.error(
	                "The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
	              )),
	            pushProvider(workInProgress, returnFiber, prevState),
	            reconcileChildren(
	              current,
	              workInProgress,
	              prevSibling.children,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 9:
	          return (
	            (prevSibling = workInProgress.type._context),
	            (returnFiber = workInProgress.pendingProps.children),
	            "function" !== typeof returnFiber &&
	              console.error(
	                "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
	              ),
	            prepareToReadContext(workInProgress),
	            (prevSibling = readContext(prevSibling)),
	            markComponentRenderStarted(workInProgress),
	            (returnFiber = callComponentInDEV(
	              returnFiber,
	              prevSibling,
	              void 0
	            )),
	            markComponentRenderStopped(),
	            (workInProgress.flags |= 1),
	            reconcileChildren(
	              current,
	              workInProgress,
	              returnFiber,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 14:
	          return updateMemoComponent(
	            current,
	            workInProgress,
	            workInProgress.type,
	            workInProgress.pendingProps,
	            renderLanes
	          );
	        case 15:
	          return updateSimpleMemoComponent(
	            current,
	            workInProgress,
	            workInProgress.type,
	            workInProgress.pendingProps,
	            renderLanes
	          );
	        case 19:
	          return updateSuspenseListComponent(
	            current,
	            workInProgress,
	            renderLanes
	          );
	        case 31:
	          return (
	            (returnFiber = workInProgress.pendingProps),
	            (renderLanes = workInProgress.mode),
	            (returnFiber = {
	              mode: returnFiber.mode,
	              children: returnFiber.children
	            }),
	            null === current
	              ? ((current = mountWorkInProgressOffscreenFiber(
	                  returnFiber,
	                  renderLanes
	                )),
	                (current.ref = workInProgress.ref),
	                (workInProgress.child = current),
	                (current.return = workInProgress),
	                (workInProgress = current))
	              : ((current = createWorkInProgress(current.child, returnFiber)),
	                (current.ref = workInProgress.ref),
	                (workInProgress.child = current),
	                (current.return = workInProgress),
	                (workInProgress = current)),
	            workInProgress
	          );
	        case 22:
	          return updateOffscreenComponent(current, workInProgress, renderLanes);
	        case 24:
	          return (
	            prepareToReadContext(workInProgress),
	            (returnFiber = readContext(CacheContext)),
	            null === current
	              ? ((prevSibling = peekCacheFromPool()),
	                null === prevSibling &&
	                  ((prevSibling = workInProgressRoot),
	                  (prevState = createCache()),
	                  (prevSibling.pooledCache = prevState),
	                  retainCache(prevState),
	                  null !== prevState &&
	                    (prevSibling.pooledCacheLanes |= renderLanes),
	                  (prevSibling = prevState)),
	                (workInProgress.memoizedState = {
	                  parent: returnFiber,
	                  cache: prevSibling
	                }),
	                initializeUpdateQueue(workInProgress),
	                pushProvider(workInProgress, CacheContext, prevSibling))
	              : (0 !== (current.lanes & renderLanes) &&
	                  (cloneUpdateQueue(current, workInProgress),
	                  processUpdateQueue(workInProgress, null, null, renderLanes),
	                  suspendIfUpdateReadFromEntangledAsyncAction()),
	                (prevSibling = current.memoizedState),
	                (prevState = workInProgress.memoizedState),
	                prevSibling.parent !== returnFiber
	                  ? ((prevSibling = {
	                      parent: returnFiber,
	                      cache: returnFiber
	                    }),
	                    (workInProgress.memoizedState = prevSibling),
	                    0 === workInProgress.lanes &&
	                      (workInProgress.memoizedState =
	                        workInProgress.updateQueue.baseState =
	                          prevSibling),
	                    pushProvider(workInProgress, CacheContext, returnFiber))
	                  : ((returnFiber = prevState.cache),
	                    pushProvider(workInProgress, CacheContext, returnFiber),
	                    returnFiber !== prevSibling.cache &&
	                      propagateContextChanges(
	                        workInProgress,
	                        [CacheContext],
	                        renderLanes,
	                        true
	                      ))),
	            reconcileChildren(
	              current,
	              workInProgress,
	              workInProgress.pendingProps.children,
	              renderLanes
	            ),
	            workInProgress.child
	          );
	        case 29:
	          throw workInProgress.pendingProps;
	      }
	      throw Error(
	        "Unknown unit of work tag (" +
	          workInProgress.tag +
	          "). This error is likely caused by a bug in React. Please file an issue."
	      );
	    }
	    function markUpdate(workInProgress) {
	      workInProgress.flags |= 4;
	    }
	    function preloadResourceAndSuspendIfNeeded(workInProgress, resource) {
	      if (
	        "stylesheet" !== resource.type ||
	        (resource.state.loading & Inserted) !== NotLoaded
	      )
	        workInProgress.flags &= -16777217;
	      else if (
	        ((workInProgress.flags |= 16777216), !preloadResource(resource))
	      ) {
	        resource = suspenseHandlerStackCursor.current;
	        if (
	          null !== resource &&
	          ((workInProgressRootRenderLanes & 4194048) ===
	          workInProgressRootRenderLanes
	            ? null !== shellBoundary
	            : ((workInProgressRootRenderLanes & 62914560) !==
	                workInProgressRootRenderLanes &&
	                0 === (workInProgressRootRenderLanes & 536870912)) ||
	              resource !== shellBoundary)
	        )
	          throw (
	            ((suspendedThenable = noopSuspenseyCommitThenable),
	            SuspenseyCommitException)
	          );
	        workInProgress.flags |= 8192;
	      }
	    }
	    function scheduleRetryEffect(workInProgress, retryQueue) {
	      null !== retryQueue && (workInProgress.flags |= 4);
	      workInProgress.flags & 16384 &&
	        ((retryQueue =
	          22 !== workInProgress.tag ? claimNextRetryLane() : 536870912),
	        (workInProgress.lanes |= retryQueue),
	        (workInProgressSuspendedRetryLanes |= retryQueue));
	    }
	    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	      if (!isHydrating)
	        switch (renderState.tailMode) {
	          case "hidden":
	            hasRenderedATailFallback = renderState.tail;
	            for (var lastTailNode = null; null !== hasRenderedATailFallback; )
	              null !== hasRenderedATailFallback.alternate &&
	                (lastTailNode = hasRenderedATailFallback),
	                (hasRenderedATailFallback = hasRenderedATailFallback.sibling);
	            null === lastTailNode
	              ? (renderState.tail = null)
	              : (lastTailNode.sibling = null);
	            break;
	          case "collapsed":
	            lastTailNode = renderState.tail;
	            for (var _lastTailNode = null; null !== lastTailNode; )
	              null !== lastTailNode.alternate && (_lastTailNode = lastTailNode),
	                (lastTailNode = lastTailNode.sibling);
	            null === _lastTailNode
	              ? hasRenderedATailFallback || null === renderState.tail
	                ? (renderState.tail = null)
	                : (renderState.tail.sibling = null)
	              : (_lastTailNode.sibling = null);
	        }
	    }
	    function bubbleProperties(completedWork) {
	      var didBailout =
	          null !== completedWork.alternate &&
	          completedWork.alternate.child === completedWork.child,
	        newChildLanes = 0,
	        subtreeFlags = 0;
	      if (didBailout)
	        if ((completedWork.mode & ProfileMode) !== NoMode) {
	          for (
	            var _treeBaseDuration = completedWork.selfBaseDuration,
	              _child2 = completedWork.child;
	            null !== _child2;

	          )
	            (newChildLanes |= _child2.lanes | _child2.childLanes),
	              (subtreeFlags |= _child2.subtreeFlags & 65011712),
	              (subtreeFlags |= _child2.flags & 65011712),
	              (_treeBaseDuration += _child2.treeBaseDuration),
	              (_child2 = _child2.sibling);
	          completedWork.treeBaseDuration = _treeBaseDuration;
	        } else
	          for (
	            _treeBaseDuration = completedWork.child;
	            null !== _treeBaseDuration;

	          )
	            (newChildLanes |=
	              _treeBaseDuration.lanes | _treeBaseDuration.childLanes),
	              (subtreeFlags |= _treeBaseDuration.subtreeFlags & 65011712),
	              (subtreeFlags |= _treeBaseDuration.flags & 65011712),
	              (_treeBaseDuration.return = completedWork),
	              (_treeBaseDuration = _treeBaseDuration.sibling);
	      else if ((completedWork.mode & ProfileMode) !== NoMode) {
	        _treeBaseDuration = completedWork.actualDuration;
	        _child2 = completedWork.selfBaseDuration;
	        for (var child = completedWork.child; null !== child; )
	          (newChildLanes |= child.lanes | child.childLanes),
	            (subtreeFlags |= child.subtreeFlags),
	            (subtreeFlags |= child.flags),
	            (_treeBaseDuration += child.actualDuration),
	            (_child2 += child.treeBaseDuration),
	            (child = child.sibling);
	        completedWork.actualDuration = _treeBaseDuration;
	        completedWork.treeBaseDuration = _child2;
	      } else
	        for (
	          _treeBaseDuration = completedWork.child;
	          null !== _treeBaseDuration;

	        )
	          (newChildLanes |=
	            _treeBaseDuration.lanes | _treeBaseDuration.childLanes),
	            (subtreeFlags |= _treeBaseDuration.subtreeFlags),
	            (subtreeFlags |= _treeBaseDuration.flags),
	            (_treeBaseDuration.return = completedWork),
	            (_treeBaseDuration = _treeBaseDuration.sibling);
	      completedWork.subtreeFlags |= subtreeFlags;
	      completedWork.childLanes = newChildLanes;
	      return didBailout;
	    }
	    function completeWork(current, workInProgress, renderLanes) {
	      var newProps = workInProgress.pendingProps;
	      popTreeContext(workInProgress);
	      switch (workInProgress.tag) {
	        case 31:
	        case 16:
	        case 15:
	        case 0:
	        case 11:
	        case 7:
	        case 8:
	        case 12:
	        case 9:
	        case 14:
	          return bubbleProperties(workInProgress), null;
	        case 1:
	          return bubbleProperties(workInProgress), null;
	        case 3:
	          renderLanes = workInProgress.stateNode;
	          newProps = null;
	          null !== current && (newProps = current.memoizedState.cache);
	          workInProgress.memoizedState.cache !== newProps &&
	            (workInProgress.flags |= 2048);
	          popProvider(CacheContext, workInProgress);
	          popHostContainer(workInProgress);
	          renderLanes.pendingContext &&
	            ((renderLanes.context = renderLanes.pendingContext),
	            (renderLanes.pendingContext = null));
	          if (null === current || null === current.child)
	            popHydrationState(workInProgress)
	              ? (emitPendingHydrationWarnings(), markUpdate(workInProgress))
	              : null === current ||
	                (current.memoizedState.isDehydrated &&
	                  0 === (workInProgress.flags & 256)) ||
	                ((workInProgress.flags |= 1024),
	                upgradeHydrationErrorsToRecoverable());
	          bubbleProperties(workInProgress);
	          return null;
	        case 26:
	          return (
	            (renderLanes = workInProgress.memoizedState),
	            null === current
	              ? (markUpdate(workInProgress),
	                null !== renderLanes
	                  ? (bubbleProperties(workInProgress),
	                    preloadResourceAndSuspendIfNeeded(
	                      workInProgress,
	                      renderLanes
	                    ))
	                  : (bubbleProperties(workInProgress),
	                    (workInProgress.flags &= -16777217)))
	              : renderLanes
	                ? renderLanes !== current.memoizedState
	                  ? (markUpdate(workInProgress),
	                    bubbleProperties(workInProgress),
	                    preloadResourceAndSuspendIfNeeded(
	                      workInProgress,
	                      renderLanes
	                    ))
	                  : (bubbleProperties(workInProgress),
	                    (workInProgress.flags &= -16777217))
	                : (current.memoizedProps !== newProps &&
	                    markUpdate(workInProgress),
	                  bubbleProperties(workInProgress),
	                  (workInProgress.flags &= -16777217)),
	            null
	          );
	        case 27:
	          popHostContext(workInProgress);
	          renderLanes = requiredContext(rootInstanceStackCursor.current);
	          var _type = workInProgress.type;
	          if (null !== current && null != workInProgress.stateNode)
	            current.memoizedProps !== newProps && markUpdate(workInProgress);
	          else {
	            if (!newProps) {
	              if (null === workInProgress.stateNode)
	                throw Error(
	                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
	                );
	              bubbleProperties(workInProgress);
	              return null;
	            }
	            current = getHostContext();
	            popHydrationState(workInProgress)
	              ? prepareToHydrateHostInstance(workInProgress)
	              : ((current = resolveSingletonInstance(
	                  _type,
	                  newProps,
	                  renderLanes,
	                  current,
	                  true
	                )),
	                (workInProgress.stateNode = current),
	                markUpdate(workInProgress));
	          }
	          bubbleProperties(workInProgress);
	          return null;
	        case 5:
	          popHostContext(workInProgress);
	          renderLanes = workInProgress.type;
	          if (null !== current && null != workInProgress.stateNode)
	            current.memoizedProps !== newProps && markUpdate(workInProgress);
	          else {
	            if (!newProps) {
	              if (null === workInProgress.stateNode)
	                throw Error(
	                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
	                );
	              bubbleProperties(workInProgress);
	              return null;
	            }
	            _type = getHostContext();
	            if (popHydrationState(workInProgress))
	              prepareToHydrateHostInstance(workInProgress);
	            else {
	              current = requiredContext(rootInstanceStackCursor.current);
	              validateDOMNesting(renderLanes, _type.ancestorInfo);
	              _type = _type.context;
	              current = getOwnerDocumentFromRootContainer(current);
	              switch (_type) {
	                case HostContextNamespaceSvg:
	                  current = current.createElementNS(SVG_NAMESPACE, renderLanes);
	                  break;
	                case HostContextNamespaceMath:
	                  current = current.createElementNS(
	                    MATH_NAMESPACE,
	                    renderLanes
	                  );
	                  break;
	                default:
	                  switch (renderLanes) {
	                    case "svg":
	                      current = current.createElementNS(
	                        SVG_NAMESPACE,
	                        renderLanes
	                      );
	                      break;
	                    case "math":
	                      current = current.createElementNS(
	                        MATH_NAMESPACE,
	                        renderLanes
	                      );
	                      break;
	                    case "script":
	                      current = current.createElement("div");
	                      current.innerHTML = "<script>\x3c/script>";
	                      current = current.removeChild(current.firstChild);
	                      break;
	                    case "select":
	                      current =
	                        "string" === typeof newProps.is
	                          ? current.createElement("select", { is: newProps.is })
	                          : current.createElement("select");
	                      newProps.multiple
	                        ? (current.multiple = true)
	                        : newProps.size && (current.size = newProps.size);
	                      break;
	                    default:
	                      (current =
	                        "string" === typeof newProps.is
	                          ? current.createElement(renderLanes, {
	                              is: newProps.is
	                            })
	                          : current.createElement(renderLanes)),
	                        -1 === renderLanes.indexOf("-") &&
	                          (renderLanes !== renderLanes.toLowerCase() &&
	                            console.error(
	                              "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
	                              renderLanes
	                            ),
	                          "[object HTMLUnknownElement]" !==
	                            Object.prototype.toString.call(current) ||
	                            hasOwnProperty.call(
	                              warnedUnknownTags,
	                              renderLanes
	                            ) ||
	                            ((warnedUnknownTags[renderLanes] = true),
	                            console.error(
	                              "The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",
	                              renderLanes
	                            )));
	                  }
	              }
	              current[internalInstanceKey] = workInProgress;
	              current[internalPropsKey] = newProps;
	              a: for (_type = workInProgress.child; null !== _type; ) {
	                if (5 === _type.tag || 6 === _type.tag)
	                  current.appendChild(_type.stateNode);
	                else if (
	                  4 !== _type.tag &&
	                  27 !== _type.tag &&
	                  null !== _type.child
	                ) {
	                  _type.child.return = _type;
	                  _type = _type.child;
	                  continue;
	                }
	                if (_type === workInProgress) break a;
	                for (; null === _type.sibling; ) {
	                  if (null === _type.return || _type.return === workInProgress)
	                    break a;
	                  _type = _type.return;
	                }
	                _type.sibling.return = _type.return;
	                _type = _type.sibling;
	              }
	              workInProgress.stateNode = current;
	              a: switch (
	                (setInitialProperties(current, renderLanes, newProps),
	                renderLanes)
	              ) {
	                case "button":
	                case "input":
	                case "select":
	                case "textarea":
	                  current = !!newProps.autoFocus;
	                  break a;
	                case "img":
	                  current = true;
	                  break a;
	                default:
	                  current = false;
	              }
	              current && markUpdate(workInProgress);
	            }
	          }
	          bubbleProperties(workInProgress);
	          workInProgress.flags &= -16777217;
	          return null;
	        case 6:
	          if (current && null != workInProgress.stateNode)
	            current.memoizedProps !== newProps && markUpdate(workInProgress);
	          else {
	            if (
	              "string" !== typeof newProps &&
	              null === workInProgress.stateNode
	            )
	              throw Error(
	                "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
	              );
	            current = requiredContext(rootInstanceStackCursor.current);
	            renderLanes = getHostContext();
	            if (popHydrationState(workInProgress)) {
	              current = workInProgress.stateNode;
	              renderLanes = workInProgress.memoizedProps;
	              _type = !didSuspendOrErrorDEV;
	              newProps = null;
	              var returnFiber = hydrationParentFiber;
	              if (null !== returnFiber)
	                switch (returnFiber.tag) {
	                  case 3:
	                    _type &&
	                      ((_type = diffHydratedTextForDevWarnings(
	                        current,
	                        renderLanes,
	                        newProps
	                      )),
	                      null !== _type &&
	                        (buildHydrationDiffNode(workInProgress, 0).serverProps =
	                          _type));
	                    break;
	                  case 27:
	                  case 5:
	                    (newProps = returnFiber.memoizedProps),
	                      _type &&
	                        ((_type = diffHydratedTextForDevWarnings(
	                          current,
	                          renderLanes,
	                          newProps
	                        )),
	                        null !== _type &&
	                          (buildHydrationDiffNode(
	                            workInProgress,
	                            0
	                          ).serverProps = _type));
	                }
	              current[internalInstanceKey] = workInProgress;
	              current =
	                current.nodeValue === renderLanes ||
	                (null !== newProps &&
	                  true === newProps.suppressHydrationWarning) ||
	                checkForUnmatchedText(current.nodeValue, renderLanes)
	                  ? true
	                  : false;
	              current || throwOnHydrationMismatch(workInProgress);
	            } else
	              (_type = renderLanes.ancestorInfo.current),
	                null != _type &&
	                  validateTextNesting(
	                    newProps,
	                    _type.tag,
	                    renderLanes.ancestorInfo.implicitRootScope
	                  ),
	                (current =
	                  getOwnerDocumentFromRootContainer(current).createTextNode(
	                    newProps
	                  )),
	                (current[internalInstanceKey] = workInProgress),
	                (workInProgress.stateNode = current);
	          }
	          bubbleProperties(workInProgress);
	          return null;
	        case 13:
	          newProps = workInProgress.memoizedState;
	          if (
	            null === current ||
	            (null !== current.memoizedState &&
	              null !== current.memoizedState.dehydrated)
	          ) {
	            _type = popHydrationState(workInProgress);
	            if (null !== newProps && null !== newProps.dehydrated) {
	              if (null === current) {
	                if (!_type)
	                  throw Error(
	                    "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
	                  );
	                _type = workInProgress.memoizedState;
	                _type = null !== _type ? _type.dehydrated : null;
	                if (!_type)
	                  throw Error(
	                    "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
	                  );
	                _type[internalInstanceKey] = workInProgress;
	                bubbleProperties(workInProgress);
	                (workInProgress.mode & ProfileMode) !== NoMode &&
	                  null !== newProps &&
	                  ((_type = workInProgress.child),
	                  null !== _type &&
	                    (workInProgress.treeBaseDuration -=
	                      _type.treeBaseDuration));
	              } else
	                emitPendingHydrationWarnings(),
	                  resetHydrationState(),
	                  0 === (workInProgress.flags & 128) &&
	                    (workInProgress.memoizedState = null),
	                  (workInProgress.flags |= 4),
	                  bubbleProperties(workInProgress),
	                  (workInProgress.mode & ProfileMode) !== NoMode &&
	                    null !== newProps &&
	                    ((_type = workInProgress.child),
	                    null !== _type &&
	                      (workInProgress.treeBaseDuration -=
	                        _type.treeBaseDuration));
	              _type = false;
	            } else
	              (_type = upgradeHydrationErrorsToRecoverable()),
	                null !== current &&
	                  null !== current.memoizedState &&
	                  (current.memoizedState.hydrationErrors = _type),
	                (_type = true);
	            if (!_type) {
	              if (workInProgress.flags & 256)
	                return popSuspenseHandler(workInProgress), workInProgress;
	              popSuspenseHandler(workInProgress);
	              return null;
	            }
	          }
	          popSuspenseHandler(workInProgress);
	          if (0 !== (workInProgress.flags & 128))
	            return (
	              (workInProgress.lanes = renderLanes),
	              (workInProgress.mode & ProfileMode) !== NoMode &&
	                transferActualDuration(workInProgress),
	              workInProgress
	            );
	          renderLanes = null !== newProps;
	          current = null !== current && null !== current.memoizedState;
	          renderLanes &&
	            ((newProps = workInProgress.child),
	            (_type = null),
	            null !== newProps.alternate &&
	              null !== newProps.alternate.memoizedState &&
	              null !== newProps.alternate.memoizedState.cachePool &&
	              (_type = newProps.alternate.memoizedState.cachePool.pool),
	            (returnFiber = null),
	            null !== newProps.memoizedState &&
	              null !== newProps.memoizedState.cachePool &&
	              (returnFiber = newProps.memoizedState.cachePool.pool),
	            returnFiber !== _type && (newProps.flags |= 2048));
	          renderLanes !== current &&
	            renderLanes &&
	            (workInProgress.child.flags |= 8192);
	          scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
	          bubbleProperties(workInProgress);
	          (workInProgress.mode & ProfileMode) !== NoMode &&
	            renderLanes &&
	            ((current = workInProgress.child),
	            null !== current &&
	              (workInProgress.treeBaseDuration -= current.treeBaseDuration));
	          return null;
	        case 4:
	          return (
	            popHostContainer(workInProgress),
	            null === current &&
	              listenToAllSupportedEvents(
	                workInProgress.stateNode.containerInfo
	              ),
	            bubbleProperties(workInProgress),
	            null
	          );
	        case 10:
	          return (
	            popProvider(workInProgress.type, workInProgress),
	            bubbleProperties(workInProgress),
	            null
	          );
	        case 19:
	          pop(suspenseStackCursor, workInProgress);
	          _type = workInProgress.memoizedState;
	          if (null === _type) return bubbleProperties(workInProgress), null;
	          newProps = 0 !== (workInProgress.flags & 128);
	          returnFiber = _type.rendering;
	          if (null === returnFiber)
	            if (newProps) cutOffTailIfNeeded(_type, false);
	            else {
	              if (
	                workInProgressRootExitStatus !== RootInProgress ||
	                (null !== current && 0 !== (current.flags & 128))
	              )
	                for (current = workInProgress.child; null !== current; ) {
	                  returnFiber = findFirstSuspended(current);
	                  if (null !== returnFiber) {
	                    workInProgress.flags |= 128;
	                    cutOffTailIfNeeded(_type, false);
	                    current = returnFiber.updateQueue;
	                    workInProgress.updateQueue = current;
	                    scheduleRetryEffect(workInProgress, current);
	                    workInProgress.subtreeFlags = 0;
	                    current = renderLanes;
	                    for (
	                      renderLanes = workInProgress.child;
	                      null !== renderLanes;

	                    )
	                      resetWorkInProgress(renderLanes, current),
	                        (renderLanes = renderLanes.sibling);
	                    push(
	                      suspenseStackCursor,
	                      (suspenseStackCursor.current &
	                        SubtreeSuspenseContextMask) |
	                        ForceSuspenseFallback,
	                      workInProgress
	                    );
	                    return workInProgress.child;
	                  }
	                  current = current.sibling;
	                }
	              null !== _type.tail &&
	                now$1() > workInProgressRootRenderTargetTime &&
	                ((workInProgress.flags |= 128),
	                (newProps = true),
	                cutOffTailIfNeeded(_type, false),
	                (workInProgress.lanes = 4194304));
	            }
	          else {
	            if (!newProps)
	              if (
	                ((current = findFirstSuspended(returnFiber)), null !== current)
	              ) {
	                if (
	                  ((workInProgress.flags |= 128),
	                  (newProps = true),
	                  (current = current.updateQueue),
	                  (workInProgress.updateQueue = current),
	                  scheduleRetryEffect(workInProgress, current),
	                  cutOffTailIfNeeded(_type, true),
	                  null === _type.tail &&
	                    "hidden" === _type.tailMode &&
	                    !returnFiber.alternate &&
	                    !isHydrating)
	                )
	                  return bubbleProperties(workInProgress), null;
	              } else
	                2 * now$1() - _type.renderingStartTime >
	                  workInProgressRootRenderTargetTime &&
	                  536870912 !== renderLanes &&
	                  ((workInProgress.flags |= 128),
	                  (newProps = true),
	                  cutOffTailIfNeeded(_type, false),
	                  (workInProgress.lanes = 4194304));
	            _type.isBackwards
	              ? ((returnFiber.sibling = workInProgress.child),
	                (workInProgress.child = returnFiber))
	              : ((current = _type.last),
	                null !== current
	                  ? (current.sibling = returnFiber)
	                  : (workInProgress.child = returnFiber),
	                (_type.last = returnFiber));
	          }
	          if (null !== _type.tail)
	            return (
	              (current = _type.tail),
	              (_type.rendering = current),
	              (_type.tail = current.sibling),
	              (_type.renderingStartTime = now$1()),
	              (current.sibling = null),
	              (renderLanes = suspenseStackCursor.current),
	              (renderLanes = newProps
	                ? (renderLanes & SubtreeSuspenseContextMask) |
	                  ForceSuspenseFallback
	                : renderLanes & SubtreeSuspenseContextMask),
	              push(suspenseStackCursor, renderLanes, workInProgress),
	              current
	            );
	          bubbleProperties(workInProgress);
	          return null;
	        case 22:
	        case 23:
	          return (
	            popSuspenseHandler(workInProgress),
	            popHiddenContext(workInProgress),
	            (newProps = null !== workInProgress.memoizedState),
	            null !== current
	              ? (null !== current.memoizedState) !== newProps &&
	                (workInProgress.flags |= 8192)
	              : newProps && (workInProgress.flags |= 8192),
	            newProps
	              ? 0 !== (renderLanes & 536870912) &&
	                0 === (workInProgress.flags & 128) &&
	                (bubbleProperties(workInProgress),
	                workInProgress.subtreeFlags & 6 &&
	                  (workInProgress.flags |= 8192))
	              : bubbleProperties(workInProgress),
	            (renderLanes = workInProgress.updateQueue),
	            null !== renderLanes &&
	              scheduleRetryEffect(workInProgress, renderLanes.retryQueue),
	            (renderLanes = null),
	            null !== current &&
	              null !== current.memoizedState &&
	              null !== current.memoizedState.cachePool &&
	              (renderLanes = current.memoizedState.cachePool.pool),
	            (newProps = null),
	            null !== workInProgress.memoizedState &&
	              null !== workInProgress.memoizedState.cachePool &&
	              (newProps = workInProgress.memoizedState.cachePool.pool),
	            newProps !== renderLanes && (workInProgress.flags |= 2048),
	            null !== current && pop(resumedCache, workInProgress),
	            null
	          );
	        case 24:
	          return (
	            (renderLanes = null),
	            null !== current && (renderLanes = current.memoizedState.cache),
	            workInProgress.memoizedState.cache !== renderLanes &&
	              (workInProgress.flags |= 2048),
	            popProvider(CacheContext, workInProgress),
	            bubbleProperties(workInProgress),
	            null
	          );
	        case 25:
	          return null;
	        case 30:
	          return null;
	      }
	      throw Error(
	        "Unknown unit of work tag (" +
	          workInProgress.tag +
	          "). This error is likely caused by a bug in React. Please file an issue."
	      );
	    }
	    function unwindWork(current, workInProgress) {
	      popTreeContext(workInProgress);
	      switch (workInProgress.tag) {
	        case 1:
	          return (
	            (current = workInProgress.flags),
	            current & 65536
	              ? ((workInProgress.flags = (current & -65537) | 128),
	                (workInProgress.mode & ProfileMode) !== NoMode &&
	                  transferActualDuration(workInProgress),
	                workInProgress)
	              : null
	          );
	        case 3:
	          return (
	            popProvider(CacheContext, workInProgress),
	            popHostContainer(workInProgress),
	            (current = workInProgress.flags),
	            0 !== (current & 65536) && 0 === (current & 128)
	              ? ((workInProgress.flags = (current & -65537) | 128),
	                workInProgress)
	              : null
	          );
	        case 26:
	        case 27:
	        case 5:
	          return popHostContext(workInProgress), null;
	        case 13:
	          popSuspenseHandler(workInProgress);
	          current = workInProgress.memoizedState;
	          if (null !== current && null !== current.dehydrated) {
	            if (null === workInProgress.alternate)
	              throw Error(
	                "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
	              );
	            resetHydrationState();
	          }
	          current = workInProgress.flags;
	          return current & 65536
	            ? ((workInProgress.flags = (current & -65537) | 128),
	              (workInProgress.mode & ProfileMode) !== NoMode &&
	                transferActualDuration(workInProgress),
	              workInProgress)
	            : null;
	        case 19:
	          return pop(suspenseStackCursor, workInProgress), null;
	        case 4:
	          return popHostContainer(workInProgress), null;
	        case 10:
	          return popProvider(workInProgress.type, workInProgress), null;
	        case 22:
	        case 23:
	          return (
	            popSuspenseHandler(workInProgress),
	            popHiddenContext(workInProgress),
	            null !== current && pop(resumedCache, workInProgress),
	            (current = workInProgress.flags),
	            current & 65536
	              ? ((workInProgress.flags = (current & -65537) | 128),
	                (workInProgress.mode & ProfileMode) !== NoMode &&
	                  transferActualDuration(workInProgress),
	                workInProgress)
	              : null
	          );
	        case 24:
	          return popProvider(CacheContext, workInProgress), null;
	        case 25:
	          return null;
	        default:
	          return null;
	      }
	    }
	    function unwindInterruptedWork(current, interruptedWork) {
	      popTreeContext(interruptedWork);
	      switch (interruptedWork.tag) {
	        case 3:
	          popProvider(CacheContext, interruptedWork);
	          popHostContainer(interruptedWork);
	          break;
	        case 26:
	        case 27:
	        case 5:
	          popHostContext(interruptedWork);
	          break;
	        case 4:
	          popHostContainer(interruptedWork);
	          break;
	        case 13:
	          popSuspenseHandler(interruptedWork);
	          break;
	        case 19:
	          pop(suspenseStackCursor, interruptedWork);
	          break;
	        case 10:
	          popProvider(interruptedWork.type, interruptedWork);
	          break;
	        case 22:
	        case 23:
	          popSuspenseHandler(interruptedWork);
	          popHiddenContext(interruptedWork);
	          null !== current && pop(resumedCache, interruptedWork);
	          break;
	        case 24:
	          popProvider(CacheContext, interruptedWork);
	      }
	    }
	    function shouldProfile(current) {
	      return (current.mode & ProfileMode) !== NoMode;
	    }
	    function commitHookLayoutEffects(finishedWork, hookFlags) {
	      shouldProfile(finishedWork)
	        ? (startEffectTimer(),
	          commitHookEffectListMount(hookFlags, finishedWork),
	          recordEffectDuration())
	        : commitHookEffectListMount(hookFlags, finishedWork);
	    }
	    function commitHookLayoutUnmountEffects(
	      finishedWork,
	      nearestMountedAncestor,
	      hookFlags
	    ) {
	      shouldProfile(finishedWork)
	        ? (startEffectTimer(),
	          commitHookEffectListUnmount(
	            hookFlags,
	            finishedWork,
	            nearestMountedAncestor
	          ),
	          recordEffectDuration())
	        : commitHookEffectListUnmount(
	            hookFlags,
	            finishedWork,
	            nearestMountedAncestor
	          );
	    }
	    function commitHookEffectListMount(flags, finishedWork) {
	      try {
	        var updateQueue = finishedWork.updateQueue,
	          lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
	        if (null !== lastEffect) {
	          var firstEffect = lastEffect.next;
	          updateQueue = firstEffect;
	          do {
	            if (
	              (updateQueue.tag & flags) === flags &&
	              ((flags & Passive) !== NoFlags
	                ? null !== injectedProfilingHooks &&
	                  "function" ===
	                    typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted &&
	                  injectedProfilingHooks.markComponentPassiveEffectMountStarted(
	                    finishedWork
	                  )
	                : (flags & Layout) !== NoFlags &&
	                  null !== injectedProfilingHooks &&
	                  "function" ===
	                    typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted &&
	                  injectedProfilingHooks.markComponentLayoutEffectMountStarted(
	                    finishedWork
	                  ),
	              (lastEffect = void 0),
	              (flags & Insertion) !== NoFlags &&
	                (isRunningInsertionEffect = true),
	              (lastEffect = runWithFiberInDEV(
	                finishedWork,
	                callCreateInDEV,
	                updateQueue
	              )),
	              (flags & Insertion) !== NoFlags &&
	                (isRunningInsertionEffect = false),
	              (flags & Passive) !== NoFlags
	                ? null !== injectedProfilingHooks &&
	                  "function" ===
	                    typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped &&
	                  injectedProfilingHooks.markComponentPassiveEffectMountStopped()
	                : (flags & Layout) !== NoFlags &&
	                  null !== injectedProfilingHooks &&
	                  "function" ===
	                    typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped &&
	                  injectedProfilingHooks.markComponentLayoutEffectMountStopped(),
	              void 0 !== lastEffect && "function" !== typeof lastEffect)
	            ) {
	              var hookName = void 0;
	              hookName =
	                0 !== (updateQueue.tag & Layout)
	                  ? "useLayoutEffect"
	                  : 0 !== (updateQueue.tag & Insertion)
	                    ? "useInsertionEffect"
	                    : "useEffect";
	              var addendum = void 0;
	              addendum =
	                null === lastEffect
	                  ? " You returned null. If your effect does not require clean up, return undefined (or nothing)."
	                  : "function" === typeof lastEffect.then
	                    ? "\n\nIt looks like you wrote " +
	                      hookName +
	                      "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" +
	                      hookName +
	                      "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching"
	                    : " You returned: " + lastEffect;
	              runWithFiberInDEV(
	                finishedWork,
	                function (n, a) {
	                  console.error(
	                    "%s must not return anything besides a function, which is used for clean-up.%s",
	                    n,
	                    a
	                  );
	                },
	                hookName,
	                addendum
	              );
	            }
	            updateQueue = updateQueue.next;
	          } while (updateQueue !== firstEffect);
	        }
	      } catch (error) {
	        captureCommitPhaseError(finishedWork, finishedWork.return, error);
	      }
	    }
	    function commitHookEffectListUnmount(
	      flags,
	      finishedWork,
	      nearestMountedAncestor
	    ) {
	      try {
	        var updateQueue = finishedWork.updateQueue,
	          lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
	        if (null !== lastEffect) {
	          var firstEffect = lastEffect.next;
	          updateQueue = firstEffect;
	          do {
	            if ((updateQueue.tag & flags) === flags) {
	              var inst = updateQueue.inst,
	                destroy = inst.destroy;
	              void 0 !== destroy &&
	                ((inst.destroy = void 0),
	                (flags & Passive) !== NoFlags
	                  ? null !== injectedProfilingHooks &&
	                    "function" ===
	                      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted &&
	                    injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(
	                      finishedWork
	                    )
	                  : (flags & Layout) !== NoFlags &&
	                    null !== injectedProfilingHooks &&
	                    "function" ===
	                      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted &&
	                    injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(
	                      finishedWork
	                    ),
	                (flags & Insertion) !== NoFlags &&
	                  (isRunningInsertionEffect = true),
	                (lastEffect = finishedWork),
	                runWithFiberInDEV(
	                  lastEffect,
	                  callDestroyInDEV,
	                  lastEffect,
	                  nearestMountedAncestor,
	                  destroy
	                ),
	                (flags & Insertion) !== NoFlags &&
	                  (isRunningInsertionEffect = false),
	                (flags & Passive) !== NoFlags
	                  ? null !== injectedProfilingHooks &&
	                    "function" ===
	                      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped &&
	                    injectedProfilingHooks.markComponentPassiveEffectUnmountStopped()
	                  : (flags & Layout) !== NoFlags &&
	                    null !== injectedProfilingHooks &&
	                    "function" ===
	                      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped &&
	                    injectedProfilingHooks.markComponentLayoutEffectUnmountStopped());
	            }
	            updateQueue = updateQueue.next;
	          } while (updateQueue !== firstEffect);
	        }
	      } catch (error) {
	        captureCommitPhaseError(finishedWork, finishedWork.return, error);
	      }
	    }
	    function commitHookPassiveMountEffects(finishedWork, hookFlags) {
	      shouldProfile(finishedWork)
	        ? (startEffectTimer(),
	          commitHookEffectListMount(hookFlags, finishedWork),
	          recordEffectDuration())
	        : commitHookEffectListMount(hookFlags, finishedWork);
	    }
	    function commitHookPassiveUnmountEffects(
	      finishedWork,
	      nearestMountedAncestor,
	      hookFlags
	    ) {
	      shouldProfile(finishedWork)
	        ? (startEffectTimer(),
	          commitHookEffectListUnmount(
	            hookFlags,
	            finishedWork,
	            nearestMountedAncestor
	          ),
	          recordEffectDuration())
	        : commitHookEffectListUnmount(
	            hookFlags,
	            finishedWork,
	            nearestMountedAncestor
	          );
	    }
	    function commitClassCallbacks(finishedWork) {
	      var updateQueue = finishedWork.updateQueue;
	      if (null !== updateQueue) {
	        var instance = finishedWork.stateNode;
	        finishedWork.type.defaultProps ||
	          "ref" in finishedWork.memoizedProps ||
	          didWarnAboutReassigningProps ||
	          (instance.props !== finishedWork.memoizedProps &&
	            console.error(
	              "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
	              getComponentNameFromFiber(finishedWork) || "instance"
	            ),
	          instance.state !== finishedWork.memoizedState &&
	            console.error(
	              "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
	              getComponentNameFromFiber(finishedWork) || "instance"
	            ));
	        try {
	          runWithFiberInDEV(
	            finishedWork,
	            commitCallbacks,
	            updateQueue,
	            instance
	          );
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	      }
	    }
	    function callGetSnapshotBeforeUpdates(instance, prevProps, prevState) {
	      return instance.getSnapshotBeforeUpdate(prevProps, prevState);
	    }
	    function commitClassSnapshot(finishedWork, current) {
	      var prevProps = current.memoizedProps,
	        prevState = current.memoizedState;
	      current = finishedWork.stateNode;
	      finishedWork.type.defaultProps ||
	        "ref" in finishedWork.memoizedProps ||
	        didWarnAboutReassigningProps ||
	        (current.props !== finishedWork.memoizedProps &&
	          console.error(
	            "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
	            getComponentNameFromFiber(finishedWork) || "instance"
	          ),
	        current.state !== finishedWork.memoizedState &&
	          console.error(
	            "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
	            getComponentNameFromFiber(finishedWork) || "instance"
	          ));
	      try {
	        var resolvedPrevProps = resolveClassComponentProps(
	          finishedWork.type,
	          prevProps);
	        var snapshot = runWithFiberInDEV(
	          finishedWork,
	          callGetSnapshotBeforeUpdates,
	          current,
	          resolvedPrevProps,
	          prevState
	        );
	        prevProps = didWarnAboutUndefinedSnapshotBeforeUpdate;
	        void 0 !== snapshot ||
	          prevProps.has(finishedWork.type) ||
	          (prevProps.add(finishedWork.type),
	          runWithFiberInDEV(finishedWork, function () {
	            console.error(
	              "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
	              getComponentNameFromFiber(finishedWork)
	            );
	          }));
	        current.__reactInternalSnapshotBeforeUpdate = snapshot;
	      } catch (error) {
	        captureCommitPhaseError(finishedWork, finishedWork.return, error);
	      }
	    }
	    function safelyCallComponentWillUnmount(
	      current,
	      nearestMountedAncestor,
	      instance
	    ) {
	      instance.props = resolveClassComponentProps(
	        current.type,
	        current.memoizedProps
	      );
	      instance.state = current.memoizedState;
	      shouldProfile(current)
	        ? (startEffectTimer(),
	          runWithFiberInDEV(
	            current,
	            callComponentWillUnmountInDEV,
	            current,
	            nearestMountedAncestor,
	            instance
	          ),
	          recordEffectDuration())
	        : runWithFiberInDEV(
	            current,
	            callComponentWillUnmountInDEV,
	            current,
	            nearestMountedAncestor,
	            instance
	          );
	    }
	    function commitAttachRef(finishedWork) {
	      var ref = finishedWork.ref;
	      if (null !== ref) {
	        switch (finishedWork.tag) {
	          case 26:
	          case 27:
	          case 5:
	            var instanceToUse = finishedWork.stateNode;
	            break;
	          case 30:
	            instanceToUse = finishedWork.stateNode;
	            break;
	          default:
	            instanceToUse = finishedWork.stateNode;
	        }
	        if ("function" === typeof ref)
	          if (shouldProfile(finishedWork))
	            try {
	              startEffectTimer(),
	                (finishedWork.refCleanup = ref(instanceToUse));
	            } finally {
	              recordEffectDuration();
	            }
	          else finishedWork.refCleanup = ref(instanceToUse);
	        else
	          "string" === typeof ref
	            ? console.error("String refs are no longer supported.")
	            : ref.hasOwnProperty("current") ||
	              console.error(
	                "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
	                getComponentNameFromFiber(finishedWork)
	              ),
	            (ref.current = instanceToUse);
	      }
	    }
	    function safelyAttachRef(current, nearestMountedAncestor) {
	      try {
	        runWithFiberInDEV(current, commitAttachRef, current);
	      } catch (error) {
	        captureCommitPhaseError(current, nearestMountedAncestor, error);
	      }
	    }
	    function safelyDetachRef(current, nearestMountedAncestor) {
	      var ref = current.ref,
	        refCleanup = current.refCleanup;
	      if (null !== ref)
	        if ("function" === typeof refCleanup)
	          try {
	            if (shouldProfile(current))
	              try {
	                startEffectTimer(), runWithFiberInDEV(current, refCleanup);
	              } finally {
	                recordEffectDuration();
	              }
	            else runWithFiberInDEV(current, refCleanup);
	          } catch (error) {
	            captureCommitPhaseError(current, nearestMountedAncestor, error);
	          } finally {
	            (current.refCleanup = null),
	              (current = current.alternate),
	              null != current && (current.refCleanup = null);
	          }
	        else if ("function" === typeof ref)
	          try {
	            if (shouldProfile(current))
	              try {
	                startEffectTimer(), runWithFiberInDEV(current, ref, null);
	              } finally {
	                recordEffectDuration();
	              }
	            else runWithFiberInDEV(current, ref, null);
	          } catch (error$7) {
	            captureCommitPhaseError(current, nearestMountedAncestor, error$7);
	          }
	        else ref.current = null;
	    }
	    function commitProfiler(
	      finishedWork,
	      current,
	      commitStartTime,
	      effectDuration
	    ) {
	      var _finishedWork$memoize = finishedWork.memoizedProps,
	        id = _finishedWork$memoize.id,
	        onCommit = _finishedWork$memoize.onCommit;
	      _finishedWork$memoize = _finishedWork$memoize.onRender;
	      current = null === current ? "mount" : "update";
	      currentUpdateIsNested && (current = "nested-update");
	      "function" === typeof _finishedWork$memoize &&
	        _finishedWork$memoize(
	          id,
	          current,
	          finishedWork.actualDuration,
	          finishedWork.treeBaseDuration,
	          finishedWork.actualStartTime,
	          commitStartTime
	        );
	      "function" === typeof onCommit &&
	        onCommit(
	          finishedWork.memoizedProps.id,
	          current,
	          effectDuration,
	          commitStartTime
	        );
	    }
	    function commitProfilerPostCommitImpl(
	      finishedWork,
	      current,
	      commitStartTime,
	      passiveEffectDuration
	    ) {
	      var _finishedWork$memoize2 = finishedWork.memoizedProps;
	      finishedWork = _finishedWork$memoize2.id;
	      _finishedWork$memoize2 = _finishedWork$memoize2.onPostCommit;
	      current = null === current ? "mount" : "update";
	      currentUpdateIsNested && (current = "nested-update");
	      "function" === typeof _finishedWork$memoize2 &&
	        _finishedWork$memoize2(
	          finishedWork,
	          current,
	          passiveEffectDuration,
	          commitStartTime
	        );
	    }
	    function commitHostMount(finishedWork) {
	      var type = finishedWork.type,
	        props = finishedWork.memoizedProps,
	        instance = finishedWork.stateNode;
	      try {
	        runWithFiberInDEV(
	          finishedWork,
	          commitMount,
	          instance,
	          type,
	          props,
	          finishedWork
	        );
	      } catch (error) {
	        captureCommitPhaseError(finishedWork, finishedWork.return, error);
	      }
	    }
	    function commitHostUpdate(finishedWork, newProps, oldProps) {
	      try {
	        runWithFiberInDEV(
	          finishedWork,
	          commitUpdate,
	          finishedWork.stateNode,
	          finishedWork.type,
	          oldProps,
	          newProps,
	          finishedWork
	        );
	      } catch (error) {
	        captureCommitPhaseError(finishedWork, finishedWork.return, error);
	      }
	    }
	    function isHostParent(fiber) {
	      return (
	        5 === fiber.tag ||
	        3 === fiber.tag ||
	        26 === fiber.tag ||
	        (27 === fiber.tag && isSingletonScope(fiber.type)) ||
	        4 === fiber.tag
	      );
	    }
	    function getHostSibling(fiber) {
	      a: for (;;) {
	        for (; null === fiber.sibling; ) {
	          if (null === fiber.return || isHostParent(fiber.return)) return null;
	          fiber = fiber.return;
	        }
	        fiber.sibling.return = fiber.return;
	        for (
	          fiber = fiber.sibling;
	          5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag;

	        ) {
	          if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a;
	          if (fiber.flags & 2) continue a;
	          if (null === fiber.child || 4 === fiber.tag) continue a;
	          else (fiber.child.return = fiber), (fiber = fiber.child);
	        }
	        if (!(fiber.flags & 2)) return fiber.stateNode;
	      }
	    }
	    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
	      var tag = node.tag;
	      if (5 === tag || 6 === tag)
	        (node = node.stateNode),
	          before
	            ? (9 === parent.nodeType
	                ? parent.body
	                : "HTML" === parent.nodeName
	                  ? parent.ownerDocument.body
	                  : parent
	              ).insertBefore(node, before)
	            : ((before =
	                9 === parent.nodeType
	                  ? parent.body
	                  : "HTML" === parent.nodeName
	                    ? parent.ownerDocument.body
	                    : parent),
	              before.appendChild(node),
	              (parent = parent._reactRootContainer),
	              (null !== parent && void 0 !== parent) ||
	                null !== before.onclick ||
	                (before.onclick = noop$1));
	      else if (
	        4 !== tag &&
	        (27 === tag &&
	          isSingletonScope(node.type) &&
	          ((parent = node.stateNode), (before = null)),
	        (node = node.child),
	        null !== node)
	      )
	        for (
	          insertOrAppendPlacementNodeIntoContainer(node, before, parent),
	            node = node.sibling;
	          null !== node;

	        )
	          insertOrAppendPlacementNodeIntoContainer(node, before, parent),
	            (node = node.sibling);
	    }
	    function insertOrAppendPlacementNode(node, before, parent) {
	      var tag = node.tag;
	      if (5 === tag || 6 === tag)
	        (node = node.stateNode),
	          before ? parent.insertBefore(node, before) : parent.appendChild(node);
	      else if (
	        4 !== tag &&
	        (27 === tag && isSingletonScope(node.type) && (parent = node.stateNode),
	        (node = node.child),
	        null !== node)
	      )
	        for (
	          insertOrAppendPlacementNode(node, before, parent),
	            node = node.sibling;
	          null !== node;

	        )
	          insertOrAppendPlacementNode(node, before, parent),
	            (node = node.sibling);
	    }
	    function commitPlacement(finishedWork) {
	      for (
	        var hostParentFiber, parentFiber = finishedWork.return;
	        null !== parentFiber;

	      ) {
	        if (isHostParent(parentFiber)) {
	          hostParentFiber = parentFiber;
	          break;
	        }
	        parentFiber = parentFiber.return;
	      }
	      if (null == hostParentFiber)
	        throw Error(
	          "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
	        );
	      switch (hostParentFiber.tag) {
	        case 27:
	          hostParentFiber = hostParentFiber.stateNode;
	          parentFiber = getHostSibling(finishedWork);
	          insertOrAppendPlacementNode(
	            finishedWork,
	            parentFiber,
	            hostParentFiber
	          );
	          break;
	        case 5:
	          parentFiber = hostParentFiber.stateNode;
	          hostParentFiber.flags & 32 &&
	            (resetTextContent(parentFiber), (hostParentFiber.flags &= -33));
	          hostParentFiber = getHostSibling(finishedWork);
	          insertOrAppendPlacementNode(
	            finishedWork,
	            hostParentFiber,
	            parentFiber
	          );
	          break;
	        case 3:
	        case 4:
	          hostParentFiber = hostParentFiber.stateNode.containerInfo;
	          parentFiber = getHostSibling(finishedWork);
	          insertOrAppendPlacementNodeIntoContainer(
	            finishedWork,
	            parentFiber,
	            hostParentFiber
	          );
	          break;
	        default:
	          throw Error(
	            "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
	          );
	      }
	    }
	    function commitHostSingletonAcquisition(finishedWork) {
	      var singleton = finishedWork.stateNode,
	        props = finishedWork.memoizedProps;
	      try {
	        runWithFiberInDEV(
	          finishedWork,
	          acquireSingletonInstance,
	          finishedWork.type,
	          props,
	          singleton,
	          finishedWork
	        );
	      } catch (error) {
	        captureCommitPhaseError(finishedWork, finishedWork.return, error);
	      }
	    }
	    function commitBeforeMutationEffects(root, firstChild) {
	      root = root.containerInfo;
	      eventsEnabled = _enabled;
	      root = getActiveElementDeep(root);
	      if (hasSelectionCapabilities(root)) {
	        if ("selectionStart" in root)
	          var JSCompiler_temp = {
	            start: root.selectionStart,
	            end: root.selectionEnd
	          };
	        else
	          {
	            JSCompiler_temp =
	              ((JSCompiler_temp = root.ownerDocument) &&
	                JSCompiler_temp.defaultView) ||
	              window;
	            var selection =
	              JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
	            if (selection && 0 !== selection.rangeCount) {
	              JSCompiler_temp = selection.anchorNode;
	              var anchorOffset = selection.anchorOffset,
	                focusNode = selection.focusNode;
	              selection = selection.focusOffset;
	              var length = 0,
	                start = -1,
	                end = -1,
	                indexWithinAnchor = 0,
	                indexWithinFocus = 0,
	                node = root,
	                parentNode = null;
	              b: for (;;) {
	                for (var next; ; ) {
	                  node !== JSCompiler_temp ||
	                    (0 !== anchorOffset && 3 !== node.nodeType) ||
	                    (start = length + anchorOffset);
	                  node !== focusNode ||
	                    (0 !== selection && 3 !== node.nodeType) ||
	                    (end = length + selection);
	                  3 === node.nodeType && (length += node.nodeValue.length);
	                  if (null === (next = node.firstChild)) break;
	                  parentNode = node;
	                  node = next;
	                }
	                for (;;) {
	                  if (node === root) break b;
	                  parentNode === JSCompiler_temp &&
	                    ++indexWithinAnchor === anchorOffset &&
	                    (start = length);
	                  parentNode === focusNode &&
	                    ++indexWithinFocus === selection &&
	                    (end = length);
	                  if (null !== (next = node.nextSibling)) break;
	                  node = parentNode;
	                  parentNode = node.parentNode;
	                }
	                node = next;
	              }
	              JSCompiler_temp =
	                -1 === start || -1 === end ? null : { start: start, end: end };
	            } else JSCompiler_temp = null;
	          }
	        JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
	      } else JSCompiler_temp = null;
	      selectionInformation = {
	        focusedElem: root,
	        selectionRange: JSCompiler_temp
	      };
	      _enabled = false;
	      for (nextEffect = firstChild; null !== nextEffect; )
	        if (
	          ((firstChild = nextEffect),
	          (root = firstChild.child),
	          0 !== (firstChild.subtreeFlags & 1024) && null !== root)
	        )
	          (root.return = firstChild), (nextEffect = root);
	        else
	          for (; null !== nextEffect; ) {
	            root = firstChild = nextEffect;
	            JSCompiler_temp = root.alternate;
	            anchorOffset = root.flags;
	            switch (root.tag) {
	              case 0:
	                break;
	              case 11:
	              case 15:
	                break;
	              case 1:
	                0 !== (anchorOffset & 1024) &&
	                  null !== JSCompiler_temp &&
	                  commitClassSnapshot(root, JSCompiler_temp);
	                break;
	              case 3:
	                if (0 !== (anchorOffset & 1024))
	                  if (
	                    ((root = root.stateNode.containerInfo),
	                    (JSCompiler_temp = root.nodeType),
	                    9 === JSCompiler_temp)
	                  )
	                    clearContainerSparingly(root);
	                  else if (1 === JSCompiler_temp)
	                    switch (root.nodeName) {
	                      case "HEAD":
	                      case "HTML":
	                      case "BODY":
	                        clearContainerSparingly(root);
	                        break;
	                      default:
	                        root.textContent = "";
	                    }
	                break;
	              case 5:
	              case 26:
	              case 27:
	              case 6:
	              case 4:
	              case 17:
	                break;
	              default:
	                if (0 !== (anchorOffset & 1024))
	                  throw Error(
	                    "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
	                  );
	            }
	            root = firstChild.sibling;
	            if (null !== root) {
	              root.return = firstChild.return;
	              nextEffect = root;
	              break;
	            }
	            nextEffect = firstChild.return;
	          }
	    }
	    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
	      var flags = finishedWork.flags;
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          flags & 4 &&
	            commitHookLayoutEffects(finishedWork, Layout | HasEffect);
	          break;
	        case 1:
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          if (flags & 4)
	            if (((finishedRoot = finishedWork.stateNode), null === current))
	              finishedWork.type.defaultProps ||
	                "ref" in finishedWork.memoizedProps ||
	                didWarnAboutReassigningProps ||
	                (finishedRoot.props !== finishedWork.memoizedProps &&
	                  console.error(
	                    "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
	                    getComponentNameFromFiber(finishedWork) || "instance"
	                  ),
	                finishedRoot.state !== finishedWork.memoizedState &&
	                  console.error(
	                    "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
	                    getComponentNameFromFiber(finishedWork) || "instance"
	                  )),
	                shouldProfile(finishedWork)
	                  ? (startEffectTimer(),
	                    runWithFiberInDEV(
	                      finishedWork,
	                      callComponentDidMountInDEV,
	                      finishedWork,
	                      finishedRoot
	                    ),
	                    recordEffectDuration())
	                  : runWithFiberInDEV(
	                      finishedWork,
	                      callComponentDidMountInDEV,
	                      finishedWork,
	                      finishedRoot
	                    );
	            else {
	              var prevProps = resolveClassComponentProps(
	                finishedWork.type,
	                current.memoizedProps
	              );
	              current = current.memoizedState;
	              finishedWork.type.defaultProps ||
	                "ref" in finishedWork.memoizedProps ||
	                didWarnAboutReassigningProps ||
	                (finishedRoot.props !== finishedWork.memoizedProps &&
	                  console.error(
	                    "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
	                    getComponentNameFromFiber(finishedWork) || "instance"
	                  ),
	                finishedRoot.state !== finishedWork.memoizedState &&
	                  console.error(
	                    "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
	                    getComponentNameFromFiber(finishedWork) || "instance"
	                  ));
	              shouldProfile(finishedWork)
	                ? (startEffectTimer(),
	                  runWithFiberInDEV(
	                    finishedWork,
	                    callComponentDidUpdateInDEV,
	                    finishedWork,
	                    finishedRoot,
	                    prevProps,
	                    current,
	                    finishedRoot.__reactInternalSnapshotBeforeUpdate
	                  ),
	                  recordEffectDuration())
	                : runWithFiberInDEV(
	                    finishedWork,
	                    callComponentDidUpdateInDEV,
	                    finishedWork,
	                    finishedRoot,
	                    prevProps,
	                    current,
	                    finishedRoot.__reactInternalSnapshotBeforeUpdate
	                  );
	            }
	          flags & 64 && commitClassCallbacks(finishedWork);
	          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
	          break;
	        case 3:
	          current = pushNestedEffectDurations();
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          if (
	            flags & 64 &&
	            ((flags = finishedWork.updateQueue), null !== flags)
	          ) {
	            prevProps = null;
	            if (null !== finishedWork.child)
	              switch (finishedWork.child.tag) {
	                case 27:
	                case 5:
	                  prevProps = finishedWork.child.stateNode;
	                  break;
	                case 1:
	                  prevProps = finishedWork.child.stateNode;
	              }
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitCallbacks,
	                flags,
	                prevProps
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	          finishedRoot.effectDuration += popNestedEffectDurations(current);
	          break;
	        case 27:
	          null === current &&
	            flags & 4 &&
	            commitHostSingletonAcquisition(finishedWork);
	        case 26:
	        case 5:
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          null === current && flags & 4 && commitHostMount(finishedWork);
	          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
	          break;
	        case 12:
	          if (flags & 4) {
	            flags = pushNestedEffectDurations();
	            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	            finishedRoot = finishedWork.stateNode;
	            finishedRoot.effectDuration += bubbleNestedEffectDurations(flags);
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitProfiler,
	                finishedWork,
	                current,
	                commitStartTime,
	                finishedRoot.effectDuration
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          break;
	        case 13:
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	          flags & 4 &&
	            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	          flags & 64 &&
	            ((finishedRoot = finishedWork.memoizedState),
	            null !== finishedRoot &&
	              ((finishedRoot = finishedRoot.dehydrated),
	              null !== finishedRoot &&
	                ((finishedWork = retryDehydratedSuspenseBoundary.bind(
	                  null,
	                  finishedWork
	                )),
	                registerSuspenseInstanceRetry(finishedRoot, finishedWork))));
	          break;
	        case 22:
	          flags =
	            null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
	          if (!flags) {
	            current =
	              (null !== current && null !== current.memoizedState) ||
	              offscreenSubtreeWasHidden;
	            prevProps = offscreenSubtreeIsHidden;
	            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	            offscreenSubtreeIsHidden = flags;
	            (offscreenSubtreeWasHidden = current) &&
	            !prevOffscreenSubtreeWasHidden
	              ? recursivelyTraverseReappearLayoutEffects(
	                  finishedRoot,
	                  finishedWork,
	                  0 !== (finishedWork.subtreeFlags & 8772)
	                )
	              : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	            offscreenSubtreeIsHidden = prevProps;
	            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	          }
	          break;
	        case 30:
	          break;
	        default:
	          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
	      }
	    }
	    function detachFiberAfterEffects(fiber) {
	      var alternate = fiber.alternate;
	      null !== alternate &&
	        ((fiber.alternate = null), detachFiberAfterEffects(alternate));
	      fiber.child = null;
	      fiber.deletions = null;
	      fiber.sibling = null;
	      5 === fiber.tag &&
	        ((alternate = fiber.stateNode),
	        null !== alternate && detachDeletedInstance(alternate));
	      fiber.stateNode = null;
	      fiber._debugOwner = null;
	      fiber.return = null;
	      fiber.dependencies = null;
	      fiber.memoizedProps = null;
	      fiber.memoizedState = null;
	      fiber.pendingProps = null;
	      fiber.stateNode = null;
	      fiber.updateQueue = null;
	    }
	    function recursivelyTraverseDeletionEffects(
	      finishedRoot,
	      nearestMountedAncestor,
	      parent
	    ) {
	      for (parent = parent.child; null !== parent; )
	        commitDeletionEffectsOnFiber(
	          finishedRoot,
	          nearestMountedAncestor,
	          parent
	        ),
	          (parent = parent.sibling);
	    }
	    function commitDeletionEffectsOnFiber(
	      finishedRoot,
	      nearestMountedAncestor,
	      deletedFiber
	    ) {
	      if (
	        injectedHook &&
	        "function" === typeof injectedHook.onCommitFiberUnmount
	      )
	        try {
	          injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
	        } catch (err) {
	          hasLoggedError ||
	            ((hasLoggedError = true),
	            console.error(
	              "React instrumentation encountered an error: %s",
	              err
	            ));
	        }
	      switch (deletedFiber.tag) {
	        case 26:
	          offscreenSubtreeWasHidden ||
	            safelyDetachRef(deletedFiber, nearestMountedAncestor);
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          deletedFiber.memoizedState
	            ? deletedFiber.memoizedState.count--
	            : deletedFiber.stateNode &&
	              ((deletedFiber = deletedFiber.stateNode),
	              deletedFiber.parentNode.removeChild(deletedFiber));
	          break;
	        case 27:
	          offscreenSubtreeWasHidden ||
	            safelyDetachRef(deletedFiber, nearestMountedAncestor);
	          var prevHostParent = hostParent,
	            prevHostParentIsContainer = hostParentIsContainer;
	          isSingletonScope(deletedFiber.type) &&
	            ((hostParent = deletedFiber.stateNode),
	            (hostParentIsContainer = false));
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          runWithFiberInDEV(
	            deletedFiber,
	            releaseSingletonInstance,
	            deletedFiber.stateNode
	          );
	          hostParent = prevHostParent;
	          hostParentIsContainer = prevHostParentIsContainer;
	          break;
	        case 5:
	          offscreenSubtreeWasHidden ||
	            safelyDetachRef(deletedFiber, nearestMountedAncestor);
	        case 6:
	          prevHostParent = hostParent;
	          prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = null;
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          hostParent = prevHostParent;
	          hostParentIsContainer = prevHostParentIsContainer;
	          if (null !== hostParent)
	            if (hostParentIsContainer)
	              try {
	                runWithFiberInDEV(
	                  deletedFiber,
	                  removeChildFromContainer,
	                  hostParent,
	                  deletedFiber.stateNode
	                );
	              } catch (error) {
	                captureCommitPhaseError(
	                  deletedFiber,
	                  nearestMountedAncestor,
	                  error
	                );
	              }
	            else
	              try {
	                runWithFiberInDEV(
	                  deletedFiber,
	                  removeChild,
	                  hostParent,
	                  deletedFiber.stateNode
	                );
	              } catch (error) {
	                captureCommitPhaseError(
	                  deletedFiber,
	                  nearestMountedAncestor,
	                  error
	                );
	              }
	          break;
	        case 18:
	          null !== hostParent &&
	            (hostParentIsContainer
	              ? ((finishedRoot = hostParent),
	                clearSuspenseBoundary(
	                  9 === finishedRoot.nodeType
	                    ? finishedRoot.body
	                    : "HTML" === finishedRoot.nodeName
	                      ? finishedRoot.ownerDocument.body
	                      : finishedRoot,
	                  deletedFiber.stateNode
	                ),
	                retryIfBlockedOn(finishedRoot))
	              : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
	          break;
	        case 4:
	          prevHostParent = hostParent;
	          prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = deletedFiber.stateNode.containerInfo;
	          hostParentIsContainer = true;
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          hostParent = prevHostParent;
	          hostParentIsContainer = prevHostParentIsContainer;
	          break;
	        case 0:
	        case 11:
	        case 14:
	        case 15:
	          offscreenSubtreeWasHidden ||
	            commitHookEffectListUnmount(
	              Insertion,
	              deletedFiber,
	              nearestMountedAncestor
	            );
	          offscreenSubtreeWasHidden ||
	            commitHookLayoutUnmountEffects(
	              deletedFiber,
	              nearestMountedAncestor,
	              Layout
	            );
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          break;
	        case 1:
	          offscreenSubtreeWasHidden ||
	            (safelyDetachRef(deletedFiber, nearestMountedAncestor),
	            (prevHostParent = deletedFiber.stateNode),
	            "function" === typeof prevHostParent.componentWillUnmount &&
	              safelyCallComponentWillUnmount(
	                deletedFiber,
	                nearestMountedAncestor,
	                prevHostParent
	              ));
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          break;
	        case 21:
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          break;
	        case 22:
	          offscreenSubtreeWasHidden =
	            (prevHostParent = offscreenSubtreeWasHidden) ||
	            null !== deletedFiber.memoizedState;
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	          offscreenSubtreeWasHidden = prevHostParent;
	          break;
	        default:
	          recursivelyTraverseDeletionEffects(
	            finishedRoot,
	            nearestMountedAncestor,
	            deletedFiber
	          );
	      }
	    }
	    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
	      if (
	        null === finishedWork.memoizedState &&
	        ((finishedRoot = finishedWork.alternate),
	        null !== finishedRoot &&
	          ((finishedRoot = finishedRoot.memoizedState),
	          null !== finishedRoot &&
	            ((finishedRoot = finishedRoot.dehydrated), null !== finishedRoot)))
	      )
	        try {
	          runWithFiberInDEV(
	            finishedWork,
	            commitHydratedSuspenseInstance,
	            finishedRoot
	          );
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	    }
	    function getRetryCache(finishedWork) {
	      switch (finishedWork.tag) {
	        case 13:
	        case 19:
	          var retryCache = finishedWork.stateNode;
	          null === retryCache &&
	            (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
	          return retryCache;
	        case 22:
	          return (
	            (finishedWork = finishedWork.stateNode),
	            (retryCache = finishedWork._retryCache),
	            null === retryCache &&
	              (retryCache = finishedWork._retryCache = new PossiblyWeakSet()),
	            retryCache
	          );
	        default:
	          throw Error(
	            "Unexpected Suspense handler tag (" +
	              finishedWork.tag +
	              "). This is a bug in React."
	          );
	      }
	    }
	    function attachSuspenseRetryListeners(finishedWork, wakeables) {
	      var retryCache = getRetryCache(finishedWork);
	      wakeables.forEach(function (wakeable) {
	        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
	        if (!retryCache.has(wakeable)) {
	          retryCache.add(wakeable);
	          if (isDevToolsPresent)
	            if (null !== inProgressLanes && null !== inProgressRoot)
	              restorePendingUpdaters(inProgressRoot, inProgressLanes);
	            else
	              throw Error(
	                "Expected finished root and lanes to be set. This is a bug in React."
	              );
	          wakeable.then(retry, retry);
	        }
	      });
	    }
	    function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
	      var deletions = parentFiber.deletions;
	      if (null !== deletions)
	        for (var i = 0; i < deletions.length; i++) {
	          var root = root$jscomp$0,
	            returnFiber = parentFiber,
	            deletedFiber = deletions[i],
	            parent = returnFiber;
	          a: for (; null !== parent; ) {
	            switch (parent.tag) {
	              case 27:
	                if (isSingletonScope(parent.type)) {
	                  hostParent = parent.stateNode;
	                  hostParentIsContainer = false;
	                  break a;
	                }
	                break;
	              case 5:
	                hostParent = parent.stateNode;
	                hostParentIsContainer = false;
	                break a;
	              case 3:
	              case 4:
	                hostParent = parent.stateNode.containerInfo;
	                hostParentIsContainer = true;
	                break a;
	            }
	            parent = parent.return;
	          }
	          if (null === hostParent)
	            throw Error(
	              "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
	            );
	          commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
	          hostParent = null;
	          hostParentIsContainer = false;
	          root = deletedFiber;
	          returnFiber = root.alternate;
	          null !== returnFiber && (returnFiber.return = null);
	          root.return = null;
	        }
	      if (parentFiber.subtreeFlags & 13878)
	        for (parentFiber = parentFiber.child; null !== parentFiber; )
	          commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),
	            (parentFiber = parentFiber.sibling);
	    }
	    function commitMutationEffectsOnFiber(finishedWork, root) {
	      var current = finishedWork.alternate,
	        flags = finishedWork.flags;
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 14:
	        case 15:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          flags & 4 &&
	            (commitHookEffectListUnmount(
	              Insertion | HasEffect,
	              finishedWork,
	              finishedWork.return
	            ),
	            commitHookEffectListMount(Insertion | HasEffect, finishedWork),
	            commitHookLayoutUnmountEffects(
	              finishedWork,
	              finishedWork.return,
	              Layout | HasEffect
	            ));
	          break;
	        case 1:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          flags & 512 &&
	            (offscreenSubtreeWasHidden ||
	              null === current ||
	              safelyDetachRef(current, current.return));
	          flags & 64 &&
	            offscreenSubtreeIsHidden &&
	            ((finishedWork = finishedWork.updateQueue),
	            null !== finishedWork &&
	              ((flags = finishedWork.callbacks),
	              null !== flags &&
	                ((current = finishedWork.shared.hiddenCallbacks),
	                (finishedWork.shared.hiddenCallbacks =
	                  null === current ? flags : current.concat(flags)))));
	          break;
	        case 26:
	          var hoistableRoot = currentHoistableRoot;
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          flags & 512 &&
	            (offscreenSubtreeWasHidden ||
	              null === current ||
	              safelyDetachRef(current, current.return));
	          if (flags & 4)
	            if (
	              ((root = null !== current ? current.memoizedState : null),
	              (flags = finishedWork.memoizedState),
	              null === current)
	            )
	              if (null === flags)
	                if (null === finishedWork.stateNode) {
	                  a: {
	                    flags = finishedWork.type;
	                    current = finishedWork.memoizedProps;
	                    root = hoistableRoot.ownerDocument || hoistableRoot;
	                    b: switch (flags) {
	                      case "title":
	                        hoistableRoot = root.getElementsByTagName("title")[0];
	                        if (
	                          !hoistableRoot ||
	                          hoistableRoot[internalHoistableMarker] ||
	                          hoistableRoot[internalInstanceKey] ||
	                          hoistableRoot.namespaceURI === SVG_NAMESPACE ||
	                          hoistableRoot.hasAttribute("itemprop")
	                        )
	                          (hoistableRoot = root.createElement(flags)),
	                            root.head.insertBefore(
	                              hoistableRoot,
	                              root.querySelector("head > title")
	                            );
	                        setInitialProperties(hoistableRoot, flags, current);
	                        hoistableRoot[internalInstanceKey] = finishedWork;
	                        markNodeAsHoistable(hoistableRoot);
	                        flags = hoistableRoot;
	                        break a;
	                      case "link":
	                        var maybeNodes = getHydratableHoistableCache(
	                          "link",
	                          "href",
	                          root
	                        ).get(flags + (current.href || ""));
	                        if (maybeNodes)
	                          for (var i = 0; i < maybeNodes.length; i++)
	                            if (
	                              ((hoistableRoot = maybeNodes[i]),
	                              hoistableRoot.getAttribute("href") ===
	                                (null == current.href || "" === current.href
	                                  ? null
	                                  : current.href) &&
	                                hoistableRoot.getAttribute("rel") ===
	                                  (null == current.rel ? null : current.rel) &&
	                                hoistableRoot.getAttribute("title") ===
	                                  (null == current.title
	                                    ? null
	                                    : current.title) &&
	                                hoistableRoot.getAttribute("crossorigin") ===
	                                  (null == current.crossOrigin
	                                    ? null
	                                    : current.crossOrigin))
	                            ) {
	                              maybeNodes.splice(i, 1);
	                              break b;
	                            }
	                        hoistableRoot = root.createElement(flags);
	                        setInitialProperties(hoistableRoot, flags, current);
	                        root.head.appendChild(hoistableRoot);
	                        break;
	                      case "meta":
	                        if (
	                          (maybeNodes = getHydratableHoistableCache(
	                            "meta",
	                            "content",
	                            root
	                          ).get(flags + (current.content || "")))
	                        )
	                          for (i = 0; i < maybeNodes.length; i++)
	                            if (
	                              ((hoistableRoot = maybeNodes[i]),
	                              checkAttributeStringCoercion(
	                                current.content,
	                                "content"
	                              ),
	                              hoistableRoot.getAttribute("content") ===
	                                (null == current.content
	                                  ? null
	                                  : "" + current.content) &&
	                                hoistableRoot.getAttribute("name") ===
	                                  (null == current.name
	                                    ? null
	                                    : current.name) &&
	                                hoistableRoot.getAttribute("property") ===
	                                  (null == current.property
	                                    ? null
	                                    : current.property) &&
	                                hoistableRoot.getAttribute("http-equiv") ===
	                                  (null == current.httpEquiv
	                                    ? null
	                                    : current.httpEquiv) &&
	                                hoistableRoot.getAttribute("charset") ===
	                                  (null == current.charSet
	                                    ? null
	                                    : current.charSet))
	                            ) {
	                              maybeNodes.splice(i, 1);
	                              break b;
	                            }
	                        hoistableRoot = root.createElement(flags);
	                        setInitialProperties(hoistableRoot, flags, current);
	                        root.head.appendChild(hoistableRoot);
	                        break;
	                      default:
	                        throw Error(
	                          'getNodesForType encountered a type it did not expect: "' +
	                            flags +
	                            '". This is a bug in React.'
	                        );
	                    }
	                    hoistableRoot[internalInstanceKey] = finishedWork;
	                    markNodeAsHoistable(hoistableRoot);
	                    flags = hoistableRoot;
	                  }
	                  finishedWork.stateNode = flags;
	                } else
	                  mountHoistable(
	                    hoistableRoot,
	                    finishedWork.type,
	                    finishedWork.stateNode
	                  );
	              else
	                finishedWork.stateNode = acquireResource(
	                  hoistableRoot,
	                  flags,
	                  finishedWork.memoizedProps
	                );
	            else
	              root !== flags
	                ? (null === root
	                    ? null !== current.stateNode &&
	                      ((current = current.stateNode),
	                      current.parentNode.removeChild(current))
	                    : root.count--,
	                  null === flags
	                    ? mountHoistable(
	                        hoistableRoot,
	                        finishedWork.type,
	                        finishedWork.stateNode
	                      )
	                    : acquireResource(
	                        hoistableRoot,
	                        flags,
	                        finishedWork.memoizedProps
	                      ))
	                : null === flags &&
	                  null !== finishedWork.stateNode &&
	                  commitHostUpdate(
	                    finishedWork,
	                    finishedWork.memoizedProps,
	                    current.memoizedProps
	                  );
	          break;
	        case 27:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          flags & 512 &&
	            (offscreenSubtreeWasHidden ||
	              null === current ||
	              safelyDetachRef(current, current.return));
	          null !== current &&
	            flags & 4 &&
	            commitHostUpdate(
	              finishedWork,
	              finishedWork.memoizedProps,
	              current.memoizedProps
	            );
	          break;
	        case 5:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          flags & 512 &&
	            (offscreenSubtreeWasHidden ||
	              null === current ||
	              safelyDetachRef(current, current.return));
	          if (finishedWork.flags & 32) {
	            root = finishedWork.stateNode;
	            try {
	              runWithFiberInDEV(finishedWork, resetTextContent, root);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	          flags & 4 &&
	            null != finishedWork.stateNode &&
	            ((root = finishedWork.memoizedProps),
	            commitHostUpdate(
	              finishedWork,
	              root,
	              null !== current ? current.memoizedProps : root
	            ));
	          flags & 1024 &&
	            ((needsFormReset = true),
	            "form" !== finishedWork.type &&
	              console.error(
	                "Unexpected host component type. Expected a form. This is a bug in React."
	              ));
	          break;
	        case 6:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          if (flags & 4) {
	            if (null === finishedWork.stateNode)
	              throw Error(
	                "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
	              );
	            flags = finishedWork.memoizedProps;
	            current = null !== current ? current.memoizedProps : flags;
	            root = finishedWork.stateNode;
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitTextUpdate,
	                root,
	                current,
	                flags
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	          break;
	        case 3:
	          hoistableRoot = pushNestedEffectDurations();
	          tagCaches = null;
	          maybeNodes = currentHoistableRoot;
	          currentHoistableRoot = getHoistableRoot(root.containerInfo);
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          currentHoistableRoot = maybeNodes;
	          commitReconciliationEffects(finishedWork);
	          if (
	            flags & 4 &&
	            null !== current &&
	            current.memoizedState.isDehydrated
	          )
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitHydratedContainer,
	                root.containerInfo
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          needsFormReset &&
	            ((needsFormReset = false), recursivelyResetForms(finishedWork));
	          root.effectDuration += popNestedEffectDurations(hoistableRoot);
	          break;
	        case 4:
	          flags = currentHoistableRoot;
	          currentHoistableRoot = getHoistableRoot(
	            finishedWork.stateNode.containerInfo
	          );
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          currentHoistableRoot = flags;
	          break;
	        case 12:
	          flags = pushNestedEffectDurations();
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          finishedWork.stateNode.effectDuration +=
	            bubbleNestedEffectDurations(flags);
	          break;
	        case 13:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          finishedWork.child.flags & 8192 &&
	            (null !== finishedWork.memoizedState) !==
	              (null !== current && null !== current.memoizedState) &&
	            (globalMostRecentFallbackTime = now$1());
	          flags & 4 &&
	            ((flags = finishedWork.updateQueue),
	            null !== flags &&
	              ((finishedWork.updateQueue = null),
	              attachSuspenseRetryListeners(finishedWork, flags)));
	          break;
	        case 22:
	          hoistableRoot = null !== finishedWork.memoizedState;
	          var wasHidden = null !== current && null !== current.memoizedState,
	            prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
	            prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	          offscreenSubtreeIsHidden =
	            prevOffscreenSubtreeIsHidden || hoistableRoot;
	          offscreenSubtreeWasHidden =
	            prevOffscreenSubtreeWasHidden || wasHidden;
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
	          commitReconciliationEffects(finishedWork);
	          if (flags & 8192)
	            a: for (
	              root = finishedWork.stateNode,
	                root._visibility = hoistableRoot
	                  ? root._visibility & ~OffscreenVisible
	                  : root._visibility | OffscreenVisible,
	                hoistableRoot &&
	                  (null === current ||
	                    wasHidden ||
	                    offscreenSubtreeIsHidden ||
	                    offscreenSubtreeWasHidden ||
	                    recursivelyTraverseDisappearLayoutEffects(finishedWork)),
	                current = null,
	                root = finishedWork;
	              ;

	            ) {
	              if (5 === root.tag || 26 === root.tag) {
	                if (null === current) {
	                  wasHidden = current = root;
	                  try {
	                    (maybeNodes = wasHidden.stateNode),
	                      hoistableRoot
	                        ? runWithFiberInDEV(wasHidden, hideInstance, maybeNodes)
	                        : runWithFiberInDEV(
	                            wasHidden,
	                            unhideInstance,
	                            wasHidden.stateNode,
	                            wasHidden.memoizedProps
	                          );
	                  } catch (error) {
	                    captureCommitPhaseError(wasHidden, wasHidden.return, error);
	                  }
	                }
	              } else if (6 === root.tag) {
	                if (null === current) {
	                  wasHidden = root;
	                  try {
	                    (i = wasHidden.stateNode),
	                      hoistableRoot
	                        ? runWithFiberInDEV(wasHidden, hideTextInstance, i)
	                        : runWithFiberInDEV(
	                            wasHidden,
	                            unhideTextInstance,
	                            i,
	                            wasHidden.memoizedProps
	                          );
	                  } catch (error) {
	                    captureCommitPhaseError(wasHidden, wasHidden.return, error);
	                  }
	                }
	              } else if (
	                ((22 !== root.tag && 23 !== root.tag) ||
	                  null === root.memoizedState ||
	                  root === finishedWork) &&
	                null !== root.child
	              ) {
	                root.child.return = root;
	                root = root.child;
	                continue;
	              }
	              if (root === finishedWork) break a;
	              for (; null === root.sibling; ) {
	                if (null === root.return || root.return === finishedWork)
	                  break a;
	                current === root && (current = null);
	                root = root.return;
	              }
	              current === root && (current = null);
	              root.sibling.return = root.return;
	              root = root.sibling;
	            }
	          flags & 4 &&
	            ((flags = finishedWork.updateQueue),
	            null !== flags &&
	              ((current = flags.retryQueue),
	              null !== current &&
	                ((flags.retryQueue = null),
	                attachSuspenseRetryListeners(finishedWork, current))));
	          break;
	        case 19:
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          commitReconciliationEffects(finishedWork);
	          flags & 4 &&
	            ((flags = finishedWork.updateQueue),
	            null !== flags &&
	              ((finishedWork.updateQueue = null),
	              attachSuspenseRetryListeners(finishedWork, flags)));
	          break;
	        case 30:
	          break;
	        case 21:
	          break;
	        default:
	          recursivelyTraverseMutationEffects(root, finishedWork),
	            commitReconciliationEffects(finishedWork);
	      }
	    }
	    function commitReconciliationEffects(finishedWork) {
	      var flags = finishedWork.flags;
	      if (flags & 2) {
	        try {
	          runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);
	        } catch (error) {
	          captureCommitPhaseError(finishedWork, finishedWork.return, error);
	        }
	        finishedWork.flags &= -3;
	      }
	      flags & 4096 && (finishedWork.flags &= -4097);
	    }
	    function recursivelyResetForms(parentFiber) {
	      if (parentFiber.subtreeFlags & 1024)
	        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	          var fiber = parentFiber;
	          recursivelyResetForms(fiber);
	          5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
	          parentFiber = parentFiber.sibling;
	        }
	    }
	    function recursivelyTraverseLayoutEffects(root, parentFiber) {
	      if (parentFiber.subtreeFlags & 8772)
	        for (parentFiber = parentFiber.child; null !== parentFiber; )
	          commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber),
	            (parentFiber = parentFiber.sibling);
	    }
	    function disappearLayoutEffects(finishedWork) {
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 14:
	        case 15:
	          commitHookLayoutUnmountEffects(
	            finishedWork,
	            finishedWork.return,
	            Layout
	          );
	          recursivelyTraverseDisappearLayoutEffects(finishedWork);
	          break;
	        case 1:
	          safelyDetachRef(finishedWork, finishedWork.return);
	          var instance = finishedWork.stateNode;
	          "function" === typeof instance.componentWillUnmount &&
	            safelyCallComponentWillUnmount(
	              finishedWork,
	              finishedWork.return,
	              instance
	            );
	          recursivelyTraverseDisappearLayoutEffects(finishedWork);
	          break;
	        case 27:
	          runWithFiberInDEV(
	            finishedWork,
	            releaseSingletonInstance,
	            finishedWork.stateNode
	          );
	        case 26:
	        case 5:
	          safelyDetachRef(finishedWork, finishedWork.return);
	          recursivelyTraverseDisappearLayoutEffects(finishedWork);
	          break;
	        case 22:
	          null === finishedWork.memoizedState &&
	            recursivelyTraverseDisappearLayoutEffects(finishedWork);
	          break;
	        case 30:
	          recursivelyTraverseDisappearLayoutEffects(finishedWork);
	          break;
	        default:
	          recursivelyTraverseDisappearLayoutEffects(finishedWork);
	      }
	    }
	    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
	      for (parentFiber = parentFiber.child; null !== parentFiber; )
	        disappearLayoutEffects(parentFiber),
	          (parentFiber = parentFiber.sibling);
	    }
	    function reappearLayoutEffects(
	      finishedRoot,
	      current,
	      finishedWork,
	      includeWorkInProgressEffects
	    ) {
	      var flags = finishedWork.flags;
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          recursivelyTraverseReappearLayoutEffects(
	            finishedRoot,
	            finishedWork,
	            includeWorkInProgressEffects
	          );
	          commitHookLayoutEffects(finishedWork, Layout);
	          break;
	        case 1:
	          recursivelyTraverseReappearLayoutEffects(
	            finishedRoot,
	            finishedWork,
	            includeWorkInProgressEffects
	          );
	          current = finishedWork.stateNode;
	          "function" === typeof current.componentDidMount &&
	            runWithFiberInDEV(
	              finishedWork,
	              callComponentDidMountInDEV,
	              finishedWork,
	              current
	            );
	          current = finishedWork.updateQueue;
	          if (null !== current) {
	            finishedRoot = finishedWork.stateNode;
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitHiddenCallbacks,
	                current,
	                finishedRoot
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	          includeWorkInProgressEffects &&
	            flags & 64 &&
	            commitClassCallbacks(finishedWork);
	          safelyAttachRef(finishedWork, finishedWork.return);
	          break;
	        case 27:
	          commitHostSingletonAcquisition(finishedWork);
	        case 26:
	        case 5:
	          recursivelyTraverseReappearLayoutEffects(
	            finishedRoot,
	            finishedWork,
	            includeWorkInProgressEffects
	          );
	          includeWorkInProgressEffects &&
	            null === current &&
	            flags & 4 &&
	            commitHostMount(finishedWork);
	          safelyAttachRef(finishedWork, finishedWork.return);
	          break;
	        case 12:
	          if (includeWorkInProgressEffects && flags & 4) {
	            flags = pushNestedEffectDurations();
	            recursivelyTraverseReappearLayoutEffects(
	              finishedRoot,
	              finishedWork,
	              includeWorkInProgressEffects
	            );
	            includeWorkInProgressEffects = finishedWork.stateNode;
	            includeWorkInProgressEffects.effectDuration +=
	              bubbleNestedEffectDurations(flags);
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitProfiler,
	                finishedWork,
	                current,
	                commitStartTime,
	                includeWorkInProgressEffects.effectDuration
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          } else
	            recursivelyTraverseReappearLayoutEffects(
	              finishedRoot,
	              finishedWork,
	              includeWorkInProgressEffects
	            );
	          break;
	        case 13:
	          recursivelyTraverseReappearLayoutEffects(
	            finishedRoot,
	            finishedWork,
	            includeWorkInProgressEffects
	          );
	          includeWorkInProgressEffects &&
	            flags & 4 &&
	            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	          break;
	        case 22:
	          null === finishedWork.memoizedState &&
	            recursivelyTraverseReappearLayoutEffects(
	              finishedRoot,
	              finishedWork,
	              includeWorkInProgressEffects
	            );
	          safelyAttachRef(finishedWork, finishedWork.return);
	          break;
	        case 30:
	          break;
	        default:
	          recursivelyTraverseReappearLayoutEffects(
	            finishedRoot,
	            finishedWork,
	            includeWorkInProgressEffects
	          );
	      }
	    }
	    function recursivelyTraverseReappearLayoutEffects(
	      finishedRoot,
	      parentFiber,
	      includeWorkInProgressEffects
	    ) {
	      includeWorkInProgressEffects =
	        includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
	      for (parentFiber = parentFiber.child; null !== parentFiber; )
	        reappearLayoutEffects(
	          finishedRoot,
	          parentFiber.alternate,
	          parentFiber,
	          includeWorkInProgressEffects
	        ),
	          (parentFiber = parentFiber.sibling);
	    }
	    function commitOffscreenPassiveMountEffects(current, finishedWork) {
	      var previousCache = null;
	      null !== current &&
	        null !== current.memoizedState &&
	        null !== current.memoizedState.cachePool &&
	        (previousCache = current.memoizedState.cachePool.pool);
	      current = null;
	      null !== finishedWork.memoizedState &&
	        null !== finishedWork.memoizedState.cachePool &&
	        (current = finishedWork.memoizedState.cachePool.pool);
	      current !== previousCache &&
	        (null != current && retainCache(current),
	        null != previousCache && releaseCache(previousCache));
	    }
	    function commitCachePassiveMountEffect(current, finishedWork) {
	      current = null;
	      null !== finishedWork.alternate &&
	        (current = finishedWork.alternate.memoizedState.cache);
	      finishedWork = finishedWork.memoizedState.cache;
	      finishedWork !== current &&
	        (retainCache(finishedWork), null != current && releaseCache(current));
	    }
	    function recursivelyTraversePassiveMountEffects(
	      root,
	      parentFiber,
	      committedLanes,
	      committedTransitions
	    ) {
	      if (parentFiber.subtreeFlags & 10256)
	        for (parentFiber = parentFiber.child; null !== parentFiber; )
	          commitPassiveMountOnFiber(
	            root,
	            parentFiber,
	            committedLanes,
	            committedTransitions
	          ),
	            (parentFiber = parentFiber.sibling);
	    }
	    function commitPassiveMountOnFiber(
	      finishedRoot,
	      finishedWork,
	      committedLanes,
	      committedTransitions
	    ) {
	      var flags = finishedWork.flags;
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          recursivelyTraversePassiveMountEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions
	          );
	          flags & 2048 &&
	            commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
	          break;
	        case 1:
	          recursivelyTraversePassiveMountEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions
	          );
	          break;
	        case 3:
	          var prevEffectDuration = pushNestedEffectDurations();
	          recursivelyTraversePassiveMountEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions
	          );
	          flags & 2048 &&
	            ((committedLanes = null),
	            null !== finishedWork.alternate &&
	              (committedLanes = finishedWork.alternate.memoizedState.cache),
	            (finishedWork = finishedWork.memoizedState.cache),
	            finishedWork !== committedLanes &&
	              (retainCache(finishedWork),
	              null != committedLanes && releaseCache(committedLanes)));
	          finishedRoot.passiveEffectDuration +=
	            popNestedEffectDurations(prevEffectDuration);
	          break;
	        case 12:
	          if (flags & 2048) {
	            flags = pushNestedEffectDurations();
	            recursivelyTraversePassiveMountEffects(
	              finishedRoot,
	              finishedWork,
	              committedLanes,
	              committedTransitions
	            );
	            finishedRoot = finishedWork.stateNode;
	            finishedRoot.passiveEffectDuration +=
	              bubbleNestedEffectDurations(flags);
	            try {
	              runWithFiberInDEV(
	                finishedWork,
	                commitProfilerPostCommitImpl,
	                finishedWork,
	                finishedWork.alternate,
	                commitStartTime,
	                finishedRoot.passiveEffectDuration
	              );
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          } else
	            recursivelyTraversePassiveMountEffects(
	              finishedRoot,
	              finishedWork,
	              committedLanes,
	              committedTransitions
	            );
	          break;
	        case 13:
	          recursivelyTraversePassiveMountEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions
	          );
	          break;
	        case 23:
	          break;
	        case 22:
	          prevEffectDuration = finishedWork.stateNode;
	          var _current = finishedWork.alternate;
	          null !== finishedWork.memoizedState
	            ? prevEffectDuration._visibility & OffscreenPassiveEffectsConnected
	              ? recursivelyTraversePassiveMountEffects(
	                  finishedRoot,
	                  finishedWork,
	                  committedLanes,
	                  committedTransitions
	                )
	              : recursivelyTraverseAtomicPassiveEffects(
	                  finishedRoot,
	                  finishedWork
	                )
	            : prevEffectDuration._visibility & OffscreenPassiveEffectsConnected
	              ? recursivelyTraversePassiveMountEffects(
	                  finishedRoot,
	                  finishedWork,
	                  committedLanes,
	                  committedTransitions
	                )
	              : ((prevEffectDuration._visibility |=
	                  OffscreenPassiveEffectsConnected),
	                recursivelyTraverseReconnectPassiveEffects(
	                  finishedRoot,
	                  finishedWork,
	                  committedLanes,
	                  committedTransitions,
	                  0 !== (finishedWork.subtreeFlags & 10256)
	                ));
	          flags & 2048 &&
	            commitOffscreenPassiveMountEffects(_current, finishedWork);
	          break;
	        case 24:
	          recursivelyTraversePassiveMountEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions
	          );
	          flags & 2048 &&
	            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
	          break;
	        default:
	          recursivelyTraversePassiveMountEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions
	          );
	      }
	    }
	    function recursivelyTraverseReconnectPassiveEffects(
	      finishedRoot,
	      parentFiber,
	      committedLanes,
	      committedTransitions,
	      includeWorkInProgressEffects
	    ) {
	      includeWorkInProgressEffects =
	        includeWorkInProgressEffects &&
	        0 !== (parentFiber.subtreeFlags & 10256);
	      for (parentFiber = parentFiber.child; null !== parentFiber; )
	        reconnectPassiveEffects(
	          finishedRoot,
	          parentFiber,
	          committedLanes,
	          committedTransitions,
	          includeWorkInProgressEffects
	        ),
	          (parentFiber = parentFiber.sibling);
	    }
	    function reconnectPassiveEffects(
	      finishedRoot,
	      finishedWork,
	      committedLanes,
	      committedTransitions,
	      includeWorkInProgressEffects
	    ) {
	      var flags = finishedWork.flags;
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          recursivelyTraverseReconnectPassiveEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions,
	            includeWorkInProgressEffects
	          );
	          commitHookPassiveMountEffects(finishedWork, Passive);
	          break;
	        case 23:
	          break;
	        case 22:
	          var _instance2 = finishedWork.stateNode;
	          null !== finishedWork.memoizedState
	            ? _instance2._visibility & OffscreenPassiveEffectsConnected
	              ? recursivelyTraverseReconnectPassiveEffects(
	                  finishedRoot,
	                  finishedWork,
	                  committedLanes,
	                  committedTransitions,
	                  includeWorkInProgressEffects
	                )
	              : recursivelyTraverseAtomicPassiveEffects(
	                  finishedRoot,
	                  finishedWork
	                )
	            : ((_instance2._visibility |= OffscreenPassiveEffectsConnected),
	              recursivelyTraverseReconnectPassiveEffects(
	                finishedRoot,
	                finishedWork,
	                committedLanes,
	                committedTransitions,
	                includeWorkInProgressEffects
	              ));
	          includeWorkInProgressEffects &&
	            flags & 2048 &&
	            commitOffscreenPassiveMountEffects(
	              finishedWork.alternate,
	              finishedWork
	            );
	          break;
	        case 24:
	          recursivelyTraverseReconnectPassiveEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions,
	            includeWorkInProgressEffects
	          );
	          includeWorkInProgressEffects &&
	            flags & 2048 &&
	            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
	          break;
	        default:
	          recursivelyTraverseReconnectPassiveEffects(
	            finishedRoot,
	            finishedWork,
	            committedLanes,
	            committedTransitions,
	            includeWorkInProgressEffects
	          );
	      }
	    }
	    function recursivelyTraverseAtomicPassiveEffects(
	      finishedRoot$jscomp$0,
	      parentFiber
	    ) {
	      if (parentFiber.subtreeFlags & 10256)
	        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	          var finishedRoot = finishedRoot$jscomp$0,
	            finishedWork = parentFiber,
	            flags = finishedWork.flags;
	          switch (finishedWork.tag) {
	            case 22:
	              recursivelyTraverseAtomicPassiveEffects(
	                finishedRoot,
	                finishedWork
	              );
	              flags & 2048 &&
	                commitOffscreenPassiveMountEffects(
	                  finishedWork.alternate,
	                  finishedWork
	                );
	              break;
	            case 24:
	              recursivelyTraverseAtomicPassiveEffects(
	                finishedRoot,
	                finishedWork
	              );
	              flags & 2048 &&
	                commitCachePassiveMountEffect(
	                  finishedWork.alternate,
	                  finishedWork
	                );
	              break;
	            default:
	              recursivelyTraverseAtomicPassiveEffects(
	                finishedRoot,
	                finishedWork
	              );
	          }
	          parentFiber = parentFiber.sibling;
	        }
	    }
	    function recursivelyAccumulateSuspenseyCommit(parentFiber) {
	      if (parentFiber.subtreeFlags & suspenseyCommitFlag)
	        for (parentFiber = parentFiber.child; null !== parentFiber; )
	          accumulateSuspenseyCommitOnFiber(parentFiber),
	            (parentFiber = parentFiber.sibling);
	    }
	    function accumulateSuspenseyCommitOnFiber(fiber) {
	      switch (fiber.tag) {
	        case 26:
	          recursivelyAccumulateSuspenseyCommit(fiber);
	          fiber.flags & suspenseyCommitFlag &&
	            null !== fiber.memoizedState &&
	            suspendResource(
	              currentHoistableRoot,
	              fiber.memoizedState,
	              fiber.memoizedProps
	            );
	          break;
	        case 5:
	          recursivelyAccumulateSuspenseyCommit(fiber);
	          break;
	        case 3:
	        case 4:
	          var previousHoistableRoot = currentHoistableRoot;
	          currentHoistableRoot = getHoistableRoot(
	            fiber.stateNode.containerInfo
	          );
	          recursivelyAccumulateSuspenseyCommit(fiber);
	          currentHoistableRoot = previousHoistableRoot;
	          break;
	        case 22:
	          null === fiber.memoizedState &&
	            ((previousHoistableRoot = fiber.alternate),
	            null !== previousHoistableRoot &&
	            null !== previousHoistableRoot.memoizedState
	              ? ((previousHoistableRoot = suspenseyCommitFlag),
	                (suspenseyCommitFlag = 16777216),
	                recursivelyAccumulateSuspenseyCommit(fiber),
	                (suspenseyCommitFlag = previousHoistableRoot))
	              : recursivelyAccumulateSuspenseyCommit(fiber));
	          break;
	        default:
	          recursivelyAccumulateSuspenseyCommit(fiber);
	      }
	    }
	    function detachAlternateSiblings(parentFiber) {
	      var previousFiber = parentFiber.alternate;
	      if (
	        null !== previousFiber &&
	        ((parentFiber = previousFiber.child), null !== parentFiber)
	      ) {
	        previousFiber.child = null;
	        do
	          (previousFiber = parentFiber.sibling),
	            (parentFiber.sibling = null),
	            (parentFiber = previousFiber);
	        while (null !== parentFiber);
	      }
	    }
	    function recursivelyTraversePassiveUnmountEffects(parentFiber) {
	      var deletions = parentFiber.deletions;
	      if (0 !== (parentFiber.flags & 16)) {
	        if (null !== deletions)
	          for (var i = 0; i < deletions.length; i++) {
	            var childToDelete = deletions[i];
	            nextEffect = childToDelete;
	            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
	              childToDelete,
	              parentFiber
	            );
	          }
	        detachAlternateSiblings(parentFiber);
	      }
	      if (parentFiber.subtreeFlags & 10256)
	        for (parentFiber = parentFiber.child; null !== parentFiber; )
	          commitPassiveUnmountOnFiber(parentFiber),
	            (parentFiber = parentFiber.sibling);
	    }
	    function commitPassiveUnmountOnFiber(finishedWork) {
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          recursivelyTraversePassiveUnmountEffects(finishedWork);
	          finishedWork.flags & 2048 &&
	            commitHookPassiveUnmountEffects(
	              finishedWork,
	              finishedWork.return,
	              Passive | HasEffect
	            );
	          break;
	        case 3:
	          var prevEffectDuration = pushNestedEffectDurations();
	          recursivelyTraversePassiveUnmountEffects(finishedWork);
	          finishedWork.stateNode.passiveEffectDuration +=
	            popNestedEffectDurations(prevEffectDuration);
	          break;
	        case 12:
	          prevEffectDuration = pushNestedEffectDurations();
	          recursivelyTraversePassiveUnmountEffects(finishedWork);
	          finishedWork.stateNode.passiveEffectDuration +=
	            bubbleNestedEffectDurations(prevEffectDuration);
	          break;
	        case 22:
	          prevEffectDuration = finishedWork.stateNode;
	          null !== finishedWork.memoizedState &&
	          prevEffectDuration._visibility & OffscreenPassiveEffectsConnected &&
	          (null === finishedWork.return || 13 !== finishedWork.return.tag)
	            ? ((prevEffectDuration._visibility &=
	                ~OffscreenPassiveEffectsConnected),
	              recursivelyTraverseDisconnectPassiveEffects(finishedWork))
	            : recursivelyTraversePassiveUnmountEffects(finishedWork);
	          break;
	        default:
	          recursivelyTraversePassiveUnmountEffects(finishedWork);
	      }
	    }
	    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
	      var deletions = parentFiber.deletions;
	      if (0 !== (parentFiber.flags & 16)) {
	        if (null !== deletions)
	          for (var i = 0; i < deletions.length; i++) {
	            var childToDelete = deletions[i];
	            nextEffect = childToDelete;
	            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
	              childToDelete,
	              parentFiber
	            );
	          }
	        detachAlternateSiblings(parentFiber);
	      }
	      for (parentFiber = parentFiber.child; null !== parentFiber; )
	        disconnectPassiveEffect(parentFiber),
	          (parentFiber = parentFiber.sibling);
	    }
	    function disconnectPassiveEffect(finishedWork) {
	      switch (finishedWork.tag) {
	        case 0:
	        case 11:
	        case 15:
	          commitHookPassiveUnmountEffects(
	            finishedWork,
	            finishedWork.return,
	            Passive
	          );
	          recursivelyTraverseDisconnectPassiveEffects(finishedWork);
	          break;
	        case 22:
	          var instance = finishedWork.stateNode;
	          instance._visibility & OffscreenPassiveEffectsConnected &&
	            ((instance._visibility &= ~OffscreenPassiveEffectsConnected),
	            recursivelyTraverseDisconnectPassiveEffects(finishedWork));
	          break;
	        default:
	          recursivelyTraverseDisconnectPassiveEffects(finishedWork);
	      }
	    }
	    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
	      deletedSubtreeRoot,
	      nearestMountedAncestor
	    ) {
	      for (; null !== nextEffect; ) {
	        var fiber = nextEffect,
	          current = fiber;
	        switch (current.tag) {
	          case 0:
	          case 11:
	          case 15:
	            commitHookPassiveUnmountEffects(
	              current,
	              nearestMountedAncestor,
	              Passive
	            );
	            break;
	          case 23:
	          case 22:
	            null !== current.memoizedState &&
	              null !== current.memoizedState.cachePool &&
	              ((current = current.memoizedState.cachePool.pool),
	              null != current && retainCache(current));
	            break;
	          case 24:
	            releaseCache(current.memoizedState.cache);
	        }
	        current = fiber.child;
	        if (null !== current) (current.return = fiber), (nextEffect = current);
	        else
	          a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
	            current = nextEffect;
	            var sibling = current.sibling,
	              returnFiber = current.return;
	            detachFiberAfterEffects(current);
	            if (current === fiber) {
	              nextEffect = null;
	              break a;
	            }
	            if (null !== sibling) {
	              sibling.return = returnFiber;
	              nextEffect = sibling;
	              break a;
	            }
	            nextEffect = returnFiber;
	          }
	      }
	    }
	    function onCommitRoot() {
	      commitHooks.forEach(function (commitHook) {
	        return commitHook();
	      });
	    }
	    function isConcurrentActEnvironment() {
	      var isReactActEnvironmentGlobal =
	        "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT
	          ? IS_REACT_ACT_ENVIRONMENT
	          : void 0;
	      isReactActEnvironmentGlobal ||
	        null === ReactSharedInternals.actQueue ||
	        console.error(
	          "The current testing environment is not configured to support act(...)"
	        );
	      return isReactActEnvironmentGlobal;
	    }
	    function requestUpdateLane(fiber) {
	      if (
	        (executionContext & RenderContext) !== NoContext &&
	        0 !== workInProgressRootRenderLanes
	      )
	        return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
	      var transition = ReactSharedInternals.T;
	      return null !== transition
	        ? (transition._updatedFibers || (transition._updatedFibers = new Set()),
	          transition._updatedFibers.add(fiber),
	          (fiber = currentEntangledLane),
	          0 !== fiber ? fiber : requestTransitionLane())
	        : resolveUpdatePriority();
	    }
	    function requestDeferredLane() {
	      0 === workInProgressDeferredLane &&
	        (workInProgressDeferredLane =
	          0 === (workInProgressRootRenderLanes & 536870912) || isHydrating
	            ? claimNextTransitionLane()
	            : 536870912);
	      var suspenseHandler = suspenseHandlerStackCursor.current;
	      null !== suspenseHandler && (suspenseHandler.flags |= 32);
	      return workInProgressDeferredLane;
	    }
	    function scheduleUpdateOnFiber(root, fiber, lane) {
	      isRunningInsertionEffect &&
	        console.error("useInsertionEffect must not schedule updates.");
	      isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = true);
	      if (
	        (root === workInProgressRoot &&
	          (workInProgressSuspendedReason === SuspendedOnData ||
	            workInProgressSuspendedReason === SuspendedOnAction)) ||
	        null !== root.cancelPendingCommit
	      )
	        prepareFreshStack(root, 0),
	          markRootSuspended(
	            root,
	            workInProgressRootRenderLanes,
	            workInProgressDeferredLane,
	            false
	          );
	      markRootUpdated$1(root, lane);
	      if (
	        0 !== (executionContext & RenderContext) &&
	        root === workInProgressRoot
	      ) {
	        if (isRendering)
	          switch (fiber.tag) {
	            case 0:
	            case 11:
	            case 15:
	              root =
	                (workInProgress && getComponentNameFromFiber(workInProgress)) ||
	                "Unknown";
	              didWarnAboutUpdateInRenderForAnotherComponent.has(root) ||
	                (didWarnAboutUpdateInRenderForAnotherComponent.add(root),
	                (fiber = getComponentNameFromFiber(fiber) || "Unknown"),
	                console.error(
	                  "Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",
	                  fiber,
	                  root,
	                  root
	                ));
	              break;
	            case 1:
	              didWarnAboutUpdateInRender ||
	                (console.error(
	                  "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
	                ),
	                (didWarnAboutUpdateInRender = true));
	          }
	      } else
	        isDevToolsPresent && addFiberToLanesMap(root, fiber, lane),
	          warnIfUpdatesNotWrappedWithActDEV(fiber),
	          root === workInProgressRoot &&
	            ((executionContext & RenderContext) === NoContext &&
	              (workInProgressRootInterleavedUpdatedLanes |= lane),
	            workInProgressRootExitStatus === RootSuspendedWithDelay &&
	              markRootSuspended(
	                root,
	                workInProgressRootRenderLanes,
	                workInProgressDeferredLane,
	                false
	              )),
	          ensureRootIsScheduled(root);
	    }
	    function performWorkOnRoot(root, lanes, forceSync) {
	      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
	        throw Error("Should not already be working.");
	      var shouldTimeSlice =
	          (!forceSync &&
	            0 === (lanes & 124) &&
	            0 === (lanes & root.expiredLanes)) ||
	          checkIfRootIsPrerendering(root, lanes),
	        exitStatus = shouldTimeSlice
	          ? renderRootConcurrent(root, lanes)
	          : renderRootSync(root, lanes, true),
	        renderWasConcurrent = shouldTimeSlice;
	      do {
	        if (exitStatus === RootInProgress) {
	          workInProgressRootIsPrerendering &&
	            !shouldTimeSlice &&
	            markRootSuspended(root, lanes, 0, false);
	          break;
	        } else {
	          forceSync = root.current.alternate;
	          if (
	            renderWasConcurrent &&
	            !isRenderConsistentWithExternalStores(forceSync)
	          ) {
	            exitStatus = renderRootSync(root, lanes, false);
	            renderWasConcurrent = false;
	            continue;
	          }
	          if (exitStatus === RootErrored) {
	            renderWasConcurrent = lanes;
	            if (root.errorRecoveryDisabledLanes & renderWasConcurrent)
	              var errorRetryLanes = 0;
	            else
	              (errorRetryLanes = root.pendingLanes & -536870913),
	                (errorRetryLanes =
	                  0 !== errorRetryLanes
	                    ? errorRetryLanes
	                    : errorRetryLanes & 536870912
	                      ? 536870912
	                      : 0);
	            if (0 !== errorRetryLanes) {
	              lanes = errorRetryLanes;
	              a: {
	                exitStatus = root;
	                var errorRetryLanes$jscomp$0 = errorRetryLanes;
	                errorRetryLanes = workInProgressRootConcurrentErrors;
	                var wasRootDehydrated =
	                  exitStatus.current.memoizedState.isDehydrated;
	                wasRootDehydrated &&
	                  (prepareFreshStack(
	                    exitStatus,
	                    errorRetryLanes$jscomp$0
	                  ).flags |= 256);
	                errorRetryLanes$jscomp$0 = renderRootSync(
	                  exitStatus,
	                  errorRetryLanes$jscomp$0,
	                  false
	                );
	                if (errorRetryLanes$jscomp$0 !== RootErrored) {
	                  if (
	                    workInProgressRootDidAttachPingListener &&
	                    !wasRootDehydrated
	                  ) {
	                    exitStatus.errorRecoveryDisabledLanes |=
	                      renderWasConcurrent;
	                    workInProgressRootInterleavedUpdatedLanes |=
	                      renderWasConcurrent;
	                    exitStatus = RootSuspendedWithDelay;
	                    break a;
	                  }
	                  exitStatus = workInProgressRootRecoverableErrors;
	                  workInProgressRootRecoverableErrors = errorRetryLanes;
	                  null !== exitStatus &&
	                    (null === workInProgressRootRecoverableErrors
	                      ? (workInProgressRootRecoverableErrors = exitStatus)
	                      : workInProgressRootRecoverableErrors.push.apply(
	                          workInProgressRootRecoverableErrors,
	                          exitStatus
	                        ));
	                }
	                exitStatus = errorRetryLanes$jscomp$0;
	              }
	              renderWasConcurrent = false;
	              if (exitStatus !== RootErrored) continue;
	            }
	          }
	          if (exitStatus === RootFatalErrored) {
	            prepareFreshStack(root, 0);
	            markRootSuspended(root, lanes, 0, true);
	            break;
	          }
	          a: {
	            shouldTimeSlice = root;
	            switch (exitStatus) {
	              case RootInProgress:
	              case RootFatalErrored:
	                throw Error("Root did not complete. This is a bug in React.");
	              case RootSuspendedWithDelay:
	                if ((lanes & 4194048) !== lanes) break;
	              case RootSuspendedAtTheShell:
	                markRootSuspended(
	                  shouldTimeSlice,
	                  lanes,
	                  workInProgressDeferredLane,
	                  !workInProgressRootDidSkipSuspendedSiblings
	                );
	                break a;
	              case RootErrored:
	                workInProgressRootRecoverableErrors = null;
	                break;
	              case RootSuspended:
	              case RootCompleted:
	                break;
	              default:
	                throw Error("Unknown root exit status.");
	            }
	            if (null !== ReactSharedInternals.actQueue)
	              commitRoot(
	                shouldTimeSlice,
	                forceSync,
	                lanes,
	                workInProgressRootRecoverableErrors,
	                workInProgressTransitions,
	                workInProgressRootDidIncludeRecursiveRenderUpdate,
	                workInProgressDeferredLane,
	                workInProgressRootInterleavedUpdatedLanes,
	                workInProgressSuspendedRetryLanes
	              );
	            else {
	              if (
	                (lanes & 62914560) === lanes &&
	                ((renderWasConcurrent =
	                  globalMostRecentFallbackTime +
	                  FALLBACK_THROTTLE_MS -
	                  now$1()),
	                10 < renderWasConcurrent)
	              ) {
	                markRootSuspended(
	                  shouldTimeSlice,
	                  lanes,
	                  workInProgressDeferredLane,
	                  !workInProgressRootDidSkipSuspendedSiblings
	                );
	                if (0 !== getNextLanes(shouldTimeSlice, 0, true)) break a;
	                shouldTimeSlice.timeoutHandle = scheduleTimeout(
	                  commitRootWhenReady.bind(
	                    null,
	                    shouldTimeSlice,
	                    forceSync,
	                    workInProgressRootRecoverableErrors,
	                    workInProgressTransitions,
	                    workInProgressRootDidIncludeRecursiveRenderUpdate,
	                    lanes,
	                    workInProgressDeferredLane,
	                    workInProgressRootInterleavedUpdatedLanes,
	                    workInProgressSuspendedRetryLanes,
	                    workInProgressRootDidSkipSuspendedSiblings,
	                    exitStatus,
	                    THROTTLED_COMMIT,
	                    renderStartTime,
	                    0
	                  ),
	                  renderWasConcurrent
	                );
	                break a;
	              }
	              commitRootWhenReady(
	                shouldTimeSlice,
	                forceSync,
	                workInProgressRootRecoverableErrors,
	                workInProgressTransitions,
	                workInProgressRootDidIncludeRecursiveRenderUpdate,
	                lanes,
	                workInProgressDeferredLane,
	                workInProgressRootInterleavedUpdatedLanes,
	                workInProgressSuspendedRetryLanes,
	                workInProgressRootDidSkipSuspendedSiblings,
	                exitStatus,
	                IMMEDIATE_COMMIT,
	                renderStartTime,
	                0
	              );
	            }
	          }
	        }
	        break;
	      } while (1);
	      ensureRootIsScheduled(root);
	    }
	    function commitRootWhenReady(
	      root,
	      finishedWork,
	      recoverableErrors,
	      transitions,
	      didIncludeRenderPhaseUpdate,
	      lanes,
	      spawnedLane,
	      updatedLanes,
	      suspendedRetryLanes,
	      didSkipSuspendedSiblings,
	      exitStatus,
	      suspendedCommitReason,
	      completedRenderStartTime,
	      completedRenderEndTime
	    ) {
	      root.timeoutHandle = noTimeout;
	      suspendedCommitReason = finishedWork.subtreeFlags;
	      if (
	        suspendedCommitReason & 8192 ||
	        16785408 === (suspendedCommitReason & 16785408)
	      )
	        if (
	          ((suspendedState = { stylesheets: null, count: 0, unsuspend: noop }),
	          accumulateSuspenseyCommitOnFiber(finishedWork),
	          (suspendedCommitReason = waitForCommitToBeReady()),
	          null !== suspendedCommitReason)
	        ) {
	          root.cancelPendingCommit = suspendedCommitReason(
	            commitRoot.bind(
	              null,
	              root,
	              finishedWork,
	              lanes,
	              recoverableErrors,
	              transitions,
	              didIncludeRenderPhaseUpdate,
	              spawnedLane,
	              updatedLanes,
	              suspendedRetryLanes,
	              exitStatus,
	              SUSPENDED_COMMIT,
	              completedRenderStartTime,
	              completedRenderEndTime
	            )
	          );
	          markRootSuspended(
	            root,
	            lanes,
	            spawnedLane,
	            !didSkipSuspendedSiblings
	          );
	          return;
	        }
	      commitRoot(
	        root,
	        finishedWork,
	        lanes,
	        recoverableErrors,
	        transitions,
	        didIncludeRenderPhaseUpdate,
	        spawnedLane,
	        updatedLanes,
	        suspendedRetryLanes
	      );
	    }
	    function isRenderConsistentWithExternalStores(finishedWork) {
	      for (var node = finishedWork; ; ) {
	        var tag = node.tag;
	        if (
	          (0 === tag || 11 === tag || 15 === tag) &&
	          node.flags & 16384 &&
	          ((tag = node.updateQueue),
	          null !== tag && ((tag = tag.stores), null !== tag))
	        )
	          for (var i = 0; i < tag.length; i++) {
	            var check = tag[i],
	              getSnapshot = check.getSnapshot;
	            check = check.value;
	            try {
	              if (!objectIs(getSnapshot(), check)) return false;
	            } catch (error) {
	              return false;
	            }
	          }
	        tag = node.child;
	        if (node.subtreeFlags & 16384 && null !== tag)
	          (tag.return = node), (node = tag);
	        else {
	          if (node === finishedWork) break;
	          for (; null === node.sibling; ) {
	            if (null === node.return || node.return === finishedWork) return true;
	            node = node.return;
	          }
	          node.sibling.return = node.return;
	          node = node.sibling;
	        }
	      }
	      return true;
	    }
	    function markRootSuspended(
	      root,
	      suspendedLanes,
	      spawnedLane,
	      didAttemptEntireTree
	    ) {
	      suspendedLanes &= ~workInProgressRootPingedLanes;
	      suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
	      root.suspendedLanes |= suspendedLanes;
	      root.pingedLanes &= ~suspendedLanes;
	      didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
	      didAttemptEntireTree = root.expirationTimes;
	      for (var lanes = suspendedLanes; 0 < lanes; ) {
	        var index = 31 - clz32(lanes),
	          lane = 1 << index;
	        didAttemptEntireTree[index] = -1;
	        lanes &= ~lane;
	      }
	      0 !== spawnedLane &&
	        markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
	    }
	    function flushSyncWork$1() {
	      return (executionContext & (RenderContext | CommitContext)) === NoContext
	        ? (flushSyncWorkAcrossRoots_impl(0), false)
	        : true;
	    }
	    function resetWorkInProgressStack() {
	      if (null !== workInProgress) {
	        if (workInProgressSuspendedReason === NotSuspended)
	          var interruptedWork = workInProgress.return;
	        else
	          (interruptedWork = workInProgress),
	            resetContextDependencies(),
	            resetHooksOnUnwind(interruptedWork),
	            (thenableState = null),
	            (thenableIndexCounter = 0),
	            (interruptedWork = workInProgress);
	        for (; null !== interruptedWork; )
	          unwindInterruptedWork(interruptedWork.alternate, interruptedWork),
	            (interruptedWork = interruptedWork.return);
	        workInProgress = null;
	      }
	    }
	    function prepareFreshStack(root, lanes) {
	      var timeoutHandle = root.timeoutHandle;
	      timeoutHandle !== noTimeout &&
	        ((root.timeoutHandle = noTimeout), cancelTimeout(timeoutHandle));
	      timeoutHandle = root.cancelPendingCommit;
	      null !== timeoutHandle &&
	        ((root.cancelPendingCommit = null), timeoutHandle());
	      resetWorkInProgressStack();
	      workInProgressRoot = root;
	      workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
	      workInProgressRootRenderLanes = lanes;
	      workInProgressSuspendedReason = NotSuspended;
	      workInProgressThrownValue = null;
	      workInProgressRootDidSkipSuspendedSiblings = false;
	      workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
	      workInProgressRootDidAttachPingListener = false;
	      workInProgressRootExitStatus = RootInProgress;
	      workInProgressSuspendedRetryLanes =
	        workInProgressDeferredLane =
	        workInProgressRootPingedLanes =
	        workInProgressRootInterleavedUpdatedLanes =
	        workInProgressRootSkippedLanes =
	          0;
	      workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =
	        null;
	      workInProgressRootDidIncludeRecursiveRenderUpdate = false;
	      0 !== (lanes & 8) && (lanes |= lanes & 32);
	      var allEntangledLanes = root.entangledLanes;
	      if (0 !== allEntangledLanes)
	        for (
	          root = root.entanglements, allEntangledLanes &= lanes;
	          0 < allEntangledLanes;

	        ) {
	          var index = 31 - clz32(allEntangledLanes),
	            lane = 1 << index;
	          lanes |= root[index];
	          allEntangledLanes &= ~lane;
	        }
	      entangledRenderLanes = lanes;
	      finishQueueingConcurrentUpdates();
	      lanes = getCurrentTime();
	      1e3 < lanes - lastResetTime &&
	        ((ReactSharedInternals.recentlyCreatedOwnerStacks = 0),
	        (lastResetTime = lanes));
	      ReactStrictModeWarnings.discardPendingWarnings();
	      return timeoutHandle;
	    }
	    function handleThrow(root, thrownValue) {
	      currentlyRenderingFiber = null;
	      ReactSharedInternals.H = ContextOnlyDispatcher;
	      ReactSharedInternals.getCurrentStack = null;
	      isRendering = false;
	      current = null;
	      thrownValue === SuspenseException ||
	      thrownValue === SuspenseActionException
	        ? ((thrownValue = getSuspendedThenable()),
	          (workInProgressSuspendedReason = SuspendedOnImmediate))
	        : thrownValue === SuspenseyCommitException
	          ? ((thrownValue = getSuspendedThenable()),
	            (workInProgressSuspendedReason = SuspendedOnInstance))
	          : (workInProgressSuspendedReason =
	              thrownValue === SelectiveHydrationException
	                ? SuspendedOnHydration
	                : null !== thrownValue &&
	                    "object" === typeof thrownValue &&
	                    "function" === typeof thrownValue.then
	                  ? SuspendedOnDeprecatedThrowPromise
	                  : SuspendedOnError);
	      workInProgressThrownValue = thrownValue;
	      var erroredWork = workInProgress;
	      if (null === erroredWork)
	        (workInProgressRootExitStatus = RootFatalErrored),
	          logUncaughtError(
	            root,
	            createCapturedValueAtFiber(thrownValue, root.current)
	          );
	      else
	        switch (
	          (erroredWork.mode & ProfileMode &&
	            stopProfilerTimerIfRunningAndRecordDuration(erroredWork),
	          markComponentRenderStopped(),
	          workInProgressSuspendedReason)
	        ) {
	          case SuspendedOnError:
	            null !== injectedProfilingHooks &&
	              "function" ===
	                typeof injectedProfilingHooks.markComponentErrored &&
	              injectedProfilingHooks.markComponentErrored(
	                erroredWork,
	                thrownValue,
	                workInProgressRootRenderLanes
	              );
	            break;
	          case SuspendedOnData:
	          case SuspendedOnAction:
	          case SuspendedOnImmediate:
	          case SuspendedOnDeprecatedThrowPromise:
	          case SuspendedAndReadyToContinue:
	            null !== injectedProfilingHooks &&
	              "function" ===
	                typeof injectedProfilingHooks.markComponentSuspended &&
	              injectedProfilingHooks.markComponentSuspended(
	                erroredWork,
	                thrownValue,
	                workInProgressRootRenderLanes
	              );
	        }
	    }
	    function pushDispatcher() {
	      var prevDispatcher = ReactSharedInternals.H;
	      ReactSharedInternals.H = ContextOnlyDispatcher;
	      return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
	    }
	    function pushAsyncDispatcher() {
	      var prevAsyncDispatcher = ReactSharedInternals.A;
	      ReactSharedInternals.A = DefaultAsyncDispatcher;
	      return prevAsyncDispatcher;
	    }
	    function renderDidSuspendDelayIfPossible() {
	      workInProgressRootExitStatus = RootSuspendedWithDelay;
	      workInProgressRootDidSkipSuspendedSiblings ||
	        ((workInProgressRootRenderLanes & 4194048) !==
	          workInProgressRootRenderLanes &&
	          null !== suspenseHandlerStackCursor.current) ||
	        (workInProgressRootIsPrerendering = true);
	      (0 === (workInProgressRootSkippedLanes & 134217727) &&
	        0 === (workInProgressRootInterleavedUpdatedLanes & 134217727)) ||
	        null === workInProgressRoot ||
	        markRootSuspended(
	          workInProgressRoot,
	          workInProgressRootRenderLanes,
	          workInProgressDeferredLane,
	          false
	        );
	    }
	    function renderRootSync(root, lanes, shouldYieldForPrerendering) {
	      var prevExecutionContext = executionContext;
	      executionContext |= RenderContext;
	      var prevDispatcher = pushDispatcher(),
	        prevAsyncDispatcher = pushAsyncDispatcher();
	      if (
	        workInProgressRoot !== root ||
	        workInProgressRootRenderLanes !== lanes
	      ) {
	        if (isDevToolsPresent) {
	          var memoizedUpdaters = root.memoizedUpdaters;
	          0 < memoizedUpdaters.size &&
	            (restorePendingUpdaters(root, workInProgressRootRenderLanes),
	            memoizedUpdaters.clear());
	          movePendingFibersToMemoized(root, lanes);
	        }
	        workInProgressTransitions = null;
	        prepareFreshStack(root, lanes);
	      }
	      markRenderStarted(lanes);
	      lanes = false;
	      memoizedUpdaters = workInProgressRootExitStatus;
	      a: do
	        try {
	          if (
	            workInProgressSuspendedReason !== NotSuspended &&
	            null !== workInProgress
	          ) {
	            var unitOfWork = workInProgress,
	              thrownValue = workInProgressThrownValue;
	            switch (workInProgressSuspendedReason) {
	              case SuspendedOnHydration:
	                resetWorkInProgressStack();
	                memoizedUpdaters = RootSuspendedAtTheShell;
	                break a;
	              case SuspendedOnImmediate:
	              case SuspendedOnData:
	              case SuspendedOnAction:
	              case SuspendedOnDeprecatedThrowPromise:
	                null === suspenseHandlerStackCursor.current && (lanes = true);
	                var reason = workInProgressSuspendedReason;
	                workInProgressSuspendedReason = NotSuspended;
	                workInProgressThrownValue = null;
	                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
	                if (
	                  shouldYieldForPrerendering &&
	                  workInProgressRootIsPrerendering
	                ) {
	                  memoizedUpdaters = RootInProgress;
	                  break a;
	                }
	                break;
	              default:
	                (reason = workInProgressSuspendedReason),
	                  (workInProgressSuspendedReason = NotSuspended),
	                  (workInProgressThrownValue = null),
	                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
	            }
	          }
	          workLoopSync();
	          memoizedUpdaters = workInProgressRootExitStatus;
	          break;
	        } catch (thrownValue$8) {
	          handleThrow(root, thrownValue$8);
	        }
	      while (1);
	      lanes && root.shellSuspendCounter++;
	      resetContextDependencies();
	      executionContext = prevExecutionContext;
	      ReactSharedInternals.H = prevDispatcher;
	      ReactSharedInternals.A = prevAsyncDispatcher;
	      markRenderStopped();
	      null === workInProgress &&
	        ((workInProgressRoot = null),
	        (workInProgressRootRenderLanes = 0),
	        finishQueueingConcurrentUpdates());
	      return memoizedUpdaters;
	    }
	    function workLoopSync() {
	      for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
	    }
	    function renderRootConcurrent(root, lanes) {
	      var prevExecutionContext = executionContext;
	      executionContext |= RenderContext;
	      var prevDispatcher = pushDispatcher(),
	        prevAsyncDispatcher = pushAsyncDispatcher();
	      if (
	        workInProgressRoot !== root ||
	        workInProgressRootRenderLanes !== lanes
	      ) {
	        if (isDevToolsPresent) {
	          var memoizedUpdaters = root.memoizedUpdaters;
	          0 < memoizedUpdaters.size &&
	            (restorePendingUpdaters(root, workInProgressRootRenderLanes),
	            memoizedUpdaters.clear());
	          movePendingFibersToMemoized(root, lanes);
	        }
	        workInProgressTransitions = null;
	        workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
	        prepareFreshStack(root, lanes);
	      } else
	        workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
	          root,
	          lanes
	        );
	      markRenderStarted(lanes);
	      a: do
	        try {
	          if (
	            workInProgressSuspendedReason !== NotSuspended &&
	            null !== workInProgress
	          )
	            b: switch (
	              ((lanes = workInProgress),
	              (memoizedUpdaters = workInProgressThrownValue),
	              workInProgressSuspendedReason)
	            ) {
	              case SuspendedOnError:
	                workInProgressSuspendedReason = NotSuspended;
	                workInProgressThrownValue = null;
	                throwAndUnwindWorkLoop(
	                  root,
	                  lanes,
	                  memoizedUpdaters,
	                  SuspendedOnError
	                );
	                break;
	              case SuspendedOnData:
	              case SuspendedOnAction:
	                if (isThenableResolved(memoizedUpdaters)) {
	                  workInProgressSuspendedReason = NotSuspended;
	                  workInProgressThrownValue = null;
	                  replaySuspendedUnitOfWork(lanes);
	                  break;
	                }
	                lanes = function () {
	                  (workInProgressSuspendedReason !== SuspendedOnData &&
	                    workInProgressSuspendedReason !== SuspendedOnAction) ||
	                    workInProgressRoot !== root ||
	                    (workInProgressSuspendedReason =
	                      SuspendedAndReadyToContinue);
	                  ensureRootIsScheduled(root);
	                };
	                memoizedUpdaters.then(lanes, lanes);
	                break a;
	              case SuspendedOnImmediate:
	                workInProgressSuspendedReason = SuspendedAndReadyToContinue;
	                break a;
	              case SuspendedOnInstance:
	                workInProgressSuspendedReason =
	                  SuspendedOnInstanceAndReadyToContinue;
	                break a;
	              case SuspendedAndReadyToContinue:
	                isThenableResolved(memoizedUpdaters)
	                  ? ((workInProgressSuspendedReason = NotSuspended),
	                    (workInProgressThrownValue = null),
	                    replaySuspendedUnitOfWork(lanes))
	                  : ((workInProgressSuspendedReason = NotSuspended),
	                    (workInProgressThrownValue = null),
	                    throwAndUnwindWorkLoop(
	                      root,
	                      lanes,
	                      memoizedUpdaters,
	                      SuspendedAndReadyToContinue
	                    ));
	                break;
	              case SuspendedOnInstanceAndReadyToContinue:
	                var resource = null;
	                switch (workInProgress.tag) {
	                  case 26:
	                    resource = workInProgress.memoizedState;
	                  case 5:
	                  case 27:
	                    var hostFiber = workInProgress;
	                    if (resource ? preloadResource(resource) : 1) {
	                      workInProgressSuspendedReason = NotSuspended;
	                      workInProgressThrownValue = null;
	                      var sibling = hostFiber.sibling;
	                      if (null !== sibling) workInProgress = sibling;
	                      else {
	                        var returnFiber = hostFiber.return;
	                        null !== returnFiber
	                          ? ((workInProgress = returnFiber),
	                            completeUnitOfWork(returnFiber))
	                          : (workInProgress = null);
	                      }
	                      break b;
	                    }
	                    break;
	                  default:
	                    console.error(
	                      "Unexpected type of fiber triggered a suspensey commit. This is a bug in React."
	                    );
	                }
	                workInProgressSuspendedReason = NotSuspended;
	                workInProgressThrownValue = null;
	                throwAndUnwindWorkLoop(
	                  root,
	                  lanes,
	                  memoizedUpdaters,
	                  SuspendedOnInstanceAndReadyToContinue
	                );
	                break;
	              case SuspendedOnDeprecatedThrowPromise:
	                workInProgressSuspendedReason = NotSuspended;
	                workInProgressThrownValue = null;
	                throwAndUnwindWorkLoop(
	                  root,
	                  lanes,
	                  memoizedUpdaters,
	                  SuspendedOnDeprecatedThrowPromise
	                );
	                break;
	              case SuspendedOnHydration:
	                resetWorkInProgressStack();
	                workInProgressRootExitStatus = RootSuspendedAtTheShell;
	                break a;
	              default:
	                throw Error(
	                  "Unexpected SuspendedReason. This is a bug in React."
	                );
	            }
	          null !== ReactSharedInternals.actQueue
	            ? workLoopSync()
	            : workLoopConcurrentByScheduler();
	          break;
	        } catch (thrownValue$9) {
	          handleThrow(root, thrownValue$9);
	        }
	      while (1);
	      resetContextDependencies();
	      ReactSharedInternals.H = prevDispatcher;
	      ReactSharedInternals.A = prevAsyncDispatcher;
	      executionContext = prevExecutionContext;
	      if (null !== workInProgress)
	        return (
	          null !== injectedProfilingHooks &&
	            "function" === typeof injectedProfilingHooks.markRenderYielded &&
	            injectedProfilingHooks.markRenderYielded(),
	          RootInProgress
	        );
	      markRenderStopped();
	      workInProgressRoot = null;
	      workInProgressRootRenderLanes = 0;
	      finishQueueingConcurrentUpdates();
	      return workInProgressRootExitStatus;
	    }
	    function workLoopConcurrentByScheduler() {
	      for (; null !== workInProgress && !shouldYield(); )
	        performUnitOfWork(workInProgress);
	    }
	    function performUnitOfWork(unitOfWork) {
	      var current = unitOfWork.alternate;
	      (unitOfWork.mode & ProfileMode) !== NoMode
	        ? (startProfilerTimer(unitOfWork),
	          (current = runWithFiberInDEV(
	            unitOfWork,
	            beginWork,
	            current,
	            unitOfWork,
	            entangledRenderLanes
	          )),
	          stopProfilerTimerIfRunningAndRecordDuration(unitOfWork))
	        : (current = runWithFiberInDEV(
	            unitOfWork,
	            beginWork,
	            current,
	            unitOfWork,
	            entangledRenderLanes
	          ));
	      unitOfWork.memoizedProps = unitOfWork.pendingProps;
	      null === current
	        ? completeUnitOfWork(unitOfWork)
	        : (workInProgress = current);
	    }
	    function replaySuspendedUnitOfWork(unitOfWork) {
	      var next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);
	      unitOfWork.memoizedProps = unitOfWork.pendingProps;
	      null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
	    }
	    function replayBeginWork(unitOfWork) {
	      var current = unitOfWork.alternate,
	        isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;
	      isProfilingMode && startProfilerTimer(unitOfWork);
	      switch (unitOfWork.tag) {
	        case 15:
	        case 0:
	          current = replayFunctionComponent(
	            current,
	            unitOfWork,
	            unitOfWork.pendingProps,
	            unitOfWork.type,
	            void 0,
	            workInProgressRootRenderLanes
	          );
	          break;
	        case 11:
	          current = replayFunctionComponent(
	            current,
	            unitOfWork,
	            unitOfWork.pendingProps,
	            unitOfWork.type.render,
	            unitOfWork.ref,
	            workInProgressRootRenderLanes
	          );
	          break;
	        case 5:
	          resetHooksOnUnwind(unitOfWork);
	        default:
	          unwindInterruptedWork(current, unitOfWork),
	            (unitOfWork = workInProgress =
	              resetWorkInProgress(unitOfWork, entangledRenderLanes)),
	            (current = beginWork(current, unitOfWork, entangledRenderLanes));
	      }
	      isProfilingMode &&
	        stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);
	      return current;
	    }
	    function throwAndUnwindWorkLoop(
	      root,
	      unitOfWork,
	      thrownValue,
	      suspendedReason
	    ) {
	      resetContextDependencies();
	      resetHooksOnUnwind(unitOfWork);
	      thenableState = null;
	      thenableIndexCounter = 0;
	      var returnFiber = unitOfWork.return;
	      try {
	        if (
	          throwException(
	            root,
	            returnFiber,
	            unitOfWork,
	            thrownValue,
	            workInProgressRootRenderLanes
	          )
	        ) {
	          workInProgressRootExitStatus = RootFatalErrored;
	          logUncaughtError(
	            root,
	            createCapturedValueAtFiber(thrownValue, root.current)
	          );
	          workInProgress = null;
	          return;
	        }
	      } catch (error) {
	        if (null !== returnFiber) throw ((workInProgress = returnFiber), error);
	        workInProgressRootExitStatus = RootFatalErrored;
	        logUncaughtError(
	          root,
	          createCapturedValueAtFiber(thrownValue, root.current)
	        );
	        workInProgress = null;
	        return;
	      }
	      if (unitOfWork.flags & 32768) {
	        if (isHydrating || suspendedReason === SuspendedOnError) root = true;
	        else if (
	          workInProgressRootIsPrerendering ||
	          0 !== (workInProgressRootRenderLanes & 536870912)
	        )
	          root = false;
	        else if (
	          ((workInProgressRootDidSkipSuspendedSiblings = root = true),
	          suspendedReason === SuspendedOnData ||
	            suspendedReason === SuspendedOnAction ||
	            suspendedReason === SuspendedOnImmediate ||
	            suspendedReason === SuspendedOnDeprecatedThrowPromise)
	        )
	          (suspendedReason = suspenseHandlerStackCursor.current),
	            null !== suspendedReason &&
	              13 === suspendedReason.tag &&
	              (suspendedReason.flags |= 16384);
	        unwindUnitOfWork(unitOfWork, root);
	      } else completeUnitOfWork(unitOfWork);
	    }
	    function completeUnitOfWork(unitOfWork) {
	      var completedWork = unitOfWork;
	      do {
	        if (0 !== (completedWork.flags & 32768)) {
	          unwindUnitOfWork(
	            completedWork,
	            workInProgressRootDidSkipSuspendedSiblings
	          );
	          return;
	        }
	        var current = completedWork.alternate;
	        unitOfWork = completedWork.return;
	        startProfilerTimer(completedWork);
	        current = runWithFiberInDEV(
	          completedWork,
	          completeWork,
	          current,
	          completedWork,
	          entangledRenderLanes
	        );
	        (completedWork.mode & ProfileMode) !== NoMode &&
	          stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);
	        if (null !== current) {
	          workInProgress = current;
	          return;
	        }
	        completedWork = completedWork.sibling;
	        if (null !== completedWork) {
	          workInProgress = completedWork;
	          return;
	        }
	        workInProgress = completedWork = unitOfWork;
	      } while (null !== completedWork);
	      workInProgressRootExitStatus === RootInProgress &&
	        (workInProgressRootExitStatus = RootCompleted);
	    }
	    function unwindUnitOfWork(unitOfWork, skipSiblings) {
	      do {
	        var next = unwindWork(unitOfWork.alternate, unitOfWork);
	        if (null !== next) {
	          next.flags &= 32767;
	          workInProgress = next;
	          return;
	        }
	        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
	          stopProfilerTimerIfRunningAndRecordIncompleteDuration(unitOfWork);
	          next = unitOfWork.actualDuration;
	          for (var child = unitOfWork.child; null !== child; )
	            (next += child.actualDuration), (child = child.sibling);
	          unitOfWork.actualDuration = next;
	        }
	        next = unitOfWork.return;
	        null !== next &&
	          ((next.flags |= 32768),
	          (next.subtreeFlags = 0),
	          (next.deletions = null));
	        if (
	          !skipSiblings &&
	          ((unitOfWork = unitOfWork.sibling), null !== unitOfWork)
	        ) {
	          workInProgress = unitOfWork;
	          return;
	        }
	        workInProgress = unitOfWork = next;
	      } while (null !== unitOfWork);
	      workInProgressRootExitStatus = RootSuspendedAtTheShell;
	      workInProgress = null;
	    }
	    function commitRoot(
	      root,
	      finishedWork,
	      lanes,
	      recoverableErrors,
	      transitions,
	      didIncludeRenderPhaseUpdate,
	      spawnedLane,
	      updatedLanes,
	      suspendedRetryLanes
	    ) {
	      root.cancelPendingCommit = null;
	      do flushPendingEffects();
	      while (pendingEffectsStatus !== NO_PENDING_EFFECTS);
	      ReactStrictModeWarnings.flushLegacyContextWarning();
	      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
	        throw Error("Should not already be working.");
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markCommitStarted &&
	        injectedProfilingHooks.markCommitStarted(lanes);
	      if (null === finishedWork) markCommitStopped();
	      else {
	        0 === lanes &&
	          console.error(
	            "finishedLanes should not be empty during a commit. This is a bug in React."
	          );
	        if (finishedWork === root.current)
	          throw Error(
	            "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
	          );
	        didIncludeRenderPhaseUpdate =
	          finishedWork.lanes | finishedWork.childLanes;
	        didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
	        markRootFinished(
	          root,
	          lanes,
	          didIncludeRenderPhaseUpdate,
	          spawnedLane,
	          updatedLanes,
	          suspendedRetryLanes
	        );
	        root === workInProgressRoot &&
	          ((workInProgress = workInProgressRoot = null),
	          (workInProgressRootRenderLanes = 0));
	        pendingFinishedWork = finishedWork;
	        pendingEffectsRoot = root;
	        pendingEffectsLanes = lanes;
	        pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
	        pendingPassiveTransitions = transitions;
	        pendingRecoverableErrors = recoverableErrors;
	        0 !== (finishedWork.subtreeFlags & 10256) ||
	        0 !== (finishedWork.flags & 10256)
	          ? ((root.callbackNode = null),
	            (root.callbackPriority = 0),
	            scheduleCallback$1(NormalPriority$1, function () {
	              flushPassiveEffects();
	              return null;
	            }))
	          : ((root.callbackNode = null), (root.callbackPriority = 0));
	        commitStartTime = now();
	        recoverableErrors = 0 !== (finishedWork.flags & 13878);
	        if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
	          recoverableErrors = ReactSharedInternals.T;
	          ReactSharedInternals.T = null;
	          transitions = ReactDOMSharedInternals.p;
	          ReactDOMSharedInternals.p = DiscreteEventPriority;
	          spawnedLane = executionContext;
	          executionContext |= CommitContext;
	          try {
	            commitBeforeMutationEffects(root, finishedWork);
	          } finally {
	            (executionContext = spawnedLane),
	              (ReactDOMSharedInternals.p = transitions),
	              (ReactSharedInternals.T = recoverableErrors);
	          }
	        }
	        pendingEffectsStatus = PENDING_MUTATION_PHASE;
	        flushMutationEffects();
	        flushLayoutEffects();
	        flushSpawnedWork();
	      }
	    }
	    function flushMutationEffects() {
	      if (pendingEffectsStatus === PENDING_MUTATION_PHASE) {
	        pendingEffectsStatus = NO_PENDING_EFFECTS;
	        var root = pendingEffectsRoot,
	          finishedWork = pendingFinishedWork,
	          lanes = pendingEffectsLanes,
	          rootMutationHasEffect = 0 !== (finishedWork.flags & 13878);
	        if (
	          0 !== (finishedWork.subtreeFlags & 13878) ||
	          rootMutationHasEffect
	        ) {
	          rootMutationHasEffect = ReactSharedInternals.T;
	          ReactSharedInternals.T = null;
	          var previousPriority = ReactDOMSharedInternals.p;
	          ReactDOMSharedInternals.p = DiscreteEventPriority;
	          var prevExecutionContext = executionContext;
	          executionContext |= CommitContext;
	          try {
	            inProgressLanes = lanes;
	            inProgressRoot = root;
	            commitMutationEffectsOnFiber(finishedWork, root);
	            inProgressRoot = inProgressLanes = null;
	            lanes = selectionInformation;
	            var curFocusedElem = getActiveElementDeep(root.containerInfo),
	              priorFocusedElem = lanes.focusedElem,
	              priorSelectionRange = lanes.selectionRange;
	            if (
	              curFocusedElem !== priorFocusedElem &&
	              priorFocusedElem &&
	              priorFocusedElem.ownerDocument &&
	              containsNode(
	                priorFocusedElem.ownerDocument.documentElement,
	                priorFocusedElem
	              )
	            ) {
	              if (
	                null !== priorSelectionRange &&
	                hasSelectionCapabilities(priorFocusedElem)
	              ) {
	                var start = priorSelectionRange.start,
	                  end = priorSelectionRange.end;
	                void 0 === end && (end = start);
	                if ("selectionStart" in priorFocusedElem)
	                  (priorFocusedElem.selectionStart = start),
	                    (priorFocusedElem.selectionEnd = Math.min(
	                      end,
	                      priorFocusedElem.value.length
	                    ));
	                else {
	                  var doc = priorFocusedElem.ownerDocument || document,
	                    win = (doc && doc.defaultView) || window;
	                  if (win.getSelection) {
	                    var selection = win.getSelection(),
	                      length = priorFocusedElem.textContent.length,
	                      start$jscomp$0 = Math.min(
	                        priorSelectionRange.start,
	                        length
	                      ),
	                      end$jscomp$0 =
	                        void 0 === priorSelectionRange.end
	                          ? start$jscomp$0
	                          : Math.min(priorSelectionRange.end, length);
	                    !selection.extend &&
	                      start$jscomp$0 > end$jscomp$0 &&
	                      ((curFocusedElem = end$jscomp$0),
	                      (end$jscomp$0 = start$jscomp$0),
	                      (start$jscomp$0 = curFocusedElem));
	                    var startMarker = getNodeForCharacterOffset(
	                        priorFocusedElem,
	                        start$jscomp$0
	                      ),
	                      endMarker = getNodeForCharacterOffset(
	                        priorFocusedElem,
	                        end$jscomp$0
	                      );
	                    if (
	                      startMarker &&
	                      endMarker &&
	                      (1 !== selection.rangeCount ||
	                        selection.anchorNode !== startMarker.node ||
	                        selection.anchorOffset !== startMarker.offset ||
	                        selection.focusNode !== endMarker.node ||
	                        selection.focusOffset !== endMarker.offset)
	                    ) {
	                      var range = doc.createRange();
	                      range.setStart(startMarker.node, startMarker.offset);
	                      selection.removeAllRanges();
	                      start$jscomp$0 > end$jscomp$0
	                        ? (selection.addRange(range),
	                          selection.extend(endMarker.node, endMarker.offset))
	                        : (range.setEnd(endMarker.node, endMarker.offset),
	                          selection.addRange(range));
	                    }
	                  }
	                }
	              }
	              doc = [];
	              for (
	                selection = priorFocusedElem;
	                (selection = selection.parentNode);

	              )
	                1 === selection.nodeType &&
	                  doc.push({
	                    element: selection,
	                    left: selection.scrollLeft,
	                    top: selection.scrollTop
	                  });
	              "function" === typeof priorFocusedElem.focus &&
	                priorFocusedElem.focus();
	              for (
	                priorFocusedElem = 0;
	                priorFocusedElem < doc.length;
	                priorFocusedElem++
	              ) {
	                var info = doc[priorFocusedElem];
	                info.element.scrollLeft = info.left;
	                info.element.scrollTop = info.top;
	              }
	            }
	            _enabled = !!eventsEnabled;
	            selectionInformation = eventsEnabled = null;
	          } finally {
	            (executionContext = prevExecutionContext),
	              (ReactDOMSharedInternals.p = previousPriority),
	              (ReactSharedInternals.T = rootMutationHasEffect);
	          }
	        }
	        root.current = finishedWork;
	        pendingEffectsStatus = PENDING_LAYOUT_PHASE;
	      }
	    }
	    function flushLayoutEffects() {
	      if (pendingEffectsStatus === PENDING_LAYOUT_PHASE) {
	        pendingEffectsStatus = NO_PENDING_EFFECTS;
	        var root = pendingEffectsRoot,
	          finishedWork = pendingFinishedWork,
	          lanes = pendingEffectsLanes,
	          rootHasLayoutEffect = 0 !== (finishedWork.flags & 8772);
	        if (0 !== (finishedWork.subtreeFlags & 8772) || rootHasLayoutEffect) {
	          rootHasLayoutEffect = ReactSharedInternals.T;
	          ReactSharedInternals.T = null;
	          var previousPriority = ReactDOMSharedInternals.p;
	          ReactDOMSharedInternals.p = DiscreteEventPriority;
	          var prevExecutionContext = executionContext;
	          executionContext |= CommitContext;
	          try {
	            null !== injectedProfilingHooks &&
	              "function" ===
	                typeof injectedProfilingHooks.markLayoutEffectsStarted &&
	              injectedProfilingHooks.markLayoutEffectsStarted(lanes),
	              (inProgressLanes = lanes),
	              (inProgressRoot = root),
	              commitLayoutEffectOnFiber(
	                root,
	                finishedWork.alternate,
	                finishedWork
	              ),
	              (inProgressRoot = inProgressLanes = null),
	              null !== injectedProfilingHooks &&
	                "function" ===
	                  typeof injectedProfilingHooks.markLayoutEffectsStopped &&
	                injectedProfilingHooks.markLayoutEffectsStopped();
	          } finally {
	            (executionContext = prevExecutionContext),
	              (ReactDOMSharedInternals.p = previousPriority),
	              (ReactSharedInternals.T = rootHasLayoutEffect);
	          }
	        }
	        pendingEffectsStatus = PENDING_AFTER_MUTATION_PHASE;
	      }
	    }
	    function flushSpawnedWork() {
	      if (
	        pendingEffectsStatus === PENDING_SPAWNED_WORK ||
	        pendingEffectsStatus === PENDING_AFTER_MUTATION_PHASE
	      ) {
	        pendingEffectsStatus = NO_PENDING_EFFECTS;
	        requestPaint();
	        var root = pendingEffectsRoot,
	          finishedWork = pendingFinishedWork,
	          lanes = pendingEffectsLanes,
	          recoverableErrors = pendingRecoverableErrors,
	          rootDidHavePassiveEffects =
	            0 !== (finishedWork.subtreeFlags & 10256) ||
	            0 !== (finishedWork.flags & 10256);
	        rootDidHavePassiveEffects
	          ? (pendingEffectsStatus = PENDING_PASSIVE_PHASE)
	          : ((pendingEffectsStatus = NO_PENDING_EFFECTS),
	            (pendingFinishedWork = pendingEffectsRoot = null),
	            releaseRootPooledCache(root, root.pendingLanes),
	            (nestedPassiveUpdateCount = 0),
	            (rootWithPassiveNestedUpdates = null));
	        var remainingLanes = root.pendingLanes;
	        0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
	        rootDidHavePassiveEffects || commitDoubleInvokeEffectsInDEV(root);
	        rootDidHavePassiveEffects = lanesToEventPriority(lanes);
	        finishedWork = finishedWork.stateNode;
	        if (
	          injectedHook &&
	          "function" === typeof injectedHook.onCommitFiberRoot
	        )
	          try {
	            var didError = 128 === (finishedWork.current.flags & 128);
	            switch (rootDidHavePassiveEffects) {
	              case DiscreteEventPriority:
	                var schedulerPriority = ImmediatePriority;
	                break;
	              case ContinuousEventPriority:
	                schedulerPriority = UserBlockingPriority;
	                break;
	              case DefaultEventPriority:
	                schedulerPriority = NormalPriority$1;
	                break;
	              case IdleEventPriority:
	                schedulerPriority = IdlePriority;
	                break;
	              default:
	                schedulerPriority = NormalPriority$1;
	            }
	            injectedHook.onCommitFiberRoot(
	              rendererID,
	              finishedWork,
	              schedulerPriority,
	              didError
	            );
	          } catch (err) {
	            hasLoggedError ||
	              ((hasLoggedError = true),
	              console.error(
	                "React instrumentation encountered an error: %s",
	                err
	              ));
	          }
	        isDevToolsPresent && root.memoizedUpdaters.clear();
	        onCommitRoot();
	        if (null !== recoverableErrors) {
	          didError = ReactSharedInternals.T;
	          schedulerPriority = ReactDOMSharedInternals.p;
	          ReactDOMSharedInternals.p = DiscreteEventPriority;
	          ReactSharedInternals.T = null;
	          try {
	            var onRecoverableError = root.onRecoverableError;
	            for (
	              finishedWork = 0;
	              finishedWork < recoverableErrors.length;
	              finishedWork++
	            ) {
	              var recoverableError = recoverableErrors[finishedWork],
	                errorInfo = makeErrorInfo(recoverableError.stack);
	              runWithFiberInDEV(
	                recoverableError.source,
	                onRecoverableError,
	                recoverableError.value,
	                errorInfo
	              );
	            }
	          } finally {
	            (ReactSharedInternals.T = didError),
	              (ReactDOMSharedInternals.p = schedulerPriority);
	          }
	        }
	        0 !== (pendingEffectsLanes & 3) && flushPendingEffects();
	        ensureRootIsScheduled(root);
	        remainingLanes = root.pendingLanes;
	        0 !== (lanes & 4194090) && 0 !== (remainingLanes & 42)
	          ? ((nestedUpdateScheduled = true),
	            root === rootWithNestedUpdates
	              ? nestedUpdateCount++
	              : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root)))
	          : (nestedUpdateCount = 0);
	        flushSyncWorkAcrossRoots_impl(0);
	        markCommitStopped();
	      }
	    }
	    function makeErrorInfo(componentStack) {
	      componentStack = { componentStack: componentStack };
	      Object.defineProperty(componentStack, "digest", {
	        get: function () {
	          console.error(
	            'You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.'
	          );
	        }
	      });
	      return componentStack;
	    }
	    function releaseRootPooledCache(root, remainingLanes) {
	      0 === (root.pooledCacheLanes &= remainingLanes) &&
	        ((remainingLanes = root.pooledCache),
	        null != remainingLanes &&
	          ((root.pooledCache = null), releaseCache(remainingLanes)));
	    }
	    function flushPendingEffects(wasDelayedCommit) {
	      flushMutationEffects();
	      flushLayoutEffects();
	      flushSpawnedWork();
	      return flushPassiveEffects();
	    }
	    function flushPassiveEffects() {
	      if (pendingEffectsStatus !== PENDING_PASSIVE_PHASE) return false;
	      var root = pendingEffectsRoot,
	        remainingLanes = pendingEffectsRemainingLanes;
	      pendingEffectsRemainingLanes = 0;
	      var renderPriority = lanesToEventPriority(pendingEffectsLanes),
	        priority =
	          DefaultEventPriority > renderPriority
	            ? DefaultEventPriority
	            : renderPriority;
	      renderPriority = ReactSharedInternals.T;
	      var previousPriority = ReactDOMSharedInternals.p;
	      try {
	        ReactDOMSharedInternals.p = priority;
	        ReactSharedInternals.T = null;
	        priority = pendingPassiveTransitions;
	        pendingPassiveTransitions = null;
	        var root$jscomp$0 = pendingEffectsRoot,
	          lanes = pendingEffectsLanes;
	        pendingEffectsStatus = NO_PENDING_EFFECTS;
	        pendingFinishedWork = pendingEffectsRoot = null;
	        pendingEffectsLanes = 0;
	        if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
	          throw Error("Cannot flush passive effects while already rendering.");
	        isFlushingPassiveEffects = true;
	        didScheduleUpdateDuringPassiveEffects = false;
	        null !== injectedProfilingHooks &&
	          "function" ===
	            typeof injectedProfilingHooks.markPassiveEffectsStarted &&
	          injectedProfilingHooks.markPassiveEffectsStarted(lanes);
	        var prevExecutionContext = executionContext;
	        executionContext |= CommitContext;
	        commitPassiveUnmountOnFiber(root$jscomp$0.current);
	        commitPassiveMountOnFiber(
	          root$jscomp$0,
	          root$jscomp$0.current,
	          lanes,
	          priority
	        );
	        null !== injectedProfilingHooks &&
	          "function" ===
	            typeof injectedProfilingHooks.markPassiveEffectsStopped &&
	          injectedProfilingHooks.markPassiveEffectsStopped();
	        commitDoubleInvokeEffectsInDEV(root$jscomp$0);
	        executionContext = prevExecutionContext;
	        flushSyncWorkAcrossRoots_impl(0);
	        didScheduleUpdateDuringPassiveEffects
	          ? root$jscomp$0 === rootWithPassiveNestedUpdates
	            ? nestedPassiveUpdateCount++
	            : ((nestedPassiveUpdateCount = 0),
	              (rootWithPassiveNestedUpdates = root$jscomp$0))
	          : (nestedPassiveUpdateCount = 0);
	        didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects = false;
	        if (
	          injectedHook &&
	          "function" === typeof injectedHook.onPostCommitFiberRoot
	        )
	          try {
	            injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
	          } catch (err) {
	            hasLoggedError ||
	              ((hasLoggedError = true),
	              console.error(
	                "React instrumentation encountered an error: %s",
	                err
	              ));
	          }
	        var stateNode = root$jscomp$0.current.stateNode;
	        stateNode.effectDuration = 0;
	        stateNode.passiveEffectDuration = 0;
	        return true;
	      } finally {
	        (ReactDOMSharedInternals.p = previousPriority),
	          (ReactSharedInternals.T = renderPriority),
	          releaseRootPooledCache(root, remainingLanes);
	      }
	    }
	    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	      sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
	      sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
	      rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
	      null !== rootFiber &&
	        (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
	    }
	    function captureCommitPhaseError(
	      sourceFiber,
	      nearestMountedAncestor,
	      error
	    ) {
	      isRunningInsertionEffect = false;
	      if (3 === sourceFiber.tag)
	        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
	      else {
	        for (; null !== nearestMountedAncestor; ) {
	          if (3 === nearestMountedAncestor.tag) {
	            captureCommitPhaseErrorOnRoot(
	              nearestMountedAncestor,
	              sourceFiber,
	              error
	            );
	            return;
	          }
	          if (1 === nearestMountedAncestor.tag) {
	            var instance = nearestMountedAncestor.stateNode;
	            if (
	              "function" ===
	                typeof nearestMountedAncestor.type.getDerivedStateFromError ||
	              ("function" === typeof instance.componentDidCatch &&
	                (null === legacyErrorBoundariesThatAlreadyFailed ||
	                  !legacyErrorBoundariesThatAlreadyFailed.has(instance)))
	            ) {
	              sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
	              error = createClassErrorUpdate(2);
	              instance = enqueueUpdate(nearestMountedAncestor, error, 2);
	              null !== instance &&
	                (initializeClassErrorUpdate(
	                  error,
	                  instance,
	                  nearestMountedAncestor,
	                  sourceFiber
	                ),
	                markRootUpdated$1(instance, 2),
	                ensureRootIsScheduled(instance));
	              return;
	            }
	          }
	          nearestMountedAncestor = nearestMountedAncestor.return;
	        }
	        console.error(
	          "Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",
	          error
	        );
	      }
	    }
	    function attachPingListener(root, wakeable, lanes) {
	      var pingCache = root.pingCache;
	      if (null === pingCache) {
	        pingCache = root.pingCache = new PossiblyWeakMap();
	        var threadIDs = new Set();
	        pingCache.set(wakeable, threadIDs);
	      } else
	        (threadIDs = pingCache.get(wakeable)),
	          void 0 === threadIDs &&
	            ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));
	      threadIDs.has(lanes) ||
	        ((workInProgressRootDidAttachPingListener = true),
	        threadIDs.add(lanes),
	        (pingCache = pingSuspendedRoot.bind(null, root, wakeable, lanes)),
	        isDevToolsPresent && restorePendingUpdaters(root, lanes),
	        wakeable.then(pingCache, pingCache));
	    }
	    function pingSuspendedRoot(root, wakeable, pingedLanes) {
	      var pingCache = root.pingCache;
	      null !== pingCache && pingCache.delete(wakeable);
	      root.pingedLanes |= root.suspendedLanes & pingedLanes;
	      root.warmLanes &= ~pingedLanes;
	      isConcurrentActEnvironment() &&
	        null === ReactSharedInternals.actQueue &&
	        console.error(
	          "A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"
	        );
	      workInProgressRoot === root &&
	        (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&
	        (workInProgressRootExitStatus === RootSuspendedWithDelay ||
	        (workInProgressRootExitStatus === RootSuspended &&
	          (workInProgressRootRenderLanes & 62914560) ===
	            workInProgressRootRenderLanes &&
	          now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
	          ? (executionContext & RenderContext) === NoContext &&
	            prepareFreshStack(root, 0)
	          : (workInProgressRootPingedLanes |= pingedLanes),
	        workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes &&
	          (workInProgressSuspendedRetryLanes = 0));
	      ensureRootIsScheduled(root);
	    }
	    function retryTimedOutBoundary(boundaryFiber, retryLane) {
	      0 === retryLane && (retryLane = claimNextRetryLane());
	      boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
	      null !== boundaryFiber &&
	        (markRootUpdated$1(boundaryFiber, retryLane),
	        ensureRootIsScheduled(boundaryFiber));
	    }
	    function retryDehydratedSuspenseBoundary(boundaryFiber) {
	      var suspenseState = boundaryFiber.memoizedState,
	        retryLane = 0;
	      null !== suspenseState && (retryLane = suspenseState.retryLane);
	      retryTimedOutBoundary(boundaryFiber, retryLane);
	    }
	    function resolveRetryWakeable(boundaryFiber, wakeable) {
	      var retryLane = 0;
	      switch (boundaryFiber.tag) {
	        case 13:
	          var retryCache = boundaryFiber.stateNode;
	          var suspenseState = boundaryFiber.memoizedState;
	          null !== suspenseState && (retryLane = suspenseState.retryLane);
	          break;
	        case 19:
	          retryCache = boundaryFiber.stateNode;
	          break;
	        case 22:
	          retryCache = boundaryFiber.stateNode._retryCache;
	          break;
	        default:
	          throw Error(
	            "Pinged unknown suspense boundary type. This is probably a bug in React."
	          );
	      }
	      null !== retryCache && retryCache.delete(wakeable);
	      retryTimedOutBoundary(boundaryFiber, retryLane);
	    }
	    function recursivelyTraverseAndDoubleInvokeEffectsInDEV(
	      root$jscomp$0,
	      parentFiber,
	      isInStrictMode
	    ) {
	      if (0 !== (parentFiber.subtreeFlags & 67117056))
	        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
	          var root = root$jscomp$0,
	            fiber = parentFiber,
	            isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;
	          isStrictModeFiber = isInStrictMode || isStrictModeFiber;
	          22 !== fiber.tag
	            ? fiber.flags & 67108864
	              ? isStrictModeFiber &&
	                runWithFiberInDEV(
	                  fiber,
	                  doubleInvokeEffectsOnFiber,
	                  root,
	                  fiber,
	                  (fiber.mode & NoStrictPassiveEffectsMode) === NoMode
	                )
	              : recursivelyTraverseAndDoubleInvokeEffectsInDEV(
	                  root,
	                  fiber,
	                  isStrictModeFiber
	                )
	            : null === fiber.memoizedState &&
	              (isStrictModeFiber && fiber.flags & 8192
	                ? runWithFiberInDEV(
	                    fiber,
	                    doubleInvokeEffectsOnFiber,
	                    root,
	                    fiber
	                  )
	                : fiber.subtreeFlags & 67108864 &&
	                  runWithFiberInDEV(
	                    fiber,
	                    recursivelyTraverseAndDoubleInvokeEffectsInDEV,
	                    root,
	                    fiber,
	                    isStrictModeFiber
	                  ));
	          parentFiber = parentFiber.sibling;
	        }
	    }
	    function doubleInvokeEffectsOnFiber(root, fiber) {
	      var shouldDoubleInvokePassiveEffects =
	        2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : true;
	      setIsStrictModeForDevtools(true);
	      try {
	        disappearLayoutEffects(fiber),
	          shouldDoubleInvokePassiveEffects && disconnectPassiveEffect(fiber),
	          reappearLayoutEffects(root, fiber.alternate, fiber, false),
	          shouldDoubleInvokePassiveEffects &&
	            reconnectPassiveEffects(root, fiber, 0, null, false);
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }
	    function commitDoubleInvokeEffectsInDEV(root) {
	      var doubleInvokeEffects = true;
	      root.current.mode & (StrictLegacyMode | StrictEffectsMode) ||
	        (doubleInvokeEffects = false);
	      recursivelyTraverseAndDoubleInvokeEffectsInDEV(
	        root,
	        root.current,
	        doubleInvokeEffects
	      );
	    }
	    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
	      if ((executionContext & RenderContext) === NoContext) {
	        var tag = fiber.tag;
	        if (
	          3 === tag ||
	          1 === tag ||
	          0 === tag ||
	          11 === tag ||
	          14 === tag ||
	          15 === tag
	        ) {
	          tag = getComponentNameFromFiber(fiber) || "ReactComponent";
	          if (null !== didWarnStateUpdateForNotYetMountedComponent) {
	            if (didWarnStateUpdateForNotYetMountedComponent.has(tag)) return;
	            didWarnStateUpdateForNotYetMountedComponent.add(tag);
	          } else didWarnStateUpdateForNotYetMountedComponent = new Set([tag]);
	          runWithFiberInDEV(fiber, function () {
	            console.error(
	              "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
	            );
	          });
	        }
	      }
	    }
	    function restorePendingUpdaters(root, lanes) {
	      isDevToolsPresent &&
	        root.memoizedUpdaters.forEach(function (schedulingFiber) {
	          addFiberToLanesMap(root, schedulingFiber, lanes);
	        });
	    }
	    function scheduleCallback$1(priorityLevel, callback) {
	      var actQueue = ReactSharedInternals.actQueue;
	      return null !== actQueue
	        ? (actQueue.push(callback), fakeActCallbackNode$1)
	        : scheduleCallback$3(priorityLevel, callback);
	    }
	    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
	      isConcurrentActEnvironment() &&
	        null === ReactSharedInternals.actQueue &&
	        runWithFiberInDEV(fiber, function () {
	          console.error(
	            "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",
	            getComponentNameFromFiber(fiber)
	          );
	        });
	    }
	    function ensureRootIsScheduled(root) {
	      root !== lastScheduledRoot &&
	        null === root.next &&
	        (null === lastScheduledRoot
	          ? (firstScheduledRoot = lastScheduledRoot = root)
	          : (lastScheduledRoot = lastScheduledRoot.next = root));
	      mightHavePendingSyncWork = true;
	      null !== ReactSharedInternals.actQueue
	        ? didScheduleMicrotask_act ||
	          ((didScheduleMicrotask_act = true), scheduleImmediateRootScheduleTask())
	        : didScheduleMicrotask ||
	          ((didScheduleMicrotask = true), scheduleImmediateRootScheduleTask());
	    }
	    function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
	      if (!isFlushingWork && mightHavePendingSyncWork) {
	        isFlushingWork = true;
	        do {
	          var didPerformSomeWork = false;
	          for (var root = firstScheduledRoot; null !== root; ) {
	            if (0 !== syncTransitionLanes) {
	                var pendingLanes = root.pendingLanes;
	                if (0 === pendingLanes) var nextLanes = 0;
	                else {
	                  var suspendedLanes = root.suspendedLanes,
	                    pingedLanes = root.pingedLanes;
	                  nextLanes =
	                    (1 << (31 - clz32(42 | syncTransitionLanes) + 1)) - 1;
	                  nextLanes &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
	                  nextLanes =
	                    nextLanes & 201326741
	                      ? (nextLanes & 201326741) | 1
	                      : nextLanes
	                        ? nextLanes | 2
	                        : 0;
	                }
	                0 !== nextLanes &&
	                  ((didPerformSomeWork = true),
	                  performSyncWorkOnRoot(root, nextLanes));
	              } else
	                (nextLanes = workInProgressRootRenderLanes),
	                  (nextLanes = getNextLanes(
	                    root,
	                    root === workInProgressRoot ? nextLanes : 0,
	                    null !== root.cancelPendingCommit ||
	                      root.timeoutHandle !== noTimeout
	                  )),
	                  0 === (nextLanes & 3) ||
	                    checkIfRootIsPrerendering(root, nextLanes) ||
	                    ((didPerformSomeWork = true),
	                    performSyncWorkOnRoot(root, nextLanes));
	            root = root.next;
	          }
	        } while (didPerformSomeWork);
	        isFlushingWork = false;
	      }
	    }
	    function processRootScheduleInImmediateTask() {
	      processRootScheduleInMicrotask();
	    }
	    function processRootScheduleInMicrotask() {
	      mightHavePendingSyncWork =
	        didScheduleMicrotask_act =
	        didScheduleMicrotask =
	          false;
	      var syncTransitionLanes = 0;
	      0 !== currentEventTransitionLane &&
	        (shouldAttemptEagerTransition() &&
	          (syncTransitionLanes = currentEventTransitionLane),
	        (currentEventTransitionLane = 0));
	      for (
	        var currentTime = now$1(), prev = null, root = firstScheduledRoot;
	        null !== root;

	      ) {
	        var next = root.next,
	          nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
	        if (0 === nextLanes)
	          (root.next = null),
	            null === prev ? (firstScheduledRoot = next) : (prev.next = next),
	            null === next && (lastScheduledRoot = prev);
	        else if (
	          ((prev = root), 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
	        )
	          mightHavePendingSyncWork = true;
	        root = next;
	      }
	      flushSyncWorkAcrossRoots_impl(syncTransitionLanes);
	    }
	    function scheduleTaskForRootDuringMicrotask(root, currentTime) {
	      for (
	        var suspendedLanes = root.suspendedLanes,
	          pingedLanes = root.pingedLanes,
	          expirationTimes = root.expirationTimes,
	          lanes = root.pendingLanes & -62914561;
	        0 < lanes;

	      ) {
	        var index = 31 - clz32(lanes),
	          lane = 1 << index,
	          expirationTime = expirationTimes[index];
	        if (-1 === expirationTime) {
	          if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
	            expirationTimes[index] = computeExpirationTime(lane, currentTime);
	        } else expirationTime <= currentTime && (root.expiredLanes |= lane);
	        lanes &= ~lane;
	      }
	      currentTime = workInProgressRoot;
	      suspendedLanes = workInProgressRootRenderLanes;
	      suspendedLanes = getNextLanes(
	        root,
	        root === currentTime ? suspendedLanes : 0,
	        null !== root.cancelPendingCommit || root.timeoutHandle !== noTimeout
	      );
	      pingedLanes = root.callbackNode;
	      if (
	        0 === suspendedLanes ||
	        (root === currentTime &&
	          (workInProgressSuspendedReason === SuspendedOnData ||
	            workInProgressSuspendedReason === SuspendedOnAction)) ||
	        null !== root.cancelPendingCommit
	      )
	        return (
	          null !== pingedLanes && cancelCallback(pingedLanes),
	          (root.callbackNode = null),
	          (root.callbackPriority = 0)
	        );
	      if (
	        0 === (suspendedLanes & 3) ||
	        checkIfRootIsPrerendering(root, suspendedLanes)
	      ) {
	        currentTime = suspendedLanes & -suspendedLanes;
	        if (
	          currentTime !== root.callbackPriority ||
	          (null !== ReactSharedInternals.actQueue &&
	            pingedLanes !== fakeActCallbackNode)
	        )
	          cancelCallback(pingedLanes);
	        else return currentTime;
	        switch (lanesToEventPriority(suspendedLanes)) {
	          case DiscreteEventPriority:
	          case ContinuousEventPriority:
	            suspendedLanes = UserBlockingPriority;
	            break;
	          case DefaultEventPriority:
	            suspendedLanes = NormalPriority$1;
	            break;
	          case IdleEventPriority:
	            suspendedLanes = IdlePriority;
	            break;
	          default:
	            suspendedLanes = NormalPriority$1;
	        }
	        pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
	        null !== ReactSharedInternals.actQueue
	          ? (ReactSharedInternals.actQueue.push(pingedLanes),
	            (suspendedLanes = fakeActCallbackNode))
	          : (suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes));
	        root.callbackPriority = currentTime;
	        root.callbackNode = suspendedLanes;
	        return currentTime;
	      }
	      null !== pingedLanes && cancelCallback(pingedLanes);
	      root.callbackPriority = 2;
	      root.callbackNode = null;
	      return 2;
	    }
	    function performWorkOnRootViaSchedulerTask(root, didTimeout) {
	      nestedUpdateScheduled = currentUpdateIsNested = false;
	      if (
	        pendingEffectsStatus !== NO_PENDING_EFFECTS &&
	        pendingEffectsStatus !== PENDING_PASSIVE_PHASE
	      )
	        return (root.callbackNode = null), (root.callbackPriority = 0), null;
	      var originalCallbackNode = root.callbackNode;
	      if (flushPendingEffects() && root.callbackNode !== originalCallbackNode)
	        return null;
	      var workInProgressRootRenderLanes$jscomp$0 =
	        workInProgressRootRenderLanes;
	      workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
	        root,
	        root === workInProgressRoot
	          ? workInProgressRootRenderLanes$jscomp$0
	          : 0,
	        null !== root.cancelPendingCommit || root.timeoutHandle !== noTimeout
	      );
	      if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
	      performWorkOnRoot(
	        root,
	        workInProgressRootRenderLanes$jscomp$0,
	        didTimeout
	      );
	      scheduleTaskForRootDuringMicrotask(root, now$1());
	      return null != root.callbackNode &&
	        root.callbackNode === originalCallbackNode
	        ? performWorkOnRootViaSchedulerTask.bind(null, root)
	        : null;
	    }
	    function performSyncWorkOnRoot(root, lanes) {
	      if (flushPendingEffects()) return null;
	      currentUpdateIsNested = nestedUpdateScheduled;
	      nestedUpdateScheduled = false;
	      performWorkOnRoot(root, lanes, true);
	    }
	    function cancelCallback(callbackNode) {
	      callbackNode !== fakeActCallbackNode &&
	        null !== callbackNode &&
	        cancelCallback$1(callbackNode);
	    }
	    function scheduleImmediateRootScheduleTask() {
	      null !== ReactSharedInternals.actQueue &&
	        ReactSharedInternals.actQueue.push(function () {
	          processRootScheduleInMicrotask();
	          return null;
	        });
	      scheduleMicrotask(function () {
	        (executionContext & (RenderContext | CommitContext)) !== NoContext
	          ? scheduleCallback$3(
	              ImmediatePriority,
	              processRootScheduleInImmediateTask
	            )
	          : processRootScheduleInMicrotask();
	      });
	    }
	    function requestTransitionLane() {
	      0 === currentEventTransitionLane &&
	        (currentEventTransitionLane = claimNextTransitionLane());
	      return currentEventTransitionLane;
	    }
	    function coerceFormActionProp(actionProp) {
	      if (
	        null == actionProp ||
	        "symbol" === typeof actionProp ||
	        "boolean" === typeof actionProp
	      )
	        return null;
	      if ("function" === typeof actionProp) return actionProp;
	      checkAttributeStringCoercion(actionProp, "action");
	      return sanitizeURL("" + actionProp);
	    }
	    function createFormDataWithSubmitter(form, submitter) {
	      var temp = submitter.ownerDocument.createElement("input");
	      temp.name = submitter.name;
	      temp.value = submitter.value;
	      form.id && temp.setAttribute("form", form.id);
	      submitter.parentNode.insertBefore(temp, submitter);
	      form = new FormData(form);
	      temp.parentNode.removeChild(temp);
	      return form;
	    }
	    function extractEvents$1(
	      dispatchQueue,
	      domEventName,
	      maybeTargetInst,
	      nativeEvent,
	      nativeEventTarget
	    ) {
	      if (
	        "submit" === domEventName &&
	        maybeTargetInst &&
	        maybeTargetInst.stateNode === nativeEventTarget
	      ) {
	        var action = coerceFormActionProp(
	            (nativeEventTarget[internalPropsKey] || null).action
	          ),
	          submitter = nativeEvent.submitter;
	        submitter &&
	          ((domEventName = (domEventName = submitter[internalPropsKey] || null)
	            ? coerceFormActionProp(domEventName.formAction)
	            : submitter.getAttribute("formAction")),
	          null !== domEventName &&
	            ((action = domEventName), (submitter = null)));
	        var event = new SyntheticEvent(
	          "action",
	          "action",
	          null,
	          nativeEvent,
	          nativeEventTarget
	        );
	        dispatchQueue.push({
	          event: event,
	          listeners: [
	            {
	              instance: null,
	              listener: function () {
	                if (nativeEvent.defaultPrevented) {
	                  if (0 !== currentEventTransitionLane) {
	                    var formData = submitter
	                        ? createFormDataWithSubmitter(
	                            nativeEventTarget,
	                            submitter
	                          )
	                        : new FormData(nativeEventTarget),
	                      pendingState = {
	                        pending: true,
	                        data: formData,
	                        method: nativeEventTarget.method,
	                        action: action
	                      };
	                    Object.freeze(pendingState);
	                    startHostTransition(
	                      maybeTargetInst,
	                      pendingState,
	                      null,
	                      formData
	                    );
	                  }
	                } else
	                  "function" === typeof action &&
	                    (event.preventDefault(),
	                    (formData = submitter
	                      ? createFormDataWithSubmitter(
	                          nativeEventTarget,
	                          submitter
	                        )
	                      : new FormData(nativeEventTarget)),
	                    (pendingState = {
	                      pending: true,
	                      data: formData,
	                      method: nativeEventTarget.method,
	                      action: action
	                    }),
	                    Object.freeze(pendingState),
	                    startHostTransition(
	                      maybeTargetInst,
	                      pendingState,
	                      action,
	                      formData
	                    ));
	              },
	              currentTarget: nativeEventTarget
	            }
	          ]
	        });
	      }
	    }
	    function executeDispatch(event, listener, currentTarget) {
	      event.currentTarget = currentTarget;
	      try {
	        listener(event);
	      } catch (error) {
	        reportGlobalError(error);
	      }
	      event.currentTarget = null;
	    }
	    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
	      eventSystemFlags = 0 !== (eventSystemFlags & 4);
	      for (var i = 0; i < dispatchQueue.length; i++) {
	        var _dispatchQueue$i = dispatchQueue[i];
	        a: {
	          var previousInstance = void 0,
	            event = _dispatchQueue$i.event;
	          _dispatchQueue$i = _dispatchQueue$i.listeners;
	          if (eventSystemFlags)
	            for (
	              var i$jscomp$0 = _dispatchQueue$i.length - 1;
	              0 <= i$jscomp$0;
	              i$jscomp$0--
	            ) {
	              var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0],
	                instance = _dispatchListeners$i.instance,
	                currentTarget = _dispatchListeners$i.currentTarget;
	              _dispatchListeners$i = _dispatchListeners$i.listener;
	              if (instance !== previousInstance && event.isPropagationStopped())
	                break a;
	              null !== instance
	                ? runWithFiberInDEV(
	                    instance,
	                    executeDispatch,
	                    event,
	                    _dispatchListeners$i,
	                    currentTarget
	                  )
	                : executeDispatch(event, _dispatchListeners$i, currentTarget);
	              previousInstance = instance;
	            }
	          else
	            for (
	              i$jscomp$0 = 0;
	              i$jscomp$0 < _dispatchQueue$i.length;
	              i$jscomp$0++
	            ) {
	              _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
	              instance = _dispatchListeners$i.instance;
	              currentTarget = _dispatchListeners$i.currentTarget;
	              _dispatchListeners$i = _dispatchListeners$i.listener;
	              if (instance !== previousInstance && event.isPropagationStopped())
	                break a;
	              null !== instance
	                ? runWithFiberInDEV(
	                    instance,
	                    executeDispatch,
	                    event,
	                    _dispatchListeners$i,
	                    currentTarget
	                  )
	                : executeDispatch(event, _dispatchListeners$i, currentTarget);
	              previousInstance = instance;
	            }
	        }
	      }
	    }
	    function listenToNonDelegatedEvent(domEventName, targetElement) {
	      nonDelegatedEvents.has(domEventName) ||
	        console.error(
	          'Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',
	          domEventName
	        );
	      var listenerSet = targetElement[internalEventHandlersKey];
	      void 0 === listenerSet &&
	        (listenerSet = targetElement[internalEventHandlersKey] = new Set());
	      var listenerSetKey = domEventName + "__bubble";
	      listenerSet.has(listenerSetKey) ||
	        (addTrappedEventListener(targetElement, domEventName, 2, false),
	        listenerSet.add(listenerSetKey));
	    }
	    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
	      nonDelegatedEvents.has(domEventName) &&
	        !isCapturePhaseListener &&
	        console.error(
	          'Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',
	          domEventName
	        );
	      var eventSystemFlags = 0;
	      isCapturePhaseListener && (eventSystemFlags |= 4);
	      addTrappedEventListener(
	        target,
	        domEventName,
	        eventSystemFlags,
	        isCapturePhaseListener
	      );
	    }
	    function listenToAllSupportedEvents(rootContainerElement) {
	      if (!rootContainerElement[listeningMarker]) {
	        rootContainerElement[listeningMarker] = true;
	        allNativeEvents.forEach(function (domEventName) {
	          "selectionchange" !== domEventName &&
	            (nonDelegatedEvents.has(domEventName) ||
	              listenToNativeEvent(domEventName, false, rootContainerElement),
	            listenToNativeEvent(domEventName, true, rootContainerElement));
	        });
	        var ownerDocument =
	          9 === rootContainerElement.nodeType
	            ? rootContainerElement
	            : rootContainerElement.ownerDocument;
	        null === ownerDocument ||
	          ownerDocument[listeningMarker] ||
	          ((ownerDocument[listeningMarker] = true),
	          listenToNativeEvent("selectionchange", false, ownerDocument));
	      }
	    }
	    function addTrappedEventListener(
	      targetContainer,
	      domEventName,
	      eventSystemFlags,
	      isCapturePhaseListener
	    ) {
	      switch (getEventPriority(domEventName)) {
	        case DiscreteEventPriority:
	          var listenerWrapper = dispatchDiscreteEvent;
	          break;
	        case ContinuousEventPriority:
	          listenerWrapper = dispatchContinuousEvent;
	          break;
	        default:
	          listenerWrapper = dispatchEvent;
	      }
	      eventSystemFlags = listenerWrapper.bind(
	        null,
	        domEventName,
	        eventSystemFlags,
	        targetContainer
	      );
	      listenerWrapper = void 0;
	      !passiveBrowserEventsSupported ||
	        ("touchstart" !== domEventName &&
	          "touchmove" !== domEventName &&
	          "wheel" !== domEventName) ||
	        (listenerWrapper = true);
	      isCapturePhaseListener
	        ? void 0 !== listenerWrapper
	          ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
	              capture: true,
	              passive: listenerWrapper
	            })
	          : targetContainer.addEventListener(domEventName, eventSystemFlags, true)
	        : void 0 !== listenerWrapper
	          ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
	              passive: listenerWrapper
	            })
	          : targetContainer.addEventListener(
	              domEventName,
	              eventSystemFlags,
	              false
	            );
	    }
	    function dispatchEventForPluginEventSystem(
	      domEventName,
	      eventSystemFlags,
	      nativeEvent,
	      targetInst$jscomp$0,
	      targetContainer
	    ) {
	      var ancestorInst = targetInst$jscomp$0;
	      if (
	        0 === (eventSystemFlags & 1) &&
	        0 === (eventSystemFlags & 2) &&
	        null !== targetInst$jscomp$0
	      )
	        a: for (;;) {
	          if (null === targetInst$jscomp$0) return;
	          var nodeTag = targetInst$jscomp$0.tag;
	          if (3 === nodeTag || 4 === nodeTag) {
	            var container = targetInst$jscomp$0.stateNode.containerInfo;
	            if (container === targetContainer) break;
	            if (4 === nodeTag)
	              for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
	                var grandTag = nodeTag.tag;
	                if (
	                  (3 === grandTag || 4 === grandTag) &&
	                  nodeTag.stateNode.containerInfo === targetContainer
	                )
	                  return;
	                nodeTag = nodeTag.return;
	              }
	            for (; null !== container; ) {
	              nodeTag = getClosestInstanceFromNode(container);
	              if (null === nodeTag) return;
	              grandTag = nodeTag.tag;
	              if (
	                5 === grandTag ||
	                6 === grandTag ||
	                26 === grandTag ||
	                27 === grandTag
	              ) {
	                targetInst$jscomp$0 = ancestorInst = nodeTag;
	                continue a;
	              }
	              container = container.parentNode;
	            }
	          }
	          targetInst$jscomp$0 = targetInst$jscomp$0.return;
	        }
	      batchedUpdates$1(function () {
	        var targetInst = ancestorInst,
	          nativeEventTarget = getEventTarget(nativeEvent),
	          dispatchQueue = [];
	        a: {
	          var reactName = topLevelEventsToReactNames.get(domEventName);
	          if (void 0 !== reactName) {
	            var SyntheticEventCtor = SyntheticEvent,
	              reactEventType = domEventName;
	            switch (domEventName) {
	              case "keypress":
	                if (0 === getEventCharCode(nativeEvent)) break a;
	              case "keydown":
	              case "keyup":
	                SyntheticEventCtor = SyntheticKeyboardEvent;
	                break;
	              case "focusin":
	                reactEventType = "focus";
	                SyntheticEventCtor = SyntheticFocusEvent;
	                break;
	              case "focusout":
	                reactEventType = "blur";
	                SyntheticEventCtor = SyntheticFocusEvent;
	                break;
	              case "beforeblur":
	              case "afterblur":
	                SyntheticEventCtor = SyntheticFocusEvent;
	                break;
	              case "click":
	                if (2 === nativeEvent.button) break a;
	              case "auxclick":
	              case "dblclick":
	              case "mousedown":
	              case "mousemove":
	              case "mouseup":
	              case "mouseout":
	              case "mouseover":
	              case "contextmenu":
	                SyntheticEventCtor = SyntheticMouseEvent;
	                break;
	              case "drag":
	              case "dragend":
	              case "dragenter":
	              case "dragexit":
	              case "dragleave":
	              case "dragover":
	              case "dragstart":
	              case "drop":
	                SyntheticEventCtor = SyntheticDragEvent;
	                break;
	              case "touchcancel":
	              case "touchend":
	              case "touchmove":
	              case "touchstart":
	                SyntheticEventCtor = SyntheticTouchEvent;
	                break;
	              case ANIMATION_END:
	              case ANIMATION_ITERATION:
	              case ANIMATION_START:
	                SyntheticEventCtor = SyntheticAnimationEvent;
	                break;
	              case TRANSITION_END:
	                SyntheticEventCtor = SyntheticTransitionEvent;
	                break;
	              case "scroll":
	              case "scrollend":
	                SyntheticEventCtor = SyntheticUIEvent;
	                break;
	              case "wheel":
	                SyntheticEventCtor = SyntheticWheelEvent;
	                break;
	              case "copy":
	              case "cut":
	              case "paste":
	                SyntheticEventCtor = SyntheticClipboardEvent;
	                break;
	              case "gotpointercapture":
	              case "lostpointercapture":
	              case "pointercancel":
	              case "pointerdown":
	              case "pointermove":
	              case "pointerout":
	              case "pointerover":
	              case "pointerup":
	                SyntheticEventCtor = SyntheticPointerEvent;
	                break;
	              case "toggle":
	              case "beforetoggle":
	                SyntheticEventCtor = SyntheticToggleEvent;
	            }
	            var inCapturePhase = 0 !== (eventSystemFlags & 4),
	              accumulateTargetOnly =
	                !inCapturePhase &&
	                ("scroll" === domEventName || "scrollend" === domEventName),
	              reactEventName = inCapturePhase
	                ? null !== reactName
	                  ? reactName + "Capture"
	                  : null
	                : reactName;
	            inCapturePhase = [];
	            for (
	              var instance = targetInst, lastHostComponent;
	              null !== instance;

	            ) {
	              var _instance2 = instance;
	              lastHostComponent = _instance2.stateNode;
	              _instance2 = _instance2.tag;
	              (5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2) ||
	                null === lastHostComponent ||
	                null === reactEventName ||
	                ((_instance2 = getListener(instance, reactEventName)),
	                null != _instance2 &&
	                  inCapturePhase.push(
	                    createDispatchListener(
	                      instance,
	                      _instance2,
	                      lastHostComponent
	                    )
	                  ));
	              if (accumulateTargetOnly) break;
	              instance = instance.return;
	            }
	            0 < inCapturePhase.length &&
	              ((reactName = new SyntheticEventCtor(
	                reactName,
	                reactEventType,
	                null,
	                nativeEvent,
	                nativeEventTarget
	              )),
	              dispatchQueue.push({
	                event: reactName,
	                listeners: inCapturePhase
	              }));
	          }
	        }
	        if (0 === (eventSystemFlags & 7)) {
	          a: {
	            reactName =
	              "mouseover" === domEventName || "pointerover" === domEventName;
	            SyntheticEventCtor =
	              "mouseout" === domEventName || "pointerout" === domEventName;
	            if (
	              reactName &&
	              nativeEvent !== currentReplayingEvent &&
	              (reactEventType =
	                nativeEvent.relatedTarget || nativeEvent.fromElement) &&
	              (getClosestInstanceFromNode(reactEventType) ||
	                reactEventType[internalContainerInstanceKey])
	            )
	              break a;
	            if (SyntheticEventCtor || reactName) {
	              reactName =
	                nativeEventTarget.window === nativeEventTarget
	                  ? nativeEventTarget
	                  : (reactName = nativeEventTarget.ownerDocument)
	                    ? reactName.defaultView || reactName.parentWindow
	                    : window;
	              if (SyntheticEventCtor) {
	                if (
	                  ((reactEventType =
	                    nativeEvent.relatedTarget || nativeEvent.toElement),
	                  (SyntheticEventCtor = targetInst),
	                  (reactEventType = reactEventType
	                    ? getClosestInstanceFromNode(reactEventType)
	                    : null),
	                  null !== reactEventType &&
	                    ((accumulateTargetOnly =
	                      getNearestMountedFiber(reactEventType)),
	                    (inCapturePhase = reactEventType.tag),
	                    reactEventType !== accumulateTargetOnly ||
	                      (5 !== inCapturePhase &&
	                        27 !== inCapturePhase &&
	                        6 !== inCapturePhase)))
	                )
	                  reactEventType = null;
	              } else (SyntheticEventCtor = null), (reactEventType = targetInst);
	              if (SyntheticEventCtor !== reactEventType) {
	                inCapturePhase = SyntheticMouseEvent;
	                _instance2 = "onMouseLeave";
	                reactEventName = "onMouseEnter";
	                instance = "mouse";
	                if (
	                  "pointerout" === domEventName ||
	                  "pointerover" === domEventName
	                )
	                  (inCapturePhase = SyntheticPointerEvent),
	                    (_instance2 = "onPointerLeave"),
	                    (reactEventName = "onPointerEnter"),
	                    (instance = "pointer");
	                accumulateTargetOnly =
	                  null == SyntheticEventCtor
	                    ? reactName
	                    : getNodeFromInstance(SyntheticEventCtor);
	                lastHostComponent =
	                  null == reactEventType
	                    ? reactName
	                    : getNodeFromInstance(reactEventType);
	                reactName = new inCapturePhase(
	                  _instance2,
	                  instance + "leave",
	                  SyntheticEventCtor,
	                  nativeEvent,
	                  nativeEventTarget
	                );
	                reactName.target = accumulateTargetOnly;
	                reactName.relatedTarget = lastHostComponent;
	                _instance2 = null;
	                getClosestInstanceFromNode(nativeEventTarget) === targetInst &&
	                  ((inCapturePhase = new inCapturePhase(
	                    reactEventName,
	                    instance + "enter",
	                    reactEventType,
	                    nativeEvent,
	                    nativeEventTarget
	                  )),
	                  (inCapturePhase.target = lastHostComponent),
	                  (inCapturePhase.relatedTarget = accumulateTargetOnly),
	                  (_instance2 = inCapturePhase));
	                accumulateTargetOnly = _instance2;
	                if (SyntheticEventCtor && reactEventType)
	                  b: {
	                    inCapturePhase = SyntheticEventCtor;
	                    reactEventName = reactEventType;
	                    instance = 0;
	                    for (
	                      lastHostComponent = inCapturePhase;
	                      lastHostComponent;
	                      lastHostComponent = getParent(lastHostComponent)
	                    )
	                      instance++;
	                    lastHostComponent = 0;
	                    for (
	                      _instance2 = reactEventName;
	                      _instance2;
	                      _instance2 = getParent(_instance2)
	                    )
	                      lastHostComponent++;
	                    for (; 0 < instance - lastHostComponent; )
	                      (inCapturePhase = getParent(inCapturePhase)), instance--;
	                    for (; 0 < lastHostComponent - instance; )
	                      (reactEventName = getParent(reactEventName)),
	                        lastHostComponent--;
	                    for (; instance--; ) {
	                      if (
	                        inCapturePhase === reactEventName ||
	                        (null !== reactEventName &&
	                          inCapturePhase === reactEventName.alternate)
	                      )
	                        break b;
	                      inCapturePhase = getParent(inCapturePhase);
	                      reactEventName = getParent(reactEventName);
	                    }
	                    inCapturePhase = null;
	                  }
	                else inCapturePhase = null;
	                null !== SyntheticEventCtor &&
	                  accumulateEnterLeaveListenersForEvent(
	                    dispatchQueue,
	                    reactName,
	                    SyntheticEventCtor,
	                    inCapturePhase,
	                    false
	                  );
	                null !== reactEventType &&
	                  null !== accumulateTargetOnly &&
	                  accumulateEnterLeaveListenersForEvent(
	                    dispatchQueue,
	                    accumulateTargetOnly,
	                    reactEventType,
	                    inCapturePhase,
	                    true
	                  );
	              }
	            }
	          }
	          a: {
	            reactName = targetInst ? getNodeFromInstance(targetInst) : window;
	            SyntheticEventCtor =
	              reactName.nodeName && reactName.nodeName.toLowerCase();
	            if (
	              "select" === SyntheticEventCtor ||
	              ("input" === SyntheticEventCtor && "file" === reactName.type)
	            )
	              var getTargetInstFunc = getTargetInstForChangeEvent;
	            else if (isTextInputElement(reactName))
	              if (isInputEventSupported)
	                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	              else {
	                getTargetInstFunc = getTargetInstForInputEventPolyfill;
	                var handleEventFunc = handleEventsForInputEventPolyfill;
	              }
	            else
	              (SyntheticEventCtor = reactName.nodeName),
	                !SyntheticEventCtor ||
	                "input" !== SyntheticEventCtor.toLowerCase() ||
	                ("checkbox" !== reactName.type && "radio" !== reactName.type)
	                  ? targetInst &&
	                    isCustomElement(targetInst.elementType) &&
	                    (getTargetInstFunc = getTargetInstForChangeEvent)
	                  : (getTargetInstFunc = getTargetInstForClickEvent);
	            if (
	              getTargetInstFunc &&
	              (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))
	            ) {
	              createAndAccumulateChangeEvent(
	                dispatchQueue,
	                getTargetInstFunc,
	                nativeEvent,
	                nativeEventTarget
	              );
	              break a;
	            }
	            handleEventFunc &&
	              handleEventFunc(domEventName, reactName, targetInst);
	            "focusout" === domEventName &&
	              targetInst &&
	              "number" === reactName.type &&
	              null != targetInst.memoizedProps.value &&
	              setDefaultValue(reactName, "number", reactName.value);
	          }
	          handleEventFunc = targetInst
	            ? getNodeFromInstance(targetInst)
	            : window;
	          switch (domEventName) {
	            case "focusin":
	              if (
	                isTextInputElement(handleEventFunc) ||
	                "true" === handleEventFunc.contentEditable
	              )
	                (activeElement = handleEventFunc),
	                  (activeElementInst = targetInst),
	                  (lastSelection = null);
	              break;
	            case "focusout":
	              lastSelection = activeElementInst = activeElement = null;
	              break;
	            case "mousedown":
	              mouseDown = true;
	              break;
	            case "contextmenu":
	            case "mouseup":
	            case "dragend":
	              mouseDown = false;
	              constructSelectEvent(
	                dispatchQueue,
	                nativeEvent,
	                nativeEventTarget
	              );
	              break;
	            case "selectionchange":
	              if (skipSelectionChangeEvent) break;
	            case "keydown":
	            case "keyup":
	              constructSelectEvent(
	                dispatchQueue,
	                nativeEvent,
	                nativeEventTarget
	              );
	          }
	          var fallbackData;
	          if (canUseCompositionEvent)
	            b: {
	              switch (domEventName) {
	                case "compositionstart":
	                  var eventType = "onCompositionStart";
	                  break b;
	                case "compositionend":
	                  eventType = "onCompositionEnd";
	                  break b;
	                case "compositionupdate":
	                  eventType = "onCompositionUpdate";
	                  break b;
	              }
	              eventType = void 0;
	            }
	          else
	            isComposing
	              ? isFallbackCompositionEnd(domEventName, nativeEvent) &&
	                (eventType = "onCompositionEnd")
	              : "keydown" === domEventName &&
	                nativeEvent.keyCode === START_KEYCODE &&
	                (eventType = "onCompositionStart");
	          eventType &&
	            (useFallbackCompositionData &&
	              "ko" !== nativeEvent.locale &&
	              (isComposing || "onCompositionStart" !== eventType
	                ? "onCompositionEnd" === eventType &&
	                  isComposing &&
	                  (fallbackData = getData())
	                : ((root = nativeEventTarget),
	                  (startText = "value" in root ? root.value : root.textContent),
	                  (isComposing = true))),
	            (handleEventFunc = accumulateTwoPhaseListeners(
	              targetInst,
	              eventType
	            )),
	            0 < handleEventFunc.length &&
	              ((eventType = new SyntheticCompositionEvent(
	                eventType,
	                domEventName,
	                null,
	                nativeEvent,
	                nativeEventTarget
	              )),
	              dispatchQueue.push({
	                event: eventType,
	                listeners: handleEventFunc
	              }),
	              fallbackData
	                ? (eventType.data = fallbackData)
	                : ((fallbackData = getDataFromCustomEvent(nativeEvent)),
	                  null !== fallbackData && (eventType.data = fallbackData))));
	          if (
	            (fallbackData = canUseTextInputEvent
	              ? getNativeBeforeInputChars(domEventName, nativeEvent)
	              : getFallbackBeforeInputChars(domEventName, nativeEvent))
	          )
	            (eventType = accumulateTwoPhaseListeners(
	              targetInst,
	              "onBeforeInput"
	            )),
	              0 < eventType.length &&
	                ((handleEventFunc = new SyntheticInputEvent(
	                  "onBeforeInput",
	                  "beforeinput",
	                  null,
	                  nativeEvent,
	                  nativeEventTarget
	                )),
	                dispatchQueue.push({
	                  event: handleEventFunc,
	                  listeners: eventType
	                }),
	                (handleEventFunc.data = fallbackData));
	          extractEvents$1(
	            dispatchQueue,
	            domEventName,
	            targetInst,
	            nativeEvent,
	            nativeEventTarget
	          );
	        }
	        processDispatchQueue(dispatchQueue, eventSystemFlags);
	      });
	    }
	    function createDispatchListener(instance, listener, currentTarget) {
	      return {
	        instance: instance,
	        listener: listener,
	        currentTarget: currentTarget
	      };
	    }
	    function accumulateTwoPhaseListeners(targetFiber, reactName) {
	      for (
	        var captureName = reactName + "Capture", listeners = [];
	        null !== targetFiber;

	      ) {
	        var _instance3 = targetFiber,
	          stateNode = _instance3.stateNode;
	        _instance3 = _instance3.tag;
	        (5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3) ||
	          null === stateNode ||
	          ((_instance3 = getListener(targetFiber, captureName)),
	          null != _instance3 &&
	            listeners.unshift(
	              createDispatchListener(targetFiber, _instance3, stateNode)
	            ),
	          (_instance3 = getListener(targetFiber, reactName)),
	          null != _instance3 &&
	            listeners.push(
	              createDispatchListener(targetFiber, _instance3, stateNode)
	            ));
	        if (3 === targetFiber.tag) return listeners;
	        targetFiber = targetFiber.return;
	      }
	      return [];
	    }
	    function getParent(inst) {
	      if (null === inst) return null;
	      do inst = inst.return;
	      while (inst && 5 !== inst.tag && 27 !== inst.tag);
	      return inst ? inst : null;
	    }
	    function accumulateEnterLeaveListenersForEvent(
	      dispatchQueue,
	      event,
	      target,
	      common,
	      inCapturePhase
	    ) {
	      for (
	        var registrationName = event._reactName, listeners = [];
	        null !== target && target !== common;

	      ) {
	        var _instance4 = target,
	          alternate = _instance4.alternate,
	          stateNode = _instance4.stateNode;
	        _instance4 = _instance4.tag;
	        if (null !== alternate && alternate === common) break;
	        (5 !== _instance4 && 26 !== _instance4 && 27 !== _instance4) ||
	          null === stateNode ||
	          ((alternate = stateNode),
	          inCapturePhase
	            ? ((stateNode = getListener(target, registrationName)),
	              null != stateNode &&
	                listeners.unshift(
	                  createDispatchListener(target, stateNode, alternate)
	                ))
	            : inCapturePhase ||
	              ((stateNode = getListener(target, registrationName)),
	              null != stateNode &&
	                listeners.push(
	                  createDispatchListener(target, stateNode, alternate)
	                )));
	        target = target.return;
	      }
	      0 !== listeners.length &&
	        dispatchQueue.push({ event: event, listeners: listeners });
	    }
	    function validatePropertiesInDevelopment(type, props) {
	      validateProperties$2(type, props);
	      ("input" !== type && "textarea" !== type && "select" !== type) ||
	        null == props ||
	        null !== props.value ||
	        didWarnValueNull ||
	        ((didWarnValueNull = true),
	        "select" === type && props.multiple
	          ? console.error(
	              "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
	              type
	            )
	          : console.error(
	              "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
	              type
	            ));
	      var eventRegistry = {
	        registrationNameDependencies: registrationNameDependencies,
	        possibleRegistrationNames: possibleRegistrationNames
	      };
	      isCustomElement(type) ||
	        "string" === typeof props.is ||
	        warnUnknownProperties(type, props, eventRegistry);
	      props.contentEditable &&
	        !props.suppressContentEditableWarning &&
	        null != props.children &&
	        console.error(
	          "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
	        );
	    }
	    function warnForPropDifference(
	      propName,
	      serverValue,
	      clientValue,
	      serverDifferences
	    ) {
	      serverValue !== clientValue &&
	        ((clientValue = normalizeMarkupForTextOrAttribute(clientValue)),
	        normalizeMarkupForTextOrAttribute(serverValue) !== clientValue &&
	          (serverDifferences[propName] = serverValue));
	    }
	    function warnForExtraAttributes(
	      domElement,
	      attributeNames,
	      serverDifferences
	    ) {
	      attributeNames.forEach(function (attributeName) {
	        serverDifferences[getPropNameFromAttributeName(attributeName)] =
	          "style" === attributeName
	            ? getStylesObjectFromElement(domElement)
	            : domElement.getAttribute(attributeName);
	      });
	    }
	    function warnForInvalidEventListener(registrationName, listener) {
	      false === listener
	        ? console.error(
	            "Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",
	            registrationName,
	            registrationName,
	            registrationName
	          )
	        : console.error(
	            "Expected `%s` listener to be a function, instead got a value of `%s` type.",
	            registrationName,
	            typeof listener
	          );
	    }
	    function normalizeHTML(parent, html) {
	      parent =
	        parent.namespaceURI === MATH_NAMESPACE ||
	        parent.namespaceURI === SVG_NAMESPACE
	          ? parent.ownerDocument.createElementNS(
	              parent.namespaceURI,
	              parent.tagName
	            )
	          : parent.ownerDocument.createElement(parent.tagName);
	      parent.innerHTML = html;
	      return parent.innerHTML;
	    }
	    function normalizeMarkupForTextOrAttribute(markup) {
	      willCoercionThrow() &&
	        (console.error(
	          "The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.",
	          typeName(markup)
	        ),
	        testStringCoercion(markup));
	      return ("string" === typeof markup ? markup : "" + markup)
	        .replace(NORMALIZE_NEWLINES_REGEX, "\n")
	        .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
	    }
	    function checkForUnmatchedText(serverText, clientText) {
	      clientText = normalizeMarkupForTextOrAttribute(clientText);
	      return normalizeMarkupForTextOrAttribute(serverText) === clientText
	        ? true
	        : false;
	    }
	    function noop$1() {}
	    function setProp(domElement, tag, key, value, props, prevValue) {
	      switch (key) {
	        case "children":
	          if ("string" === typeof value)
	            validateTextNesting(value, tag, false),
	              "body" === tag ||
	                ("textarea" === tag && "" === value) ||
	                setTextContent(domElement, value);
	          else if ("number" === typeof value || "bigint" === typeof value)
	            validateTextNesting("" + value, tag, false),
	              "body" !== tag && setTextContent(domElement, "" + value);
	          break;
	        case "className":
	          setValueForKnownAttribute(domElement, "class", value);
	          break;
	        case "tabIndex":
	          setValueForKnownAttribute(domElement, "tabindex", value);
	          break;
	        case "dir":
	        case "role":
	        case "viewBox":
	        case "width":
	        case "height":
	          setValueForKnownAttribute(domElement, key, value);
	          break;
	        case "style":
	          setValueForStyles(domElement, value, prevValue);
	          break;
	        case "data":
	          if ("object" !== tag) {
	            setValueForKnownAttribute(domElement, "data", value);
	            break;
	          }
	        case "src":
	        case "href":
	          if ("" === value && ("a" !== tag || "href" !== key)) {
	            "src" === key
	              ? console.error(
	                  'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
	                  key,
	                  key
	                )
	              : console.error(
	                  'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
	                  key,
	                  key
	                );
	            domElement.removeAttribute(key);
	            break;
	          }
	          if (
	            null == value ||
	            "function" === typeof value ||
	            "symbol" === typeof value ||
	            "boolean" === typeof value
	          ) {
	            domElement.removeAttribute(key);
	            break;
	          }
	          checkAttributeStringCoercion(value, key);
	          value = sanitizeURL("" + value);
	          domElement.setAttribute(key, value);
	          break;
	        case "action":
	        case "formAction":
	          null != value &&
	            ("form" === tag
	              ? "formAction" === key
	                ? console.error(
	                    "You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>."
	                  )
	                : "function" === typeof value &&
	                  ((null == props.encType && null == props.method) ||
	                    didWarnFormActionMethod ||
	                    ((didWarnFormActionMethod = true),
	                    console.error(
	                      "Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden."
	                    )),
	                  null == props.target ||
	                    didWarnFormActionTarget ||
	                    ((didWarnFormActionTarget = true),
	                    console.error(
	                      "Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."
	                    )))
	              : "input" === tag || "button" === tag
	                ? "action" === key
	                  ? console.error(
	                      "You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>."
	                    )
	                  : "input" !== tag ||
	                      "submit" === props.type ||
	                      "image" === props.type ||
	                      didWarnFormActionType
	                    ? "button" !== tag ||
	                      null == props.type ||
	                      "submit" === props.type ||
	                      didWarnFormActionType
	                      ? "function" === typeof value &&
	                        (null == props.name ||
	                          didWarnFormActionName ||
	                          ((didWarnFormActionName = true),
	                          console.error(
	                            'Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.'
	                          )),
	                        (null == props.formEncType &&
	                          null == props.formMethod) ||
	                          didWarnFormActionMethod ||
	                          ((didWarnFormActionMethod = true),
	                          console.error(
	                            "Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden."
	                          )),
	                        null == props.formTarget ||
	                          didWarnFormActionTarget ||
	                          ((didWarnFormActionTarget = true),
	                          console.error(
	                            "Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."
	                          )))
	                      : ((didWarnFormActionType = true),
	                        console.error(
	                          'A button can only specify a formAction along with type="submit" or no type.'
	                        ))
	                    : ((didWarnFormActionType = true),
	                      console.error(
	                        'An input can only specify a formAction along with type="submit" or type="image".'
	                      ))
	                : "action" === key
	                  ? console.error(
	                      "You can only pass the action prop to <form>."
	                    )
	                  : console.error(
	                      "You can only pass the formAction prop to <input> or <button>."
	                    ));
	          if ("function" === typeof value) {
	            domElement.setAttribute(
	              key,
	              "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
	            );
	            break;
	          } else
	            "function" === typeof prevValue &&
	              ("formAction" === key
	                ? ("input" !== tag &&
	                    setProp(domElement, tag, "name", props.name, props, null),
	                  setProp(
	                    domElement,
	                    tag,
	                    "formEncType",
	                    props.formEncType,
	                    props,
	                    null
	                  ),
	                  setProp(
	                    domElement,
	                    tag,
	                    "formMethod",
	                    props.formMethod,
	                    props,
	                    null
	                  ),
	                  setProp(
	                    domElement,
	                    tag,
	                    "formTarget",
	                    props.formTarget,
	                    props,
	                    null
	                  ))
	                : (setProp(
	                    domElement,
	                    tag,
	                    "encType",
	                    props.encType,
	                    props,
	                    null
	                  ),
	                  setProp(domElement, tag, "method", props.method, props, null),
	                  setProp(
	                    domElement,
	                    tag,
	                    "target",
	                    props.target,
	                    props,
	                    null
	                  )));
	          if (
	            null == value ||
	            "symbol" === typeof value ||
	            "boolean" === typeof value
	          ) {
	            domElement.removeAttribute(key);
	            break;
	          }
	          checkAttributeStringCoercion(value, key);
	          value = sanitizeURL("" + value);
	          domElement.setAttribute(key, value);
	          break;
	        case "onClick":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            (domElement.onclick = noop$1));
	          break;
	        case "onScroll":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            listenToNonDelegatedEvent("scroll", domElement));
	          break;
	        case "onScrollEnd":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            listenToNonDelegatedEvent("scrollend", domElement));
	          break;
	        case "dangerouslySetInnerHTML":
	          if (null != value) {
	            if ("object" !== typeof value || !("__html" in value))
	              throw Error(
	                "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
	              );
	            key = value.__html;
	            if (null != key) {
	              if (null != props.children)
	                throw Error(
	                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
	                );
	              domElement.innerHTML = key;
	            }
	          }
	          break;
	        case "multiple":
	          domElement.multiple =
	            value && "function" !== typeof value && "symbol" !== typeof value;
	          break;
	        case "muted":
	          domElement.muted =
	            value && "function" !== typeof value && "symbol" !== typeof value;
	          break;
	        case "suppressContentEditableWarning":
	        case "suppressHydrationWarning":
	        case "defaultValue":
	        case "defaultChecked":
	        case "innerHTML":
	        case "ref":
	          break;
	        case "autoFocus":
	          break;
	        case "xlinkHref":
	          if (
	            null == value ||
	            "function" === typeof value ||
	            "boolean" === typeof value ||
	            "symbol" === typeof value
	          ) {
	            domElement.removeAttribute("xlink:href");
	            break;
	          }
	          checkAttributeStringCoercion(value, key);
	          key = sanitizeURL("" + value);
	          domElement.setAttributeNS(xlinkNamespace, "xlink:href", key);
	          break;
	        case "contentEditable":
	        case "spellCheck":
	        case "draggable":
	        case "value":
	        case "autoReverse":
	        case "externalResourcesRequired":
	        case "focusable":
	        case "preserveAlpha":
	          null != value &&
	          "function" !== typeof value &&
	          "symbol" !== typeof value
	            ? (checkAttributeStringCoercion(value, key),
	              domElement.setAttribute(key, "" + value))
	            : domElement.removeAttribute(key);
	          break;
	        case "inert":
	          "" !== value ||
	            didWarnForNewBooleanPropsWithEmptyValue[key] ||
	            ((didWarnForNewBooleanPropsWithEmptyValue[key] = true),
	            console.error(
	              "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
	              key
	            ));
	        case "allowFullScreen":
	        case "async":
	        case "autoPlay":
	        case "controls":
	        case "default":
	        case "defer":
	        case "disabled":
	        case "disablePictureInPicture":
	        case "disableRemotePlayback":
	        case "formNoValidate":
	        case "hidden":
	        case "loop":
	        case "noModule":
	        case "noValidate":
	        case "open":
	        case "playsInline":
	        case "readOnly":
	        case "required":
	        case "reversed":
	        case "scoped":
	        case "seamless":
	        case "itemScope":
	          value && "function" !== typeof value && "symbol" !== typeof value
	            ? domElement.setAttribute(key, "")
	            : domElement.removeAttribute(key);
	          break;
	        case "capture":
	        case "download":
	          true === value
	            ? domElement.setAttribute(key, "")
	            : false !== value &&
	                null != value &&
	                "function" !== typeof value &&
	                "symbol" !== typeof value
	              ? (checkAttributeStringCoercion(value, key),
	                domElement.setAttribute(key, value))
	              : domElement.removeAttribute(key);
	          break;
	        case "cols":
	        case "rows":
	        case "size":
	        case "span":
	          null != value &&
	          "function" !== typeof value &&
	          "symbol" !== typeof value &&
	          !isNaN(value) &&
	          1 <= value
	            ? (checkAttributeStringCoercion(value, key),
	              domElement.setAttribute(key, value))
	            : domElement.removeAttribute(key);
	          break;
	        case "rowSpan":
	        case "start":
	          null == value ||
	          "function" === typeof value ||
	          "symbol" === typeof value ||
	          isNaN(value)
	            ? domElement.removeAttribute(key)
	            : (checkAttributeStringCoercion(value, key),
	              domElement.setAttribute(key, value));
	          break;
	        case "popover":
	          listenToNonDelegatedEvent("beforetoggle", domElement);
	          listenToNonDelegatedEvent("toggle", domElement);
	          setValueForAttribute(domElement, "popover", value);
	          break;
	        case "xlinkActuate":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:actuate",
	            value
	          );
	          break;
	        case "xlinkArcrole":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:arcrole",
	            value
	          );
	          break;
	        case "xlinkRole":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:role",
	            value
	          );
	          break;
	        case "xlinkShow":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:show",
	            value
	          );
	          break;
	        case "xlinkTitle":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:title",
	            value
	          );
	          break;
	        case "xlinkType":
	          setValueForNamespacedAttribute(
	            domElement,
	            xlinkNamespace,
	            "xlink:type",
	            value
	          );
	          break;
	        case "xmlBase":
	          setValueForNamespacedAttribute(
	            domElement,
	            xmlNamespace,
	            "xml:base",
	            value
	          );
	          break;
	        case "xmlLang":
	          setValueForNamespacedAttribute(
	            domElement,
	            xmlNamespace,
	            "xml:lang",
	            value
	          );
	          break;
	        case "xmlSpace":
	          setValueForNamespacedAttribute(
	            domElement,
	            xmlNamespace,
	            "xml:space",
	            value
	          );
	          break;
	        case "is":
	          null != prevValue &&
	            console.error(
	              'Cannot update the "is" prop after it has been initialized.'
	            );
	          setValueForAttribute(domElement, "is", value);
	          break;
	        case "innerText":
	        case "textContent":
	          break;
	        case "popoverTarget":
	          didWarnPopoverTargetObject ||
	            null == value ||
	            "object" !== typeof value ||
	            ((didWarnPopoverTargetObject = true),
	            console.error(
	              "The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.",
	              value
	            ));
	        default:
	          !(2 < key.length) ||
	          ("o" !== key[0] && "O" !== key[0]) ||
	          ("n" !== key[1] && "N" !== key[1])
	            ? ((key = getAttributeAlias(key)),
	              setValueForAttribute(domElement, key, value))
	            : registrationNameDependencies.hasOwnProperty(key) &&
	              null != value &&
	              "function" !== typeof value &&
	              warnForInvalidEventListener(key, value);
	      }
	    }
	    function setPropOnCustomElement(
	      domElement,
	      tag,
	      key,
	      value,
	      props,
	      prevValue
	    ) {
	      switch (key) {
	        case "style":
	          setValueForStyles(domElement, value, prevValue);
	          break;
	        case "dangerouslySetInnerHTML":
	          if (null != value) {
	            if ("object" !== typeof value || !("__html" in value))
	              throw Error(
	                "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
	              );
	            key = value.__html;
	            if (null != key) {
	              if (null != props.children)
	                throw Error(
	                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
	                );
	              domElement.innerHTML = key;
	            }
	          }
	          break;
	        case "children":
	          "string" === typeof value
	            ? setTextContent(domElement, value)
	            : ("number" === typeof value || "bigint" === typeof value) &&
	              setTextContent(domElement, "" + value);
	          break;
	        case "onScroll":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            listenToNonDelegatedEvent("scroll", domElement));
	          break;
	        case "onScrollEnd":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            listenToNonDelegatedEvent("scrollend", domElement));
	          break;
	        case "onClick":
	          null != value &&
	            ("function" !== typeof value &&
	              warnForInvalidEventListener(key, value),
	            (domElement.onclick = noop$1));
	          break;
	        case "suppressContentEditableWarning":
	        case "suppressHydrationWarning":
	        case "innerHTML":
	        case "ref":
	          break;
	        case "innerText":
	        case "textContent":
	          break;
	        default:
	          if (registrationNameDependencies.hasOwnProperty(key))
	            null != value &&
	              "function" !== typeof value &&
	              warnForInvalidEventListener(key, value);
	          else
	            a: {
	              if (
	                "o" === key[0] &&
	                "n" === key[1] &&
	                ((props = key.endsWith("Capture")),
	                (tag = key.slice(2, props ? key.length - 7 : void 0)),
	                (prevValue = domElement[internalPropsKey] || null),
	                (prevValue = null != prevValue ? prevValue[key] : null),
	                "function" === typeof prevValue &&
	                  domElement.removeEventListener(tag, prevValue, props),
	                "function" === typeof value)
	              ) {
	                "function" !== typeof prevValue &&
	                  null !== prevValue &&
	                  (key in domElement
	                    ? (domElement[key] = null)
	                    : domElement.hasAttribute(key) &&
	                      domElement.removeAttribute(key));
	                domElement.addEventListener(tag, value, props);
	                break a;
	              }
	              key in domElement
	                ? (domElement[key] = value)
	                : true === value
	                  ? domElement.setAttribute(key, "")
	                  : setValueForAttribute(domElement, key, value);
	            }
	      }
	    }
	    function setInitialProperties(domElement, tag, props) {
	      validatePropertiesInDevelopment(tag, props);
	      switch (tag) {
	        case "div":
	        case "span":
	        case "svg":
	        case "path":
	        case "a":
	        case "g":
	        case "p":
	        case "li":
	          break;
	        case "img":
	          listenToNonDelegatedEvent("error", domElement);
	          listenToNonDelegatedEvent("load", domElement);
	          var hasSrc = false,
	            hasSrcSet = false,
	            propKey;
	          for (propKey in props)
	            if (props.hasOwnProperty(propKey)) {
	              var propValue = props[propKey];
	              if (null != propValue)
	                switch (propKey) {
	                  case "src":
	                    hasSrc = true;
	                    break;
	                  case "srcSet":
	                    hasSrcSet = true;
	                    break;
	                  case "children":
	                  case "dangerouslySetInnerHTML":
	                    throw Error(
	                      tag +
	                        " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
	                    );
	                  default:
	                    setProp(domElement, tag, propKey, propValue, props, null);
	                }
	            }
	          hasSrcSet &&
	            setProp(domElement, tag, "srcSet", props.srcSet, props, null);
	          hasSrc && setProp(domElement, tag, "src", props.src, props, null);
	          return;
	        case "input":
	          checkControlledValueProps("input", props);
	          listenToNonDelegatedEvent("invalid", domElement);
	          var defaultValue = (propKey = propValue = hasSrcSet = null),
	            checked = null,
	            defaultChecked = null;
	          for (hasSrc in props)
	            if (props.hasOwnProperty(hasSrc)) {
	              var _propValue = props[hasSrc];
	              if (null != _propValue)
	                switch (hasSrc) {
	                  case "name":
	                    hasSrcSet = _propValue;
	                    break;
	                  case "type":
	                    propValue = _propValue;
	                    break;
	                  case "checked":
	                    checked = _propValue;
	                    break;
	                  case "defaultChecked":
	                    defaultChecked = _propValue;
	                    break;
	                  case "value":
	                    propKey = _propValue;
	                    break;
	                  case "defaultValue":
	                    defaultValue = _propValue;
	                    break;
	                  case "children":
	                  case "dangerouslySetInnerHTML":
	                    if (null != _propValue)
	                      throw Error(
	                        tag +
	                          " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
	                      );
	                    break;
	                  default:
	                    setProp(domElement, tag, hasSrc, _propValue, props, null);
	                }
	            }
	          validateInputProps(domElement, props);
	          initInput(
	            domElement,
	            propKey,
	            defaultValue,
	            checked,
	            defaultChecked,
	            propValue,
	            hasSrcSet,
	            false
	          );
	          track(domElement);
	          return;
	        case "select":
	          checkControlledValueProps("select", props);
	          listenToNonDelegatedEvent("invalid", domElement);
	          hasSrc = propValue = propKey = null;
	          for (hasSrcSet in props)
	            if (
	              props.hasOwnProperty(hasSrcSet) &&
	              ((defaultValue = props[hasSrcSet]), null != defaultValue)
	            )
	              switch (hasSrcSet) {
	                case "value":
	                  propKey = defaultValue;
	                  break;
	                case "defaultValue":
	                  propValue = defaultValue;
	                  break;
	                case "multiple":
	                  hasSrc = defaultValue;
	                default:
	                  setProp(
	                    domElement,
	                    tag,
	                    hasSrcSet,
	                    defaultValue,
	                    props,
	                    null
	                  );
	              }
	          validateSelectProps(domElement, props);
	          tag = propKey;
	          props = propValue;
	          domElement.multiple = !!hasSrc;
	          null != tag
	            ? updateOptions(domElement, !!hasSrc, tag, false)
	            : null != props && updateOptions(domElement, !!hasSrc, props, true);
	          return;
	        case "textarea":
	          checkControlledValueProps("textarea", props);
	          listenToNonDelegatedEvent("invalid", domElement);
	          propKey = hasSrcSet = hasSrc = null;
	          for (propValue in props)
	            if (
	              props.hasOwnProperty(propValue) &&
	              ((defaultValue = props[propValue]), null != defaultValue)
	            )
	              switch (propValue) {
	                case "value":
	                  hasSrc = defaultValue;
	                  break;
	                case "defaultValue":
	                  hasSrcSet = defaultValue;
	                  break;
	                case "children":
	                  propKey = defaultValue;
	                  break;
	                case "dangerouslySetInnerHTML":
	                  if (null != defaultValue)
	                    throw Error(
	                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
	                    );
	                  break;
	                default:
	                  setProp(
	                    domElement,
	                    tag,
	                    propValue,
	                    defaultValue,
	                    props,
	                    null
	                  );
	              }
	          validateTextareaProps(domElement, props);
	          initTextarea(domElement, hasSrc, hasSrcSet, propKey);
	          track(domElement);
	          return;
	        case "option":
	          validateOptionProps(domElement, props);
	          for (checked in props)
	            if (
	              props.hasOwnProperty(checked) &&
	              ((hasSrc = props[checked]), null != hasSrc)
	            )
	              switch (checked) {
	                case "selected":
	                  domElement.selected =
	                    hasSrc &&
	                    "function" !== typeof hasSrc &&
	                    "symbol" !== typeof hasSrc;
	                  break;
	                default:
	                  setProp(domElement, tag, checked, hasSrc, props, null);
	              }
	          return;
	        case "dialog":
	          listenToNonDelegatedEvent("beforetoggle", domElement);
	          listenToNonDelegatedEvent("toggle", domElement);
	          listenToNonDelegatedEvent("cancel", domElement);
	          listenToNonDelegatedEvent("close", domElement);
	          break;
	        case "iframe":
	        case "object":
	          listenToNonDelegatedEvent("load", domElement);
	          break;
	        case "video":
	        case "audio":
	          for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
	            listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
	          break;
	        case "image":
	          listenToNonDelegatedEvent("error", domElement);
	          listenToNonDelegatedEvent("load", domElement);
	          break;
	        case "details":
	          listenToNonDelegatedEvent("toggle", domElement);
	          break;
	        case "embed":
	        case "source":
	        case "link":
	          listenToNonDelegatedEvent("error", domElement),
	            listenToNonDelegatedEvent("load", domElement);
	        case "area":
	        case "base":
	        case "br":
	        case "col":
	        case "hr":
	        case "keygen":
	        case "meta":
	        case "param":
	        case "track":
	        case "wbr":
	        case "menuitem":
	          for (defaultChecked in props)
	            if (
	              props.hasOwnProperty(defaultChecked) &&
	              ((hasSrc = props[defaultChecked]), null != hasSrc)
	            )
	              switch (defaultChecked) {
	                case "children":
	                case "dangerouslySetInnerHTML":
	                  throw Error(
	                    tag +
	                      " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
	                  );
	                default:
	                  setProp(domElement, tag, defaultChecked, hasSrc, props, null);
	              }
	          return;
	        default:
	          if (isCustomElement(tag)) {
	            for (_propValue in props)
	              props.hasOwnProperty(_propValue) &&
	                ((hasSrc = props[_propValue]),
	                void 0 !== hasSrc &&
	                  setPropOnCustomElement(
	                    domElement,
	                    tag,
	                    _propValue,
	                    hasSrc,
	                    props,
	                    void 0
	                  ));
	            return;
	          }
	      }
	      for (defaultValue in props)
	        props.hasOwnProperty(defaultValue) &&
	          ((hasSrc = props[defaultValue]),
	          null != hasSrc &&
	            setProp(domElement, tag, defaultValue, hasSrc, props, null));
	    }
	    function updateProperties(domElement, tag, lastProps, nextProps) {
	      validatePropertiesInDevelopment(tag, nextProps);
	      switch (tag) {
	        case "div":
	        case "span":
	        case "svg":
	        case "path":
	        case "a":
	        case "g":
	        case "p":
	        case "li":
	          break;
	        case "input":
	          var name = null,
	            type = null,
	            value = null,
	            defaultValue = null,
	            lastDefaultValue = null,
	            checked = null,
	            defaultChecked = null;
	          for (propKey in lastProps) {
	            var lastProp = lastProps[propKey];
	            if (lastProps.hasOwnProperty(propKey) && null != lastProp)
	              switch (propKey) {
	                case "checked":
	                  break;
	                case "value":
	                  break;
	                case "defaultValue":
	                  lastDefaultValue = lastProp;
	                default:
	                  nextProps.hasOwnProperty(propKey) ||
	                    setProp(
	                      domElement,
	                      tag,
	                      propKey,
	                      null,
	                      nextProps,
	                      lastProp
	                    );
	              }
	          }
	          for (var _propKey8 in nextProps) {
	            var propKey = nextProps[_propKey8];
	            lastProp = lastProps[_propKey8];
	            if (
	              nextProps.hasOwnProperty(_propKey8) &&
	              (null != propKey || null != lastProp)
	            )
	              switch (_propKey8) {
	                case "type":
	                  type = propKey;
	                  break;
	                case "name":
	                  name = propKey;
	                  break;
	                case "checked":
	                  checked = propKey;
	                  break;
	                case "defaultChecked":
	                  defaultChecked = propKey;
	                  break;
	                case "value":
	                  value = propKey;
	                  break;
	                case "defaultValue":
	                  defaultValue = propKey;
	                  break;
	                case "children":
	                case "dangerouslySetInnerHTML":
	                  if (null != propKey)
	                    throw Error(
	                      tag +
	                        " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
	                    );
	                  break;
	                default:
	                  propKey !== lastProp &&
	                    setProp(
	                      domElement,
	                      tag,
	                      _propKey8,
	                      propKey,
	                      nextProps,
	                      lastProp
	                    );
	              }
	          }
	          tag =
	            "checkbox" === lastProps.type || "radio" === lastProps.type
	              ? null != lastProps.checked
	              : null != lastProps.value;
	          nextProps =
	            "checkbox" === nextProps.type || "radio" === nextProps.type
	              ? null != nextProps.checked
	              : null != nextProps.value;
	          tag ||
	            !nextProps ||
	            didWarnUncontrolledToControlled ||
	            (console.error(
	              "A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
	            ),
	            (didWarnUncontrolledToControlled = true));
	          !tag ||
	            nextProps ||
	            didWarnControlledToUncontrolled ||
	            (console.error(
	              "A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"
	            ),
	            (didWarnControlledToUncontrolled = true));
	          updateInput(
	            domElement,
	            value,
	            defaultValue,
	            lastDefaultValue,
	            checked,
	            defaultChecked,
	            type,
	            name
	          );
	          return;
	        case "select":
	          propKey = value = defaultValue = _propKey8 = null;
	          for (type in lastProps)
	            if (
	              ((lastDefaultValue = lastProps[type]),
	              lastProps.hasOwnProperty(type) && null != lastDefaultValue)
	            )
	              switch (type) {
	                case "value":
	                  break;
	                case "multiple":
	                  propKey = lastDefaultValue;
	                default:
	                  nextProps.hasOwnProperty(type) ||
	                    setProp(
	                      domElement,
	                      tag,
	                      type,
	                      null,
	                      nextProps,
	                      lastDefaultValue
	                    );
	              }
	          for (name in nextProps)
	            if (
	              ((type = nextProps[name]),
	              (lastDefaultValue = lastProps[name]),
	              nextProps.hasOwnProperty(name) &&
	                (null != type || null != lastDefaultValue))
	            )
	              switch (name) {
	                case "value":
	                  _propKey8 = type;
	                  break;
	                case "defaultValue":
	                  defaultValue = type;
	                  break;
	                case "multiple":
	                  value = type;
	                default:
	                  type !== lastDefaultValue &&
	                    setProp(
	                      domElement,
	                      tag,
	                      name,
	                      type,
	                      nextProps,
	                      lastDefaultValue
	                    );
	              }
	          nextProps = defaultValue;
	          tag = value;
	          lastProps = propKey;
	          null != _propKey8
	            ? updateOptions(domElement, !!tag, _propKey8, false)
	            : !!lastProps !== !!tag &&
	              (null != nextProps
	                ? updateOptions(domElement, !!tag, nextProps, true)
	                : updateOptions(domElement, !!tag, tag ? [] : "", false));
	          return;
	        case "textarea":
	          propKey = _propKey8 = null;
	          for (defaultValue in lastProps)
	            if (
	              ((name = lastProps[defaultValue]),
	              lastProps.hasOwnProperty(defaultValue) &&
	                null != name &&
	                !nextProps.hasOwnProperty(defaultValue))
	            )
	              switch (defaultValue) {
	                case "value":
	                  break;
	                case "children":
	                  break;
	                default:
	                  setProp(domElement, tag, defaultValue, null, nextProps, name);
	              }
	          for (value in nextProps)
	            if (
	              ((name = nextProps[value]),
	              (type = lastProps[value]),
	              nextProps.hasOwnProperty(value) && (null != name || null != type))
	            )
	              switch (value) {
	                case "value":
	                  _propKey8 = name;
	                  break;
	                case "defaultValue":
	                  propKey = name;
	                  break;
	                case "children":
	                  break;
	                case "dangerouslySetInnerHTML":
	                  if (null != name)
	                    throw Error(
	                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
	                    );
	                  break;
	                default:
	                  name !== type &&
	                    setProp(domElement, tag, value, name, nextProps, type);
	              }
	          updateTextarea(domElement, _propKey8, propKey);
	          return;
	        case "option":
	          for (var _propKey13 in lastProps)
	            if (
	              ((_propKey8 = lastProps[_propKey13]),
	              lastProps.hasOwnProperty(_propKey13) &&
	                null != _propKey8 &&
	                !nextProps.hasOwnProperty(_propKey13))
	            )
	              switch (_propKey13) {
	                case "selected":
	                  domElement.selected = false;
	                  break;
	                default:
	                  setProp(
	                    domElement,
	                    tag,
	                    _propKey13,
	                    null,
	                    nextProps,
	                    _propKey8
	                  );
	              }
	          for (lastDefaultValue in nextProps)
	            if (
	              ((_propKey8 = nextProps[lastDefaultValue]),
	              (propKey = lastProps[lastDefaultValue]),
	              nextProps.hasOwnProperty(lastDefaultValue) &&
	                _propKey8 !== propKey &&
	                (null != _propKey8 || null != propKey))
	            )
	              switch (lastDefaultValue) {
	                case "selected":
	                  domElement.selected =
	                    _propKey8 &&
	                    "function" !== typeof _propKey8 &&
	                    "symbol" !== typeof _propKey8;
	                  break;
	                default:
	                  setProp(
	                    domElement,
	                    tag,
	                    lastDefaultValue,
	                    _propKey8,
	                    nextProps,
	                    propKey
	                  );
	              }
	          return;
	        case "img":
	        case "link":
	        case "area":
	        case "base":
	        case "br":
	        case "col":
	        case "embed":
	        case "hr":
	        case "keygen":
	        case "meta":
	        case "param":
	        case "source":
	        case "track":
	        case "wbr":
	        case "menuitem":
	          for (var _propKey15 in lastProps)
	            (_propKey8 = lastProps[_propKey15]),
	              lastProps.hasOwnProperty(_propKey15) &&
	                null != _propKey8 &&
	                !nextProps.hasOwnProperty(_propKey15) &&
	                setProp(
	                  domElement,
	                  tag,
	                  _propKey15,
	                  null,
	                  nextProps,
	                  _propKey8
	                );
	          for (checked in nextProps)
	            if (
	              ((_propKey8 = nextProps[checked]),
	              (propKey = lastProps[checked]),
	              nextProps.hasOwnProperty(checked) &&
	                _propKey8 !== propKey &&
	                (null != _propKey8 || null != propKey))
	            )
	              switch (checked) {
	                case "children":
	                case "dangerouslySetInnerHTML":
	                  if (null != _propKey8)
	                    throw Error(
	                      tag +
	                        " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
	                    );
	                  break;
	                default:
	                  setProp(
	                    domElement,
	                    tag,
	                    checked,
	                    _propKey8,
	                    nextProps,
	                    propKey
	                  );
	              }
	          return;
	        default:
	          if (isCustomElement(tag)) {
	            for (var _propKey17 in lastProps)
	              (_propKey8 = lastProps[_propKey17]),
	                lastProps.hasOwnProperty(_propKey17) &&
	                  void 0 !== _propKey8 &&
	                  !nextProps.hasOwnProperty(_propKey17) &&
	                  setPropOnCustomElement(
	                    domElement,
	                    tag,
	                    _propKey17,
	                    void 0,
	                    nextProps,
	                    _propKey8
	                  );
	            for (defaultChecked in nextProps)
	              (_propKey8 = nextProps[defaultChecked]),
	                (propKey = lastProps[defaultChecked]),
	                !nextProps.hasOwnProperty(defaultChecked) ||
	                  _propKey8 === propKey ||
	                  (void 0 === _propKey8 && void 0 === propKey) ||
	                  setPropOnCustomElement(
	                    domElement,
	                    tag,
	                    defaultChecked,
	                    _propKey8,
	                    nextProps,
	                    propKey
	                  );
	            return;
	          }
	      }
	      for (var _propKey19 in lastProps)
	        (_propKey8 = lastProps[_propKey19]),
	          lastProps.hasOwnProperty(_propKey19) &&
	            null != _propKey8 &&
	            !nextProps.hasOwnProperty(_propKey19) &&
	            setProp(domElement, tag, _propKey19, null, nextProps, _propKey8);
	      for (lastProp in nextProps)
	        (_propKey8 = nextProps[lastProp]),
	          (propKey = lastProps[lastProp]),
	          !nextProps.hasOwnProperty(lastProp) ||
	            _propKey8 === propKey ||
	            (null == _propKey8 && null == propKey) ||
	            setProp(domElement, tag, lastProp, _propKey8, nextProps, propKey);
	    }
	    function getPropNameFromAttributeName(attrName) {
	      switch (attrName) {
	        case "class":
	          return "className";
	        case "for":
	          return "htmlFor";
	        default:
	          return attrName;
	      }
	    }
	    function getStylesObjectFromElement(domElement) {
	      var serverValueInObjectForm = {};
	      domElement = domElement.style;
	      for (var i = 0; i < domElement.length; i++) {
	        var styleName = domElement[i];
	        serverValueInObjectForm[styleName] =
	          domElement.getPropertyValue(styleName);
	      }
	      return serverValueInObjectForm;
	    }
	    function diffHydratedStyles(domElement, value$jscomp$0, serverDifferences) {
	      if (null != value$jscomp$0 && "object" !== typeof value$jscomp$0)
	        console.error(
	          "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
	        );
	      else {
	        var clientValue;
	        var delimiter = (clientValue = ""),
	          styleName;
	        for (styleName in value$jscomp$0)
	          if (value$jscomp$0.hasOwnProperty(styleName)) {
	            var value = value$jscomp$0[styleName];
	            null != value &&
	              "boolean" !== typeof value &&
	              "" !== value &&
	              (0 === styleName.indexOf("--")
	                ? (checkCSSPropertyStringCoercion(value, styleName),
	                  (clientValue +=
	                    delimiter + styleName + ":" + ("" + value).trim()))
	                : "number" !== typeof value ||
	                    0 === value ||
	                    unitlessNumbers.has(styleName)
	                  ? (checkCSSPropertyStringCoercion(value, styleName),
	                    (clientValue +=
	                      delimiter +
	                      styleName
	                        .replace(uppercasePattern, "-$1")
	                        .toLowerCase()
	                        .replace(msPattern$1, "-ms-") +
	                      ":" +
	                      ("" + value).trim()))
	                  : (clientValue +=
	                      delimiter +
	                      styleName
	                        .replace(uppercasePattern, "-$1")
	                        .toLowerCase()
	                        .replace(msPattern$1, "-ms-") +
	                      ":" +
	                      value +
	                      "px"),
	              (delimiter = ";"));
	          }
	        clientValue = clientValue || null;
	        value$jscomp$0 = domElement.getAttribute("style");
	        value$jscomp$0 !== clientValue &&
	          ((clientValue = normalizeMarkupForTextOrAttribute(clientValue)),
	          normalizeMarkupForTextOrAttribute(value$jscomp$0) !== clientValue &&
	            (serverDifferences.style = getStylesObjectFromElement(domElement)));
	      }
	    }
	    function hydrateAttribute(
	      domElement,
	      propKey,
	      attributeName,
	      value,
	      extraAttributes,
	      serverDifferences
	    ) {
	      extraAttributes.delete(attributeName);
	      domElement = domElement.getAttribute(attributeName);
	      if (null === domElement)
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	          case "boolean":
	            return;
	        }
	      else if (null != value)
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	          case "boolean":
	            break;
	          default:
	            if (
	              (checkAttributeStringCoercion(value, propKey),
	              domElement === "" + value)
	            )
	              return;
	        }
	      warnForPropDifference(propKey, domElement, value, serverDifferences);
	    }
	    function hydrateBooleanAttribute(
	      domElement,
	      propKey,
	      attributeName,
	      value,
	      extraAttributes,
	      serverDifferences
	    ) {
	      extraAttributes.delete(attributeName);
	      domElement = domElement.getAttribute(attributeName);
	      if (null === domElement) {
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	            return;
	        }
	        if (!value) return;
	      } else
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	            break;
	          default:
	            if (value) return;
	        }
	      warnForPropDifference(propKey, domElement, value, serverDifferences);
	    }
	    function hydrateBooleanishAttribute(
	      domElement,
	      propKey,
	      attributeName,
	      value,
	      extraAttributes,
	      serverDifferences
	    ) {
	      extraAttributes.delete(attributeName);
	      domElement = domElement.getAttribute(attributeName);
	      if (null === domElement)
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	            return;
	        }
	      else if (null != value)
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	            break;
	          default:
	            if (
	              (checkAttributeStringCoercion(value, attributeName),
	              domElement === "" + value)
	            )
	              return;
	        }
	      warnForPropDifference(propKey, domElement, value, serverDifferences);
	    }
	    function hydrateNumericAttribute(
	      domElement,
	      propKey,
	      attributeName,
	      value,
	      extraAttributes,
	      serverDifferences
	    ) {
	      extraAttributes.delete(attributeName);
	      domElement = domElement.getAttribute(attributeName);
	      if (null === domElement)
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	          case "boolean":
	            return;
	          default:
	            if (isNaN(value)) return;
	        }
	      else if (null != value)
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	          case "boolean":
	            break;
	          default:
	            if (
	              !isNaN(value) &&
	              (checkAttributeStringCoercion(value, propKey),
	              domElement === "" + value)
	            )
	              return;
	        }
	      warnForPropDifference(propKey, domElement, value, serverDifferences);
	    }
	    function hydrateSanitizedAttribute(
	      domElement,
	      propKey,
	      attributeName,
	      value,
	      extraAttributes,
	      serverDifferences
	    ) {
	      extraAttributes.delete(attributeName);
	      domElement = domElement.getAttribute(attributeName);
	      if (null === domElement)
	        switch (typeof value) {
	          case "undefined":
	          case "function":
	          case "symbol":
	          case "boolean":
	            return;
	        }
	      else if (null != value)
	        switch (typeof value) {
	          case "function":
	          case "symbol":
	          case "boolean":
	            break;
	          default:
	            if (
	              (checkAttributeStringCoercion(value, propKey),
	              (attributeName = sanitizeURL("" + value)),
	              domElement === attributeName)
	            )
	              return;
	        }
	      warnForPropDifference(propKey, domElement, value, serverDifferences);
	    }
	    function diffHydratedProperties(domElement, tag, props, hostContext) {
	      for (
	        var serverDifferences = {},
	          extraAttributes = new Set(),
	          attributes = domElement.attributes,
	          i = 0;
	        i < attributes.length;
	        i++
	      )
	        switch (attributes[i].name.toLowerCase()) {
	          case "value":
	            break;
	          case "checked":
	            break;
	          case "selected":
	            break;
	          default:
	            extraAttributes.add(attributes[i].name);
	        }
	      if (isCustomElement(tag))
	        for (var propKey in props) {
	          if (props.hasOwnProperty(propKey)) {
	            var value = props[propKey];
	            if (null != value)
	              if (registrationNameDependencies.hasOwnProperty(propKey))
	                "function" !== typeof value &&
	                  warnForInvalidEventListener(propKey, value);
	              else if (true !== props.suppressHydrationWarning)
	                switch (propKey) {
	                  case "children":
	                    ("string" !== typeof value && "number" !== typeof value) ||
	                      warnForPropDifference(
	                        "children",
	                        domElement.textContent,
	                        value,
	                        serverDifferences
	                      );
	                    continue;
	                  case "suppressContentEditableWarning":
	                  case "suppressHydrationWarning":
	                  case "defaultValue":
	                  case "defaultChecked":
	                  case "innerHTML":
	                  case "ref":
	                    continue;
	                  case "dangerouslySetInnerHTML":
	                    attributes = domElement.innerHTML;
	                    value = value ? value.__html : void 0;
	                    null != value &&
	                      ((value = normalizeHTML(domElement, value)),
	                      warnForPropDifference(
	                        propKey,
	                        attributes,
	                        value,
	                        serverDifferences
	                      ));
	                    continue;
	                  case "style":
	                    extraAttributes.delete(propKey);
	                    diffHydratedStyles(domElement, value, serverDifferences);
	                    continue;
	                  case "offsetParent":
	                  case "offsetTop":
	                  case "offsetLeft":
	                  case "offsetWidth":
	                  case "offsetHeight":
	                  case "isContentEditable":
	                  case "outerText":
	                  case "outerHTML":
	                    extraAttributes.delete(propKey.toLowerCase());
	                    console.error(
	                      "Assignment to read-only property will result in a no-op: `%s`",
	                      propKey
	                    );
	                    continue;
	                  case "className":
	                    extraAttributes.delete("class");
	                    attributes = getValueForAttributeOnCustomComponent(
	                      domElement,
	                      "class",
	                      value
	                    );
	                    warnForPropDifference(
	                      "className",
	                      attributes,
	                      value,
	                      serverDifferences
	                    );
	                    continue;
	                  default:
	                    hostContext.context === HostContextNamespaceNone &&
	                    "svg" !== tag &&
	                    "math" !== tag
	                      ? extraAttributes.delete(propKey.toLowerCase())
	                      : extraAttributes.delete(propKey),
	                      (attributes = getValueForAttributeOnCustomComponent(
	                        domElement,
	                        propKey,
	                        value
	                      )),
	                      warnForPropDifference(
	                        propKey,
	                        attributes,
	                        value,
	                        serverDifferences
	                      );
	                }
	          }
	        }
	      else
	        for (value in props)
	          if (
	            props.hasOwnProperty(value) &&
	            ((propKey = props[value]), null != propKey)
	          )
	            if (registrationNameDependencies.hasOwnProperty(value))
	              "function" !== typeof propKey &&
	                warnForInvalidEventListener(value, propKey);
	            else if (true !== props.suppressHydrationWarning)
	              switch (value) {
	                case "children":
	                  ("string" !== typeof propKey &&
	                    "number" !== typeof propKey) ||
	                    warnForPropDifference(
	                      "children",
	                      domElement.textContent,
	                      propKey,
	                      serverDifferences
	                    );
	                  continue;
	                case "suppressContentEditableWarning":
	                case "suppressHydrationWarning":
	                case "value":
	                case "checked":
	                case "selected":
	                case "defaultValue":
	                case "defaultChecked":
	                case "innerHTML":
	                case "ref":
	                  continue;
	                case "dangerouslySetInnerHTML":
	                  attributes = domElement.innerHTML;
	                  propKey = propKey ? propKey.__html : void 0;
	                  null != propKey &&
	                    ((propKey = normalizeHTML(domElement, propKey)),
	                    attributes !== propKey &&
	                      (serverDifferences[value] = { __html: attributes }));
	                  continue;
	                case "className":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "class",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "tabIndex":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "tabindex",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "style":
	                  extraAttributes.delete(value);
	                  diffHydratedStyles(domElement, propKey, serverDifferences);
	                  continue;
	                case "multiple":
	                  extraAttributes.delete(value);
	                  warnForPropDifference(
	                    value,
	                    domElement.multiple,
	                    propKey,
	                    serverDifferences
	                  );
	                  continue;
	                case "muted":
	                  extraAttributes.delete(value);
	                  warnForPropDifference(
	                    value,
	                    domElement.muted,
	                    propKey,
	                    serverDifferences
	                  );
	                  continue;
	                case "autoFocus":
	                  extraAttributes.delete("autofocus");
	                  warnForPropDifference(
	                    value,
	                    domElement.autofocus,
	                    propKey,
	                    serverDifferences
	                  );
	                  continue;
	                case "data":
	                  if ("object" !== tag) {
	                    extraAttributes.delete(value);
	                    attributes = domElement.getAttribute("data");
	                    warnForPropDifference(
	                      value,
	                      attributes,
	                      propKey,
	                      serverDifferences
	                    );
	                    continue;
	                  }
	                case "src":
	                case "href":
	                  if (
	                    !(
	                      "" !== propKey ||
	                      ("a" === tag && "href" === value) ||
	                      ("object" === tag && "data" === value)
	                    )
	                  ) {
	                    "src" === value
	                      ? console.error(
	                          'An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
	                          value,
	                          value
	                        )
	                      : console.error(
	                          'An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.',
	                          value,
	                          value
	                        );
	                    continue;
	                  }
	                  hydrateSanitizedAttribute(
	                    domElement,
	                    value,
	                    value,
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "action":
	                case "formAction":
	                  attributes = domElement.getAttribute(value);
	                  if ("function" === typeof propKey) {
	                    extraAttributes.delete(value.toLowerCase());
	                    "formAction" === value
	                      ? (extraAttributes.delete("name"),
	                        extraAttributes.delete("formenctype"),
	                        extraAttributes.delete("formmethod"),
	                        extraAttributes.delete("formtarget"))
	                      : (extraAttributes.delete("enctype"),
	                        extraAttributes.delete("method"),
	                        extraAttributes.delete("target"));
	                    continue;
	                  } else if (attributes === EXPECTED_FORM_ACTION_URL) {
	                    extraAttributes.delete(value.toLowerCase());
	                    warnForPropDifference(
	                      value,
	                      "function",
	                      propKey,
	                      serverDifferences
	                    );
	                    continue;
	                  }
	                  hydrateSanitizedAttribute(
	                    domElement,
	                    value,
	                    value.toLowerCase(),
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkHref":
	                  hydrateSanitizedAttribute(
	                    domElement,
	                    value,
	                    "xlink:href",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "contentEditable":
	                  hydrateBooleanishAttribute(
	                    domElement,
	                    value,
	                    "contenteditable",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "spellCheck":
	                  hydrateBooleanishAttribute(
	                    domElement,
	                    value,
	                    "spellcheck",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "draggable":
	                case "autoReverse":
	                case "externalResourcesRequired":
	                case "focusable":
	                case "preserveAlpha":
	                  hydrateBooleanishAttribute(
	                    domElement,
	                    value,
	                    value,
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "allowFullScreen":
	                case "async":
	                case "autoPlay":
	                case "controls":
	                case "default":
	                case "defer":
	                case "disabled":
	                case "disablePictureInPicture":
	                case "disableRemotePlayback":
	                case "formNoValidate":
	                case "hidden":
	                case "loop":
	                case "noModule":
	                case "noValidate":
	                case "open":
	                case "playsInline":
	                case "readOnly":
	                case "required":
	                case "reversed":
	                case "scoped":
	                case "seamless":
	                case "itemScope":
	                  hydrateBooleanAttribute(
	                    domElement,
	                    value,
	                    value.toLowerCase(),
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "capture":
	                case "download":
	                  a: {
	                    i = domElement;
	                    var attributeName = (attributes = value),
	                      serverDifferences$jscomp$0 = serverDifferences;
	                    extraAttributes.delete(attributeName);
	                    i = i.getAttribute(attributeName);
	                    if (null === i)
	                      switch (typeof propKey) {
	                        case "undefined":
	                        case "function":
	                        case "symbol":
	                          break a;
	                        default:
	                          if (false === propKey) break a;
	                      }
	                    else if (null != propKey)
	                      switch (typeof propKey) {
	                        case "function":
	                        case "symbol":
	                          break;
	                        case "boolean":
	                          if (true === propKey && "" === i) break a;
	                          break;
	                        default:
	                          if (
	                            (checkAttributeStringCoercion(propKey, attributes),
	                            i === "" + propKey)
	                          )
	                            break a;
	                      }
	                    warnForPropDifference(
	                      attributes,
	                      i,
	                      propKey,
	                      serverDifferences$jscomp$0
	                    );
	                  }
	                  continue;
	                case "cols":
	                case "rows":
	                case "size":
	                case "span":
	                  a: {
	                    i = domElement;
	                    attributeName = attributes = value;
	                    serverDifferences$jscomp$0 = serverDifferences;
	                    extraAttributes.delete(attributeName);
	                    i = i.getAttribute(attributeName);
	                    if (null === i)
	                      switch (typeof propKey) {
	                        case "undefined":
	                        case "function":
	                        case "symbol":
	                        case "boolean":
	                          break a;
	                        default:
	                          if (isNaN(propKey) || 1 > propKey) break a;
	                      }
	                    else if (null != propKey)
	                      switch (typeof propKey) {
	                        case "function":
	                        case "symbol":
	                        case "boolean":
	                          break;
	                        default:
	                          if (
	                            !(isNaN(propKey) || 1 > propKey) &&
	                            (checkAttributeStringCoercion(propKey, attributes),
	                            i === "" + propKey)
	                          )
	                            break a;
	                      }
	                    warnForPropDifference(
	                      attributes,
	                      i,
	                      propKey,
	                      serverDifferences$jscomp$0
	                    );
	                  }
	                  continue;
	                case "rowSpan":
	                  hydrateNumericAttribute(
	                    domElement,
	                    value,
	                    "rowspan",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "start":
	                  hydrateNumericAttribute(
	                    domElement,
	                    value,
	                    value,
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xHeight":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "x-height",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkActuate":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:actuate",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkArcrole":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:arcrole",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkRole":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:role",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkShow":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:show",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkTitle":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:title",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xlinkType":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xlink:type",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xmlBase":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xml:base",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xmlLang":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xml:lang",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "xmlSpace":
	                  hydrateAttribute(
	                    domElement,
	                    value,
	                    "xml:space",
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                case "inert":
	                  "" !== propKey ||
	                    didWarnForNewBooleanPropsWithEmptyValue[value] ||
	                    ((didWarnForNewBooleanPropsWithEmptyValue[value] = true),
	                    console.error(
	                      "Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.",
	                      value
	                    ));
	                  hydrateBooleanAttribute(
	                    domElement,
	                    value,
	                    value,
	                    propKey,
	                    extraAttributes,
	                    serverDifferences
	                  );
	                  continue;
	                default:
	                  if (
	                    !(2 < value.length) ||
	                    ("o" !== value[0] && "O" !== value[0]) ||
	                    ("n" !== value[1] && "N" !== value[1])
	                  ) {
	                    i = getAttributeAlias(value);
	                    attributes = false;
	                    hostContext.context === HostContextNamespaceNone &&
	                    "svg" !== tag &&
	                    "math" !== tag
	                      ? extraAttributes.delete(i.toLowerCase())
	                      : ((attributeName = value.toLowerCase()),
	                        (attributeName = possibleStandardNames.hasOwnProperty(
	                          attributeName
	                        )
	                          ? possibleStandardNames[attributeName] || null
	                          : null),
	                        null !== attributeName &&
	                          attributeName !== value &&
	                          ((attributes = true),
	                          extraAttributes.delete(attributeName)),
	                        extraAttributes.delete(i));
	                    a: if (
	                      ((attributeName = domElement),
	                      (serverDifferences$jscomp$0 = i),
	                      (i = propKey),
	                      isAttributeNameSafe(serverDifferences$jscomp$0))
	                    )
	                      if (
	                        attributeName.hasAttribute(serverDifferences$jscomp$0)
	                      )
	                        (attributeName = attributeName.getAttribute(
	                          serverDifferences$jscomp$0
	                        )),
	                          checkAttributeStringCoercion(
	                            i,
	                            serverDifferences$jscomp$0
	                          ),
	                          (i = attributeName === "" + i ? i : attributeName);
	                      else {
	                        switch (typeof i) {
	                          case "function":
	                          case "symbol":
	                            break a;
	                          case "boolean":
	                            if (
	                              ((attributeName = serverDifferences$jscomp$0
	                                .toLowerCase()
	                                .slice(0, 5)),
	                              "data-" !== attributeName &&
	                                "aria-" !== attributeName)
	                            )
	                              break a;
	                        }
	                        i = void 0 === i ? void 0 : null;
	                      }
	                    else i = void 0;
	                    attributes ||
	                      warnForPropDifference(
	                        value,
	                        i,
	                        propKey,
	                        serverDifferences
	                      );
	                  }
	              }
	      0 < extraAttributes.size &&
	        true !== props.suppressHydrationWarning &&
	        warnForExtraAttributes(domElement, extraAttributes, serverDifferences);
	      return 0 === Object.keys(serverDifferences).length
	        ? null
	        : serverDifferences;
	    }
	    function propNamesListJoin(list, combinator) {
	      switch (list.length) {
	        case 0:
	          return "";
	        case 1:
	          return list[0];
	        case 2:
	          return list[0] + " " + combinator + " " + list[1];
	        default:
	          return (
	            list.slice(0, -1).join(", ") +
	            ", " +
	            combinator +
	            " " +
	            list[list.length - 1]
	          );
	      }
	    }
	    function getOwnerDocumentFromRootContainer(rootContainerElement) {
	      return 9 === rootContainerElement.nodeType
	        ? rootContainerElement
	        : rootContainerElement.ownerDocument;
	    }
	    function getOwnHostContext(namespaceURI) {
	      switch (namespaceURI) {
	        case SVG_NAMESPACE:
	          return HostContextNamespaceSvg;
	        case MATH_NAMESPACE:
	          return HostContextNamespaceMath;
	        default:
	          return HostContextNamespaceNone;
	      }
	    }
	    function getChildHostContextProd(parentNamespace, type) {
	      if (parentNamespace === HostContextNamespaceNone)
	        switch (type) {
	          case "svg":
	            return HostContextNamespaceSvg;
	          case "math":
	            return HostContextNamespaceMath;
	          default:
	            return HostContextNamespaceNone;
	        }
	      return parentNamespace === HostContextNamespaceSvg &&
	        "foreignObject" === type
	        ? HostContextNamespaceNone
	        : parentNamespace;
	    }
	    function shouldSetTextContent(type, props) {
	      return (
	        "textarea" === type ||
	        "noscript" === type ||
	        "string" === typeof props.children ||
	        "number" === typeof props.children ||
	        "bigint" === typeof props.children ||
	        ("object" === typeof props.dangerouslySetInnerHTML &&
	          null !== props.dangerouslySetInnerHTML &&
	          null != props.dangerouslySetInnerHTML.__html)
	      );
	    }
	    function shouldAttemptEagerTransition() {
	      var event = window.event;
	      if (event && "popstate" === event.type) {
	        if (event === currentPopstateTransitionEvent) return false;
	        currentPopstateTransitionEvent = event;
	        return true;
	      }
	      currentPopstateTransitionEvent = null;
	      return false;
	    }
	    function handleErrorInNextTick(error) {
	      setTimeout(function () {
	        throw error;
	      });
	    }
	    function commitMount(domElement, type, newProps) {
	      switch (type) {
	        case "button":
	        case "input":
	        case "select":
	        case "textarea":
	          newProps.autoFocus && domElement.focus();
	          break;
	        case "img":
	          newProps.src
	            ? (domElement.src = newProps.src)
	            : newProps.srcSet && (domElement.srcset = newProps.srcSet);
	      }
	    }
	    function commitUpdate(domElement, type, oldProps, newProps) {
	      updateProperties(domElement, type, oldProps, newProps);
	      domElement[internalPropsKey] = newProps;
	    }
	    function resetTextContent(domElement) {
	      setTextContent(domElement, "");
	    }
	    function commitTextUpdate(textInstance, oldText, newText) {
	      textInstance.nodeValue = newText;
	    }
	    function isSingletonScope(type) {
	      return "head" === type;
	    }
	    function removeChild(parentInstance, child) {
	      parentInstance.removeChild(child);
	    }
	    function removeChildFromContainer(container, child) {
	      (9 === container.nodeType
	        ? container.body
	        : "HTML" === container.nodeName
	          ? container.ownerDocument.body
	          : container
	      ).removeChild(child);
	    }
	    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
	      var node = suspenseInstance,
	        possiblePreambleContribution = 0,
	        depth = 0;
	      do {
	        var nextNode = node.nextSibling;
	        parentInstance.removeChild(node);
	        if (nextNode && 8 === nextNode.nodeType)
	          if (((node = nextNode.data), node === SUSPENSE_END_DATA)) {
	            if (
	              0 < possiblePreambleContribution &&
	              8 > possiblePreambleContribution
	            ) {
	              node = possiblePreambleContribution;
	              var ownerDocument = parentInstance.ownerDocument;
	              node & PREAMBLE_CONTRIBUTION_HTML &&
	                releaseSingletonInstance(ownerDocument.documentElement);
	              node & PREAMBLE_CONTRIBUTION_BODY &&
	                releaseSingletonInstance(ownerDocument.body);
	              if (node & PREAMBLE_CONTRIBUTION_HEAD)
	                for (
	                  node = ownerDocument.head,
	                    releaseSingletonInstance(node),
	                    ownerDocument = node.firstChild;
	                  ownerDocument;

	                ) {
	                  var nextNode$jscomp$0 = ownerDocument.nextSibling,
	                    nodeName = ownerDocument.nodeName;
	                  ownerDocument[internalHoistableMarker] ||
	                    "SCRIPT" === nodeName ||
	                    "STYLE" === nodeName ||
	                    ("LINK" === nodeName &&
	                      "stylesheet" === ownerDocument.rel.toLowerCase()) ||
	                    node.removeChild(ownerDocument);
	                  ownerDocument = nextNode$jscomp$0;
	                }
	            }
	            if (0 === depth) {
	              parentInstance.removeChild(nextNode);
	              retryIfBlockedOn(suspenseInstance);
	              return;
	            }
	            depth--;
	          } else
	            node === SUSPENSE_START_DATA ||
	            node === SUSPENSE_PENDING_START_DATA ||
	            node === SUSPENSE_FALLBACK_START_DATA
	              ? depth++
	              : (possiblePreambleContribution = node.charCodeAt(0) - 48);
	        else possiblePreambleContribution = 0;
	        node = nextNode;
	      } while (node);
	      retryIfBlockedOn(suspenseInstance);
	    }
	    function hideInstance(instance) {
	      instance = instance.style;
	      "function" === typeof instance.setProperty
	        ? instance.setProperty("display", "none", "important")
	        : (instance.display = "none");
	    }
	    function hideTextInstance(textInstance) {
	      textInstance.nodeValue = "";
	    }
	    function unhideInstance(instance, props) {
	      props = props[STYLE];
	      props =
	        void 0 !== props && null !== props && props.hasOwnProperty("display")
	          ? props.display
	          : null;
	      instance.style.display =
	        null == props || "boolean" === typeof props ? "" : ("" + props).trim();
	    }
	    function unhideTextInstance(textInstance, text) {
	      textInstance.nodeValue = text;
	    }
	    function clearContainerSparingly(container) {
	      var nextNode = container.firstChild;
	      nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
	      for (; nextNode; ) {
	        var node = nextNode;
	        nextNode = nextNode.nextSibling;
	        switch (node.nodeName) {
	          case "HTML":
	          case "HEAD":
	          case "BODY":
	            clearContainerSparingly(node);
	            detachDeletedInstance(node);
	            continue;
	          case "SCRIPT":
	          case "STYLE":
	            continue;
	          case "LINK":
	            if ("stylesheet" === node.rel.toLowerCase()) continue;
	        }
	        container.removeChild(node);
	      }
	    }
	    function canHydrateInstance(instance, type, props, inRootOrSingleton) {
	      for (; 1 === instance.nodeType; ) {
	        var anyProps = props;
	        if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
	          if (
	            !inRootOrSingleton &&
	            ("INPUT" !== instance.nodeName || "hidden" !== instance.type)
	          )
	            break;
	        } else if (!inRootOrSingleton)
	          if ("input" === type && "hidden" === instance.type) {
	            checkAttributeStringCoercion(anyProps.name, "name");
	            var name = null == anyProps.name ? null : "" + anyProps.name;
	            if (
	              "hidden" === anyProps.type &&
	              instance.getAttribute("name") === name
	            )
	              return instance;
	          } else return instance;
	        else if (!instance[internalHoistableMarker])
	          switch (type) {
	            case "meta":
	              if (!instance.hasAttribute("itemprop")) break;
	              return instance;
	            case "link":
	              name = instance.getAttribute("rel");
	              if (
	                "stylesheet" === name &&
	                instance.hasAttribute("data-precedence")
	              )
	                break;
	              else if (
	                name !== anyProps.rel ||
	                instance.getAttribute("href") !==
	                  (null == anyProps.href || "" === anyProps.href
	                    ? null
	                    : anyProps.href) ||
	                instance.getAttribute("crossorigin") !==
	                  (null == anyProps.crossOrigin
	                    ? null
	                    : anyProps.crossOrigin) ||
	                instance.getAttribute("title") !==
	                  (null == anyProps.title ? null : anyProps.title)
	              )
	                break;
	              return instance;
	            case "style":
	              if (instance.hasAttribute("data-precedence")) break;
	              return instance;
	            case "script":
	              name = instance.getAttribute("src");
	              if (
	                (name !== (null == anyProps.src ? null : anyProps.src) ||
	                  instance.getAttribute("type") !==
	                    (null == anyProps.type ? null : anyProps.type) ||
	                  instance.getAttribute("crossorigin") !==
	                    (null == anyProps.crossOrigin
	                      ? null
	                      : anyProps.crossOrigin)) &&
	                name &&
	                instance.hasAttribute("async") &&
	                !instance.hasAttribute("itemprop")
	              )
	                break;
	              return instance;
	            default:
	              return instance;
	          }
	        instance = getNextHydratable(instance.nextSibling);
	        if (null === instance) break;
	      }
	      return null;
	    }
	    function canHydrateTextInstance(instance, text, inRootOrSingleton) {
	      if ("" === text) return null;
	      for (; 3 !== instance.nodeType; ) {
	        if (
	          (1 !== instance.nodeType ||
	            "INPUT" !== instance.nodeName ||
	            "hidden" !== instance.type) &&
	          !inRootOrSingleton
	        )
	          return null;
	        instance = getNextHydratable(instance.nextSibling);
	        if (null === instance) return null;
	      }
	      return instance;
	    }
	    function isSuspenseInstanceFallback(instance) {
	      return (
	        instance.data === SUSPENSE_FALLBACK_START_DATA ||
	        (instance.data === SUSPENSE_PENDING_START_DATA &&
	          instance.ownerDocument.readyState === DOCUMENT_READY_STATE_COMPLETE)
	      );
	    }
	    function registerSuspenseInstanceRetry(instance, callback) {
	      var ownerDocument = instance.ownerDocument;
	      if (
	        instance.data !== SUSPENSE_PENDING_START_DATA ||
	        ownerDocument.readyState === DOCUMENT_READY_STATE_COMPLETE
	      )
	        callback();
	      else {
	        var listener = function () {
	          callback();
	          ownerDocument.removeEventListener("DOMContentLoaded", listener);
	        };
	        ownerDocument.addEventListener("DOMContentLoaded", listener);
	        instance._reactRetry = listener;
	      }
	    }
	    function getNextHydratable(node) {
	      for (; null != node; node = node.nextSibling) {
	        var nodeType = node.nodeType;
	        if (1 === nodeType || 3 === nodeType) break;
	        if (8 === nodeType) {
	          nodeType = node.data;
	          if (
	            nodeType === SUSPENSE_START_DATA ||
	            nodeType === SUSPENSE_FALLBACK_START_DATA ||
	            nodeType === SUSPENSE_PENDING_START_DATA ||
	            nodeType === FORM_STATE_IS_MATCHING ||
	            nodeType === FORM_STATE_IS_NOT_MATCHING
	          )
	            break;
	          if (nodeType === SUSPENSE_END_DATA) return null;
	        }
	      }
	      return node;
	    }
	    function describeHydratableInstanceForDevWarnings(instance) {
	      if (1 === instance.nodeType) {
	        for (
	          var JSCompiler_temp_const = instance.nodeName.toLowerCase(),
	            serverDifferences = {},
	            attributes = instance.attributes,
	            i = 0;
	          i < attributes.length;
	          i++
	        ) {
	          var attr = attributes[i];
	          serverDifferences[getPropNameFromAttributeName(attr.name)] =
	            "style" === attr.name.toLowerCase()
	              ? getStylesObjectFromElement(instance)
	              : attr.value;
	        }
	        return { type: JSCompiler_temp_const, props: serverDifferences };
	      }
	      return 8 === instance.nodeType
	        ? { type: "Suspense", props: {} }
	        : instance.nodeValue;
	    }
	    function diffHydratedTextForDevWarnings(textInstance, text, parentProps) {
	      return null === parentProps ||
	        true !== parentProps[SUPPRESS_HYDRATION_WARNING]
	        ? (textInstance.nodeValue === text
	            ? (textInstance = null)
	            : ((text = normalizeMarkupForTextOrAttribute(text)),
	              (textInstance =
	                normalizeMarkupForTextOrAttribute(textInstance.nodeValue) ===
	                text
	                  ? null
	                  : textInstance.nodeValue)),
	          textInstance)
	        : null;
	    }
	    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
	      suspenseInstance = suspenseInstance.nextSibling;
	      for (var depth = 0; suspenseInstance; ) {
	        if (8 === suspenseInstance.nodeType) {
	          var data = suspenseInstance.data;
	          if (data === SUSPENSE_END_DATA) {
	            if (0 === depth)
	              return getNextHydratable(suspenseInstance.nextSibling);
	            depth--;
	          } else
	            (data !== SUSPENSE_START_DATA &&
	              data !== SUSPENSE_FALLBACK_START_DATA &&
	              data !== SUSPENSE_PENDING_START_DATA) ||
	              depth++;
	        }
	        suspenseInstance = suspenseInstance.nextSibling;
	      }
	      return null;
	    }
	    function getParentSuspenseInstance(targetInstance) {
	      targetInstance = targetInstance.previousSibling;
	      for (var depth = 0; targetInstance; ) {
	        if (8 === targetInstance.nodeType) {
	          var data = targetInstance.data;
	          if (
	            data === SUSPENSE_START_DATA ||
	            data === SUSPENSE_FALLBACK_START_DATA ||
	            data === SUSPENSE_PENDING_START_DATA
	          ) {
	            if (0 === depth) return targetInstance;
	            depth--;
	          } else data === SUSPENSE_END_DATA && depth++;
	        }
	        targetInstance = targetInstance.previousSibling;
	      }
	      return null;
	    }
	    function commitHydratedContainer(container) {
	      retryIfBlockedOn(container);
	    }
	    function commitHydratedSuspenseInstance(suspenseInstance) {
	      retryIfBlockedOn(suspenseInstance);
	    }
	    function resolveSingletonInstance(
	      type,
	      props,
	      rootContainerInstance,
	      hostContext,
	      validateDOMNestingDev
	    ) {
	      validateDOMNestingDev &&
	        validateDOMNesting(type, hostContext.ancestorInfo);
	      props = getOwnerDocumentFromRootContainer(rootContainerInstance);
	      switch (type) {
	        case "html":
	          type = props.documentElement;
	          if (!type)
	            throw Error(
	              "React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page."
	            );
	          return type;
	        case "head":
	          type = props.head;
	          if (!type)
	            throw Error(
	              "React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page."
	            );
	          return type;
	        case "body":
	          type = props.body;
	          if (!type)
	            throw Error(
	              "React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page."
	            );
	          return type;
	        default:
	          throw Error(
	            "resolveSingletonInstance was called with an element type that is not supported. This is a bug in React."
	          );
	      }
	    }
	    function acquireSingletonInstance(
	      type,
	      props,
	      instance,
	      internalInstanceHandle
	    ) {
	      if (
	        !instance[internalContainerInstanceKey] &&
	        getInstanceFromNode(instance)
	      ) {
	        var tagName = instance.tagName.toLowerCase();
	        console.error(
	          "You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.",
	          tagName,
	          tagName,
	          tagName
	        );
	      }
	      switch (type) {
	        case "html":
	        case "head":
	        case "body":
	          break;
	        default:
	          console.error(
	            "acquireSingletonInstance was called with an element type that is not supported. This is a bug in React."
	          );
	      }
	      for (tagName = instance.attributes; tagName.length; )
	        instance.removeAttributeNode(tagName[0]);
	      setInitialProperties(instance, type, props);
	      instance[internalInstanceKey] = internalInstanceHandle;
	      instance[internalPropsKey] = props;
	    }
	    function releaseSingletonInstance(instance) {
	      for (var attributes = instance.attributes; attributes.length; )
	        instance.removeAttributeNode(attributes[0]);
	      detachDeletedInstance(instance);
	    }
	    function getHoistableRoot(container) {
	      return "function" === typeof container.getRootNode
	        ? container.getRootNode()
	        : 9 === container.nodeType
	          ? container
	          : container.ownerDocument;
	    }
	    function preconnectAs(rel, href, crossOrigin) {
	      var ownerDocument = globalDocument;
	      if (ownerDocument && "string" === typeof href && href) {
	        var limitedEscapedHref =
	          escapeSelectorAttributeValueInsideDoubleQuotes(href);
	        limitedEscapedHref =
	          'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
	        "string" === typeof crossOrigin &&
	          (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
	        preconnectsSet.has(limitedEscapedHref) ||
	          (preconnectsSet.add(limitedEscapedHref),
	          (rel = { rel: rel, crossOrigin: crossOrigin, href: href }),
	          null === ownerDocument.querySelector(limitedEscapedHref) &&
	            ((href = ownerDocument.createElement("link")),
	            setInitialProperties(href, "link", rel),
	            markNodeAsHoistable(href),
	            ownerDocument.head.appendChild(href)));
	      }
	    }
	    function getResource(type, currentProps, pendingProps, currentResource) {
	      var resourceRoot = (resourceRoot = rootInstanceStackCursor.current)
	        ? getHoistableRoot(resourceRoot)
	        : null;
	      if (!resourceRoot)
	        throw Error(
	          '"resourceRoot" was expected to exist. This is a bug in React.'
	        );
	      switch (type) {
	        case "meta":
	        case "title":
	          return null;
	        case "style":
	          return "string" === typeof pendingProps.precedence &&
	            "string" === typeof pendingProps.href
	            ? ((pendingProps = getStyleKey(pendingProps.href)),
	              (currentProps =
	                getResourcesFromRoot(resourceRoot).hoistableStyles),
	              (currentResource = currentProps.get(pendingProps)),
	              currentResource ||
	                ((currentResource = {
	                  type: "style",
	                  instance: null,
	                  count: 0,
	                  state: null
	                }),
	                currentProps.set(pendingProps, currentResource)),
	              currentResource)
	            : { type: "void", instance: null, count: 0, state: null };
	        case "link":
	          if (
	            "stylesheet" === pendingProps.rel &&
	            "string" === typeof pendingProps.href &&
	            "string" === typeof pendingProps.precedence
	          ) {
	            type = getStyleKey(pendingProps.href);
	            var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles,
	              _resource = _styles.get(type);
	            if (
	              !_resource &&
	              ((resourceRoot = resourceRoot.ownerDocument || resourceRoot),
	              (_resource = {
	                type: "stylesheet",
	                instance: null,
	                count: 0,
	                state: { loading: NotLoaded, preload: null }
	              }),
	              _styles.set(type, _resource),
	              (_styles = resourceRoot.querySelector(
	                getStylesheetSelectorFromKey(type)
	              )) &&
	                !_styles._p &&
	                ((_resource.instance = _styles),
	                (_resource.state.loading = Loaded | Inserted)),
	              !preloadPropsMap.has(type))
	            ) {
	              var preloadProps = {
	                rel: "preload",
	                as: "style",
	                href: pendingProps.href,
	                crossOrigin: pendingProps.crossOrigin,
	                integrity: pendingProps.integrity,
	                media: pendingProps.media,
	                hrefLang: pendingProps.hrefLang,
	                referrerPolicy: pendingProps.referrerPolicy
	              };
	              preloadPropsMap.set(type, preloadProps);
	              _styles ||
	                preloadStylesheet(
	                  resourceRoot,
	                  type,
	                  preloadProps,
	                  _resource.state
	                );
	            }
	            if (currentProps && null === currentResource)
	              throw (
	                ((pendingProps =
	                  "\n\n  - " +
	                  describeLinkForResourceErrorDEV(currentProps) +
	                  "\n  + " +
	                  describeLinkForResourceErrorDEV(pendingProps)),
	                Error(
	                  "Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." +
	                    pendingProps
	                ))
	              );
	            return _resource;
	          }
	          if (currentProps && null !== currentResource)
	            throw (
	              ((pendingProps =
	                "\n\n  - " +
	                describeLinkForResourceErrorDEV(currentProps) +
	                "\n  + " +
	                describeLinkForResourceErrorDEV(pendingProps)),
	              Error(
	                "Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." +
	                  pendingProps
	              ))
	            );
	          return null;
	        case "script":
	          return (
	            (currentProps = pendingProps.async),
	            (pendingProps = pendingProps.src),
	            "string" === typeof pendingProps &&
	            currentProps &&
	            "function" !== typeof currentProps &&
	            "symbol" !== typeof currentProps
	              ? ((pendingProps = getScriptKey(pendingProps)),
	                (currentProps =
	                  getResourcesFromRoot(resourceRoot).hoistableScripts),
	                (currentResource = currentProps.get(pendingProps)),
	                currentResource ||
	                  ((currentResource = {
	                    type: "script",
	                    instance: null,
	                    count: 0,
	                    state: null
	                  }),
	                  currentProps.set(pendingProps, currentResource)),
	                currentResource)
	              : { type: "void", instance: null, count: 0, state: null }
	          );
	        default:
	          throw Error(
	            'getResource encountered a type it did not expect: "' +
	              type +
	              '". this is a bug in React.'
	          );
	      }
	    }
	    function describeLinkForResourceErrorDEV(props) {
	      var describedProps = 0,
	        description = "<link";
	      "string" === typeof props.rel
	        ? (describedProps++, (description += ' rel="' + props.rel + '"'))
	        : hasOwnProperty.call(props, "rel") &&
	          (describedProps++,
	          (description +=
	            ' rel="' +
	            (null === props.rel ? "null" : "invalid type " + typeof props.rel) +
	            '"'));
	      "string" === typeof props.href
	        ? (describedProps++, (description += ' href="' + props.href + '"'))
	        : hasOwnProperty.call(props, "href") &&
	          (describedProps++,
	          (description +=
	            ' href="' +
	            (null === props.href
	              ? "null"
	              : "invalid type " + typeof props.href) +
	            '"'));
	      "string" === typeof props.precedence
	        ? (describedProps++,
	          (description += ' precedence="' + props.precedence + '"'))
	        : hasOwnProperty.call(props, "precedence") &&
	          (describedProps++,
	          (description +=
	            " precedence={" +
	            (null === props.precedence
	              ? "null"
	              : "invalid type " + typeof props.precedence) +
	            "}"));
	      Object.getOwnPropertyNames(props).length > describedProps &&
	        (description += " ...");
	      return description + " />";
	    }
	    function getStyleKey(href) {
	      return (
	        'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"'
	      );
	    }
	    function getStylesheetSelectorFromKey(key) {
	      return 'link[rel="stylesheet"][' + key + "]";
	    }
	    function stylesheetPropsFromRawProps(rawProps) {
	      return assign({}, rawProps, {
	        "data-precedence": rawProps.precedence,
	        precedence: null
	      });
	    }
	    function preloadStylesheet(ownerDocument, key, preloadProps, state) {
	      ownerDocument.querySelector(
	        'link[rel="preload"][as="style"][' + key + "]"
	      )
	        ? (state.loading = Loaded)
	        : ((key = ownerDocument.createElement("link")),
	          (state.preload = key),
	          key.addEventListener("load", function () {
	            return (state.loading |= Loaded);
	          }),
	          key.addEventListener("error", function () {
	            return (state.loading |= Errored);
	          }),
	          setInitialProperties(key, "link", preloadProps),
	          markNodeAsHoistable(key),
	          ownerDocument.head.appendChild(key));
	    }
	    function getScriptKey(src) {
	      return (
	        '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]'
	      );
	    }
	    function getScriptSelectorFromKey(key) {
	      return "script[async]" + key;
	    }
	    function acquireResource(hoistableRoot, resource, props) {
	      resource.count++;
	      if (null === resource.instance)
	        switch (resource.type) {
	          case "style":
	            var instance = hoistableRoot.querySelector(
	              'style[data-href~="' +
	                escapeSelectorAttributeValueInsideDoubleQuotes(props.href) +
	                '"]'
	            );
	            if (instance)
	              return (
	                (resource.instance = instance),
	                markNodeAsHoistable(instance),
	                instance
	              );
	            var styleProps = assign({}, props, {
	              "data-href": props.href,
	              "data-precedence": props.precedence,
	              href: null,
	              precedence: null
	            });
	            instance = (
	              hoistableRoot.ownerDocument || hoistableRoot
	            ).createElement("style");
	            markNodeAsHoistable(instance);
	            setInitialProperties(instance, "style", styleProps);
	            insertStylesheet(instance, props.precedence, hoistableRoot);
	            return (resource.instance = instance);
	          case "stylesheet":
	            styleProps = getStyleKey(props.href);
	            var _instance = hoistableRoot.querySelector(
	              getStylesheetSelectorFromKey(styleProps)
	            );
	            if (_instance)
	              return (
	                (resource.state.loading |= Inserted),
	                (resource.instance = _instance),
	                markNodeAsHoistable(_instance),
	                _instance
	              );
	            instance = stylesheetPropsFromRawProps(props);
	            (styleProps = preloadPropsMap.get(styleProps)) &&
	              adoptPreloadPropsForStylesheet(instance, styleProps);
	            _instance = (
	              hoistableRoot.ownerDocument || hoistableRoot
	            ).createElement("link");
	            markNodeAsHoistable(_instance);
	            var linkInstance = _instance;
	            linkInstance._p = new Promise(function (resolve, reject) {
	              linkInstance.onload = resolve;
	              linkInstance.onerror = reject;
	            });
	            setInitialProperties(_instance, "link", instance);
	            resource.state.loading |= Inserted;
	            insertStylesheet(_instance, props.precedence, hoistableRoot);
	            return (resource.instance = _instance);
	          case "script":
	            _instance = getScriptKey(props.src);
	            if (
	              (styleProps = hoistableRoot.querySelector(
	                getScriptSelectorFromKey(_instance)
	              ))
	            )
	              return (
	                (resource.instance = styleProps),
	                markNodeAsHoistable(styleProps),
	                styleProps
	              );
	            instance = props;
	            if ((styleProps = preloadPropsMap.get(_instance)))
	              (instance = assign({}, props)),
	                adoptPreloadPropsForScript(instance, styleProps);
	            hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
	            styleProps = hoistableRoot.createElement("script");
	            markNodeAsHoistable(styleProps);
	            setInitialProperties(styleProps, "link", instance);
	            hoistableRoot.head.appendChild(styleProps);
	            return (resource.instance = styleProps);
	          case "void":
	            return null;
	          default:
	            throw Error(
	              'acquireResource encountered a resource type it did not expect: "' +
	                resource.type +
	                '". this is a bug in React.'
	            );
	        }
	      else
	        "stylesheet" === resource.type &&
	          (resource.state.loading & Inserted) === NotLoaded &&
	          ((instance = resource.instance),
	          (resource.state.loading |= Inserted),
	          insertStylesheet(instance, props.precedence, hoistableRoot));
	      return resource.instance;
	    }
	    function insertStylesheet(instance, precedence, root) {
	      for (
	        var nodes = root.querySelectorAll(
	            'link[rel="stylesheet"][data-precedence],style[data-precedence]'
	          ),
	          last = nodes.length ? nodes[nodes.length - 1] : null,
	          prior = last,
	          i = 0;
	        i < nodes.length;
	        i++
	      ) {
	        var node = nodes[i];
	        if (node.dataset.precedence === precedence) prior = node;
	        else if (prior !== last) break;
	      }
	      prior
	        ? prior.parentNode.insertBefore(instance, prior.nextSibling)
	        : ((precedence = 9 === root.nodeType ? root.head : root),
	          precedence.insertBefore(instance, precedence.firstChild));
	    }
	    function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
	      null == stylesheetProps.crossOrigin &&
	        (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
	      null == stylesheetProps.referrerPolicy &&
	        (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
	      null == stylesheetProps.title &&
	        (stylesheetProps.title = preloadProps.title);
	    }
	    function adoptPreloadPropsForScript(scriptProps, preloadProps) {
	      null == scriptProps.crossOrigin &&
	        (scriptProps.crossOrigin = preloadProps.crossOrigin);
	      null == scriptProps.referrerPolicy &&
	        (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
	      null == scriptProps.integrity &&
	        (scriptProps.integrity = preloadProps.integrity);
	    }
	    function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
	      if (null === tagCaches) {
	        var cache = new Map();
	        var caches = (tagCaches = new Map());
	        caches.set(ownerDocument, cache);
	      } else
	        (caches = tagCaches),
	          (cache = caches.get(ownerDocument)),
	          cache || ((cache = new Map()), caches.set(ownerDocument, cache));
	      if (cache.has(type)) return cache;
	      cache.set(type, null);
	      ownerDocument = ownerDocument.getElementsByTagName(type);
	      for (caches = 0; caches < ownerDocument.length; caches++) {
	        var node = ownerDocument[caches];
	        if (
	          !(
	            node[internalHoistableMarker] ||
	            node[internalInstanceKey] ||
	            ("link" === type && "stylesheet" === node.getAttribute("rel"))
	          ) &&
	          node.namespaceURI !== SVG_NAMESPACE
	        ) {
	          var nodeKey = node.getAttribute(keyAttribute) || "";
	          nodeKey = type + nodeKey;
	          var existing = cache.get(nodeKey);
	          existing ? existing.push(node) : cache.set(nodeKey, [node]);
	        }
	      }
	      return cache;
	    }
	    function mountHoistable(hoistableRoot, type, instance) {
	      hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
	      hoistableRoot.head.insertBefore(
	        instance,
	        "title" === type ? hoistableRoot.querySelector("head > title") : null
	      );
	    }
	    function isHostHoistableType(type, props, hostContext) {
	      var outsideHostContainerContext =
	        !hostContext.ancestorInfo.containerTagInScope;
	      if (
	        hostContext.context === HostContextNamespaceSvg ||
	        null != props.itemProp
	      )
	        return (
	          !outsideHostContainerContext ||
	            null == props.itemProp ||
	            ("meta" !== type &&
	              "title" !== type &&
	              "style" !== type &&
	              "link" !== type &&
	              "script" !== type) ||
	            console.error(
	              "Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.",
	              type,
	              type
	            ),
	          false
	        );
	      switch (type) {
	        case "meta":
	        case "title":
	          return true;
	        case "style":
	          if (
	            "string" !== typeof props.precedence ||
	            "string" !== typeof props.href ||
	            "" === props.href
	          ) {
	            outsideHostContainerContext &&
	              console.error(
	                'Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflict with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`.'
	              );
	            break;
	          }
	          return true;
	        case "link":
	          if (
	            "string" !== typeof props.rel ||
	            "string" !== typeof props.href ||
	            "" === props.href ||
	            props.onLoad ||
	            props.onError
	          ) {
	            if (
	              "stylesheet" === props.rel &&
	              "string" === typeof props.precedence
	            ) {
	              type = props.href;
	              var onError = props.onError,
	                disabled = props.disabled;
	              hostContext = [];
	              props.onLoad && hostContext.push("`onLoad`");
	              onError && hostContext.push("`onError`");
	              null != disabled && hostContext.push("`disabled`");
	              onError = propNamesListJoin(hostContext, "and");
	              onError += 1 === hostContext.length ? " prop" : " props";
	              disabled =
	                1 === hostContext.length ? "an " + onError : "the " + onError;
	              hostContext.length &&
	                console.error(
	                  'React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.',
	                  type,
	                  disabled,
	                  onError
	                );
	            }
	            outsideHostContainerContext &&
	              ("string" !== typeof props.rel ||
	              "string" !== typeof props.href ||
	              "" === props.href
	                ? console.error(
	                    "Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag"
	                  )
	                : (props.onError || props.onLoad) &&
	                  console.error(
	                    "Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
	                  ));
	            break;
	          }
	          switch (props.rel) {
	            case "stylesheet":
	              return (
	                (type = props.precedence),
	                (props = props.disabled),
	                "string" !== typeof type &&
	                  outsideHostContainerContext &&
	                  console.error(
	                    'Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'
	                  ),
	                "string" === typeof type && null == props
	              );
	            default:
	              return true;
	          }
	        case "script":
	          type =
	            props.async &&
	            "function" !== typeof props.async &&
	            "symbol" !== typeof props.async;
	          if (
	            !type ||
	            props.onLoad ||
	            props.onError ||
	            !props.src ||
	            "string" !== typeof props.src
	          ) {
	            outsideHostContainerContext &&
	              (type
	                ? props.onLoad || props.onError
	                  ? console.error(
	                      "Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
	                    )
	                  : console.error(
	                      "Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>."
	                    )
	                : console.error(
	                    'Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'
	                  ));
	            break;
	          }
	          return true;
	        case "noscript":
	        case "template":
	          outsideHostContainerContext &&
	            console.error(
	              "Cannot render <%s> outside the main document. Try moving it into the root <head> tag.",
	              type
	            );
	      }
	      return false;
	    }
	    function preloadResource(resource) {
	      return "stylesheet" === resource.type &&
	        (resource.state.loading & Settled) === NotLoaded
	        ? false
	        : true;
	    }
	    function noop() {}
	    function suspendResource(hoistableRoot, resource, props) {
	      if (null === suspendedState)
	        throw Error(
	          "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
	        );
	      var state = suspendedState;
	      if (
	        "stylesheet" === resource.type &&
	        ("string" !== typeof props.media ||
	          false !== matchMedia(props.media).matches) &&
	        (resource.state.loading & Inserted) === NotLoaded
	      ) {
	        if (null === resource.instance) {
	          var key = getStyleKey(props.href),
	            instance = hoistableRoot.querySelector(
	              getStylesheetSelectorFromKey(key)
	            );
	          if (instance) {
	            hoistableRoot = instance._p;
	            null !== hoistableRoot &&
	              "object" === typeof hoistableRoot &&
	              "function" === typeof hoistableRoot.then &&
	              (state.count++,
	              (state = onUnsuspend.bind(state)),
	              hoistableRoot.then(state, state));
	            resource.state.loading |= Inserted;
	            resource.instance = instance;
	            markNodeAsHoistable(instance);
	            return;
	          }
	          instance = hoistableRoot.ownerDocument || hoistableRoot;
	          props = stylesheetPropsFromRawProps(props);
	          (key = preloadPropsMap.get(key)) &&
	            adoptPreloadPropsForStylesheet(props, key);
	          instance = instance.createElement("link");
	          markNodeAsHoistable(instance);
	          var linkInstance = instance;
	          linkInstance._p = new Promise(function (resolve, reject) {
	            linkInstance.onload = resolve;
	            linkInstance.onerror = reject;
	          });
	          setInitialProperties(instance, "link", props);
	          resource.instance = instance;
	        }
	        null === state.stylesheets && (state.stylesheets = new Map());
	        state.stylesheets.set(resource, hoistableRoot);
	        (hoistableRoot = resource.state.preload) &&
	          (resource.state.loading & Settled) === NotLoaded &&
	          (state.count++,
	          (resource = onUnsuspend.bind(state)),
	          hoistableRoot.addEventListener("load", resource),
	          hoistableRoot.addEventListener("error", resource));
	      }
	    }
	    function waitForCommitToBeReady() {
	      if (null === suspendedState)
	        throw Error(
	          "Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug."
	        );
	      var state = suspendedState;
	      state.stylesheets &&
	        0 === state.count &&
	        insertSuspendedStylesheets(state, state.stylesheets);
	      return 0 < state.count
	        ? function (commit) {
	            var stylesheetTimer = setTimeout(function () {
	              state.stylesheets &&
	                insertSuspendedStylesheets(state, state.stylesheets);
	              if (state.unsuspend) {
	                var unsuspend = state.unsuspend;
	                state.unsuspend = null;
	                unsuspend();
	              }
	            }, 6e4);
	            state.unsuspend = commit;
	            return function () {
	              state.unsuspend = null;
	              clearTimeout(stylesheetTimer);
	            };
	          }
	        : null;
	    }
	    function onUnsuspend() {
	      this.count--;
	      if (0 === this.count)
	        if (this.stylesheets)
	          insertSuspendedStylesheets(this, this.stylesheets);
	        else if (this.unsuspend) {
	          var unsuspend = this.unsuspend;
	          this.unsuspend = null;
	          unsuspend();
	        }
	    }
	    function insertSuspendedStylesheets(state, resources) {
	      state.stylesheets = null;
	      null !== state.unsuspend &&
	        (state.count++,
	        (precedencesByRoot = new Map()),
	        resources.forEach(insertStylesheetIntoRoot, state),
	        (precedencesByRoot = null),
	        onUnsuspend.call(state));
	    }
	    function insertStylesheetIntoRoot(root, resource) {
	      if (!(resource.state.loading & Inserted)) {
	        var precedences = precedencesByRoot.get(root);
	        if (precedences) var last = precedences.get(LAST_PRECEDENCE);
	        else {
	          precedences = new Map();
	          precedencesByRoot.set(root, precedences);
	          for (
	            var nodes = root.querySelectorAll(
	                "link[data-precedence],style[data-precedence]"
	              ),
	              i = 0;
	            i < nodes.length;
	            i++
	          ) {
	            var node = nodes[i];
	            if (
	              "LINK" === node.nodeName ||
	              "not all" !== node.getAttribute("media")
	            )
	              precedences.set(node.dataset.precedence, node), (last = node);
	          }
	          last && precedences.set(LAST_PRECEDENCE, last);
	        }
	        nodes = resource.instance;
	        node = nodes.getAttribute("data-precedence");
	        i = precedences.get(node) || last;
	        i === last && precedences.set(LAST_PRECEDENCE, nodes);
	        precedences.set(node, nodes);
	        this.count++;
	        last = onUnsuspend.bind(this);
	        nodes.addEventListener("load", last);
	        nodes.addEventListener("error", last);
	        i
	          ? i.parentNode.insertBefore(nodes, i.nextSibling)
	          : ((root = 9 === root.nodeType ? root.head : root),
	            root.insertBefore(nodes, root.firstChild));
	        resource.state.loading |= Inserted;
	      }
	    }
	    function FiberRootNode(
	      containerInfo,
	      tag,
	      hydrate,
	      identifierPrefix,
	      onUncaughtError,
	      onCaughtError,
	      onRecoverableError,
	      formState
	    ) {
	      this.tag = 1;
	      this.containerInfo = containerInfo;
	      this.pingCache = this.current = this.pendingChildren = null;
	      this.timeoutHandle = noTimeout;
	      this.callbackNode =
	        this.next =
	        this.pendingContext =
	        this.context =
	        this.cancelPendingCommit =
	          null;
	      this.callbackPriority = 0;
	      this.expirationTimes = createLaneMap(-1);
	      this.entangledLanes =
	        this.shellSuspendCounter =
	        this.errorRecoveryDisabledLanes =
	        this.expiredLanes =
	        this.warmLanes =
	        this.pingedLanes =
	        this.suspendedLanes =
	        this.pendingLanes =
	          0;
	      this.entanglements = createLaneMap(0);
	      this.hiddenUpdates = createLaneMap(null);
	      this.identifierPrefix = identifierPrefix;
	      this.onUncaughtError = onUncaughtError;
	      this.onCaughtError = onCaughtError;
	      this.onRecoverableError = onRecoverableError;
	      this.pooledCache = null;
	      this.pooledCacheLanes = 0;
	      this.formState = formState;
	      this.incompleteTransitions = new Map();
	      this.passiveEffectDuration = this.effectDuration = -0;
	      this.memoizedUpdaters = new Set();
	      containerInfo = this.pendingUpdatersLaneMap = [];
	      for (tag = 0; 31 > tag; tag++) containerInfo.push(new Set());
	      this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
	    }
	    function createFiberRoot(
	      containerInfo,
	      tag,
	      hydrate,
	      initialChildren,
	      hydrationCallbacks,
	      isStrictMode,
	      identifierPrefix,
	      onUncaughtError,
	      onCaughtError,
	      onRecoverableError,
	      transitionCallbacks,
	      formState
	    ) {
	      containerInfo = new FiberRootNode(
	        containerInfo,
	        tag,
	        hydrate,
	        identifierPrefix,
	        onUncaughtError,
	        onCaughtError,
	        onRecoverableError,
	        formState
	      );
	      tag = ConcurrentMode;
	      true === isStrictMode && (tag |= StrictLegacyMode | StrictEffectsMode);
	      isDevToolsPresent && (tag |= ProfileMode);
	      isStrictMode = createFiber(3, null, null, tag);
	      containerInfo.current = isStrictMode;
	      isStrictMode.stateNode = containerInfo;
	      tag = createCache();
	      retainCache(tag);
	      containerInfo.pooledCache = tag;
	      retainCache(tag);
	      isStrictMode.memoizedState = {
	        element: initialChildren,
	        isDehydrated: hydrate,
	        cache: tag
	      };
	      initializeUpdateQueue(isStrictMode);
	      return containerInfo;
	    }
	    function getContextForSubtree(parentComponent) {
	      if (!parentComponent) return emptyContextObject;
	      parentComponent = emptyContextObject;
	      return parentComponent;
	    }
	    function updateContainerImpl(
	      rootFiber,
	      lane,
	      element,
	      container,
	      parentComponent,
	      callback
	    ) {
	      if (
	        injectedHook &&
	        "function" === typeof injectedHook.onScheduleFiberRoot
	      )
	        try {
	          injectedHook.onScheduleFiberRoot(rendererID, container, element);
	        } catch (err) {
	          hasLoggedError ||
	            ((hasLoggedError = true),
	            console.error(
	              "React instrumentation encountered an error: %s",
	              err
	            ));
	        }
	      null !== injectedProfilingHooks &&
	        "function" === typeof injectedProfilingHooks.markRenderScheduled &&
	        injectedProfilingHooks.markRenderScheduled(lane);
	      parentComponent = getContextForSubtree(parentComponent);
	      null === container.context
	        ? (container.context = parentComponent)
	        : (container.pendingContext = parentComponent);
	      isRendering &&
	        null !== current &&
	        !didWarnAboutNestedUpdates &&
	        ((didWarnAboutNestedUpdates = true),
	        console.error(
	          "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",
	          getComponentNameFromFiber(current) || "Unknown"
	        ));
	      container = createUpdate(lane);
	      container.payload = { element: element };
	      callback = void 0 === callback ? null : callback;
	      null !== callback &&
	        ("function" !== typeof callback &&
	          console.error(
	            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
	            callback
	          ),
	        (container.callback = callback));
	      element = enqueueUpdate(rootFiber, container, lane);
	      null !== element &&
	        (scheduleUpdateOnFiber(element, rootFiber, lane),
	        entangleTransitions(element, rootFiber, lane));
	    }
	    function markRetryLaneImpl(fiber, retryLane) {
	      fiber = fiber.memoizedState;
	      if (null !== fiber && null !== fiber.dehydrated) {
	        var a = fiber.retryLane;
	        fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
	      }
	    }
	    function markRetryLaneIfNotHydrated(fiber, retryLane) {
	      markRetryLaneImpl(fiber, retryLane);
	      (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
	    }
	    function attemptContinuousHydration(fiber) {
	      if (13 === fiber.tag) {
	        var root = enqueueConcurrentRenderForLane(fiber, 67108864);
	        null !== root && scheduleUpdateOnFiber(root, fiber, 67108864);
	        markRetryLaneIfNotHydrated(fiber, 67108864);
	      }
	    }
	    function getCurrentFiberForDevTools() {
	      return current;
	    }
	    function getLaneLabelMap() {
	      for (var map = new Map(), lane = 1, index = 0; 31 > index; index++) {
	        var label = getLabelForLane(lane);
	        map.set(lane, label);
	        lane *= 2;
	      }
	      return map;
	    }
	    function dispatchDiscreteEvent(
	      domEventName,
	      eventSystemFlags,
	      container,
	      nativeEvent
	    ) {
	      var prevTransition = ReactSharedInternals.T;
	      ReactSharedInternals.T = null;
	      var previousPriority = ReactDOMSharedInternals.p;
	      try {
	        (ReactDOMSharedInternals.p = DiscreteEventPriority),
	          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	      } finally {
	        (ReactDOMSharedInternals.p = previousPriority),
	          (ReactSharedInternals.T = prevTransition);
	      }
	    }
	    function dispatchContinuousEvent(
	      domEventName,
	      eventSystemFlags,
	      container,
	      nativeEvent
	    ) {
	      var prevTransition = ReactSharedInternals.T;
	      ReactSharedInternals.T = null;
	      var previousPriority = ReactDOMSharedInternals.p;
	      try {
	        (ReactDOMSharedInternals.p = ContinuousEventPriority),
	          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	      } finally {
	        (ReactDOMSharedInternals.p = previousPriority),
	          (ReactSharedInternals.T = prevTransition);
	      }
	    }
	    function dispatchEvent(
	      domEventName,
	      eventSystemFlags,
	      targetContainer,
	      nativeEvent
	    ) {
	      if (_enabled) {
	        var blockedOn = findInstanceBlockingEvent(nativeEvent);
	        if (null === blockedOn)
	          dispatchEventForPluginEventSystem(
	            domEventName,
	            eventSystemFlags,
	            nativeEvent,
	            return_targetInst,
	            targetContainer
	          ),
	            clearIfContinuousEvent(domEventName, nativeEvent);
	        else if (
	          queueIfContinuousEvent(
	            blockedOn,
	            domEventName,
	            eventSystemFlags,
	            targetContainer,
	            nativeEvent
	          )
	        )
	          nativeEvent.stopPropagation();
	        else if (
	          (clearIfContinuousEvent(domEventName, nativeEvent),
	          eventSystemFlags & 4 &&
	            -1 < discreteReplayableEvents.indexOf(domEventName))
	        ) {
	          for (; null !== blockedOn; ) {
	            var fiber = getInstanceFromNode(blockedOn);
	            if (null !== fiber)
	              switch (fiber.tag) {
	                case 3:
	                  fiber = fiber.stateNode;
	                  if (fiber.current.memoizedState.isDehydrated) {
	                    var lanes = getHighestPriorityLanes(fiber.pendingLanes);
	                    if (0 !== lanes) {
	                      var root = fiber;
	                      root.pendingLanes |= 2;
	                      for (root.entangledLanes |= 2; lanes; ) {
	                        var lane = 1 << (31 - clz32(lanes));
	                        root.entanglements[1] |= lane;
	                        lanes &= ~lane;
	                      }
	                      ensureRootIsScheduled(fiber);
	                      (executionContext & (RenderContext | CommitContext)) ===
	                        NoContext &&
	                        ((workInProgressRootRenderTargetTime =
	                          now$1() + RENDER_TIMEOUT_MS),
	                        flushSyncWorkAcrossRoots_impl(0));
	                    }
	                  }
	                  break;
	                case 13:
	                  (root = enqueueConcurrentRenderForLane(fiber, 2)),
	                    null !== root && scheduleUpdateOnFiber(root, fiber, 2),
	                    flushSyncWork$1(),
	                    markRetryLaneIfNotHydrated(fiber, 2);
	              }
	            fiber = findInstanceBlockingEvent(nativeEvent);
	            null === fiber &&
	              dispatchEventForPluginEventSystem(
	                domEventName,
	                eventSystemFlags,
	                nativeEvent,
	                return_targetInst,
	                targetContainer
	              );
	            if (fiber === blockedOn) break;
	            blockedOn = fiber;
	          }
	          null !== blockedOn && nativeEvent.stopPropagation();
	        } else
	          dispatchEventForPluginEventSystem(
	            domEventName,
	            eventSystemFlags,
	            nativeEvent,
	            null,
	            targetContainer
	          );
	      }
	    }
	    function findInstanceBlockingEvent(nativeEvent) {
	      nativeEvent = getEventTarget(nativeEvent);
	      return findInstanceBlockingTarget(nativeEvent);
	    }
	    function findInstanceBlockingTarget(targetNode) {
	      return_targetInst = null;
	      targetNode = getClosestInstanceFromNode(targetNode);
	      if (null !== targetNode) {
	        var nearestMounted = getNearestMountedFiber(targetNode);
	        if (null === nearestMounted) targetNode = null;
	        else {
	          var tag = nearestMounted.tag;
	          if (13 === tag) {
	            targetNode = getSuspenseInstanceFromFiber(nearestMounted);
	            if (null !== targetNode) return targetNode;
	            targetNode = null;
	          } else if (3 === tag) {
	            if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
	              return 3 === nearestMounted.tag
	                ? nearestMounted.stateNode.containerInfo
	                : null;
	            targetNode = null;
	          } else nearestMounted !== targetNode && (targetNode = null);
	        }
	      }
	      return_targetInst = targetNode;
	      return null;
	    }
	    function getEventPriority(domEventName) {
	      switch (domEventName) {
	        case "beforetoggle":
	        case "cancel":
	        case "click":
	        case "close":
	        case "contextmenu":
	        case "copy":
	        case "cut":
	        case "auxclick":
	        case "dblclick":
	        case "dragend":
	        case "dragstart":
	        case "drop":
	        case "focusin":
	        case "focusout":
	        case "input":
	        case "invalid":
	        case "keydown":
	        case "keypress":
	        case "keyup":
	        case "mousedown":
	        case "mouseup":
	        case "paste":
	        case "pause":
	        case "play":
	        case "pointercancel":
	        case "pointerdown":
	        case "pointerup":
	        case "ratechange":
	        case "reset":
	        case "resize":
	        case "seeked":
	        case "submit":
	        case "toggle":
	        case "touchcancel":
	        case "touchend":
	        case "touchstart":
	        case "volumechange":
	        case "change":
	        case "selectionchange":
	        case "textInput":
	        case "compositionstart":
	        case "compositionend":
	        case "compositionupdate":
	        case "beforeblur":
	        case "afterblur":
	        case "beforeinput":
	        case "blur":
	        case "fullscreenchange":
	        case "focus":
	        case "hashchange":
	        case "popstate":
	        case "select":
	        case "selectstart":
	          return DiscreteEventPriority;
	        case "drag":
	        case "dragenter":
	        case "dragexit":
	        case "dragleave":
	        case "dragover":
	        case "mousemove":
	        case "mouseout":
	        case "mouseover":
	        case "pointermove":
	        case "pointerout":
	        case "pointerover":
	        case "scroll":
	        case "touchmove":
	        case "wheel":
	        case "mouseenter":
	        case "mouseleave":
	        case "pointerenter":
	        case "pointerleave":
	          return ContinuousEventPriority;
	        case "message":
	          switch (getCurrentPriorityLevel()) {
	            case ImmediatePriority:
	              return DiscreteEventPriority;
	            case UserBlockingPriority:
	              return ContinuousEventPriority;
	            case NormalPriority$1:
	            case LowPriority:
	              return DefaultEventPriority;
	            case IdlePriority:
	              return IdleEventPriority;
	            default:
	              return DefaultEventPriority;
	          }
	        default:
	          return DefaultEventPriority;
	      }
	    }
	    function clearIfContinuousEvent(domEventName, nativeEvent) {
	      switch (domEventName) {
	        case "focusin":
	        case "focusout":
	          queuedFocus = null;
	          break;
	        case "dragenter":
	        case "dragleave":
	          queuedDrag = null;
	          break;
	        case "mouseover":
	        case "mouseout":
	          queuedMouse = null;
	          break;
	        case "pointerover":
	        case "pointerout":
	          queuedPointers.delete(nativeEvent.pointerId);
	          break;
	        case "gotpointercapture":
	        case "lostpointercapture":
	          queuedPointerCaptures.delete(nativeEvent.pointerId);
	      }
	    }
	    function accumulateOrCreateContinuousQueuedReplayableEvent(
	      existingQueuedEvent,
	      blockedOn,
	      domEventName,
	      eventSystemFlags,
	      targetContainer,
	      nativeEvent
	    ) {
	      if (
	        null === existingQueuedEvent ||
	        existingQueuedEvent.nativeEvent !== nativeEvent
	      )
	        return (
	          (existingQueuedEvent = {
	            blockedOn: blockedOn,
	            domEventName: domEventName,
	            eventSystemFlags: eventSystemFlags,
	            nativeEvent: nativeEvent,
	            targetContainers: [targetContainer]
	          }),
	          null !== blockedOn &&
	            ((blockedOn = getInstanceFromNode(blockedOn)),
	            null !== blockedOn && attemptContinuousHydration(blockedOn)),
	          existingQueuedEvent
	        );
	      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
	      blockedOn = existingQueuedEvent.targetContainers;
	      null !== targetContainer &&
	        -1 === blockedOn.indexOf(targetContainer) &&
	        blockedOn.push(targetContainer);
	      return existingQueuedEvent;
	    }
	    function queueIfContinuousEvent(
	      blockedOn,
	      domEventName,
	      eventSystemFlags,
	      targetContainer,
	      nativeEvent
	    ) {
	      switch (domEventName) {
	        case "focusin":
	          return (
	            (queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
	              queuedFocus,
	              blockedOn,
	              domEventName,
	              eventSystemFlags,
	              targetContainer,
	              nativeEvent
	            )),
	            true
	          );
	        case "dragenter":
	          return (
	            (queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
	              queuedDrag,
	              blockedOn,
	              domEventName,
	              eventSystemFlags,
	              targetContainer,
	              nativeEvent
	            )),
	            true
	          );
	        case "mouseover":
	          return (
	            (queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
	              queuedMouse,
	              blockedOn,
	              domEventName,
	              eventSystemFlags,
	              targetContainer,
	              nativeEvent
	            )),
	            true
	          );
	        case "pointerover":
	          var pointerId = nativeEvent.pointerId;
	          queuedPointers.set(
	            pointerId,
	            accumulateOrCreateContinuousQueuedReplayableEvent(
	              queuedPointers.get(pointerId) || null,
	              blockedOn,
	              domEventName,
	              eventSystemFlags,
	              targetContainer,
	              nativeEvent
	            )
	          );
	          return true;
	        case "gotpointercapture":
	          return (
	            (pointerId = nativeEvent.pointerId),
	            queuedPointerCaptures.set(
	              pointerId,
	              accumulateOrCreateContinuousQueuedReplayableEvent(
	                queuedPointerCaptures.get(pointerId) || null,
	                blockedOn,
	                domEventName,
	                eventSystemFlags,
	                targetContainer,
	                nativeEvent
	              )
	            ),
	            true
	          );
	      }
	      return false;
	    }
	    function attemptExplicitHydrationTarget(queuedTarget) {
	      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
	      if (null !== targetInst) {
	        var nearestMounted = getNearestMountedFiber(targetInst);
	        if (null !== nearestMounted)
	          if (((targetInst = nearestMounted.tag), 13 === targetInst)) {
	            if (
	              ((targetInst = getSuspenseInstanceFromFiber(nearestMounted)),
	              null !== targetInst)
	            ) {
	              queuedTarget.blockedOn = targetInst;
	              runWithPriority(queuedTarget.priority, function () {
	                if (13 === nearestMounted.tag) {
	                  var lane = requestUpdateLane(nearestMounted);
	                  lane = getBumpedLaneForHydrationByLane(lane);
	                  var root = enqueueConcurrentRenderForLane(
	                    nearestMounted,
	                    lane
	                  );
	                  null !== root &&
	                    scheduleUpdateOnFiber(root, nearestMounted, lane);
	                  markRetryLaneIfNotHydrated(nearestMounted, lane);
	                }
	              });
	              return;
	            }
	          } else if (
	            3 === targetInst &&
	            nearestMounted.stateNode.current.memoizedState.isDehydrated
	          ) {
	            queuedTarget.blockedOn =
	              3 === nearestMounted.tag
	                ? nearestMounted.stateNode.containerInfo
	                : null;
	            return;
	          }
	      }
	      queuedTarget.blockedOn = null;
	    }
	    function attemptReplayContinuousQueuedEvent(queuedEvent) {
	      if (null !== queuedEvent.blockedOn) return false;
	      for (
	        var targetContainers = queuedEvent.targetContainers;
	        0 < targetContainers.length;

	      ) {
	        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
	        if (null === nextBlockedOn) {
	          nextBlockedOn = queuedEvent.nativeEvent;
	          var nativeEventClone = new nextBlockedOn.constructor(
	              nextBlockedOn.type,
	              nextBlockedOn
	            ),
	            event = nativeEventClone;
	          null !== currentReplayingEvent &&
	            console.error(
	              "Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."
	            );
	          currentReplayingEvent = event;
	          nextBlockedOn.target.dispatchEvent(nativeEventClone);
	          null === currentReplayingEvent &&
	            console.error(
	              "Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."
	            );
	          currentReplayingEvent = null;
	        } else
	          return (
	            (targetContainers = getInstanceFromNode(nextBlockedOn)),
	            null !== targetContainers &&
	              attemptContinuousHydration(targetContainers),
	            (queuedEvent.blockedOn = nextBlockedOn),
	            false
	          );
	        targetContainers.shift();
	      }
	      return true;
	    }
	    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
	      attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
	    }
	    function replayUnblockedEvents() {
	      hasScheduledReplayAttempt = false;
	      null !== queuedFocus &&
	        attemptReplayContinuousQueuedEvent(queuedFocus) &&
	        (queuedFocus = null);
	      null !== queuedDrag &&
	        attemptReplayContinuousQueuedEvent(queuedDrag) &&
	        (queuedDrag = null);
	      null !== queuedMouse &&
	        attemptReplayContinuousQueuedEvent(queuedMouse) &&
	        (queuedMouse = null);
	      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
	      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
	    }
	    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
	      queuedEvent.blockedOn === unblocked &&
	        ((queuedEvent.blockedOn = null),
	        hasScheduledReplayAttempt ||
	          ((hasScheduledReplayAttempt = true),
	          Scheduler.unstable_scheduleCallback(
	            Scheduler.unstable_NormalPriority,
	            replayUnblockedEvents
	          )));
	    }
	    function scheduleReplayQueueIfNeeded(formReplayingQueue) {
	      lastScheduledReplayQueue !== formReplayingQueue &&
	        ((lastScheduledReplayQueue = formReplayingQueue),
	        Scheduler.unstable_scheduleCallback(
	          Scheduler.unstable_NormalPriority,
	          function () {
	            lastScheduledReplayQueue === formReplayingQueue &&
	              (lastScheduledReplayQueue = null);
	            for (var i = 0; i < formReplayingQueue.length; i += 3) {
	              var form = formReplayingQueue[i],
	                submitterOrAction = formReplayingQueue[i + 1],
	                formData = formReplayingQueue[i + 2];
	              if ("function" !== typeof submitterOrAction)
	                if (
	                  null === findInstanceBlockingTarget(submitterOrAction || form)
	                )
	                  continue;
	                else break;
	              var formInst = getInstanceFromNode(form);
	              null !== formInst &&
	                (formReplayingQueue.splice(i, 3),
	                (i -= 3),
	                (form = {
	                  pending: true,
	                  data: formData,
	                  method: form.method,
	                  action: submitterOrAction
	                }),
	                Object.freeze(form),
	                startHostTransition(
	                  formInst,
	                  form,
	                  submitterOrAction,
	                  formData
	                ));
	            }
	          }
	        ));
	    }
	    function retryIfBlockedOn(unblocked) {
	      function unblock(queuedEvent) {
	        return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
	      }
	      null !== queuedFocus &&
	        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
	      null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
	      null !== queuedMouse &&
	        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
	      queuedPointers.forEach(unblock);
	      queuedPointerCaptures.forEach(unblock);
	      for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
	        var queuedTarget = queuedExplicitHydrationTargets[i];
	        queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
	      }
	      for (
	        ;
	        0 < queuedExplicitHydrationTargets.length &&
	        ((i = queuedExplicitHydrationTargets[0]), null === i.blockedOn);

	      )
	        attemptExplicitHydrationTarget(i),
	          null === i.blockedOn && queuedExplicitHydrationTargets.shift();
	      i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
	      if (null != i)
	        for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
	          var form = i[queuedTarget],
	            submitterOrAction = i[queuedTarget + 1],
	            formProps = form[internalPropsKey] || null;
	          if ("function" === typeof submitterOrAction)
	            formProps || scheduleReplayQueueIfNeeded(i);
	          else if (formProps) {
	            var action = null;
	            if (
	              submitterOrAction &&
	              submitterOrAction.hasAttribute("formAction")
	            )
	              if (
	                ((form = submitterOrAction),
	                (formProps = submitterOrAction[internalPropsKey] || null))
	              )
	                action = formProps.formAction;
	              else {
	                if (null !== findInstanceBlockingTarget(form)) continue;
	              }
	            else action = formProps.action;
	            "function" === typeof action
	              ? (i[queuedTarget + 1] = action)
	              : (i.splice(queuedTarget, 3), (queuedTarget -= 3));
	            scheduleReplayQueueIfNeeded(i);
	          }
	        }
	    }
	    function ReactDOMRoot(internalRoot) {
	      this._internalRoot = internalRoot;
	    }
	    function ReactDOMHydrationRoot(internalRoot) {
	      this._internalRoot = internalRoot;
	    }
	    function warnIfReactDOMContainerInDEV(container) {
	      container[internalContainerInstanceKey] &&
	        (container._reactRootContainer
	          ? console.error(
	              "You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."
	            )
	          : console.error(
	              "You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."
	            ));
	    }
	    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
	      "function" ===
	        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
	    var Scheduler = requireScheduler(),
	      React = requireReact(),
	      ReactDOM = requireReactDom(),
	      assign = Object.assign,
	      REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"),
	      REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
	      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
	      REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
	      REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
	      REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
	      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
	      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
	      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
	      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
	      REACT_MEMO_TYPE = Symbol.for("react.memo"),
	      REACT_LAZY_TYPE = Symbol.for("react.lazy");
	    var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
	    var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
	    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
	      REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
	      isArrayImpl = Array.isArray,
	      ReactSharedInternals =
	        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
	      ReactDOMSharedInternals =
	        ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
	      NotPending = Object.freeze({
	        pending: false,
	        data: null,
	        method: null,
	        action: null
	      }),
	      valueStack = [];
	    var fiberStack = [];
	    var index$jscomp$0 = -1,
	      contextStackCursor = createCursor(null),
	      contextFiberStackCursor = createCursor(null),
	      rootInstanceStackCursor = createCursor(null),
	      hostTransitionProviderCursor = createCursor(null),
	      hasOwnProperty = Object.prototype.hasOwnProperty,
	      scheduleCallback$3 = Scheduler.unstable_scheduleCallback,
	      cancelCallback$1 = Scheduler.unstable_cancelCallback,
	      shouldYield = Scheduler.unstable_shouldYield,
	      requestPaint = Scheduler.unstable_requestPaint,
	      now$1 = Scheduler.unstable_now,
	      getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
	      ImmediatePriority = Scheduler.unstable_ImmediatePriority,
	      UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
	      NormalPriority$1 = Scheduler.unstable_NormalPriority,
	      LowPriority = Scheduler.unstable_LowPriority,
	      IdlePriority = Scheduler.unstable_IdlePriority,
	      log$1 = Scheduler.log,
	      unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,
	      rendererID = null,
	      injectedHook = null,
	      injectedProfilingHooks = null,
	      hasLoggedError = false,
	      isDevToolsPresent = "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__,
	      clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
	      log = Math.log,
	      LN2 = Math.LN2,
	      nextTransitionLane = 256,
	      nextRetryLane = 4194304,
	      DiscreteEventPriority = 2,
	      ContinuousEventPriority = 8,
	      DefaultEventPriority = 32,
	      IdleEventPriority = 268435456,
	      randomKey = Math.random().toString(36).slice(2),
	      internalInstanceKey = "__reactFiber$" + randomKey,
	      internalPropsKey = "__reactProps$" + randomKey,
	      internalContainerInstanceKey = "__reactContainer$" + randomKey,
	      internalEventHandlersKey = "__reactEvents$" + randomKey,
	      internalEventHandlerListenersKey = "__reactListeners$" + randomKey,
	      internalEventHandlesSetKey = "__reactHandles$" + randomKey,
	      internalRootNodeResourcesKey = "__reactResources$" + randomKey,
	      internalHoistableMarker = "__reactMarker$" + randomKey,
	      allNativeEvents = new Set(),
	      registrationNameDependencies = {},
	      possibleRegistrationNames = {},
	      hasReadOnlyValue = {
	        button: true,
	        checkbox: true,
	        image: true,
	        hidden: true,
	        radio: true,
	        reset: true,
	        submit: true
	      },
	      VALID_ATTRIBUTE_NAME_REGEX = RegExp(
	        "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
	      ),
	      illegalAttributeNameCache = {},
	      validatedAttributeNameCache = {},
	      disabledDepth = 0,
	      prevLog,
	      prevInfo,
	      prevWarn,
	      prevError,
	      prevGroup,
	      prevGroupCollapsed,
	      prevGroupEnd;
	    disabledLog.__reactDisabledLog = true;
	    var prefix,
	      suffix,
	      reentry = false;
	    var componentFrameCache = new (
	      "function" === typeof WeakMap ? WeakMap : Map
	    )();
	    var current = null,
	      isRendering = false,
	      escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g,
	      didWarnValueDefaultValue$1 = false,
	      didWarnCheckedDefaultChecked = false,
	      didWarnSelectedSetOnOption = false,
	      didWarnInvalidChild = false,
	      didWarnInvalidInnerHTML = false;
	    var didWarnValueDefaultValue = false;
	    var valuePropNames = ["value", "defaultValue"],
	      didWarnValDefaultVal = false,
	      needsEscaping = /["'&<>\n\t]|^\s|\s$/,
	      specialTags =
	        "address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(
	          " "
	        ),
	      inScopeTags =
	        "applet caption html table td th marquee object template foreignObject desc title".split(
	          " "
	        ),
	      buttonScopeTags = inScopeTags.concat(["button"]),
	      impliedEndTags = "dd dt li option optgroup p rp rt".split(" "),
	      emptyAncestorInfoDev = {
	        current: null,
	        formTag: null,
	        aTagInScope: null,
	        buttonTagInScope: null,
	        nobrTagInScope: null,
	        pTagInButtonScope: null,
	        listItemTagAutoclosing: null,
	        dlItemTagAutoclosing: null,
	        containerTagInScope: null,
	        implicitRootScope: false
	      },
	      didWarn = {},
	      shorthandToLonghand = {
	        animation:
	          "animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(
	            " "
	          ),
	        background:
	          "backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(
	            " "
	          ),
	        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
	        border:
	          "borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(
	            " "
	          ),
	        borderBlockEnd: [
	          "borderBlockEndColor",
	          "borderBlockEndStyle",
	          "borderBlockEndWidth"
	        ],
	        borderBlockStart: [
	          "borderBlockStartColor",
	          "borderBlockStartStyle",
	          "borderBlockStartWidth"
	        ],
	        borderBottom: [
	          "borderBottomColor",
	          "borderBottomStyle",
	          "borderBottomWidth"
	        ],
	        borderColor: [
	          "borderBottomColor",
	          "borderLeftColor",
	          "borderRightColor",
	          "borderTopColor"
	        ],
	        borderImage: [
	          "borderImageOutset",
	          "borderImageRepeat",
	          "borderImageSlice",
	          "borderImageSource",
	          "borderImageWidth"
	        ],
	        borderInlineEnd: [
	          "borderInlineEndColor",
	          "borderInlineEndStyle",
	          "borderInlineEndWidth"
	        ],
	        borderInlineStart: [
	          "borderInlineStartColor",
	          "borderInlineStartStyle",
	          "borderInlineStartWidth"
	        ],
	        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
	        borderRadius: [
	          "borderBottomLeftRadius",
	          "borderBottomRightRadius",
	          "borderTopLeftRadius",
	          "borderTopRightRadius"
	        ],
	        borderRight: [
	          "borderRightColor",
	          "borderRightStyle",
	          "borderRightWidth"
	        ],
	        borderStyle: [
	          "borderBottomStyle",
	          "borderLeftStyle",
	          "borderRightStyle",
	          "borderTopStyle"
	        ],
	        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
	        borderWidth: [
	          "borderBottomWidth",
	          "borderLeftWidth",
	          "borderRightWidth",
	          "borderTopWidth"
	        ],
	        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
	        columns: ["columnCount", "columnWidth"],
	        flex: ["flexBasis", "flexGrow", "flexShrink"],
	        flexFlow: ["flexDirection", "flexWrap"],
	        font: "fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(
	          " "
	        ),
	        fontVariant:
	          "fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(
	            " "
	          ),
	        gap: ["columnGap", "rowGap"],
	        grid: "gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(
	          " "
	        ),
	        gridArea: [
	          "gridColumnEnd",
	          "gridColumnStart",
	          "gridRowEnd",
	          "gridRowStart"
	        ],
	        gridColumn: ["gridColumnEnd", "gridColumnStart"],
	        gridColumnGap: ["columnGap"],
	        gridGap: ["columnGap", "rowGap"],
	        gridRow: ["gridRowEnd", "gridRowStart"],
	        gridRowGap: ["rowGap"],
	        gridTemplate: [
	          "gridTemplateAreas",
	          "gridTemplateColumns",
	          "gridTemplateRows"
	        ],
	        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
	        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
	        marker: ["markerEnd", "markerMid", "markerStart"],
	        mask: "maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(
	          " "
	        ),
	        maskPosition: ["maskPositionX", "maskPositionY"],
	        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
	        overflow: ["overflowX", "overflowY"],
	        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
	        placeContent: ["alignContent", "justifyContent"],
	        placeItems: ["alignItems", "justifyItems"],
	        placeSelf: ["alignSelf", "justifySelf"],
	        textDecoration: [
	          "textDecorationColor",
	          "textDecorationLine",
	          "textDecorationStyle"
	        ],
	        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
	        transition: [
	          "transitionDelay",
	          "transitionDuration",
	          "transitionProperty",
	          "transitionTimingFunction"
	        ],
	        wordWrap: ["overflowWrap"]
	      },
	      uppercasePattern = /([A-Z])/g,
	      msPattern$1 = /^ms-/,
	      badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/,
	      msPattern = /^-ms-/,
	      hyphenPattern = /-(.)/g,
	      badStyleValueWithSemicolonPattern = /;\s*$/,
	      warnedStyleNames = {},
	      warnedStyleValues = {},
	      warnedForNaNValue = false,
	      warnedForInfinityValue = false,
	      unitlessNumbers = new Set(
	        "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
	          " "
	        )
	      ),
	      MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML",
	      SVG_NAMESPACE = "http://www.w3.org/2000/svg",
	      aliases = new Map([
	        ["acceptCharset", "accept-charset"],
	        ["htmlFor", "for"],
	        ["httpEquiv", "http-equiv"],
	        ["crossOrigin", "crossorigin"],
	        ["accentHeight", "accent-height"],
	        ["alignmentBaseline", "alignment-baseline"],
	        ["arabicForm", "arabic-form"],
	        ["baselineShift", "baseline-shift"],
	        ["capHeight", "cap-height"],
	        ["clipPath", "clip-path"],
	        ["clipRule", "clip-rule"],
	        ["colorInterpolation", "color-interpolation"],
	        ["colorInterpolationFilters", "color-interpolation-filters"],
	        ["colorProfile", "color-profile"],
	        ["colorRendering", "color-rendering"],
	        ["dominantBaseline", "dominant-baseline"],
	        ["enableBackground", "enable-background"],
	        ["fillOpacity", "fill-opacity"],
	        ["fillRule", "fill-rule"],
	        ["floodColor", "flood-color"],
	        ["floodOpacity", "flood-opacity"],
	        ["fontFamily", "font-family"],
	        ["fontSize", "font-size"],
	        ["fontSizeAdjust", "font-size-adjust"],
	        ["fontStretch", "font-stretch"],
	        ["fontStyle", "font-style"],
	        ["fontVariant", "font-variant"],
	        ["fontWeight", "font-weight"],
	        ["glyphName", "glyph-name"],
	        ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
	        ["glyphOrientationVertical", "glyph-orientation-vertical"],
	        ["horizAdvX", "horiz-adv-x"],
	        ["horizOriginX", "horiz-origin-x"],
	        ["imageRendering", "image-rendering"],
	        ["letterSpacing", "letter-spacing"],
	        ["lightingColor", "lighting-color"],
	        ["markerEnd", "marker-end"],
	        ["markerMid", "marker-mid"],
	        ["markerStart", "marker-start"],
	        ["overlinePosition", "overline-position"],
	        ["overlineThickness", "overline-thickness"],
	        ["paintOrder", "paint-order"],
	        ["panose-1", "panose-1"],
	        ["pointerEvents", "pointer-events"],
	        ["renderingIntent", "rendering-intent"],
	        ["shapeRendering", "shape-rendering"],
	        ["stopColor", "stop-color"],
	        ["stopOpacity", "stop-opacity"],
	        ["strikethroughPosition", "strikethrough-position"],
	        ["strikethroughThickness", "strikethrough-thickness"],
	        ["strokeDasharray", "stroke-dasharray"],
	        ["strokeDashoffset", "stroke-dashoffset"],
	        ["strokeLinecap", "stroke-linecap"],
	        ["strokeLinejoin", "stroke-linejoin"],
	        ["strokeMiterlimit", "stroke-miterlimit"],
	        ["strokeOpacity", "stroke-opacity"],
	        ["strokeWidth", "stroke-width"],
	        ["textAnchor", "text-anchor"],
	        ["textDecoration", "text-decoration"],
	        ["textRendering", "text-rendering"],
	        ["transformOrigin", "transform-origin"],
	        ["underlinePosition", "underline-position"],
	        ["underlineThickness", "underline-thickness"],
	        ["unicodeBidi", "unicode-bidi"],
	        ["unicodeRange", "unicode-range"],
	        ["unitsPerEm", "units-per-em"],
	        ["vAlphabetic", "v-alphabetic"],
	        ["vHanging", "v-hanging"],
	        ["vIdeographic", "v-ideographic"],
	        ["vMathematical", "v-mathematical"],
	        ["vectorEffect", "vector-effect"],
	        ["vertAdvY", "vert-adv-y"],
	        ["vertOriginX", "vert-origin-x"],
	        ["vertOriginY", "vert-origin-y"],
	        ["wordSpacing", "word-spacing"],
	        ["writingMode", "writing-mode"],
	        ["xmlnsXlink", "xmlns:xlink"],
	        ["xHeight", "x-height"]
	      ]),
	      possibleStandardNames = {
	        accept: "accept",
	        acceptcharset: "acceptCharset",
	        "accept-charset": "acceptCharset",
	        accesskey: "accessKey",
	        action: "action",
	        allowfullscreen: "allowFullScreen",
	        alt: "alt",
	        as: "as",
	        async: "async",
	        autocapitalize: "autoCapitalize",
	        autocomplete: "autoComplete",
	        autocorrect: "autoCorrect",
	        autofocus: "autoFocus",
	        autoplay: "autoPlay",
	        autosave: "autoSave",
	        capture: "capture",
	        cellpadding: "cellPadding",
	        cellspacing: "cellSpacing",
	        challenge: "challenge",
	        charset: "charSet",
	        checked: "checked",
	        children: "children",
	        cite: "cite",
	        class: "className",
	        classid: "classID",
	        classname: "className",
	        cols: "cols",
	        colspan: "colSpan",
	        content: "content",
	        contenteditable: "contentEditable",
	        contextmenu: "contextMenu",
	        controls: "controls",
	        controlslist: "controlsList",
	        coords: "coords",
	        crossorigin: "crossOrigin",
	        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
	        data: "data",
	        datetime: "dateTime",
	        default: "default",
	        defaultchecked: "defaultChecked",
	        defaultvalue: "defaultValue",
	        defer: "defer",
	        dir: "dir",
	        disabled: "disabled",
	        disablepictureinpicture: "disablePictureInPicture",
	        disableremoteplayback: "disableRemotePlayback",
	        download: "download",
	        draggable: "draggable",
	        enctype: "encType",
	        enterkeyhint: "enterKeyHint",
	        fetchpriority: "fetchPriority",
	        for: "htmlFor",
	        form: "form",
	        formmethod: "formMethod",
	        formaction: "formAction",
	        formenctype: "formEncType",
	        formnovalidate: "formNoValidate",
	        formtarget: "formTarget",
	        frameborder: "frameBorder",
	        headers: "headers",
	        height: "height",
	        hidden: "hidden",
	        high: "high",
	        href: "href",
	        hreflang: "hrefLang",
	        htmlfor: "htmlFor",
	        httpequiv: "httpEquiv",
	        "http-equiv": "httpEquiv",
	        icon: "icon",
	        id: "id",
	        imagesizes: "imageSizes",
	        imagesrcset: "imageSrcSet",
	        inert: "inert",
	        innerhtml: "innerHTML",
	        inputmode: "inputMode",
	        integrity: "integrity",
	        is: "is",
	        itemid: "itemID",
	        itemprop: "itemProp",
	        itemref: "itemRef",
	        itemscope: "itemScope",
	        itemtype: "itemType",
	        keyparams: "keyParams",
	        keytype: "keyType",
	        kind: "kind",
	        label: "label",
	        lang: "lang",
	        list: "list",
	        loop: "loop",
	        low: "low",
	        manifest: "manifest",
	        marginwidth: "marginWidth",
	        marginheight: "marginHeight",
	        max: "max",
	        maxlength: "maxLength",
	        media: "media",
	        mediagroup: "mediaGroup",
	        method: "method",
	        min: "min",
	        minlength: "minLength",
	        multiple: "multiple",
	        muted: "muted",
	        name: "name",
	        nomodule: "noModule",
	        nonce: "nonce",
	        novalidate: "noValidate",
	        open: "open",
	        optimum: "optimum",
	        pattern: "pattern",
	        placeholder: "placeholder",
	        playsinline: "playsInline",
	        poster: "poster",
	        preload: "preload",
	        profile: "profile",
	        radiogroup: "radioGroup",
	        readonly: "readOnly",
	        referrerpolicy: "referrerPolicy",
	        rel: "rel",
	        required: "required",
	        reversed: "reversed",
	        role: "role",
	        rows: "rows",
	        rowspan: "rowSpan",
	        sandbox: "sandbox",
	        scope: "scope",
	        scoped: "scoped",
	        scrolling: "scrolling",
	        seamless: "seamless",
	        selected: "selected",
	        shape: "shape",
	        size: "size",
	        sizes: "sizes",
	        span: "span",
	        spellcheck: "spellCheck",
	        src: "src",
	        srcdoc: "srcDoc",
	        srclang: "srcLang",
	        srcset: "srcSet",
	        start: "start",
	        step: "step",
	        style: "style",
	        summary: "summary",
	        tabindex: "tabIndex",
	        target: "target",
	        title: "title",
	        type: "type",
	        usemap: "useMap",
	        value: "value",
	        width: "width",
	        wmode: "wmode",
	        wrap: "wrap",
	        about: "about",
	        accentheight: "accentHeight",
	        "accent-height": "accentHeight",
	        accumulate: "accumulate",
	        additive: "additive",
	        alignmentbaseline: "alignmentBaseline",
	        "alignment-baseline": "alignmentBaseline",
	        allowreorder: "allowReorder",
	        alphabetic: "alphabetic",
	        amplitude: "amplitude",
	        arabicform: "arabicForm",
	        "arabic-form": "arabicForm",
	        ascent: "ascent",
	        attributename: "attributeName",
	        attributetype: "attributeType",
	        autoreverse: "autoReverse",
	        azimuth: "azimuth",
	        basefrequency: "baseFrequency",
	        baselineshift: "baselineShift",
	        "baseline-shift": "baselineShift",
	        baseprofile: "baseProfile",
	        bbox: "bbox",
	        begin: "begin",
	        bias: "bias",
	        by: "by",
	        calcmode: "calcMode",
	        capheight: "capHeight",
	        "cap-height": "capHeight",
	        clip: "clip",
	        clippath: "clipPath",
	        "clip-path": "clipPath",
	        clippathunits: "clipPathUnits",
	        cliprule: "clipRule",
	        "clip-rule": "clipRule",
	        color: "color",
	        colorinterpolation: "colorInterpolation",
	        "color-interpolation": "colorInterpolation",
	        colorinterpolationfilters: "colorInterpolationFilters",
	        "color-interpolation-filters": "colorInterpolationFilters",
	        colorprofile: "colorProfile",
	        "color-profile": "colorProfile",
	        colorrendering: "colorRendering",
	        "color-rendering": "colorRendering",
	        contentscripttype: "contentScriptType",
	        contentstyletype: "contentStyleType",
	        cursor: "cursor",
	        cx: "cx",
	        cy: "cy",
	        d: "d",
	        datatype: "datatype",
	        decelerate: "decelerate",
	        descent: "descent",
	        diffuseconstant: "diffuseConstant",
	        direction: "direction",
	        display: "display",
	        divisor: "divisor",
	        dominantbaseline: "dominantBaseline",
	        "dominant-baseline": "dominantBaseline",
	        dur: "dur",
	        dx: "dx",
	        dy: "dy",
	        edgemode: "edgeMode",
	        elevation: "elevation",
	        enablebackground: "enableBackground",
	        "enable-background": "enableBackground",
	        end: "end",
	        exponent: "exponent",
	        externalresourcesrequired: "externalResourcesRequired",
	        fill: "fill",
	        fillopacity: "fillOpacity",
	        "fill-opacity": "fillOpacity",
	        fillrule: "fillRule",
	        "fill-rule": "fillRule",
	        filter: "filter",
	        filterres: "filterRes",
	        filterunits: "filterUnits",
	        floodopacity: "floodOpacity",
	        "flood-opacity": "floodOpacity",
	        floodcolor: "floodColor",
	        "flood-color": "floodColor",
	        focusable: "focusable",
	        fontfamily: "fontFamily",
	        "font-family": "fontFamily",
	        fontsize: "fontSize",
	        "font-size": "fontSize",
	        fontsizeadjust: "fontSizeAdjust",
	        "font-size-adjust": "fontSizeAdjust",
	        fontstretch: "fontStretch",
	        "font-stretch": "fontStretch",
	        fontstyle: "fontStyle",
	        "font-style": "fontStyle",
	        fontvariant: "fontVariant",
	        "font-variant": "fontVariant",
	        fontweight: "fontWeight",
	        "font-weight": "fontWeight",
	        format: "format",
	        from: "from",
	        fx: "fx",
	        fy: "fy",
	        g1: "g1",
	        g2: "g2",
	        glyphname: "glyphName",
	        "glyph-name": "glyphName",
	        glyphorientationhorizontal: "glyphOrientationHorizontal",
	        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
	        glyphorientationvertical: "glyphOrientationVertical",
	        "glyph-orientation-vertical": "glyphOrientationVertical",
	        glyphref: "glyphRef",
	        gradienttransform: "gradientTransform",
	        gradientunits: "gradientUnits",
	        hanging: "hanging",
	        horizadvx: "horizAdvX",
	        "horiz-adv-x": "horizAdvX",
	        horizoriginx: "horizOriginX",
	        "horiz-origin-x": "horizOriginX",
	        ideographic: "ideographic",
	        imagerendering: "imageRendering",
	        "image-rendering": "imageRendering",
	        in2: "in2",
	        in: "in",
	        inlist: "inlist",
	        intercept: "intercept",
	        k1: "k1",
	        k2: "k2",
	        k3: "k3",
	        k4: "k4",
	        k: "k",
	        kernelmatrix: "kernelMatrix",
	        kernelunitlength: "kernelUnitLength",
	        kerning: "kerning",
	        keypoints: "keyPoints",
	        keysplines: "keySplines",
	        keytimes: "keyTimes",
	        lengthadjust: "lengthAdjust",
	        letterspacing: "letterSpacing",
	        "letter-spacing": "letterSpacing",
	        lightingcolor: "lightingColor",
	        "lighting-color": "lightingColor",
	        limitingconeangle: "limitingConeAngle",
	        local: "local",
	        markerend: "markerEnd",
	        "marker-end": "markerEnd",
	        markerheight: "markerHeight",
	        markermid: "markerMid",
	        "marker-mid": "markerMid",
	        markerstart: "markerStart",
	        "marker-start": "markerStart",
	        markerunits: "markerUnits",
	        markerwidth: "markerWidth",
	        mask: "mask",
	        maskcontentunits: "maskContentUnits",
	        maskunits: "maskUnits",
	        mathematical: "mathematical",
	        mode: "mode",
	        numoctaves: "numOctaves",
	        offset: "offset",
	        opacity: "opacity",
	        operator: "operator",
	        order: "order",
	        orient: "orient",
	        orientation: "orientation",
	        origin: "origin",
	        overflow: "overflow",
	        overlineposition: "overlinePosition",
	        "overline-position": "overlinePosition",
	        overlinethickness: "overlineThickness",
	        "overline-thickness": "overlineThickness",
	        paintorder: "paintOrder",
	        "paint-order": "paintOrder",
	        panose1: "panose1",
	        "panose-1": "panose1",
	        pathlength: "pathLength",
	        patterncontentunits: "patternContentUnits",
	        patterntransform: "patternTransform",
	        patternunits: "patternUnits",
	        pointerevents: "pointerEvents",
	        "pointer-events": "pointerEvents",
	        points: "points",
	        pointsatx: "pointsAtX",
	        pointsaty: "pointsAtY",
	        pointsatz: "pointsAtZ",
	        popover: "popover",
	        popovertarget: "popoverTarget",
	        popovertargetaction: "popoverTargetAction",
	        prefix: "prefix",
	        preservealpha: "preserveAlpha",
	        preserveaspectratio: "preserveAspectRatio",
	        primitiveunits: "primitiveUnits",
	        property: "property",
	        r: "r",
	        radius: "radius",
	        refx: "refX",
	        refy: "refY",
	        renderingintent: "renderingIntent",
	        "rendering-intent": "renderingIntent",
	        repeatcount: "repeatCount",
	        repeatdur: "repeatDur",
	        requiredextensions: "requiredExtensions",
	        requiredfeatures: "requiredFeatures",
	        resource: "resource",
	        restart: "restart",
	        result: "result",
	        results: "results",
	        rotate: "rotate",
	        rx: "rx",
	        ry: "ry",
	        scale: "scale",
	        security: "security",
	        seed: "seed",
	        shaperendering: "shapeRendering",
	        "shape-rendering": "shapeRendering",
	        slope: "slope",
	        spacing: "spacing",
	        specularconstant: "specularConstant",
	        specularexponent: "specularExponent",
	        speed: "speed",
	        spreadmethod: "spreadMethod",
	        startoffset: "startOffset",
	        stddeviation: "stdDeviation",
	        stemh: "stemh",
	        stemv: "stemv",
	        stitchtiles: "stitchTiles",
	        stopcolor: "stopColor",
	        "stop-color": "stopColor",
	        stopopacity: "stopOpacity",
	        "stop-opacity": "stopOpacity",
	        strikethroughposition: "strikethroughPosition",
	        "strikethrough-position": "strikethroughPosition",
	        strikethroughthickness: "strikethroughThickness",
	        "strikethrough-thickness": "strikethroughThickness",
	        string: "string",
	        stroke: "stroke",
	        strokedasharray: "strokeDasharray",
	        "stroke-dasharray": "strokeDasharray",
	        strokedashoffset: "strokeDashoffset",
	        "stroke-dashoffset": "strokeDashoffset",
	        strokelinecap: "strokeLinecap",
	        "stroke-linecap": "strokeLinecap",
	        strokelinejoin: "strokeLinejoin",
	        "stroke-linejoin": "strokeLinejoin",
	        strokemiterlimit: "strokeMiterlimit",
	        "stroke-miterlimit": "strokeMiterlimit",
	        strokewidth: "strokeWidth",
	        "stroke-width": "strokeWidth",
	        strokeopacity: "strokeOpacity",
	        "stroke-opacity": "strokeOpacity",
	        suppresscontenteditablewarning: "suppressContentEditableWarning",
	        suppresshydrationwarning: "suppressHydrationWarning",
	        surfacescale: "surfaceScale",
	        systemlanguage: "systemLanguage",
	        tablevalues: "tableValues",
	        targetx: "targetX",
	        targety: "targetY",
	        textanchor: "textAnchor",
	        "text-anchor": "textAnchor",
	        textdecoration: "textDecoration",
	        "text-decoration": "textDecoration",
	        textlength: "textLength",
	        textrendering: "textRendering",
	        "text-rendering": "textRendering",
	        to: "to",
	        transform: "transform",
	        transformorigin: "transformOrigin",
	        "transform-origin": "transformOrigin",
	        typeof: "typeof",
	        u1: "u1",
	        u2: "u2",
	        underlineposition: "underlinePosition",
	        "underline-position": "underlinePosition",
	        underlinethickness: "underlineThickness",
	        "underline-thickness": "underlineThickness",
	        unicode: "unicode",
	        unicodebidi: "unicodeBidi",
	        "unicode-bidi": "unicodeBidi",
	        unicoderange: "unicodeRange",
	        "unicode-range": "unicodeRange",
	        unitsperem: "unitsPerEm",
	        "units-per-em": "unitsPerEm",
	        unselectable: "unselectable",
	        valphabetic: "vAlphabetic",
	        "v-alphabetic": "vAlphabetic",
	        values: "values",
	        vectoreffect: "vectorEffect",
	        "vector-effect": "vectorEffect",
	        version: "version",
	        vertadvy: "vertAdvY",
	        "vert-adv-y": "vertAdvY",
	        vertoriginx: "vertOriginX",
	        "vert-origin-x": "vertOriginX",
	        vertoriginy: "vertOriginY",
	        "vert-origin-y": "vertOriginY",
	        vhanging: "vHanging",
	        "v-hanging": "vHanging",
	        videographic: "vIdeographic",
	        "v-ideographic": "vIdeographic",
	        viewbox: "viewBox",
	        viewtarget: "viewTarget",
	        visibility: "visibility",
	        vmathematical: "vMathematical",
	        "v-mathematical": "vMathematical",
	        vocab: "vocab",
	        widths: "widths",
	        wordspacing: "wordSpacing",
	        "word-spacing": "wordSpacing",
	        writingmode: "writingMode",
	        "writing-mode": "writingMode",
	        x1: "x1",
	        x2: "x2",
	        x: "x",
	        xchannelselector: "xChannelSelector",
	        xheight: "xHeight",
	        "x-height": "xHeight",
	        xlinkactuate: "xlinkActuate",
	        "xlink:actuate": "xlinkActuate",
	        xlinkarcrole: "xlinkArcrole",
	        "xlink:arcrole": "xlinkArcrole",
	        xlinkhref: "xlinkHref",
	        "xlink:href": "xlinkHref",
	        xlinkrole: "xlinkRole",
	        "xlink:role": "xlinkRole",
	        xlinkshow: "xlinkShow",
	        "xlink:show": "xlinkShow",
	        xlinktitle: "xlinkTitle",
	        "xlink:title": "xlinkTitle",
	        xlinktype: "xlinkType",
	        "xlink:type": "xlinkType",
	        xmlbase: "xmlBase",
	        "xml:base": "xmlBase",
	        xmllang: "xmlLang",
	        "xml:lang": "xmlLang",
	        xmlns: "xmlns",
	        "xml:space": "xmlSpace",
	        xmlnsxlink: "xmlnsXlink",
	        "xmlns:xlink": "xmlnsXlink",
	        xmlspace: "xmlSpace",
	        y1: "y1",
	        y2: "y2",
	        y: "y",
	        ychannelselector: "yChannelSelector",
	        z: "z",
	        zoomandpan: "zoomAndPan"
	      },
	      ariaProperties = {
	        "aria-current": 0,
	        "aria-description": 0,
	        "aria-details": 0,
	        "aria-disabled": 0,
	        "aria-hidden": 0,
	        "aria-invalid": 0,
	        "aria-keyshortcuts": 0,
	        "aria-label": 0,
	        "aria-roledescription": 0,
	        "aria-autocomplete": 0,
	        "aria-checked": 0,
	        "aria-expanded": 0,
	        "aria-haspopup": 0,
	        "aria-level": 0,
	        "aria-modal": 0,
	        "aria-multiline": 0,
	        "aria-multiselectable": 0,
	        "aria-orientation": 0,
	        "aria-placeholder": 0,
	        "aria-pressed": 0,
	        "aria-readonly": 0,
	        "aria-required": 0,
	        "aria-selected": 0,
	        "aria-sort": 0,
	        "aria-valuemax": 0,
	        "aria-valuemin": 0,
	        "aria-valuenow": 0,
	        "aria-valuetext": 0,
	        "aria-atomic": 0,
	        "aria-busy": 0,
	        "aria-live": 0,
	        "aria-relevant": 0,
	        "aria-dropeffect": 0,
	        "aria-grabbed": 0,
	        "aria-activedescendant": 0,
	        "aria-colcount": 0,
	        "aria-colindex": 0,
	        "aria-colspan": 0,
	        "aria-controls": 0,
	        "aria-describedby": 0,
	        "aria-errormessage": 0,
	        "aria-flowto": 0,
	        "aria-labelledby": 0,
	        "aria-owns": 0,
	        "aria-posinset": 0,
	        "aria-rowcount": 0,
	        "aria-rowindex": 0,
	        "aria-rowspan": 0,
	        "aria-setsize": 0
	      },
	      warnedProperties$1 = {},
	      rARIA$1 = RegExp(
	        "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
	      ),
	      rARIACamel$1 = RegExp(
	        "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
	      ),
	      didWarnValueNull = false,
	      warnedProperties = {},
	      EVENT_NAME_REGEX = /^on./,
	      INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/,
	      rARIA = RegExp(
	        "^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
	      ),
	      rARIACamel = RegExp(
	        "^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
	      ),
	      isJavaScriptProtocol =
	        /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i,
	      currentReplayingEvent = null,
	      restoreTarget = null,
	      restoreQueue = null,
	      isInsideEventHandler = false,
	      canUseDOM = !(
	        "undefined" === typeof window ||
	        "undefined" === typeof window.document ||
	        "undefined" === typeof window.document.createElement
	      ),
	      passiveBrowserEventsSupported = false;
	    if (canUseDOM)
	      try {
	        var options$jscomp$0 = {};
	        Object.defineProperty(options$jscomp$0, "passive", {
	          get: function () {
	            passiveBrowserEventsSupported = true;
	          }
	        });
	        window.addEventListener("test", options$jscomp$0, options$jscomp$0);
	        window.removeEventListener("test", options$jscomp$0, options$jscomp$0);
	      } catch (e) {
	        passiveBrowserEventsSupported = false;
	      }
	    var root = null,
	      startText = null,
	      fallbackText = null,
	      EventInterface = {
	        eventPhase: 0,
	        bubbles: 0,
	        cancelable: 0,
	        timeStamp: function (event) {
	          return event.timeStamp || Date.now();
	        },
	        defaultPrevented: 0,
	        isTrusted: 0
	      },
	      SyntheticEvent = createSyntheticEvent(EventInterface),
	      UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }),
	      SyntheticUIEvent = createSyntheticEvent(UIEventInterface),
	      lastMovementX,
	      lastMovementY,
	      lastMouseEvent,
	      MouseEventInterface = assign({}, UIEventInterface, {
	        screenX: 0,
	        screenY: 0,
	        clientX: 0,
	        clientY: 0,
	        pageX: 0,
	        pageY: 0,
	        ctrlKey: 0,
	        shiftKey: 0,
	        altKey: 0,
	        metaKey: 0,
	        getModifierState: getEventModifierState,
	        button: 0,
	        buttons: 0,
	        relatedTarget: function (event) {
	          return void 0 === event.relatedTarget
	            ? event.fromElement === event.srcElement
	              ? event.toElement
	              : event.fromElement
	            : event.relatedTarget;
	        },
	        movementX: function (event) {
	          if ("movementX" in event) return event.movementX;
	          event !== lastMouseEvent &&
	            (lastMouseEvent && "mousemove" === event.type
	              ? ((lastMovementX = event.screenX - lastMouseEvent.screenX),
	                (lastMovementY = event.screenY - lastMouseEvent.screenY))
	              : (lastMovementY = lastMovementX = 0),
	            (lastMouseEvent = event));
	          return lastMovementX;
	        },
	        movementY: function (event) {
	          return "movementY" in event ? event.movementY : lastMovementY;
	        }
	      }),
	      SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface),
	      DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }),
	      SyntheticDragEvent = createSyntheticEvent(DragEventInterface),
	      FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }),
	      SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface),
	      AnimationEventInterface = assign({}, EventInterface, {
	        animationName: 0,
	        elapsedTime: 0,
	        pseudoElement: 0
	      }),
	      SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface),
	      ClipboardEventInterface = assign({}, EventInterface, {
	        clipboardData: function (event) {
	          return "clipboardData" in event
	            ? event.clipboardData
	            : window.clipboardData;
	        }
	      }),
	      SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface),
	      CompositionEventInterface = assign({}, EventInterface, { data: 0 }),
	      SyntheticCompositionEvent = createSyntheticEvent(
	        CompositionEventInterface
	      ),
	      SyntheticInputEvent = SyntheticCompositionEvent,
	      normalizeKey = {
	        Esc: "Escape",
	        Spacebar: " ",
	        Left: "ArrowLeft",
	        Up: "ArrowUp",
	        Right: "ArrowRight",
	        Down: "ArrowDown",
	        Del: "Delete",
	        Win: "OS",
	        Menu: "ContextMenu",
	        Apps: "ContextMenu",
	        Scroll: "ScrollLock",
	        MozPrintableKey: "Unidentified"
	      },
	      translateToKey = {
	        8: "Backspace",
	        9: "Tab",
	        12: "Clear",
	        13: "Enter",
	        16: "Shift",
	        17: "Control",
	        18: "Alt",
	        19: "Pause",
	        20: "CapsLock",
	        27: "Escape",
	        32: " ",
	        33: "PageUp",
	        34: "PageDown",
	        35: "End",
	        36: "Home",
	        37: "ArrowLeft",
	        38: "ArrowUp",
	        39: "ArrowRight",
	        40: "ArrowDown",
	        45: "Insert",
	        46: "Delete",
	        112: "F1",
	        113: "F2",
	        114: "F3",
	        115: "F4",
	        116: "F5",
	        117: "F6",
	        118: "F7",
	        119: "F8",
	        120: "F9",
	        121: "F10",
	        122: "F11",
	        123: "F12",
	        144: "NumLock",
	        145: "ScrollLock",
	        224: "Meta"
	      },
	      modifierKeyToProp = {
	        Alt: "altKey",
	        Control: "ctrlKey",
	        Meta: "metaKey",
	        Shift: "shiftKey"
	      },
	      KeyboardEventInterface = assign({}, UIEventInterface, {
	        key: function (nativeEvent) {
	          if (nativeEvent.key) {
	            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	            if ("Unidentified" !== key) return key;
	          }
	          return "keypress" === nativeEvent.type
	            ? ((nativeEvent = getEventCharCode(nativeEvent)),
	              13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent))
	            : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type
	              ? translateToKey[nativeEvent.keyCode] || "Unidentified"
	              : "";
	        },
	        code: 0,
	        location: 0,
	        ctrlKey: 0,
	        shiftKey: 0,
	        altKey: 0,
	        metaKey: 0,
	        repeat: 0,
	        locale: 0,
	        getModifierState: getEventModifierState,
	        charCode: function (event) {
	          return "keypress" === event.type ? getEventCharCode(event) : 0;
	        },
	        keyCode: function (event) {
	          return "keydown" === event.type || "keyup" === event.type
	            ? event.keyCode
	            : 0;
	        },
	        which: function (event) {
	          return "keypress" === event.type
	            ? getEventCharCode(event)
	            : "keydown" === event.type || "keyup" === event.type
	              ? event.keyCode
	              : 0;
	        }
	      }),
	      SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface),
	      PointerEventInterface = assign({}, MouseEventInterface, {
	        pointerId: 0,
	        width: 0,
	        height: 0,
	        pressure: 0,
	        tangentialPressure: 0,
	        tiltX: 0,
	        tiltY: 0,
	        twist: 0,
	        pointerType: 0,
	        isPrimary: 0
	      }),
	      SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface),
	      TouchEventInterface = assign({}, UIEventInterface, {
	        touches: 0,
	        targetTouches: 0,
	        changedTouches: 0,
	        altKey: 0,
	        metaKey: 0,
	        ctrlKey: 0,
	        shiftKey: 0,
	        getModifierState: getEventModifierState
	      }),
	      SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface),
	      TransitionEventInterface = assign({}, EventInterface, {
	        propertyName: 0,
	        elapsedTime: 0,
	        pseudoElement: 0
	      }),
	      SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface),
	      WheelEventInterface = assign({}, MouseEventInterface, {
	        deltaX: function (event) {
	          return "deltaX" in event
	            ? event.deltaX
	            : "wheelDeltaX" in event
	              ? -event.wheelDeltaX
	              : 0;
	        },
	        deltaY: function (event) {
	          return "deltaY" in event
	            ? event.deltaY
	            : "wheelDeltaY" in event
	              ? -event.wheelDeltaY
	              : "wheelDelta" in event
	                ? -event.wheelDelta
	                : 0;
	        },
	        deltaZ: 0,
	        deltaMode: 0
	      }),
	      SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface),
	      ToggleEventInterface = assign({}, EventInterface, {
	        newState: 0,
	        oldState: 0
	      }),
	      SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface),
	      END_KEYCODES = [9, 13, 27, 32],
	      START_KEYCODE = 229,
	      canUseCompositionEvent = canUseDOM && "CompositionEvent" in window,
	      documentMode = null;
	    canUseDOM &&
	      "documentMode" in document &&
	      (documentMode = document.documentMode);
	    var canUseTextInputEvent =
	        canUseDOM && "TextEvent" in window && !documentMode,
	      useFallbackCompositionData =
	        canUseDOM &&
	        (!canUseCompositionEvent ||
	          (documentMode && 8 < documentMode && 11 >= documentMode)),
	      SPACEBAR_CODE = 32,
	      SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE),
	      hasSpaceKeypress = false,
	      isComposing = false,
	      supportedInputTypes = {
	        color: true,
	        date: true,
	        datetime: true,
	        "datetime-local": true,
	        email: true,
	        month: true,
	        number: true,
	        password: true,
	        range: true,
	        search: true,
	        tel: true,
	        text: true,
	        time: true,
	        url: true,
	        week: true
	      },
	      activeElement$1 = null,
	      activeElementInst$1 = null,
	      isInputEventSupported = false;
	    canUseDOM &&
	      (isInputEventSupported =
	        isEventSupported("input") &&
	        (!document.documentMode || 9 < document.documentMode));
	    var objectIs = "function" === typeof Object.is ? Object.is : is,
	      skipSelectionChangeEvent =
	        canUseDOM && "documentMode" in document && 11 >= document.documentMode,
	      activeElement = null,
	      activeElementInst = null,
	      lastSelection = null,
	      mouseDown = false,
	      vendorPrefixes = {
	        animationend: makePrefixMap("Animation", "AnimationEnd"),
	        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
	        animationstart: makePrefixMap("Animation", "AnimationStart"),
	        transitionrun: makePrefixMap("Transition", "TransitionRun"),
	        transitionstart: makePrefixMap("Transition", "TransitionStart"),
	        transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
	        transitionend: makePrefixMap("Transition", "TransitionEnd")
	      },
	      prefixedEventNames = {},
	      style = {};
	    canUseDOM &&
	      ((style = document.createElement("div").style),
	      "AnimationEvent" in window ||
	        (delete vendorPrefixes.animationend.animation,
	        delete vendorPrefixes.animationiteration.animation,
	        delete vendorPrefixes.animationstart.animation),
	      "TransitionEvent" in window ||
	        delete vendorPrefixes.transitionend.transition);
	    var ANIMATION_END = getVendorPrefixedEventName("animationend"),
	      ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"),
	      ANIMATION_START = getVendorPrefixedEventName("animationstart"),
	      TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"),
	      TRANSITION_START = getVendorPrefixedEventName("transitionstart"),
	      TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"),
	      TRANSITION_END = getVendorPrefixedEventName("transitionend"),
	      topLevelEventsToReactNames = new Map(),
	      simpleEventPluginEvents =
	        "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
	          " "
	        );
	    simpleEventPluginEvents.push("scrollEnd");
	    var CapturedStacks = new WeakMap(),
	      OffscreenVisible = 1,
	      OffscreenPassiveEffectsConnected = 2,
	      concurrentQueues = [],
	      concurrentQueuesIndex = 0,
	      concurrentlyUpdatedLanes = 0,
	      emptyContextObject = {};
	    Object.freeze(emptyContextObject);
	    var resolveFamily = null,
	      failedBoundaries = null,
	      NoMode = 0,
	      ConcurrentMode = 1,
	      ProfileMode = 2,
	      StrictLegacyMode = 8,
	      StrictEffectsMode = 16,
	      NoStrictPassiveEffectsMode = 64;
	    var hasBadMapPolyfill = false;
	    try {
	      Object.preventExtensions({});
	    } catch (e$3) {
	      hasBadMapPolyfill = true;
	    }
	    var forkStack = [],
	      forkStackIndex = 0,
	      treeForkProvider = null,
	      treeForkCount = 0,
	      idStack = [],
	      idStackIndex = 0,
	      treeContextProvider = null,
	      treeContextId = 1,
	      treeContextOverflow = "",
	      hydrationParentFiber = null,
	      nextHydratableInstance = null,
	      isHydrating = false,
	      didSuspendOrErrorDEV = false,
	      hydrationDiffRootDEV = null,
	      hydrationErrors = null,
	      rootOrSingletonContext = false,
	      HydrationMismatchException = Error(
	        "Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
	      ),
	      lastResetTime = 0;
	    if (
	      "object" === typeof performance &&
	      "function" === typeof performance.now
	    ) {
	      var localPerformance = performance;
	      var getCurrentTime = function () {
	        return localPerformance.now();
	      };
	    } else {
	      var localDate = Date;
	      getCurrentTime = function () {
	        return localDate.now();
	      };
	    }
	    var valueCursor = createCursor(null);
	    var rendererCursorDEV = createCursor(null);
	    var rendererSigil = {};
	    var currentlyRenderingFiber$1 = null,
	      lastContextDependency = null,
	      isDisallowedContextReadInDEV = false,
	      AbortControllerLocal =
	        "undefined" !== typeof AbortController
	          ? AbortController
	          : function () {
	              var listeners = [],
	                signal = (this.signal = {
	                  aborted: false,
	                  addEventListener: function (type, listener) {
	                    listeners.push(listener);
	                  }
	                });
	              this.abort = function () {
	                signal.aborted = true;
	                listeners.forEach(function (listener) {
	                  return listener();
	                });
	              };
	            },
	      scheduleCallback$2 = Scheduler.unstable_scheduleCallback,
	      NormalPriority = Scheduler.unstable_NormalPriority,
	      CacheContext = {
	        $$typeof: REACT_CONTEXT_TYPE,
	        Consumer: null,
	        Provider: null,
	        _currentValue: null,
	        _currentValue2: null,
	        _threadCount: 0,
	        _currentRenderer: null,
	        _currentRenderer2: null
	      },
	      now = Scheduler.unstable_now,
	      renderStartTime = -0,
	      commitStartTime = -0,
	      profilerStartTime = -1.1,
	      profilerEffectDuration = -0,
	      currentUpdateIsNested = false,
	      nestedUpdateScheduled = false,
	      currentEntangledListeners = null,
	      currentEntangledPendingCount = 0,
	      currentEntangledLane = 0,
	      currentEntangledActionThenable = null,
	      prevOnStartTransitionFinish = ReactSharedInternals.S;
	    ReactSharedInternals.S = function (transition, returnValue) {
	      "object" === typeof returnValue &&
	        null !== returnValue &&
	        "function" === typeof returnValue.then &&
	        entangleAsyncAction(transition, returnValue);
	      null !== prevOnStartTransitionFinish &&
	        prevOnStartTransitionFinish(transition, returnValue);
	    };
	    var resumedCache = createCursor(null),
	      ReactStrictModeWarnings = {
	        recordUnsafeLifecycleWarnings: function () {},
	        flushPendingUnsafeLifecycleWarnings: function () {},
	        recordLegacyContextWarning: function () {},
	        flushLegacyContextWarning: function () {},
	        discardPendingWarnings: function () {}
	      },
	      pendingComponentWillMountWarnings = [],
	      pendingUNSAFE_ComponentWillMountWarnings = [],
	      pendingComponentWillReceivePropsWarnings = [],
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [],
	      pendingComponentWillUpdateWarnings = [],
	      pendingUNSAFE_ComponentWillUpdateWarnings = [],
	      didWarnAboutUnsafeLifecycles = new Set();
	    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (
	      fiber,
	      instance
	    ) {
	      didWarnAboutUnsafeLifecycles.has(fiber.type) ||
	        ("function" === typeof instance.componentWillMount &&
	          true !== instance.componentWillMount.__suppressDeprecationWarning &&
	          pendingComponentWillMountWarnings.push(fiber),
	        fiber.mode & StrictLegacyMode &&
	          "function" === typeof instance.UNSAFE_componentWillMount &&
	          pendingUNSAFE_ComponentWillMountWarnings.push(fiber),
	        "function" === typeof instance.componentWillReceiveProps &&
	          true !==
	            instance.componentWillReceiveProps.__suppressDeprecationWarning &&
	          pendingComponentWillReceivePropsWarnings.push(fiber),
	        fiber.mode & StrictLegacyMode &&
	          "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
	          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber),
	        "function" === typeof instance.componentWillUpdate &&
	          true !== instance.componentWillUpdate.__suppressDeprecationWarning &&
	          pendingComponentWillUpdateWarnings.push(fiber),
	        fiber.mode & StrictLegacyMode &&
	          "function" === typeof instance.UNSAFE_componentWillUpdate &&
	          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
	    };
	    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	      var componentWillMountUniqueNames = new Set();
	      0 < pendingComponentWillMountWarnings.length &&
	        (pendingComponentWillMountWarnings.forEach(function (fiber) {
	          componentWillMountUniqueNames.add(
	            getComponentNameFromFiber(fiber) || "Component"
	          );
	          didWarnAboutUnsafeLifecycles.add(fiber.type);
	        }),
	        (pendingComponentWillMountWarnings = []));
	      var UNSAFE_componentWillMountUniqueNames = new Set();
	      0 < pendingUNSAFE_ComponentWillMountWarnings.length &&
	        (pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
	          UNSAFE_componentWillMountUniqueNames.add(
	            getComponentNameFromFiber(fiber) || "Component"
	          );
	          didWarnAboutUnsafeLifecycles.add(fiber.type);
	        }),
	        (pendingUNSAFE_ComponentWillMountWarnings = []));
	      var componentWillReceivePropsUniqueNames = new Set();
	      0 < pendingComponentWillReceivePropsWarnings.length &&
	        (pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	          componentWillReceivePropsUniqueNames.add(
	            getComponentNameFromFiber(fiber) || "Component"
	          );
	          didWarnAboutUnsafeLifecycles.add(fiber.type);
	        }),
	        (pendingComponentWillReceivePropsWarnings = []));
	      var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
	      0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length &&
	        (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(
	          function (fiber) {
	            UNSAFE_componentWillReceivePropsUniqueNames.add(
	              getComponentNameFromFiber(fiber) || "Component"
	            );
	            didWarnAboutUnsafeLifecycles.add(fiber.type);
	          }
	        ),
	        (pendingUNSAFE_ComponentWillReceivePropsWarnings = []));
	      var componentWillUpdateUniqueNames = new Set();
	      0 < pendingComponentWillUpdateWarnings.length &&
	        (pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	          componentWillUpdateUniqueNames.add(
	            getComponentNameFromFiber(fiber) || "Component"
	          );
	          didWarnAboutUnsafeLifecycles.add(fiber.type);
	        }),
	        (pendingComponentWillUpdateWarnings = []));
	      var UNSAFE_componentWillUpdateUniqueNames = new Set();
	      0 < pendingUNSAFE_ComponentWillUpdateWarnings.length &&
	        (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
	          UNSAFE_componentWillUpdateUniqueNames.add(
	            getComponentNameFromFiber(fiber) || "Component"
	          );
	          didWarnAboutUnsafeLifecycles.add(fiber.type);
	        }),
	        (pendingUNSAFE_ComponentWillUpdateWarnings = []));
	      if (0 < UNSAFE_componentWillMountUniqueNames.size) {
	        var sortedNames = setToSortedString(
	          UNSAFE_componentWillMountUniqueNames
	        );
	        console.error(
	          "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",
	          sortedNames
	        );
	      }
	      0 < UNSAFE_componentWillReceivePropsUniqueNames.size &&
	        ((sortedNames = setToSortedString(
	          UNSAFE_componentWillReceivePropsUniqueNames
	        )),
	        console.error(
	          "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",
	          sortedNames
	        ));
	      0 < UNSAFE_componentWillUpdateUniqueNames.size &&
	        ((sortedNames = setToSortedString(
	          UNSAFE_componentWillUpdateUniqueNames
	        )),
	        console.error(
	          "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",
	          sortedNames
	        ));
	      0 < componentWillMountUniqueNames.size &&
	        ((sortedNames = setToSortedString(componentWillMountUniqueNames)),
	        console.warn(
	          "componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
	          sortedNames
	        ));
	      0 < componentWillReceivePropsUniqueNames.size &&
	        ((sortedNames = setToSortedString(
	          componentWillReceivePropsUniqueNames
	        )),
	        console.warn(
	          "componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
	          sortedNames
	        ));
	      0 < componentWillUpdateUniqueNames.size &&
	        ((sortedNames = setToSortedString(componentWillUpdateUniqueNames)),
	        console.warn(
	          "componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
	          sortedNames
	        ));
	    };
	    var pendingLegacyContextWarning = new Map(),
	      didWarnAboutLegacyContext = new Set();
	    ReactStrictModeWarnings.recordLegacyContextWarning = function (
	      fiber,
	      instance
	    ) {
	      var strictRoot = null;
	      for (var node = fiber; null !== node; )
	        node.mode & StrictLegacyMode && (strictRoot = node),
	          (node = node.return);
	      null === strictRoot
	        ? console.error(
	            "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
	          )
	        : !didWarnAboutLegacyContext.has(fiber.type) &&
	          ((node = pendingLegacyContextWarning.get(strictRoot)),
	          null != fiber.type.contextTypes ||
	            null != fiber.type.childContextTypes ||
	            (null !== instance &&
	              "function" === typeof instance.getChildContext)) &&
	          (void 0 === node &&
	            ((node = []), pendingLegacyContextWarning.set(strictRoot, node)),
	          node.push(fiber));
	    };
	    ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	      pendingLegacyContextWarning.forEach(function (fiberArray) {
	        if (0 !== fiberArray.length) {
	          var firstFiber = fiberArray[0],
	            uniqueNames = new Set();
	          fiberArray.forEach(function (fiber) {
	            uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
	            didWarnAboutLegacyContext.add(fiber.type);
	          });
	          var sortedNames = setToSortedString(uniqueNames);
	          runWithFiberInDEV(firstFiber, function () {
	            console.error(
	              "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",
	              sortedNames
	            );
	          });
	        }
	      });
	    };
	    ReactStrictModeWarnings.discardPendingWarnings = function () {
	      pendingComponentWillMountWarnings = [];
	      pendingUNSAFE_ComponentWillMountWarnings = [];
	      pendingComponentWillReceivePropsWarnings = [];
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	      pendingComponentWillUpdateWarnings = [];
	      pendingUNSAFE_ComponentWillUpdateWarnings = [];
	      pendingLegacyContextWarning = new Map();
	    };
	    var SuspenseException = Error(
	        "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`."
	      ),
	      SuspenseyCommitException = Error(
	        "Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
	      ),
	      SuspenseActionException = Error(
	        "Suspense Exception: This is not a real error! It's an implementation detail of `useActionState` to interrupt the current render. You must either rethrow it immediately, or move the `useActionState` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary."
	      ),
	      noopSuspenseyCommitThenable = {
	        then: function () {
	          console.error(
	            'Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.'
	          );
	        }
	      },
	      suspendedThenable = null,
	      needsToResetSuspendedThenableDEV = false,
	      NoFlags = 0,
	      HasEffect = 1,
	      Insertion = 2,
	      Layout = 4,
	      Passive = 8,
	      UpdateState = 0,
	      ReplaceState = 1,
	      ForceUpdate = 2,
	      CaptureUpdate = 3,
	      hasForceUpdate = false;
	    var didWarnUpdateInsideUpdate = false;
	    var currentlyProcessingQueue = null;
	    var didReadFromEntangledAsyncAction = false,
	      currentTreeHiddenStackCursor = createCursor(null),
	      prevEntangledRenderLanesCursor = createCursor(0),
	      didWarnUncachedGetSnapshot;
	    var didWarnAboutMismatchedHooksForComponent = new Set();
	    var didWarnAboutUseWrappedInTryCatch = new Set();
	    var didWarnAboutAsyncClientComponent = new Set();
	    var didWarnAboutUseFormState = new Set();
	    var renderLanes = 0,
	      currentlyRenderingFiber = null,
	      currentHook = null,
	      workInProgressHook = null,
	      didScheduleRenderPhaseUpdate = false,
	      didScheduleRenderPhaseUpdateDuringThisPass = false,
	      shouldDoubleInvokeUserFnsInHooksDEV = false,
	      localIdCounter = 0,
	      thenableIndexCounter$1 = 0,
	      thenableState$1 = null,
	      globalClientIdCounter = 0,
	      RE_RENDER_LIMIT = 25,
	      currentHookNameInDev = null,
	      hookTypesDev = null,
	      hookTypesUpdateIndexDev = -1,
	      ignorePreviousDependencies = false,
	      ContextOnlyDispatcher = {
	        readContext: readContext,
	        use: use,
	        useCallback: throwInvalidHookError,
	        useContext: throwInvalidHookError,
	        useEffect: throwInvalidHookError,
	        useImperativeHandle: throwInvalidHookError,
	        useLayoutEffect: throwInvalidHookError,
	        useInsertionEffect: throwInvalidHookError,
	        useMemo: throwInvalidHookError,
	        useReducer: throwInvalidHookError,
	        useRef: throwInvalidHookError,
	        useState: throwInvalidHookError,
	        useDebugValue: throwInvalidHookError,
	        useDeferredValue: throwInvalidHookError,
	        useTransition: throwInvalidHookError,
	        useSyncExternalStore: throwInvalidHookError,
	        useId: throwInvalidHookError,
	        useHostTransitionStatus: throwInvalidHookError,
	        useFormState: throwInvalidHookError,
	        useActionState: throwInvalidHookError,
	        useOptimistic: throwInvalidHookError,
	        useMemoCache: throwInvalidHookError,
	        useCacheRefresh: throwInvalidHookError
	      },
	      HooksDispatcherOnMountInDEV = null,
	      HooksDispatcherOnMountWithHookTypesInDEV = null,
	      HooksDispatcherOnUpdateInDEV = null,
	      HooksDispatcherOnRerenderInDEV = null,
	      InvalidNestedHooksDispatcherOnMountInDEV = null,
	      InvalidNestedHooksDispatcherOnUpdateInDEV = null,
	      InvalidNestedHooksDispatcherOnRerenderInDEV = null;
	    HooksDispatcherOnMountInDEV = {
	      readContext: function (context) {
	        return readContext(context);
	      },
	      use: use,
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(deps);
	        return mountCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        mountHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, createDeps) {
	        currentHookNameInDev = "useEffect";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(createDeps);
	        return mountEffect(create, createDeps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(deps);
	        return mountImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(deps);
	        mountEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(deps);
	        return mountLayoutEffect(create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        mountHookTypesDev();
	        checkDepsAreArrayDev(deps);
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        mountHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountReducer(reducer, initialArg, init);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function (initialValue) {
	        currentHookNameInDev = "useRef";
	        mountHookTypesDev();
	        return mountRef(initialValue);
	      },
	      useState: function (initialState) {
	        currentHookNameInDev = "useState";
	        mountHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountState(initialState);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        mountHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        mountHookTypesDev();
	        return mountDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        mountHookTypesDev();
	        return mountTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        mountHookTypesDev();
	        return mountSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        mountHookTypesDev();
	        return mountId();
	      },
	      useFormState: function (action, initialState) {
	        currentHookNameInDev = "useFormState";
	        mountHookTypesDev();
	        warnOnUseFormStateInDev();
	        return mountActionState(action, initialState);
	      },
	      useActionState: function (action, initialState) {
	        currentHookNameInDev = "useActionState";
	        mountHookTypesDev();
	        return mountActionState(action, initialState);
	      },
	      useOptimistic: function (passthrough) {
	        currentHookNameInDev = "useOptimistic";
	        mountHookTypesDev();
	        return mountOptimistic(passthrough);
	      },
	      useHostTransitionStatus: useHostTransitionStatus,
	      useMemoCache: useMemoCache,
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        mountHookTypesDev();
	        return mountRefresh();
	      }
	    };
	    HooksDispatcherOnMountWithHookTypesInDEV = {
	      readContext: function (context) {
	        return readContext(context);
	      },
	      use: use,
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        updateHookTypesDev();
	        return mountCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        updateHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, createDeps) {
	        currentHookNameInDev = "useEffect";
	        updateHookTypesDev();
	        return mountEffect(create, createDeps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        updateHookTypesDev();
	        return mountImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        updateHookTypesDev();
	        mountEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        updateHookTypesDev();
	        return mountLayoutEffect(create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountReducer(reducer, initialArg, init);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function (initialValue) {
	        currentHookNameInDev = "useRef";
	        updateHookTypesDev();
	        return mountRef(initialValue);
	      },
	      useState: function (initialState) {
	        currentHookNameInDev = "useState";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountState(initialState);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        updateHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        updateHookTypesDev();
	        return mountDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        updateHookTypesDev();
	        return mountTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        updateHookTypesDev();
	        return mountSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        updateHookTypesDev();
	        return mountId();
	      },
	      useActionState: function (action, initialState) {
	        currentHookNameInDev = "useActionState";
	        updateHookTypesDev();
	        return mountActionState(action, initialState);
	      },
	      useFormState: function (action, initialState) {
	        currentHookNameInDev = "useFormState";
	        updateHookTypesDev();
	        warnOnUseFormStateInDev();
	        return mountActionState(action, initialState);
	      },
	      useOptimistic: function (passthrough) {
	        currentHookNameInDev = "useOptimistic";
	        updateHookTypesDev();
	        return mountOptimistic(passthrough);
	      },
	      useHostTransitionStatus: useHostTransitionStatus,
	      useMemoCache: useMemoCache,
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        updateHookTypesDev();
	        return mountRefresh();
	      }
	    };
	    HooksDispatcherOnUpdateInDEV = {
	      readContext: function (context) {
	        return readContext(context);
	      },
	      use: use,
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        updateHookTypesDev();
	        return updateCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        updateHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, createDeps) {
	        currentHookNameInDev = "useEffect";
	        updateHookTypesDev();
	        updateEffectImpl(2048, Passive, create, createDeps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        updateHookTypesDev();
	        return updateImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        updateHookTypesDev();
	        return updateEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        updateHookTypesDev();
	        return updateEffectImpl(4, Layout, create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateReducer(reducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function () {
	        currentHookNameInDev = "useRef";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useState: function () {
	        currentHookNameInDev = "useState";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateReducer(basicStateReducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        updateHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        updateHookTypesDev();
	        return updateDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        updateHookTypesDev();
	        return updateTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        updateHookTypesDev();
	        return updateSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useFormState: function (action) {
	        currentHookNameInDev = "useFormState";
	        updateHookTypesDev();
	        warnOnUseFormStateInDev();
	        return updateActionState(action);
	      },
	      useActionState: function (action) {
	        currentHookNameInDev = "useActionState";
	        updateHookTypesDev();
	        return updateActionState(action);
	      },
	      useOptimistic: function (passthrough, reducer) {
	        currentHookNameInDev = "useOptimistic";
	        updateHookTypesDev();
	        return updateOptimistic(passthrough, reducer);
	      },
	      useHostTransitionStatus: useHostTransitionStatus,
	      useMemoCache: useMemoCache,
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      }
	    };
	    HooksDispatcherOnRerenderInDEV = {
	      readContext: function (context) {
	        return readContext(context);
	      },
	      use: use,
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        updateHookTypesDev();
	        return updateCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        updateHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, createDeps) {
	        currentHookNameInDev = "useEffect";
	        updateHookTypesDev();
	        updateEffectImpl(2048, Passive, create, createDeps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        updateHookTypesDev();
	        return updateImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        updateHookTypesDev();
	        return updateEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        updateHookTypesDev();
	        return updateEffectImpl(4, Layout, create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
	        try {
	          return updateMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
	        try {
	          return rerenderReducer(reducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function () {
	        currentHookNameInDev = "useRef";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useState: function () {
	        currentHookNameInDev = "useState";
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
	        try {
	          return rerenderReducer(basicStateReducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        updateHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        updateHookTypesDev();
	        return rerenderDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        updateHookTypesDev();
	        return rerenderTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        updateHookTypesDev();
	        return updateSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useFormState: function (action) {
	        currentHookNameInDev = "useFormState";
	        updateHookTypesDev();
	        warnOnUseFormStateInDev();
	        return rerenderActionState(action);
	      },
	      useActionState: function (action) {
	        currentHookNameInDev = "useActionState";
	        updateHookTypesDev();
	        return rerenderActionState(action);
	      },
	      useOptimistic: function (passthrough, reducer) {
	        currentHookNameInDev = "useOptimistic";
	        updateHookTypesDev();
	        return rerenderOptimistic(passthrough, reducer);
	      },
	      useHostTransitionStatus: useHostTransitionStatus,
	      useMemoCache: useMemoCache,
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      }
	    };
	    InvalidNestedHooksDispatcherOnMountInDEV = {
	      readContext: function (context) {
	        warnInvalidContextAccess();
	        return readContext(context);
	      },
	      use: function (usable) {
	        warnInvalidHookAccess();
	        return use(usable);
	      },
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, createDeps) {
	        currentHookNameInDev = "useEffect";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountEffect(create, createDeps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        mountEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountLayoutEffect(create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountReducer(reducer, initialArg, init);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function (initialValue) {
	        currentHookNameInDev = "useRef";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountRef(initialValue);
	      },
	      useState: function (initialState) {
	        currentHookNameInDev = "useState";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
	        try {
	          return mountState(initialState);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountId();
	      },
	      useFormState: function (action, initialState) {
	        currentHookNameInDev = "useFormState";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountActionState(action, initialState);
	      },
	      useActionState: function (action, initialState) {
	        currentHookNameInDev = "useActionState";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountActionState(action, initialState);
	      },
	      useOptimistic: function (passthrough) {
	        currentHookNameInDev = "useOptimistic";
	        warnInvalidHookAccess();
	        mountHookTypesDev();
	        return mountOptimistic(passthrough);
	      },
	      useMemoCache: function (size) {
	        warnInvalidHookAccess();
	        return useMemoCache(size);
	      },
	      useHostTransitionStatus: useHostTransitionStatus,
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        mountHookTypesDev();
	        return mountRefresh();
	      }
	    };
	    InvalidNestedHooksDispatcherOnUpdateInDEV = {
	      readContext: function (context) {
	        warnInvalidContextAccess();
	        return readContext(context);
	      },
	      use: function (usable) {
	        warnInvalidHookAccess();
	        return use(usable);
	      },
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, createDeps) {
	        currentHookNameInDev = "useEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        updateEffectImpl(2048, Passive, create, createDeps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateEffectImpl(4, Layout, create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateReducer(reducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function () {
	        currentHookNameInDev = "useRef";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useState: function () {
	        currentHookNameInDev = "useState";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateReducer(basicStateReducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useFormState: function (action) {
	        currentHookNameInDev = "useFormState";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateActionState(action);
	      },
	      useActionState: function (action) {
	        currentHookNameInDev = "useActionState";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateActionState(action);
	      },
	      useOptimistic: function (passthrough, reducer) {
	        currentHookNameInDev = "useOptimistic";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateOptimistic(passthrough, reducer);
	      },
	      useMemoCache: function (size) {
	        warnInvalidHookAccess();
	        return useMemoCache(size);
	      },
	      useHostTransitionStatus: useHostTransitionStatus,
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      }
	    };
	    InvalidNestedHooksDispatcherOnRerenderInDEV = {
	      readContext: function (context) {
	        warnInvalidContextAccess();
	        return readContext(context);
	      },
	      use: function (usable) {
	        warnInvalidHookAccess();
	        return use(usable);
	      },
	      useCallback: function (callback, deps) {
	        currentHookNameInDev = "useCallback";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateCallback(callback, deps);
	      },
	      useContext: function (context) {
	        currentHookNameInDev = "useContext";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return readContext(context);
	      },
	      useEffect: function (create, createDeps) {
	        currentHookNameInDev = "useEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        updateEffectImpl(2048, Passive, create, createDeps);
	      },
	      useImperativeHandle: function (ref, create, deps) {
	        currentHookNameInDev = "useImperativeHandle";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateImperativeHandle(ref, create, deps);
	      },
	      useInsertionEffect: function (create, deps) {
	        currentHookNameInDev = "useInsertionEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateEffectImpl(4, Insertion, create, deps);
	      },
	      useLayoutEffect: function (create, deps) {
	        currentHookNameInDev = "useLayoutEffect";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateEffectImpl(4, Layout, create, deps);
	      },
	      useMemo: function (create, deps) {
	        currentHookNameInDev = "useMemo";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return updateMemo(create, deps);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useReducer: function (reducer, initialArg, init) {
	        currentHookNameInDev = "useReducer";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return rerenderReducer(reducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useRef: function () {
	        currentHookNameInDev = "useRef";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useState: function () {
	        currentHookNameInDev = "useState";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        var prevDispatcher = ReactSharedInternals.H;
	        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        try {
	          return rerenderReducer(basicStateReducer);
	        } finally {
	          ReactSharedInternals.H = prevDispatcher;
	        }
	      },
	      useDebugValue: function () {
	        currentHookNameInDev = "useDebugValue";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	      },
	      useDeferredValue: function (value, initialValue) {
	        currentHookNameInDev = "useDeferredValue";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return rerenderDeferredValue(value, initialValue);
	      },
	      useTransition: function () {
	        currentHookNameInDev = "useTransition";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return rerenderTransition();
	      },
	      useSyncExternalStore: function (
	        subscribe,
	        getSnapshot,
	        getServerSnapshot
	      ) {
	        currentHookNameInDev = "useSyncExternalStore";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateSyncExternalStore(
	          subscribe,
	          getSnapshot,
	          getServerSnapshot
	        );
	      },
	      useId: function () {
	        currentHookNameInDev = "useId";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      },
	      useFormState: function (action) {
	        currentHookNameInDev = "useFormState";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return rerenderActionState(action);
	      },
	      useActionState: function (action) {
	        currentHookNameInDev = "useActionState";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return rerenderActionState(action);
	      },
	      useOptimistic: function (passthrough, reducer) {
	        currentHookNameInDev = "useOptimistic";
	        warnInvalidHookAccess();
	        updateHookTypesDev();
	        return rerenderOptimistic(passthrough, reducer);
	      },
	      useMemoCache: function (size) {
	        warnInvalidHookAccess();
	        return useMemoCache(size);
	      },
	      useHostTransitionStatus: useHostTransitionStatus,
	      useCacheRefresh: function () {
	        currentHookNameInDev = "useCacheRefresh";
	        updateHookTypesDev();
	        return updateWorkInProgressHook().memoizedState;
	      }
	    };
	    var callComponent = {
	        react_stack_bottom_frame: function (Component, props, secondArg) {
	          var wasRendering = isRendering;
	          isRendering = true;
	          try {
	            return Component(props, secondArg);
	          } finally {
	            isRendering = wasRendering;
	          }
	        }
	      },
	      callComponentInDEV =
	        callComponent.react_stack_bottom_frame.bind(callComponent),
	      callRender = {
	        react_stack_bottom_frame: function (instance) {
	          var wasRendering = isRendering;
	          isRendering = true;
	          try {
	            return instance.render();
	          } finally {
	            isRendering = wasRendering;
	          }
	        }
	      },
	      callRenderInDEV = callRender.react_stack_bottom_frame.bind(callRender),
	      callComponentDidMount = {
	        react_stack_bottom_frame: function (finishedWork, instance) {
	          try {
	            instance.componentDidMount();
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      },
	      callComponentDidMountInDEV =
	        callComponentDidMount.react_stack_bottom_frame.bind(
	          callComponentDidMount
	        ),
	      callComponentDidUpdate = {
	        react_stack_bottom_frame: function (
	          finishedWork,
	          instance,
	          prevProps,
	          prevState,
	          snapshot
	        ) {
	          try {
	            instance.componentDidUpdate(prevProps, prevState, snapshot);
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      },
	      callComponentDidUpdateInDEV =
	        callComponentDidUpdate.react_stack_bottom_frame.bind(
	          callComponentDidUpdate
	        ),
	      callComponentDidCatch = {
	        react_stack_bottom_frame: function (instance, errorInfo) {
	          var stack = errorInfo.stack;
	          instance.componentDidCatch(errorInfo.value, {
	            componentStack: null !== stack ? stack : ""
	          });
	        }
	      },
	      callComponentDidCatchInDEV =
	        callComponentDidCatch.react_stack_bottom_frame.bind(
	          callComponentDidCatch
	        ),
	      callComponentWillUnmount = {
	        react_stack_bottom_frame: function (
	          current,
	          nearestMountedAncestor,
	          instance
	        ) {
	          try {
	            instance.componentWillUnmount();
	          } catch (error) {
	            captureCommitPhaseError(current, nearestMountedAncestor, error);
	          }
	        }
	      },
	      callComponentWillUnmountInDEV =
	        callComponentWillUnmount.react_stack_bottom_frame.bind(
	          callComponentWillUnmount
	        ),
	      callCreate = {
	        react_stack_bottom_frame: function (effect) {
	          null != effect.resourceKind &&
	            console.error(
	              "Expected only SimpleEffects when enableUseEffectCRUDOverload is disabled, got %s",
	              effect.resourceKind
	            );
	          var create = effect.create;
	          effect = effect.inst;
	          create = create();
	          return (effect.destroy = create);
	        }
	      },
	      callCreateInDEV = callCreate.react_stack_bottom_frame.bind(callCreate),
	      callDestroy = {
	        react_stack_bottom_frame: function (
	          current,
	          nearestMountedAncestor,
	          destroy
	        ) {
	          try {
	            destroy();
	          } catch (error) {
	            captureCommitPhaseError(current, nearestMountedAncestor, error);
	          }
	        }
	      },
	      callDestroyInDEV = callDestroy.react_stack_bottom_frame.bind(callDestroy),
	      callLazyInit = {
	        react_stack_bottom_frame: function (lazy) {
	          var init = lazy._init;
	          return init(lazy._payload);
	        }
	      },
	      callLazyInitInDEV =
	        callLazyInit.react_stack_bottom_frame.bind(callLazyInit),
	      thenableState = null,
	      thenableIndexCounter = 0,
	      currentDebugInfo = null,
	      didWarnAboutMaps;
	    var didWarnAboutGenerators = (didWarnAboutMaps = false);
	    var ownerHasKeyUseWarning = {};
	    var ownerHasFunctionTypeWarning = {};
	    var ownerHasSymbolTypeWarning = {};
	    warnForMissingKey = function (returnFiber, workInProgress, child) {
	      if (
	        null !== child &&
	        "object" === typeof child &&
	        child._store &&
	        ((!child._store.validated && null == child.key) ||
	          2 === child._store.validated)
	      ) {
	        if ("object" !== typeof child._store)
	          throw Error(
	            "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
	          );
	        child._store.validated = 1;
	        var componentName = getComponentNameFromFiber(returnFiber),
	          componentKey = componentName || "null";
	        if (!ownerHasKeyUseWarning[componentKey]) {
	          ownerHasKeyUseWarning[componentKey] = true;
	          child = child._owner;
	          returnFiber = returnFiber._debugOwner;
	          var currentComponentErrorInfo = "";
	          returnFiber &&
	            "number" === typeof returnFiber.tag &&
	            (componentKey = getComponentNameFromFiber(returnFiber)) &&
	            (currentComponentErrorInfo =
	              "\n\nCheck the render method of `" + componentKey + "`.");
	          currentComponentErrorInfo ||
	            (componentName &&
	              (currentComponentErrorInfo =
	                "\n\nCheck the top-level render call using <" +
	                componentName +
	                ">."));
	          var childOwnerAppendix = "";
	          null != child &&
	            returnFiber !== child &&
	            ((componentName = null),
	            "number" === typeof child.tag
	              ? (componentName = getComponentNameFromFiber(child))
	              : "string" === typeof child.name && (componentName = child.name),
	            componentName &&
	              (childOwnerAppendix =
	                " It was passed a child from " + componentName + "."));
	          runWithFiberInDEV(workInProgress, function () {
	            console.error(
	              'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
	              currentComponentErrorInfo,
	              childOwnerAppendix
	            );
	          });
	        }
	      }
	    };
	    var reconcileChildFibers = createChildReconciler(true),
	      mountChildFibers = createChildReconciler(false),
	      suspenseHandlerStackCursor = createCursor(null),
	      shellBoundary = null,
	      SubtreeSuspenseContextMask = 1,
	      ForceSuspenseFallback = 2,
	      suspenseStackCursor = createCursor(0),
	      fakeInternalInstance = {};
	    var didWarnAboutStateAssignmentForComponent = new Set();
	    var didWarnAboutUninitializedState = new Set();
	    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	    var didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	    var didWarnAboutDirectlyAssigningPropsToState = new Set();
	    var didWarnAboutUndefinedDerivedState = new Set();
	    var didWarnAboutContextTypes$1 = new Set();
	    var didWarnAboutChildContextTypes = new Set();
	    var didWarnAboutInvalidateContextType = new Set();
	    var didWarnOnInvalidCallback = new Set();
	    Object.freeze(fakeInternalInstance);
	    var classComponentUpdater = {
	        enqueueSetState: function (inst, payload, callback) {
	          inst = inst._reactInternals;
	          var lane = requestUpdateLane(inst),
	            update = createUpdate(lane);
	          update.payload = payload;
	          void 0 !== callback &&
	            null !== callback &&
	            (warnOnInvalidCallback(callback), (update.callback = callback));
	          payload = enqueueUpdate(inst, update, lane);
	          null !== payload &&
	            (scheduleUpdateOnFiber(payload, inst, lane),
	            entangleTransitions(payload, inst, lane));
	          markStateUpdateScheduled(inst, lane);
	        },
	        enqueueReplaceState: function (inst, payload, callback) {
	          inst = inst._reactInternals;
	          var lane = requestUpdateLane(inst),
	            update = createUpdate(lane);
	          update.tag = ReplaceState;
	          update.payload = payload;
	          void 0 !== callback &&
	            null !== callback &&
	            (warnOnInvalidCallback(callback), (update.callback = callback));
	          payload = enqueueUpdate(inst, update, lane);
	          null !== payload &&
	            (scheduleUpdateOnFiber(payload, inst, lane),
	            entangleTransitions(payload, inst, lane));
	          markStateUpdateScheduled(inst, lane);
	        },
	        enqueueForceUpdate: function (inst, callback) {
	          inst = inst._reactInternals;
	          var lane = requestUpdateLane(inst),
	            update = createUpdate(lane);
	          update.tag = ForceUpdate;
	          void 0 !== callback &&
	            null !== callback &&
	            (warnOnInvalidCallback(callback), (update.callback = callback));
	          callback = enqueueUpdate(inst, update, lane);
	          null !== callback &&
	            (scheduleUpdateOnFiber(callback, inst, lane),
	            entangleTransitions(callback, inst, lane));
	          null !== injectedProfilingHooks &&
	            "function" ===
	              typeof injectedProfilingHooks.markForceUpdateScheduled &&
	            injectedProfilingHooks.markForceUpdateScheduled(inst, lane);
	        }
	      },
	      reportGlobalError =
	        "function" === typeof reportError
	          ? reportError
	          : function (error) {
	              if (
	                "object" === typeof window &&
	                "function" === typeof window.ErrorEvent
	              ) {
	                var event = new window.ErrorEvent("error", {
	                  bubbles: true,
	                  cancelable: true,
	                  message:
	                    "object" === typeof error &&
	                    null !== error &&
	                    "string" === typeof error.message
	                      ? String(error.message)
	                      : String(error),
	                  error: error
	                });
	                if (!window.dispatchEvent(event)) return;
	              } else if (
	                "object" === typeof process &&
	                "function" === typeof process.emit
	              ) {
	                process.emit("uncaughtException", error);
	                return;
	              }
	              console.error(error);
	            },
	      componentName = null,
	      errorBoundaryName = null,
	      SelectiveHydrationException = Error(
	        "This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."
	      ),
	      didReceiveUpdate = false;
	    var didWarnAboutBadClass = {};
	    var didWarnAboutContextTypeOnFunctionComponent = {};
	    var didWarnAboutContextTypes = {};
	    var didWarnAboutGetDerivedStateOnFunctionComponent = {};
	    var didWarnAboutReassigningProps = false;
	    var didWarnAboutRevealOrder = {};
	    var didWarnAboutTailOptions = {};
	    var SUSPENDED_MARKER = {
	        dehydrated: null,
	        treeContext: null,
	        retryLane: 0,
	        hydrationErrors: null
	      },
	      hasWarnedAboutUsingNoValuePropOnContextProvider = false,
	      didWarnAboutUndefinedSnapshotBeforeUpdate = null;
	    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	    var offscreenSubtreeIsHidden = false,
	      offscreenSubtreeWasHidden = false,
	      needsFormReset = false,
	      PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
	      nextEffect = null,
	      inProgressLanes = null,
	      inProgressRoot = null,
	      hostParent = null,
	      hostParentIsContainer = false,
	      currentHoistableRoot = null,
	      suspenseyCommitFlag = 8192,
	      DefaultAsyncDispatcher = {
	        getCacheForType: function (resourceType) {
	          var cache = readContext(CacheContext),
	            cacheForType = cache.data.get(resourceType);
	          void 0 === cacheForType &&
	            ((cacheForType = resourceType()),
	            cache.data.set(resourceType, cacheForType));
	          return cacheForType;
	        },
	        getOwner: function () {
	          return current;
	        }
	      };
	    if ("function" === typeof Symbol && Symbol.for) {
	      var symbolFor = Symbol.for;
	      symbolFor("selector.component");
	      symbolFor("selector.has_pseudo_class");
	      symbolFor("selector.role");
	      symbolFor("selector.test_id");
	      symbolFor("selector.text");
	    }
	    var commitHooks = [],
	      PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map,
	      NoContext = 0,
	      RenderContext = 2,
	      CommitContext = 4,
	      RootInProgress = 0,
	      RootFatalErrored = 1,
	      RootErrored = 2,
	      RootSuspended = 3,
	      RootSuspendedWithDelay = 4,
	      RootSuspendedAtTheShell = 6,
	      RootCompleted = 5,
	      executionContext = NoContext,
	      workInProgressRoot = null,
	      workInProgress = null,
	      workInProgressRootRenderLanes = 0,
	      NotSuspended = 0,
	      SuspendedOnError = 1,
	      SuspendedOnData = 2,
	      SuspendedOnImmediate = 3,
	      SuspendedOnInstance = 4,
	      SuspendedOnInstanceAndReadyToContinue = 5,
	      SuspendedOnDeprecatedThrowPromise = 6,
	      SuspendedAndReadyToContinue = 7,
	      SuspendedOnHydration = 8,
	      SuspendedOnAction = 9,
	      workInProgressSuspendedReason = NotSuspended,
	      workInProgressThrownValue = null,
	      workInProgressRootDidSkipSuspendedSiblings = false,
	      workInProgressRootIsPrerendering = false,
	      workInProgressRootDidAttachPingListener = false,
	      entangledRenderLanes = 0,
	      workInProgressRootExitStatus = RootInProgress,
	      workInProgressRootSkippedLanes = 0,
	      workInProgressRootInterleavedUpdatedLanes = 0,
	      workInProgressRootPingedLanes = 0,
	      workInProgressDeferredLane = 0,
	      workInProgressSuspendedRetryLanes = 0,
	      workInProgressRootConcurrentErrors = null,
	      workInProgressRootRecoverableErrors = null,
	      workInProgressRootDidIncludeRecursiveRenderUpdate = false,
	      globalMostRecentFallbackTime = 0,
	      FALLBACK_THROTTLE_MS = 300,
	      workInProgressRootRenderTargetTime = Infinity,
	      RENDER_TIMEOUT_MS = 500,
	      workInProgressTransitions = null,
	      legacyErrorBoundariesThatAlreadyFailed = null,
	      IMMEDIATE_COMMIT = 0,
	      SUSPENDED_COMMIT = 1,
	      THROTTLED_COMMIT = 2,
	      NO_PENDING_EFFECTS = 0,
	      PENDING_MUTATION_PHASE = 1,
	      PENDING_LAYOUT_PHASE = 2,
	      PENDING_AFTER_MUTATION_PHASE = 3,
	      PENDING_SPAWNED_WORK = 4,
	      PENDING_PASSIVE_PHASE = 5,
	      pendingEffectsStatus = 0,
	      pendingEffectsRoot = null,
	      pendingFinishedWork = null,
	      pendingEffectsLanes = 0,
	      pendingEffectsRemainingLanes = 0,
	      pendingPassiveTransitions = null,
	      pendingRecoverableErrors = null,
	      NESTED_UPDATE_LIMIT = 50,
	      nestedUpdateCount = 0,
	      rootWithNestedUpdates = null,
	      isFlushingPassiveEffects = false,
	      didScheduleUpdateDuringPassiveEffects = false,
	      NESTED_PASSIVE_UPDATE_LIMIT = 50,
	      nestedPassiveUpdateCount = 0,
	      rootWithPassiveNestedUpdates = null,
	      isRunningInsertionEffect = false,
	      didWarnStateUpdateForNotYetMountedComponent = null,
	      didWarnAboutUpdateInRender = false;
	    var didWarnAboutUpdateInRenderForAnotherComponent = new Set();
	    var fakeActCallbackNode$1 = {},
	      firstScheduledRoot = null,
	      lastScheduledRoot = null,
	      didScheduleMicrotask = false,
	      didScheduleMicrotask_act = false,
	      mightHavePendingSyncWork = false,
	      isFlushingWork = false,
	      currentEventTransitionLane = 0,
	      fakeActCallbackNode = {};
	    (function () {
	      for (var i = 0; i < simpleEventPluginEvents.length; i++) {
	        var eventName = simpleEventPluginEvents[i],
	          domEventName = eventName.toLowerCase();
	        eventName = eventName[0].toUpperCase() + eventName.slice(1);
	        registerSimpleEvent(domEventName, "on" + eventName);
	      }
	      registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
	      registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
	      registerSimpleEvent(ANIMATION_START, "onAnimationStart");
	      registerSimpleEvent("dblclick", "onDoubleClick");
	      registerSimpleEvent("focusin", "onFocus");
	      registerSimpleEvent("focusout", "onBlur");
	      registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
	      registerSimpleEvent(TRANSITION_START, "onTransitionStart");
	      registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
	      registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
	    })();
	    registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
	    registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
	    registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
	    registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
	    registerTwoPhaseEvent(
	      "onChange",
	      "change click focusin focusout input keydown keyup selectionchange".split(
	        " "
	      )
	    );
	    registerTwoPhaseEvent(
	      "onSelect",
	      "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
	        " "
	      )
	    );
	    registerTwoPhaseEvent("onBeforeInput", [
	      "compositionend",
	      "keypress",
	      "textInput",
	      "paste"
	    ]);
	    registerTwoPhaseEvent(
	      "onCompositionEnd",
	      "compositionend focusout keydown keypress keyup mousedown".split(" ")
	    );
	    registerTwoPhaseEvent(
	      "onCompositionStart",
	      "compositionstart focusout keydown keypress keyup mousedown".split(" ")
	    );
	    registerTwoPhaseEvent(
	      "onCompositionUpdate",
	      "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
	    );
	    var mediaEventTypes =
	        "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
	          " "
	        ),
	      nonDelegatedEvents = new Set(
	        "beforetoggle cancel close invalid load scroll scrollend toggle"
	          .split(" ")
	          .concat(mediaEventTypes)
	      ),
	      listeningMarker = "_reactListening" + Math.random().toString(36).slice(2),
	      didWarnControlledToUncontrolled = false,
	      didWarnUncontrolledToControlled = false,
	      didWarnFormActionType = false,
	      didWarnFormActionName = false,
	      didWarnFormActionTarget = false,
	      didWarnFormActionMethod = false,
	      didWarnPopoverTargetObject = false;
	    var didWarnForNewBooleanPropsWithEmptyValue = {};
	    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g,
	      NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g,
	      xlinkNamespace = "http://www.w3.org/1999/xlink",
	      xmlNamespace = "http://www.w3.org/XML/1998/namespace",
	      EXPECTED_FORM_ACTION_URL =
	        "javascript:throw new Error('React form unexpectedly submitted.')",
	      SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning",
	      SUSPENSE_START_DATA = "$",
	      SUSPENSE_END_DATA = "/$",
	      SUSPENSE_PENDING_START_DATA = "$?",
	      SUSPENSE_FALLBACK_START_DATA = "$!",
	      PREAMBLE_CONTRIBUTION_HTML = 1,
	      PREAMBLE_CONTRIBUTION_BODY = 2,
	      PREAMBLE_CONTRIBUTION_HEAD = 4,
	      FORM_STATE_IS_MATCHING = "F!",
	      FORM_STATE_IS_NOT_MATCHING = "F",
	      DOCUMENT_READY_STATE_COMPLETE = "complete",
	      STYLE = "style",
	      HostContextNamespaceNone = 0,
	      HostContextNamespaceSvg = 1,
	      HostContextNamespaceMath = 2,
	      eventsEnabled = null,
	      selectionInformation = null,
	      warnedUnknownTags = { dialog: true, webview: true },
	      currentPopstateTransitionEvent = null,
	      scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0,
	      cancelTimeout =
	        "function" === typeof clearTimeout ? clearTimeout : void 0,
	      noTimeout = -1,
	      localPromise = "function" === typeof Promise ? Promise : void 0,
	      scheduleMicrotask =
	        "function" === typeof queueMicrotask
	          ? queueMicrotask
	          : "undefined" !== typeof localPromise
	            ? function (callback) {
	                return localPromise
	                  .resolve(null)
	                  .then(callback)
	                  .catch(handleErrorInNextTick);
	              }
	            : scheduleTimeout,
	      previousHydratableOnEnteringScopedSingleton = null,
	      NotLoaded = 0,
	      Loaded = 1,
	      Errored = 2,
	      Settled = 3,
	      Inserted = 4,
	      preloadPropsMap = new Map(),
	      preconnectsSet = new Set(),
	      previousDispatcher = ReactDOMSharedInternals.d;
	    ReactDOMSharedInternals.d = {
	      f: function () {
	        var previousWasRendering = previousDispatcher.f(),
	          wasRendering = flushSyncWork$1();
	        return previousWasRendering || wasRendering;
	      },
	      r: function (form) {
	        var formInst = getInstanceFromNode(form);
	        null !== formInst && 5 === formInst.tag && "form" === formInst.type
	          ? requestFormReset$1(formInst)
	          : previousDispatcher.r(form);
	      },
	      D: function (href) {
	        previousDispatcher.D(href);
	        preconnectAs("dns-prefetch", href, null);
	      },
	      C: function (href, crossOrigin) {
	        previousDispatcher.C(href, crossOrigin);
	        preconnectAs("preconnect", href, crossOrigin);
	      },
	      L: function (href, as, options) {
	        previousDispatcher.L(href, as, options);
	        var ownerDocument = globalDocument;
	        if (ownerDocument && href && as) {
	          var preloadSelector =
	            'link[rel="preload"][as="' +
	            escapeSelectorAttributeValueInsideDoubleQuotes(as) +
	            '"]';
	          "image" === as
	            ? options && options.imageSrcSet
	              ? ((preloadSelector +=
	                  '[imagesrcset="' +
	                  escapeSelectorAttributeValueInsideDoubleQuotes(
	                    options.imageSrcSet
	                  ) +
	                  '"]'),
	                "string" === typeof options.imageSizes &&
	                  (preloadSelector +=
	                    '[imagesizes="' +
	                    escapeSelectorAttributeValueInsideDoubleQuotes(
	                      options.imageSizes
	                    ) +
	                    '"]'))
	              : (preloadSelector +=
	                  '[href="' +
	                  escapeSelectorAttributeValueInsideDoubleQuotes(href) +
	                  '"]')
	            : (preloadSelector +=
	                '[href="' +
	                escapeSelectorAttributeValueInsideDoubleQuotes(href) +
	                '"]');
	          var key = preloadSelector;
	          switch (as) {
	            case "style":
	              key = getStyleKey(href);
	              break;
	            case "script":
	              key = getScriptKey(href);
	          }
	          preloadPropsMap.has(key) ||
	            ((href = assign(
	              {
	                rel: "preload",
	                href:
	                  "image" === as && options && options.imageSrcSet
	                    ? void 0
	                    : href,
	                as: as
	              },
	              options
	            )),
	            preloadPropsMap.set(key, href),
	            null !== ownerDocument.querySelector(preloadSelector) ||
	              ("style" === as &&
	                ownerDocument.querySelector(
	                  getStylesheetSelectorFromKey(key)
	                )) ||
	              ("script" === as &&
	                ownerDocument.querySelector(getScriptSelectorFromKey(key))) ||
	              ((as = ownerDocument.createElement("link")),
	              setInitialProperties(as, "link", href),
	              markNodeAsHoistable(as),
	              ownerDocument.head.appendChild(as)));
	        }
	      },
	      m: function (href, options) {
	        previousDispatcher.m(href, options);
	        var ownerDocument = globalDocument;
	        if (ownerDocument && href) {
	          var as =
	              options && "string" === typeof options.as ? options.as : "script",
	            preloadSelector =
	              'link[rel="modulepreload"][as="' +
	              escapeSelectorAttributeValueInsideDoubleQuotes(as) +
	              '"][href="' +
	              escapeSelectorAttributeValueInsideDoubleQuotes(href) +
	              '"]',
	            key = preloadSelector;
	          switch (as) {
	            case "audioworklet":
	            case "paintworklet":
	            case "serviceworker":
	            case "sharedworker":
	            case "worker":
	            case "script":
	              key = getScriptKey(href);
	          }
	          if (
	            !preloadPropsMap.has(key) &&
	            ((href = assign({ rel: "modulepreload", href: href }, options)),
	            preloadPropsMap.set(key, href),
	            null === ownerDocument.querySelector(preloadSelector))
	          ) {
	            switch (as) {
	              case "audioworklet":
	              case "paintworklet":
	              case "serviceworker":
	              case "sharedworker":
	              case "worker":
	              case "script":
	                if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
	                  return;
	            }
	            as = ownerDocument.createElement("link");
	            setInitialProperties(as, "link", href);
	            markNodeAsHoistable(as);
	            ownerDocument.head.appendChild(as);
	          }
	        }
	      },
	      X: function (src, options) {
	        previousDispatcher.X(src, options);
	        var ownerDocument = globalDocument;
	        if (ownerDocument && src) {
	          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
	            key = getScriptKey(src),
	            resource = scripts.get(key);
	          resource ||
	            ((resource = ownerDocument.querySelector(
	              getScriptSelectorFromKey(key)
	            )),
	            resource ||
	              ((src = assign({ src: src, async: true }, options)),
	              (options = preloadPropsMap.get(key)) &&
	                adoptPreloadPropsForScript(src, options),
	              (resource = ownerDocument.createElement("script")),
	              markNodeAsHoistable(resource),
	              setInitialProperties(resource, "link", src),
	              ownerDocument.head.appendChild(resource)),
	            (resource = {
	              type: "script",
	              instance: resource,
	              count: 1,
	              state: null
	            }),
	            scripts.set(key, resource));
	        }
	      },
	      S: function (href, precedence, options) {
	        previousDispatcher.S(href, precedence, options);
	        var ownerDocument = globalDocument;
	        if (ownerDocument && href) {
	          var styles = getResourcesFromRoot(ownerDocument).hoistableStyles,
	            key = getStyleKey(href);
	          precedence = precedence || "default";
	          var resource = styles.get(key);
	          if (!resource) {
	            var state = { loading: NotLoaded, preload: null };
	            if (
	              (resource = ownerDocument.querySelector(
	                getStylesheetSelectorFromKey(key)
	              ))
	            )
	              state.loading = Loaded | Inserted;
	            else {
	              href = assign(
	                {
	                  rel: "stylesheet",
	                  href: href,
	                  "data-precedence": precedence
	                },
	                options
	              );
	              (options = preloadPropsMap.get(key)) &&
	                adoptPreloadPropsForStylesheet(href, options);
	              var link = (resource = ownerDocument.createElement("link"));
	              markNodeAsHoistable(link);
	              setInitialProperties(link, "link", href);
	              link._p = new Promise(function (resolve, reject) {
	                link.onload = resolve;
	                link.onerror = reject;
	              });
	              link.addEventListener("load", function () {
	                state.loading |= Loaded;
	              });
	              link.addEventListener("error", function () {
	                state.loading |= Errored;
	              });
	              state.loading |= Inserted;
	              insertStylesheet(resource, precedence, ownerDocument);
	            }
	            resource = {
	              type: "stylesheet",
	              instance: resource,
	              count: 1,
	              state: state
	            };
	            styles.set(key, resource);
	          }
	        }
	      },
	      M: function (src, options) {
	        previousDispatcher.M(src, options);
	        var ownerDocument = globalDocument;
	        if (ownerDocument && src) {
	          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
	            key = getScriptKey(src),
	            resource = scripts.get(key);
	          resource ||
	            ((resource = ownerDocument.querySelector(
	              getScriptSelectorFromKey(key)
	            )),
	            resource ||
	              ((src = assign({ src: src, async: true, type: "module" }, options)),
	              (options = preloadPropsMap.get(key)) &&
	                adoptPreloadPropsForScript(src, options),
	              (resource = ownerDocument.createElement("script")),
	              markNodeAsHoistable(resource),
	              setInitialProperties(resource, "link", src),
	              ownerDocument.head.appendChild(resource)),
	            (resource = {
	              type: "script",
	              instance: resource,
	              count: 1,
	              state: null
	            }),
	            scripts.set(key, resource));
	        }
	      }
	    };
	    var globalDocument = "undefined" === typeof document ? null : document,
	      tagCaches = null,
	      suspendedState = null,
	      LAST_PRECEDENCE = null,
	      precedencesByRoot = null,
	      NotPendingTransition = NotPending,
	      HostTransitionContext = {
	        $$typeof: REACT_CONTEXT_TYPE,
	        Provider: null,
	        Consumer: null,
	        _currentValue: NotPendingTransition,
	        _currentValue2: NotPendingTransition,
	        _threadCount: 0
	      },
	      badgeFormat = "%c%s%c ",
	      badgeStyle =
	        "background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px",
	      resetStyle = "",
	      pad = " ",
	      bind = Function.prototype.bind;
	    var didWarnAboutNestedUpdates = false;
	    var overrideHookState = null,
	      overrideHookStateDeletePath = null,
	      overrideHookStateRenamePath = null,
	      overrideProps = null,
	      overridePropsDeletePath = null,
	      overridePropsRenamePath = null,
	      scheduleUpdate = null,
	      setErrorHandler = null,
	      setSuspenseHandler = null;
	    overrideHookState = function (fiber, id, path, value) {
	      id = findHook(fiber, id);
	      null !== id &&
	        ((path = copyWithSetImpl(id.memoizedState, path, 0, value)),
	        (id.memoizedState = path),
	        (id.baseState = path),
	        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
	        (path = enqueueConcurrentRenderForLane(fiber, 2)),
	        null !== path && scheduleUpdateOnFiber(path, fiber, 2));
	    };
	    overrideHookStateDeletePath = function (fiber, id, path) {
	      id = findHook(fiber, id);
	      null !== id &&
	        ((path = copyWithDeleteImpl(id.memoizedState, path, 0)),
	        (id.memoizedState = path),
	        (id.baseState = path),
	        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
	        (path = enqueueConcurrentRenderForLane(fiber, 2)),
	        null !== path && scheduleUpdateOnFiber(path, fiber, 2));
	    };
	    overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
	      id = findHook(fiber, id);
	      null !== id &&
	        ((oldPath = copyWithRename(id.memoizedState, oldPath, newPath)),
	        (id.memoizedState = oldPath),
	        (id.baseState = oldPath),
	        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
	        (oldPath = enqueueConcurrentRenderForLane(fiber, 2)),
	        null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2));
	    };
	    overrideProps = function (fiber, path, value) {
	      fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
	      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
	      path = enqueueConcurrentRenderForLane(fiber, 2);
	      null !== path && scheduleUpdateOnFiber(path, fiber, 2);
	    };
	    overridePropsDeletePath = function (fiber, path) {
	      fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
	      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
	      path = enqueueConcurrentRenderForLane(fiber, 2);
	      null !== path && scheduleUpdateOnFiber(path, fiber, 2);
	    };
	    overridePropsRenamePath = function (fiber, oldPath, newPath) {
	      fiber.pendingProps = copyWithRename(
	        fiber.memoizedProps,
	        oldPath,
	        newPath
	      );
	      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
	      oldPath = enqueueConcurrentRenderForLane(fiber, 2);
	      null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2);
	    };
	    scheduleUpdate = function (fiber) {
	      var root = enqueueConcurrentRenderForLane(fiber, 2);
	      null !== root && scheduleUpdateOnFiber(root, fiber, 2);
	    };
	    setErrorHandler = function (newShouldErrorImpl) {
	      shouldErrorImpl = newShouldErrorImpl;
	    };
	    setSuspenseHandler = function (newShouldSuspendImpl) {
	      shouldSuspendImpl = newShouldSuspendImpl;
	    };
	    var _enabled = true,
	      return_targetInst = null,
	      hasScheduledReplayAttempt = false,
	      queuedFocus = null,
	      queuedDrag = null,
	      queuedMouse = null,
	      queuedPointers = new Map(),
	      queuedPointerCaptures = new Map(),
	      queuedExplicitHydrationTargets = [],
	      discreteReplayableEvents =
	        "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
	          " "
	        ),
	      lastScheduledReplayQueue = null;
	    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
	      function (children) {
	        var root = this._internalRoot;
	        if (null === root) throw Error("Cannot update an unmounted root.");
	        var args = arguments;
	        "function" === typeof args[1]
	          ? console.error(
	              "does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
	            )
	          : isValidContainer(args[1])
	            ? console.error(
	                "You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."
	              )
	            : "undefined" !== typeof args[1] &&
	              console.error(
	                "You passed a second argument to root.render(...) but it only accepts one argument."
	              );
	        args = children;
	        var current = root.current,
	          lane = requestUpdateLane(current);
	        updateContainerImpl(current, lane, args, root, null, null);
	      };
	    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =
	      function () {
	        var args = arguments;
	        "function" === typeof args[0] &&
	          console.error(
	            "does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
	          );
	        args = this._internalRoot;
	        if (null !== args) {
	          this._internalRoot = null;
	          var container = args.containerInfo;
	          (executionContext & (RenderContext | CommitContext)) !== NoContext &&
	            console.error(
	              "Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."
	            );
	          updateContainerImpl(args.current, 2, null, args, null, null);
	          flushSyncWork$1();
	          container[internalContainerInstanceKey] = null;
	        }
	      };
	    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (
	      target
	    ) {
	      if (target) {
	        var updatePriority = resolveUpdatePriority();
	        target = { blockedOn: null, target: target, priority: updatePriority };
	        for (
	          var i = 0;
	          i < queuedExplicitHydrationTargets.length &&
	          0 !== updatePriority &&
	          updatePriority < queuedExplicitHydrationTargets[i].priority;
	          i++
	        );
	        queuedExplicitHydrationTargets.splice(i, 0, target);
	        0 === i && attemptExplicitHydrationTarget(target);
	      }
	    };
	    (function () {
	      var isomorphicReactPackageVersion = React.version;
	      if ("19.1.1" !== isomorphicReactPackageVersion)
	        throw Error(
	          'Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      ' +
	            (isomorphicReactPackageVersion +
	              "\n  - react-dom:  19.1.1\nLearn more: https://react.dev/warnings/version-mismatch")
	        );
	    })();
	    ("function" === typeof Map &&
	      null != Map.prototype &&
	      "function" === typeof Map.prototype.forEach &&
	      "function" === typeof Set &&
	      null != Set.prototype &&
	      "function" === typeof Set.prototype.clear &&
	      "function" === typeof Set.prototype.forEach) ||
	      console.error(
	        "React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills"
	      );
	    ReactDOMSharedInternals.findDOMNode = function (componentOrElement) {
	      var fiber = componentOrElement._reactInternals;
	      if (void 0 === fiber) {
	        if ("function" === typeof componentOrElement.render)
	          throw Error("Unable to find node on an unmounted component.");
	        componentOrElement = Object.keys(componentOrElement).join(",");
	        throw Error(
	          "Argument appears to not be a ReactComponent. Keys: " +
	            componentOrElement
	        );
	      }
	      componentOrElement = findCurrentFiberUsingSlowPath(fiber);
	      componentOrElement =
	        null !== componentOrElement
	          ? findCurrentHostFiberImpl(componentOrElement)
	          : null;
	      componentOrElement =
	        null === componentOrElement ? null : componentOrElement.stateNode;
	      return componentOrElement;
	    };
	    if (
	      !(function () {
	        var internals = {
	          bundleType: 1,
	          version: "19.1.1",
	          rendererPackageName: "react-dom",
	          currentDispatcherRef: ReactSharedInternals,
	          reconcilerVersion: "19.1.1"
	        };
	        internals.overrideHookState = overrideHookState;
	        internals.overrideHookStateDeletePath = overrideHookStateDeletePath;
	        internals.overrideHookStateRenamePath = overrideHookStateRenamePath;
	        internals.overrideProps = overrideProps;
	        internals.overridePropsDeletePath = overridePropsDeletePath;
	        internals.overridePropsRenamePath = overridePropsRenamePath;
	        internals.scheduleUpdate = scheduleUpdate;
	        internals.setErrorHandler = setErrorHandler;
	        internals.setSuspenseHandler = setSuspenseHandler;
	        internals.scheduleRefresh = scheduleRefresh;
	        internals.scheduleRoot = scheduleRoot;
	        internals.setRefreshHandler = setRefreshHandler;
	        internals.getCurrentFiber = getCurrentFiberForDevTools;
	        internals.getLaneLabelMap = getLaneLabelMap;
	        internals.injectProfilingHooks = injectProfilingHooks;
	        return injectInternals(internals);
	      })() &&
	      canUseDOM &&
	      window.top === window.self &&
	      ((-1 < navigator.userAgent.indexOf("Chrome") &&
	        -1 === navigator.userAgent.indexOf("Edge")) ||
	        -1 < navigator.userAgent.indexOf("Firefox"))
	    ) {
	      var protocol = window.location.protocol;
	      /^(https?|file):$/.test(protocol) &&
	        console.info(
	          "%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools" +
	            ("file:" === protocol
	              ? "\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq"
	              : ""),
	          "font-weight:bold"
	        );
	    }
	    reactDomClient_development.createRoot = function (container, options) {
	      if (!isValidContainer(container))
	        throw Error("Target container is not a DOM element.");
	      warnIfReactDOMContainerInDEV(container);
	      var isStrictMode = false,
	        identifierPrefix = "",
	        onUncaughtError = defaultOnUncaughtError,
	        onCaughtError = defaultOnCaughtError,
	        onRecoverableError = defaultOnRecoverableError,
	        transitionCallbacks = null;
	      null !== options &&
	        void 0 !== options &&
	        (options.hydrate
	          ? console.warn(
	              "hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."
	            )
	          : "object" === typeof options &&
	            null !== options &&
	            options.$$typeof === REACT_ELEMENT_TYPE &&
	            console.error(
	              "You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"
	            ),
	        true === options.unstable_strictMode && (isStrictMode = true),
	        void 0 !== options.identifierPrefix &&
	          (identifierPrefix = options.identifierPrefix),
	        void 0 !== options.onUncaughtError &&
	          (onUncaughtError = options.onUncaughtError),
	        void 0 !== options.onCaughtError &&
	          (onCaughtError = options.onCaughtError),
	        void 0 !== options.onRecoverableError &&
	          (onRecoverableError = options.onRecoverableError),
	        void 0 !== options.unstable_transitionCallbacks &&
	          (transitionCallbacks = options.unstable_transitionCallbacks));
	      options = createFiberRoot(
	        container,
	        1,
	        false,
	        null,
	        null,
	        isStrictMode,
	        identifierPrefix,
	        onUncaughtError,
	        onCaughtError,
	        onRecoverableError,
	        transitionCallbacks,
	        null
	      );
	      container[internalContainerInstanceKey] = options.current;
	      listenToAllSupportedEvents(container);
	      return new ReactDOMRoot(options);
	    };
	    reactDomClient_development.hydrateRoot = function (container, initialChildren, options) {
	      if (!isValidContainer(container))
	        throw Error("Target container is not a DOM element.");
	      warnIfReactDOMContainerInDEV(container);
	      void 0 === initialChildren &&
	        console.error(
	          "Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)"
	        );
	      var isStrictMode = false,
	        identifierPrefix = "",
	        onUncaughtError = defaultOnUncaughtError,
	        onCaughtError = defaultOnCaughtError,
	        onRecoverableError = defaultOnRecoverableError,
	        transitionCallbacks = null,
	        formState = null;
	      null !== options &&
	        void 0 !== options &&
	        (true === options.unstable_strictMode && (isStrictMode = true),
	        void 0 !== options.identifierPrefix &&
	          (identifierPrefix = options.identifierPrefix),
	        void 0 !== options.onUncaughtError &&
	          (onUncaughtError = options.onUncaughtError),
	        void 0 !== options.onCaughtError &&
	          (onCaughtError = options.onCaughtError),
	        void 0 !== options.onRecoverableError &&
	          (onRecoverableError = options.onRecoverableError),
	        void 0 !== options.unstable_transitionCallbacks &&
	          (transitionCallbacks = options.unstable_transitionCallbacks),
	        void 0 !== options.formState && (formState = options.formState));
	      initialChildren = createFiberRoot(
	        container,
	        1,
	        true,
	        initialChildren,
	        null != options ? options : null,
	        isStrictMode,
	        identifierPrefix,
	        onUncaughtError,
	        onCaughtError,
	        onRecoverableError,
	        transitionCallbacks,
	        formState
	      );
	      initialChildren.context = getContextForSubtree(null);
	      options = initialChildren.current;
	      isStrictMode = requestUpdateLane(options);
	      isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
	      identifierPrefix = createUpdate(isStrictMode);
	      identifierPrefix.callback = null;
	      enqueueUpdate(options, identifierPrefix, isStrictMode);
	      options = isStrictMode;
	      initialChildren.current.lanes = options;
	      markRootUpdated$1(initialChildren, options);
	      ensureRootIsScheduled(initialChildren);
	      container[internalContainerInstanceKey] = initialChildren.current;
	      listenToAllSupportedEvents(container);
	      return new ReactDOMHydrationRoot(initialChildren);
	    };
	    reactDomClient_development.version = "19.1.1";
	    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
	      "function" ===
	        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
	  }))();
	return reactDomClient_development;
}

var hasRequiredClient;

function requireClient () {
	if (hasRequiredClient) return client.exports;
	hasRequiredClient = 1;

	{
	  client.exports = requireReactDomClient_development();
	}
	return client.exports;
}

var clientExports = requireClient();
const ReactDOM = /*@__PURE__*/getDefaultExportFromCjs(clientExports);

var jsxDevRuntime = {exports: {}};

var reactJsxDevRuntime_development = {};

/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxDevRuntime_development;

function requireReactJsxDevRuntime_development () {
	if (hasRequiredReactJsxDevRuntime_development) return reactJsxDevRuntime_development;
	hasRequiredReactJsxDevRuntime_development = 1;
	((function () {
	    function getComponentNameFromType(type) {
	      if (null == type) return null;
	      if ("function" === typeof type)
	        return type.$$typeof === REACT_CLIENT_REFERENCE
	          ? null
	          : type.displayName || type.name || null;
	      if ("string" === typeof type) return type;
	      switch (type) {
	        case REACT_FRAGMENT_TYPE:
	          return "Fragment";
	        case REACT_PROFILER_TYPE:
	          return "Profiler";
	        case REACT_STRICT_MODE_TYPE:
	          return "StrictMode";
	        case REACT_SUSPENSE_TYPE:
	          return "Suspense";
	        case REACT_SUSPENSE_LIST_TYPE:
	          return "SuspenseList";
	        case REACT_ACTIVITY_TYPE:
	          return "Activity";
	      }
	      if ("object" === typeof type)
	        switch (
	          ("number" === typeof type.tag &&
	            console.error(
	              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
	            ),
	          type.$$typeof)
	        ) {
	          case REACT_PORTAL_TYPE:
	            return "Portal";
	          case REACT_CONTEXT_TYPE:
	            return (type.displayName || "Context") + ".Provider";
	          case REACT_CONSUMER_TYPE:
	            return (type._context.displayName || "Context") + ".Consumer";
	          case REACT_FORWARD_REF_TYPE:
	            var innerType = type.render;
	            type = type.displayName;
	            type ||
	              ((type = innerType.displayName || innerType.name || ""),
	              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
	            return type;
	          case REACT_MEMO_TYPE:
	            return (
	              (innerType = type.displayName || null),
	              null !== innerType
	                ? innerType
	                : getComponentNameFromType(type.type) || "Memo"
	            );
	          case REACT_LAZY_TYPE:
	            innerType = type._payload;
	            type = type._init;
	            try {
	              return getComponentNameFromType(type(innerType));
	            } catch (x) {}
	        }
	      return null;
	    }
	    function testStringCoercion(value) {
	      return "" + value;
	    }
	    function checkKeyStringCoercion(value) {
	      try {
	        var JSCompiler_inline_result = false;
	      } catch (e) {
	        JSCompiler_inline_result = true;
	      }
	      if (JSCompiler_inline_result) {
	        JSCompiler_inline_result = console;
	        var JSCompiler_temp_const = JSCompiler_inline_result.error;
	        var JSCompiler_inline_result$jscomp$0 =
	          ("function" === typeof Symbol &&
	            Symbol.toStringTag &&
	            value[Symbol.toStringTag]) ||
	          value.constructor.name ||
	          "Object";
	        JSCompiler_temp_const.call(
	          JSCompiler_inline_result,
	          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
	          JSCompiler_inline_result$jscomp$0
	        );
	        return testStringCoercion(value);
	      }
	    }
	    function getTaskName(type) {
	      if (type === REACT_FRAGMENT_TYPE) return "<>";
	      if (
	        "object" === typeof type &&
	        null !== type &&
	        type.$$typeof === REACT_LAZY_TYPE
	      )
	        return "<...>";
	      try {
	        var name = getComponentNameFromType(type);
	        return name ? "<" + name + ">" : "<...>";
	      } catch (x) {
	        return "<...>";
	      }
	    }
	    function getOwner() {
	      var dispatcher = ReactSharedInternals.A;
	      return null === dispatcher ? null : dispatcher.getOwner();
	    }
	    function UnknownOwner() {
	      return Error("react-stack-top-frame");
	    }
	    function hasValidKey(config) {
	      if (hasOwnProperty.call(config, "key")) {
	        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
	        if (getter && getter.isReactWarning) return false;
	      }
	      return void 0 !== config.key;
	    }
	    function defineKeyPropWarningGetter(props, displayName) {
	      function warnAboutAccessingKey() {
	        specialPropKeyWarningShown ||
	          ((specialPropKeyWarningShown = true),
	          console.error(
	            "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
	            displayName
	          ));
	      }
	      warnAboutAccessingKey.isReactWarning = true;
	      Object.defineProperty(props, "key", {
	        get: warnAboutAccessingKey,
	        configurable: true
	      });
	    }
	    function elementRefGetterWithDeprecationWarning() {
	      var componentName = getComponentNameFromType(this.type);
	      didWarnAboutElementRef[componentName] ||
	        ((didWarnAboutElementRef[componentName] = true),
	        console.error(
	          "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
	        ));
	      componentName = this.props.ref;
	      return void 0 !== componentName ? componentName : null;
	    }
	    function ReactElement(
	      type,
	      key,
	      self,
	      source,
	      owner,
	      props,
	      debugStack,
	      debugTask
	    ) {
	      self = props.ref;
	      type = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type: type,
	        key: key,
	        props: props,
	        _owner: owner
	      };
	      null !== (void 0 !== self ? self : null)
	        ? Object.defineProperty(type, "ref", {
	            enumerable: false,
	            get: elementRefGetterWithDeprecationWarning
	          })
	        : Object.defineProperty(type, "ref", { enumerable: false, value: null });
	      type._store = {};
	      Object.defineProperty(type._store, "validated", {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: 0
	      });
	      Object.defineProperty(type, "_debugInfo", {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: null
	      });
	      Object.defineProperty(type, "_debugStack", {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: debugStack
	      });
	      Object.defineProperty(type, "_debugTask", {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: debugTask
	      });
	      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
	      return type;
	    }
	    function jsxDEVImpl(
	      type,
	      config,
	      maybeKey,
	      isStaticChildren,
	      source,
	      self,
	      debugStack,
	      debugTask
	    ) {
	      var children = config.children;
	      if (void 0 !== children)
	        if (isStaticChildren)
	          if (isArrayImpl(children)) {
	            for (
	              isStaticChildren = 0;
	              isStaticChildren < children.length;
	              isStaticChildren++
	            )
	              validateChildKeys(children[isStaticChildren]);
	            Object.freeze && Object.freeze(children);
	          } else
	            console.error(
	              "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
	            );
	        else validateChildKeys(children);
	      if (hasOwnProperty.call(config, "key")) {
	        children = getComponentNameFromType(type);
	        var keys = Object.keys(config).filter(function (k) {
	          return "key" !== k;
	        });
	        isStaticChildren =
	          0 < keys.length
	            ? "{key: someKey, " + keys.join(": ..., ") + ": ...}"
	            : "{key: someKey}";
	        didWarnAboutKeySpread[children + isStaticChildren] ||
	          ((keys =
	            0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}"),
	          console.error(
	            'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
	            isStaticChildren,
	            children,
	            keys,
	            children
	          ),
	          (didWarnAboutKeySpread[children + isStaticChildren] = true));
	      }
	      children = null;
	      void 0 !== maybeKey &&
	        (checkKeyStringCoercion(maybeKey), (children = "" + maybeKey));
	      hasValidKey(config) &&
	        (checkKeyStringCoercion(config.key), (children = "" + config.key));
	      if ("key" in config) {
	        maybeKey = {};
	        for (var propName in config)
	          "key" !== propName && (maybeKey[propName] = config[propName]);
	      } else maybeKey = config;
	      children &&
	        defineKeyPropWarningGetter(
	          maybeKey,
	          "function" === typeof type
	            ? type.displayName || type.name || "Unknown"
	            : type
	        );
	      return ReactElement(
	        type,
	        children,
	        self,
	        source,
	        getOwner(),
	        maybeKey,
	        debugStack,
	        debugTask
	      );
	    }
	    function validateChildKeys(node) {
	      "object" === typeof node &&
	        null !== node &&
	        node.$$typeof === REACT_ELEMENT_TYPE &&
	        node._store &&
	        (node._store.validated = 1);
	    }
	    var React = requireReact(),
	      REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
	      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
	      REACT_PROFILER_TYPE = Symbol.for("react.profiler");
	    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
	      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
	      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
	      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
	      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
	      REACT_MEMO_TYPE = Symbol.for("react.memo"),
	      REACT_LAZY_TYPE = Symbol.for("react.lazy"),
	      REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
	      REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
	      ReactSharedInternals =
	        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
	      hasOwnProperty = Object.prototype.hasOwnProperty,
	      isArrayImpl = Array.isArray,
	      createTask = console.createTask
	        ? console.createTask
	        : function () {
	            return null;
	          };
	    React = {
	      react_stack_bottom_frame: function (callStackForError) {
	        return callStackForError();
	      }
	    };
	    var specialPropKeyWarningShown;
	    var didWarnAboutElementRef = {};
	    var unknownOwnerDebugStack = React.react_stack_bottom_frame.bind(
	      React,
	      UnknownOwner
	    )();
	    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
	    var didWarnAboutKeySpread = {};
	    reactJsxDevRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
	    reactJsxDevRuntime_development.jsxDEV = function (
	      type,
	      config,
	      maybeKey,
	      isStaticChildren,
	      source,
	      self
	    ) {
	      var trackActualOwner =
	        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
	      return jsxDEVImpl(
	        type,
	        config,
	        maybeKey,
	        isStaticChildren,
	        source,
	        self,
	        trackActualOwner
	          ? Error("react-stack-top-frame")
	          : unknownOwnerDebugStack,
	        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
	      );
	    };
	  }))();
	return reactJsxDevRuntime_development;
}

var hasRequiredJsxDevRuntime;

function requireJsxDevRuntime () {
	if (hasRequiredJsxDevRuntime) return jsxDevRuntime.exports;
	hasRequiredJsxDevRuntime = 1;

	{
	  jsxDevRuntime.exports = requireReactJsxDevRuntime_development();
	}
	return jsxDevRuntime.exports;
}

var jsxDevRuntimeExports = requireJsxDevRuntime();

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t$4=globalThis,e$b=t$4.ShadowRoot&&(void 0===t$4.ShadyCSS||t$4.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,s$3=Symbol(),o$d=new WeakMap;let n$9 = class n{constructor(t,e,o){if(this._$cssResult$=true,o!==s$3)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e;}get styleSheet(){let t=this.o;const s=this.t;if(e$b&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=o$d.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&o$d.set(s,t));}return t}toString(){return this.cssText}};const r$7=t=>new n$9("string"==typeof t?t:t+"",void 0,s$3),i$7=(t,...e)=>{const o=1===t.length?t[0]:e.reduce(((e,s,o)=>e+(t=>{if(true===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(s)+t[o+1]),t[0]);return new n$9(o,t,s$3)},S$1=(s,o)=>{if(e$b)s.adoptedStyleSheets=o.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet));else for(const e of o){const o=document.createElement("style"),n=t$4.litNonce;void 0!==n&&o.setAttribute("nonce",n),o.textContent=e.cssText,s.appendChild(o);}},c$3=e$b?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const s of t.cssRules)e+=s.cssText;return r$7(e)})(t):t;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const{is:i$6,defineProperty:e$a,getOwnPropertyDescriptor:h$3,getOwnPropertyNames:r$6,getOwnPropertySymbols:o$c,getPrototypeOf:n$8}=Object,a$2=globalThis,c$2=a$2.trustedTypes,l$3=c$2?c$2.emptyScript:"",p$1=a$2.reactiveElementPolyfillSupport,d$1=(t,s)=>t,u$3={toAttribute(t,s){switch(s){case Boolean:t=t?l$3:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t);}return t},fromAttribute(t,s){let i=t;switch(s){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t);}catch(t){i=null;}}return i}},f$3=(t,s)=>!i$6(t,s),b={attribute:true,type:String,converter:u$3,reflect:false,useDefault:false,hasChanged:f$3};Symbol.metadata??=Symbol("metadata"),a$2.litPropertyMetadata??=new WeakMap;let y$1 = class y extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t);}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,s=b){if(s.state&&(s.attribute=false),this._$Ei(),this.prototype.hasOwnProperty(t)&&((s=Object.create(s)).wrapped=true),this.elementProperties.set(t,s),!s.noAccessor){const i=Symbol(),h=this.getPropertyDescriptor(t,i,s);void 0!==h&&e$a(this.prototype,t,h);}}static getPropertyDescriptor(t,s,i){const{get:e,set:r}=h$3(this.prototype,t)??{get(){return this[s]},set(t){this[s]=t;}};return {get:e,set(s){const h=e?.call(this);r?.call(this,s),this.requestUpdate(t,h,i);},configurable:true,enumerable:true}}static getPropertyOptions(t){return this.elementProperties.get(t)??b}static _$Ei(){if(this.hasOwnProperty(d$1("elementProperties")))return;const t=n$8(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties);}static finalize(){if(this.hasOwnProperty(d$1("finalized")))return;if(this.finalized=true,this._$Ei(),this.hasOwnProperty(d$1("properties"))){const t=this.properties,s=[...r$6(t),...o$c(t)];for(const i of s)this.createProperty(i,t[i]);}const t=this[Symbol.metadata];if(null!==t){const s=litPropertyMetadata.get(t);if(void 0!==s)for(const[t,i]of s)this.elementProperties.set(t,i);}this._$Eh=new Map;for(const[t,s]of this.elementProperties){const i=this._$Eu(t,s);void 0!==i&&this._$Eh.set(i,t);}this.elementStyles=this.finalizeStyles(this.styles);}static finalizeStyles(s){const i=[];if(Array.isArray(s)){const e=new Set(s.flat(1/0).reverse());for(const s of e)i.unshift(c$3(s));}else void 0!==s&&i.push(c$3(s));return i}static _$Eu(t,s){const i=s.attribute;return  false===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=false,this.hasUpdated=false,this._$Em=null,this._$Ev();}_$Ev(){this._$ES=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((t=>t(this)));}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.();}removeController(t){this._$EO?.delete(t);}_$E_(){const t=new Map,s=this.constructor.elementProperties;for(const i of s.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t);}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return S$1(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(true),this._$EO?.forEach((t=>t.hostConnected?.()));}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach((t=>t.hostDisconnected?.()));}attributeChangedCallback(t,s,i){this._$AK(t,i);}_$ET(t,s){const i=this.constructor.elementProperties.get(t),e=this.constructor._$Eu(t,i);if(void 0!==e&&true===i.reflect){const h=(void 0!==i.converter?.toAttribute?i.converter:u$3).toAttribute(s,i.type);this._$Em=t,null==h?this.removeAttribute(e):this.setAttribute(e,h),this._$Em=null;}}_$AK(t,s){const i=this.constructor,e=i._$Eh.get(t);if(void 0!==e&&this._$Em!==e){const t=i.getPropertyOptions(e),h="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:u$3;this._$Em=e;const r=h.fromAttribute(s,t.type);this[e]=r??this._$Ej?.get(e)??r,this._$Em=null;}}requestUpdate(t,s,i){if(void 0!==t){const e=this.constructor,h=this[t];if(i??=e.getPropertyOptions(t),!((i.hasChanged??f$3)(h,s)||i.useDefault&&i.reflect&&h===this._$Ej?.get(t)&&!this.hasAttribute(e._$Eu(t,i))))return;this.C(t,s,i);} false===this.isUpdatePending&&(this._$ES=this._$EP());}C(t,s,{useDefault:i,reflect:e,wrapped:h},r){i&&!(this._$Ej??=new Map).has(t)&&(this._$Ej.set(t,r??s??this[t]),true!==h||void 0!==r)||(this._$AL.has(t)||(this.hasUpdated||i||(s=void 0),this._$AL.set(t,s)),true===e&&this._$Em!==t&&(this._$Eq??=new Set).add(t));}async _$EP(){this.isUpdatePending=true;try{await this._$ES;}catch(t){Promise.reject(t);}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,s]of this._$Ep)this[t]=s;this._$Ep=void 0;}const t=this.constructor.elementProperties;if(t.size>0)for(const[s,i]of t){const{wrapped:t}=i,e=this[s];true!==t||this._$AL.has(s)||void 0===e||this.C(s,void 0,i,e);}}let t=false;const s=this._$AL;try{t=this.shouldUpdate(s),t?(this.willUpdate(s),this._$EO?.forEach((t=>t.hostUpdate?.())),this.update(s)):this._$EM();}catch(s){throw t=false,this._$EM(),s}t&&this._$AE(s);}willUpdate(t){}_$AE(t){this._$EO?.forEach((t=>t.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=true,this.firstUpdated(t)),this.updated(t);}_$EM(){this._$AL=new Map,this.isUpdatePending=false;}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return  true}update(t){this._$Eq&&=this._$Eq.forEach((t=>this._$ET(t,this[t]))),this._$EM();}updated(t){}firstUpdated(t){}};y$1.elementStyles=[],y$1.shadowRootOptions={mode:"open"},y$1[d$1("elementProperties")]=new Map,y$1[d$1("finalized")]=new Map,p$1?.({ReactiveElement:y$1}),(a$2.reactiveElementVersions??=[]).push("2.1.1");

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t$3=globalThis,i$5=t$3.trustedTypes,s$2=i$5?i$5.createPolicy("lit-html",{createHTML:t=>t}):void 0,e$9="$lit$",h$2=`lit$${Math.random().toFixed(9).slice(2)}$`,o$b="?"+h$2,n$7=`<${o$b}>`,r$5=document,l$2=()=>r$5.createComment(""),c$1=t=>null===t||"object"!=typeof t&&"function"!=typeof t,a$1=Array.isArray,u$2=t=>a$1(t)||"function"==typeof t?.[Symbol.iterator],d="[ \t\n\f\r]",f$2=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,v=/-->/g,_=/>/g,m$1=RegExp(`>|${d}(?:([^\\s"'>=/]+)(${d}*=${d}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),p=/'/g,g=/"/g,$=/^(?:script|style|textarea|title)$/i,y=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),x=y(1),T=Symbol.for("lit-noChange"),E=Symbol.for("lit-nothing"),A=new WeakMap,C=r$5.createTreeWalker(r$5,129);function P(t,i){if(!a$1(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==s$2?s$2.createHTML(i):i}const V=(t,i)=>{const s=t.length-1,o=[];let r,l=2===i?"<svg>":3===i?"<math>":"",c=f$2;for(let i=0;i<s;i++){const s=t[i];let a,u,d=-1,y=0;for(;y<s.length&&(c.lastIndex=y,u=c.exec(s),null!==u);)y=c.lastIndex,c===f$2?"!--"===u[1]?c=v:void 0!==u[1]?c=_:void 0!==u[2]?($.test(u[2])&&(r=RegExp("</"+u[2],"g")),c=m$1):void 0!==u[3]&&(c=m$1):c===m$1?">"===u[0]?(c=r??f$2,d=-1):void 0===u[1]?d=-2:(d=c.lastIndex-u[2].length,a=u[1],c=void 0===u[3]?m$1:'"'===u[3]?g:p):c===g||c===p?c=m$1:c===v||c===_?c=f$2:(c=m$1,r=void 0);const x=c===m$1&&t[i+1].startsWith("/>")?" ":"";l+=c===f$2?s+n$7:d>=0?(o.push(a),s.slice(0,d)+e$9+s.slice(d)+h$2+x):s+h$2+(-2===d?i:x);}return [P(t,l+(t[s]||"<?>")+(2===i?"</svg>":3===i?"</math>":"")),o]};class N{constructor({strings:t,_$litType$:s},n){let r;this.parts=[];let c=0,a=0;const u=t.length-1,d=this.parts,[f,v]=V(t,s);if(this.el=N.createElement(f,n),C.currentNode=this.el.content,2===s||3===s){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes);}for(;null!==(r=C.nextNode())&&d.length<u;){if(1===r.nodeType){if(r.hasAttributes())for(const t of r.getAttributeNames())if(t.endsWith(e$9)){const i=v[a++],s=r.getAttribute(t).split(h$2),e=/([.?@])?(.*)/.exec(i);d.push({type:1,index:c,name:e[2],strings:s,ctor:"."===e[1]?H$1:"?"===e[1]?I:"@"===e[1]?L:k}),r.removeAttribute(t);}else t.startsWith(h$2)&&(d.push({type:6,index:c}),r.removeAttribute(t));if($.test(r.tagName)){const t=r.textContent.split(h$2),s=t.length-1;if(s>0){r.textContent=i$5?i$5.emptyScript:"";for(let i=0;i<s;i++)r.append(t[i],l$2()),C.nextNode(),d.push({type:2,index:++c});r.append(t[s],l$2());}}}else if(8===r.nodeType)if(r.data===o$b)d.push({type:2,index:c});else {let t=-1;for(;-1!==(t=r.data.indexOf(h$2,t+1));)d.push({type:7,index:c}),t+=h$2.length-1;}c++;}}static createElement(t,i){const s=r$5.createElement("template");return s.innerHTML=t,s}}function S(t,i,s=t,e){if(i===T)return i;let h=void 0!==e?s._$Co?.[e]:s._$Cl;const o=c$1(i)?void 0:i._$litDirective$;return h?.constructor!==o&&(h?._$AO?.(false),void 0===o?h=void 0:(h=new o(t),h._$AT(t,s,e)),void 0!==e?(s._$Co??=[])[e]=h:s._$Cl=h),void 0!==h&&(i=S(t,h._$AS(t,i.values),h,e)),i}class M{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i;}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:i},parts:s}=this._$AD,e=(t?.creationScope??r$5).importNode(i,true);C.currentNode=e;let h=C.nextNode(),o=0,n=0,l=s[0];for(;void 0!==l;){if(o===l.index){let i;2===l.type?i=new R(h,h.nextSibling,this,t):1===l.type?i=new l.ctor(h,l.name,l.strings,this,t):6===l.type&&(i=new z(h,this,t)),this._$AV.push(i),l=s[++n];}o!==l?.index&&(h=C.nextNode(),o++);}return C.currentNode=r$5,e}p(t){let i=0;for(const s of this._$AV) void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++;}}class R{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,i,s,e){this.type=2,this._$AH=E,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cv=e?.isConnected??true;}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t?.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=S(this,t,i),c$1(t)?t===E||null==t||""===t?(this._$AH!==E&&this._$AR(),this._$AH=E):t!==this._$AH&&t!==T&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):u$2(t)?this.k(t):this._(t);}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t));}_(t){this._$AH!==E&&c$1(this._$AH)?this._$AA.nextSibling.data=t:this.T(r$5.createTextNode(t)),this._$AH=t;}$(t){const{values:i,_$litType$:s}=t,e="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=N.createElement(P(s.h,s.h[0]),this.options)),s);if(this._$AH?._$AD===e)this._$AH.p(i);else {const t=new M(e,this),s=t.u(this.options);t.p(i),this.T(s),this._$AH=t;}}_$AC(t){let i=A.get(t.strings);return void 0===i&&A.set(t.strings,i=new N(t)),i}k(t){a$1(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const h of t)e===i.length?i.push(s=new R(this.O(l$2()),this.O(l$2()),this,this.options)):s=i[e],s._$AI(h),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e);}_$AR(t=this._$AA.nextSibling,i){for(this._$AP?.(false,true,i);t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i;}}setConnected(t){ void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t));}}class k{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,i,s,e,h){this.type=1,this._$AH=E,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=h,s.length>2||""!==s[0]||""!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=E;}_$AI(t,i=this,s,e){const h=this.strings;let o=false;if(void 0===h)t=S(this,t,i,0),o=!c$1(t)||t!==this._$AH&&t!==T,o&&(this._$AH=t);else {const e=t;let n,r;for(t=h[0],n=0;n<h.length-1;n++)r=S(this,e[s+n],i,n),r===T&&(r=this._$AH[n]),o||=!c$1(r)||r!==this._$AH[n],r===E?t=E:t!==E&&(t+=(r??"")+h[n+1]),this._$AH[n]=r;}o&&!e&&this.j(t);}j(t){t===E?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??"");}}let H$1 = class H extends k{constructor(){super(...arguments),this.type=3;}j(t){this.element[this.name]=t===E?void 0:t;}};class I extends k{constructor(){super(...arguments),this.type=4;}j(t){this.element.toggleAttribute(this.name,!!t&&t!==E);}}class L extends k{constructor(t,i,s,e,h){super(t,i,s,e,h),this.type=5;}_$AI(t,i=this){if((t=S(this,t,i,0)??E)===T)return;const s=this._$AH,e=t===E&&s!==E||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,h=t!==E&&(s===E||e);e&&this.element.removeEventListener(this.name,this,s),h&&this.element.addEventListener(this.name,this,t),this._$AH=t;}handleEvent(t){"function"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t);}}class z{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s;}get _$AU(){return this._$AM._$AU}_$AI(t){S(this,t);}}const j=t$3.litHtmlPolyfillSupport;j?.(N,R),(t$3.litHtmlVersions??=[]).push("3.3.1");const B=(t,i,s)=>{const e=s?.renderBefore??i;let h=e._$litPart$;if(void 0===h){const t=s?.renderBefore??null;e._$litPart$=h=new R(i.insertBefore(l$2(),t),t,void 0,s??{});}return h._$AI(t),h};

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const s$1=globalThis;let i$4 = class i extends y$1{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0;}createRenderRoot(){const t=super.createRenderRoot();return this.renderOptions.renderBefore??=t.firstChild,t}update(t){const r=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=B(r,this.renderRoot,this.renderOptions);}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(true);}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(false);}render(){return T}};i$4._$litElement$=true,i$4["finalized"]=true,s$1.litElementHydrateSupport?.({LitElement:i$4});const o$a=s$1.litElementPolyfillSupport;o$a?.({LitElement:i$4});(s$1.litElementVersions??=[]).push("4.2.1");

// src/components/visually-hidden/visually-hidden.styles.ts
var visually_hidden_styles_default = i$7`
  :host(:not(:focus-within)) {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    clip: rect(0 0 0 0) !important;
    clip-path: inset(50%) !important;
    border: none !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    padding: 0 !important;
  }
`;

// src/styles/component.styles.ts
var component_styles_default = i$7`
  :host {
    box-sizing: border-box;
  }

  :host *,
  :host *::before,
  :host *::after {
    box-sizing: inherit;
  }

  [hidden] {
    display: none !important;
  }
`;

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), member.set(obj, value), value);
var __await = function(promise, isYieldStar) {
  this[0] = promise;
  this[1] = isYieldStar;
};
var __yieldStar = (value) => {
  var obj = value[__knownSymbol("asyncIterator")], isAwait = false, method, it = {};
  if (obj == null) {
    obj = value[__knownSymbol("iterator")]();
    method = (k) => it[k] = (x) => obj[k](x);
  } else {
    obj = obj.call(value);
    method = (k) => it[k] = (v) => {
      if (isAwait) {
        isAwait = false;
        if (k === "throw") throw v;
        return v;
      }
      isAwait = true;
      return {
        done: false,
        value: new __await(new Promise((resolve) => {
          var x = obj[k](v);
          if (!(x instanceof Object)) __typeError("Object expected");
          resolve(x);
        }), 1)
      };
    };
  }
  return it[__knownSymbol("iterator")] = () => it, method("next"), "throw" in obj ? method("throw") : it.throw = (x) => {
    throw x;
  }, "return" in obj && method("return"), it;
};

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const o$9={attribute:true,type:String,converter:u$3,reflect:false,hasChanged:f$3},r$4=(t=o$9,e,r)=>{const{kind:n,metadata:i}=r;let s=globalThis.litPropertyMetadata.get(i);if(void 0===s&&globalThis.litPropertyMetadata.set(i,s=new Map),"setter"===n&&((t=Object.create(t)).wrapped=true),s.set(r.name,t),"accessor"===n){const{name:o}=r;return {set(r){const n=e.get.call(this);e.set.call(this,r),this.requestUpdate(o,n,t);},init(e){return void 0!==e&&this.C(o,void 0,t,e),e}}}if("setter"===n){const{name:o}=r;return function(r){const n=this[o];e.call(this,r),this.requestUpdate(o,n,t);}}throw Error("Unsupported decorator location: "+n)};function n$6(t){return (e,o)=>"object"==typeof o?r$4(t,e,o):((t,e,o)=>{const r=e.hasOwnProperty(o);return e.constructor.createProperty(o,t),r?Object.getOwnPropertyDescriptor(e,o):void 0})(t,e,o)}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function r$3(r){return n$6({...r,state:true,attribute:false})}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function t$2(t){return (n,o)=>{const c="function"==typeof n?n:n[o];Object.assign(c,t);}}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const e$8=(e,t,c)=>(c.configurable=true,c.enumerable=true,Reflect.decorate&&"object"!=typeof t&&Object.defineProperty(e,t,c),c);

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function e$7(e,r){return (n,s,i)=>{const o=t=>t.renderRoot?.querySelector(e)??null;return e$8(n,s,{get(){return o(this)}})}}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function r$2(r){return (n,e)=>e$8(n,e,{async get(){return await this.updateComplete,this.renderRoot?.querySelector(r)??null}})}

var _hasRecordedInitialProperties;
var ShoelaceElement = class extends i$4 {
  constructor() {
    super();
    __privateAdd(this, _hasRecordedInitialProperties, false);
    // Store the constructor value of all `static properties = {}`
    this.initialReflectedProperties = /* @__PURE__ */ new Map();
    Object.entries(this.constructor.dependencies).forEach(([name, component]) => {
      this.constructor.define(name, component);
    });
  }
  emit(name, options) {
    const event = new CustomEvent(name, __spreadValues({
      bubbles: true,
      cancelable: false,
      composed: true,
      detail: {}
    }, options));
    this.dispatchEvent(event);
    return event;
  }
  /* eslint-enable */
  static define(name, elementConstructor = this, options = {}) {
    const currentlyRegisteredConstructor = customElements.get(name);
    if (!currentlyRegisteredConstructor) {
      try {
        customElements.define(name, elementConstructor, options);
      } catch (_err) {
        customElements.define(name, class extends elementConstructor {
        }, options);
      }
      return;
    }
    let newVersion = " (unknown version)";
    let existingVersion = newVersion;
    if ("version" in elementConstructor && elementConstructor.version) {
      newVersion = " v" + elementConstructor.version;
    }
    if ("version" in currentlyRegisteredConstructor && currentlyRegisteredConstructor.version) {
      existingVersion = " v" + currentlyRegisteredConstructor.version;
    }
    if (newVersion && existingVersion && newVersion === existingVersion) {
      return;
    }
    console.warn(
      `Attempted to register <${name}>${newVersion}, but <${name}>${existingVersion} has already been registered.`
    );
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (!__privateGet(this, _hasRecordedInitialProperties)) {
      this.constructor.elementProperties.forEach(
        (obj, prop) => {
          if (obj.reflect && this[prop] != null) {
            this.initialReflectedProperties.set(prop, this[prop]);
          }
        }
      );
      __privateSet(this, _hasRecordedInitialProperties, true);
    }
    super.attributeChangedCallback(name, oldValue, newValue);
  }
  willUpdate(changedProperties) {
    super.willUpdate(changedProperties);
    this.initialReflectedProperties.forEach((value, prop) => {
      if (changedProperties.has(prop) && this[prop] == null) {
        this[prop] = value;
      }
    });
  }
};
_hasRecordedInitialProperties = new WeakMap();
/* eslint-disable */
// @ts-expect-error This is auto-injected at build time.
ShoelaceElement.version = "2.20.1";
ShoelaceElement.dependencies = {};
__decorateClass([
  n$6()
], ShoelaceElement.prototype, "dir", 2);
__decorateClass([
  n$6()
], ShoelaceElement.prototype, "lang", 2);

var SlVisuallyHidden = class extends ShoelaceElement {
  render() {
    return x` <slot></slot> `;
  }
};
SlVisuallyHidden.styles = [component_styles_default, visually_hidden_styles_default];

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const e$6=new Set(["children","localName","ref","style","className"]),n$5=new WeakMap,t$1=(e,t,o,l,a)=>{const s=a?.[t];void 0===s?(e[t]=o,null==o&&t in HTMLElement.prototype&&e.removeAttribute(t)):o!==l&&((e,t,o)=>{let l=n$5.get(e);void 0===l&&n$5.set(e,l=new Map);let a=l.get(t);void 0!==o?void 0===a?(l.set(t,a={handleEvent:o}),e.addEventListener(t,a)):a.handleEvent=o:void 0!==a&&(l.delete(t),e.removeEventListener(t,a));})(e,s,o);},o$8=({react:n,tagName:o,elementClass:l,events:a,displayName:s})=>{const c=new Set(Object.keys(a??{})),r=n.forwardRef(((s,r)=>{const i=n.useRef(new Map),d=n.useRef(null),f={},u={};for(const[n,t]of Object.entries(s))e$6.has(n)?f["className"===n?"class":n]=t:c.has(n)||n in l.prototype?u[n]=t:f[n]=t;return n.useLayoutEffect((()=>{if(null===d.current)return;const e=new Map;for(const n in u)t$1(d.current,n,s[n],i.current.get(n),a),i.current.delete(n),e.set(n,s[n]);for(const[e,n]of i.current)t$1(d.current,e,void 0,n,a);i.current=e;})),n.useLayoutEffect((()=>{d.current?.removeAttribute("defer-hydration");}),[]),f.suppressHydrationWarning=true,n.createElement(o,{...f,ref:n.useCallback((e=>{d.current=e,"function"==typeof r?r(e):null!==r&&(r.current=e);}),[r])})}));return r.displayName=s??l.name,r};

var tagName$V = "sl-visually-hidden";
SlVisuallyHidden.define("sl-visually-hidden");
o$8({
  tagName: tagName$V,
  elementClass: SlVisuallyHidden,
  react: React$1,
  events: {},
  displayName: "SlVisuallyHidden"
});

// src/components/tab/tab.styles.ts
var tab_styles_default = i$7`
  :host {
    display: inline-block;
  }

  .tab {
    display: inline-flex;
    align-items: center;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    border-radius: var(--sl-border-radius-medium);
    color: var(--sl-color-neutral-600);
    padding: var(--sl-spacing-medium) var(--sl-spacing-large);
    white-space: nowrap;
    user-select: none;
    -webkit-user-select: none;
    cursor: pointer;
    transition:
      var(--transition-speed) box-shadow,
      var(--transition-speed) color;
  }

  .tab:hover:not(.tab--disabled) {
    color: var(--sl-color-primary-600);
  }

  :host(:focus) {
    outline: transparent;
  }

  :host(:focus-visible) {
    color: var(--sl-color-primary-600);
    outline: var(--sl-focus-ring);
    outline-offset: calc(-1 * var(--sl-focus-ring-width) - var(--sl-focus-ring-offset));
  }

  .tab.tab--active:not(.tab--disabled) {
    color: var(--sl-color-primary-600);
  }

  .tab.tab--closable {
    padding-inline-end: var(--sl-spacing-small);
  }

  .tab.tab--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .tab__close-button {
    font-size: var(--sl-font-size-small);
    margin-inline-start: var(--sl-spacing-small);
  }

  .tab__close-button::part(base) {
    padding: var(--sl-spacing-3x-small);
  }

  @media (forced-colors: active) {
    .tab.tab--active:not(.tab--disabled) {
      outline: solid 1px transparent;
      outline-offset: -3px;
    }
  }
`;

// src/components/icon-button/icon-button.styles.ts
var icon_button_styles_default = i$7`
  :host {
    display: inline-block;
    color: var(--sl-color-neutral-600);
  }

  .icon-button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    background: none;
    border: none;
    border-radius: var(--sl-border-radius-medium);
    font-size: inherit;
    color: inherit;
    padding: var(--sl-spacing-x-small);
    cursor: pointer;
    transition: var(--sl-transition-x-fast) color;
    -webkit-appearance: none;
  }

  .icon-button:hover:not(.icon-button--disabled),
  .icon-button:focus-visible:not(.icon-button--disabled) {
    color: var(--sl-color-primary-600);
  }

  .icon-button:active:not(.icon-button--disabled) {
    color: var(--sl-color-primary-700);
  }

  .icon-button:focus {
    outline: none;
  }

  .icon-button--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .icon-button:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .icon-button__icon {
    pointer-events: none;
  }
`;

// src/utilities/base-path.ts
var basePath = "";
function setBasePath(path) {
  basePath = path;
}
function getBasePath(subpath = "") {
  if (!basePath) {
    const scripts = [...document.getElementsByTagName("script")];
    const configScript = scripts.find((script) => script.hasAttribute("data-shoelace"));
    if (configScript) {
      setBasePath(configScript.getAttribute("data-shoelace"));
    } else {
      const fallbackScript = scripts.find((s) => {
        return /shoelace(\.min)?\.js($|\?)/.test(s.src) || /shoelace-autoloader(\.min)?\.js($|\?)/.test(s.src);
      });
      let path = "";
      if (fallbackScript) {
        path = fallbackScript.getAttribute("src");
      }
      setBasePath(path.split("/").slice(0, -1).join("/"));
    }
  }
  return basePath.replace(/\/$/, "") + (subpath ? `/${subpath.replace(/^\//, "")}` : ``);
}

// src/components/icon/library.default.ts
var library = {
  name: "default",
  resolver: (name) => getBasePath(`assets/icons/${name}.svg`)
};
var library_default_default = library;

// src/components/icon/library.system.ts
var icons = {
  caret: `
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <polyline points="6 9 12 15 18 9"></polyline>
    </svg>
  `,
  check: `
    <svg part="checked-icon" class="checkbox__icon" viewBox="0 0 16 16">
      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round">
        <g stroke="currentColor">
          <g transform="translate(3.428571, 3.428571)">
            <path d="M0,5.71428571 L3.42857143,9.14285714"></path>
            <path d="M9.14285714,0 L3.42857143,9.14285714"></path>
          </g>
        </g>
      </g>
    </svg>
  `,
  "chevron-down": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
    </svg>
  `,
  "chevron-left": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-left" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
    </svg>
  `,
  "chevron-right": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
    </svg>
  `,
  copy: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-copy" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V2Zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H6ZM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1H2Z"/>
    </svg>
  `,
  eye: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
      <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/>
      <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
    </svg>
  `,
  "eye-slash": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash" viewBox="0 0 16 16">
      <path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7.028 7.028 0 0 0-2.79.588l.77.771A5.944 5.944 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.134 13.134 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755-.165.165-.337.328-.517.486l.708.709z"/>
      <path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829l.822.822zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829z"/>
      <path d="M3.35 5.47c-.18.16-.353.322-.518.487A13.134 13.134 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7.029 7.029 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12-.708.708z"/>
    </svg>
  `,
  eyedropper: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">
      <path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708l-2-2zM2 12.707l7-7L10.293 7l-7 7H2v-1.293z"></path>
    </svg>
  `,
  "grip-vertical": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-grip-vertical" viewBox="0 0 16 16">
      <path d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path>
    </svg>
  `,
  indeterminate: `
    <svg part="indeterminate-icon" class="checkbox__icon" viewBox="0 0 16 16">
      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round">
        <g stroke="currentColor" stroke-width="2">
          <g transform="translate(2.285714, 6.857143)">
            <path d="M10.2857143,1.14285714 L1.14285714,1.14285714"></path>
          </g>
        </g>
      </g>
    </svg>
  `,
  "person-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-fill" viewBox="0 0 16 16">
      <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
    </svg>
  `,
  "play-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-fill" viewBox="0 0 16 16">
      <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z"></path>
    </svg>
  `,
  "pause-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pause-fill" viewBox="0 0 16 16">
      <path d="M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5zm5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5z"></path>
    </svg>
  `,
  radio: `
    <svg part="checked-icon" class="radio__icon" viewBox="0 0 16 16">
      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g fill="currentColor">
          <circle cx="8" cy="8" r="3.42857143"></circle>
        </g>
      </g>
    </svg>
  `,
  "star-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
      <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"/>
    </svg>
  `,
  "x-lg": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
      <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z"/>
    </svg>
  `,
  "x-circle-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
      <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"></path>
    </svg>
  `
};
var systemLibrary = {
  name: "system",
  resolver: (name) => {
    if (name in icons) {
      return `data:image/svg+xml,${encodeURIComponent(icons[name])}`;
    }
    return "";
  }
};
var library_system_default = systemLibrary;

// src/components/icon/library.ts
var registry = [library_default_default, library_system_default];
var watchedIcons = [];
function watchIcon(icon) {
  watchedIcons.push(icon);
}
function unwatchIcon(icon) {
  watchedIcons = watchedIcons.filter((el) => el !== icon);
}
function getIconLibrary(name) {
  return registry.find((lib) => lib.name === name);
}

// src/components/icon/icon.styles.ts
var icon_styles_default = i$7`
  :host {
    display: inline-block;
    width: 1em;
    height: 1em;
    box-sizing: content-box !important;
  }

  svg {
    display: block;
    height: 100%;
    width: 100%;
  }
`;

// src/internal/watch.ts
function watch(propertyName, options) {
  const resolvedOptions = __spreadValues({
    waitUntilFirstUpdate: false
  }, options);
  return (proto, decoratedFnName) => {
    const { update } = proto;
    const watchedProperties = Array.isArray(propertyName) ? propertyName : [propertyName];
    proto.update = function(changedProps) {
      watchedProperties.forEach((property) => {
        const key = property;
        if (changedProps.has(key)) {
          const oldValue = changedProps.get(key);
          const newValue = this[key];
          if (oldValue !== newValue) {
            if (!resolvedOptions.waitUntilFirstUpdate || this.hasUpdated) {
              this[decoratedFnName](oldValue, newValue);
            }
          }
        }
      });
      update.call(this, changedProps);
    };
  };
}

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const e$5=(o,t)=>void 0!==o?._$litType$,f$1=o=>void 0===o.strings,u$1={},m=(o,t=u$1)=>o._$AH=t;

var CACHEABLE_ERROR = Symbol();
var RETRYABLE_ERROR = Symbol();
var parser;
var iconCache = /* @__PURE__ */ new Map();
var SlIcon = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.initialRender = false;
    this.svg = null;
    this.label = "";
    this.library = "default";
  }
  /** Given a URL, this function returns the resulting SVG element or an appropriate error symbol. */
  async resolveIcon(url, library) {
    var _a;
    let fileData;
    if (library == null ? void 0 : library.spriteSheet) {
      this.svg = x`<svg part="svg">
        <use part="use" href="${url}"></use>
      </svg>`;
      return this.svg;
    }
    try {
      fileData = await fetch(url, { mode: "cors" });
      if (!fileData.ok) return fileData.status === 410 ? CACHEABLE_ERROR : RETRYABLE_ERROR;
    } catch (e) {
      return RETRYABLE_ERROR;
    }
    try {
      const div = document.createElement("div");
      div.innerHTML = await fileData.text();
      const svg = div.firstElementChild;
      if (((_a = svg == null ? void 0 : svg.tagName) == null ? void 0 : _a.toLowerCase()) !== "svg") return CACHEABLE_ERROR;
      if (!parser) parser = new DOMParser();
      const doc = parser.parseFromString(svg.outerHTML, "text/html");
      const svgEl = doc.body.querySelector("svg");
      if (!svgEl) return CACHEABLE_ERROR;
      svgEl.part.add("svg");
      return document.adoptNode(svgEl);
    } catch (e) {
      return CACHEABLE_ERROR;
    }
  }
  connectedCallback() {
    super.connectedCallback();
    watchIcon(this);
  }
  firstUpdated() {
    this.initialRender = true;
    this.setIcon();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    unwatchIcon(this);
  }
  getIconSource() {
    const library = getIconLibrary(this.library);
    if (this.name && library) {
      return {
        url: library.resolver(this.name),
        fromLibrary: true
      };
    }
    return {
      url: this.src,
      fromLibrary: false
    };
  }
  handleLabelChange() {
    const hasLabel = typeof this.label === "string" && this.label.length > 0;
    if (hasLabel) {
      this.setAttribute("role", "img");
      this.setAttribute("aria-label", this.label);
      this.removeAttribute("aria-hidden");
    } else {
      this.removeAttribute("role");
      this.removeAttribute("aria-label");
      this.setAttribute("aria-hidden", "true");
    }
  }
  async setIcon() {
    var _a;
    const { url, fromLibrary } = this.getIconSource();
    const library = fromLibrary ? getIconLibrary(this.library) : void 0;
    if (!url) {
      this.svg = null;
      return;
    }
    let iconResolver = iconCache.get(url);
    if (!iconResolver) {
      iconResolver = this.resolveIcon(url, library);
      iconCache.set(url, iconResolver);
    }
    if (!this.initialRender) {
      return;
    }
    const svg = await iconResolver;
    if (svg === RETRYABLE_ERROR) {
      iconCache.delete(url);
    }
    if (url !== this.getIconSource().url) {
      return;
    }
    if (e$5(svg)) {
      this.svg = svg;
      if (library) {
        await this.updateComplete;
        const shadowSVG = this.shadowRoot.querySelector("[part='svg']");
        if (typeof library.mutator === "function" && shadowSVG) {
          library.mutator(shadowSVG);
        }
      }
      return;
    }
    switch (svg) {
      case RETRYABLE_ERROR:
      case CACHEABLE_ERROR:
        this.svg = null;
        this.emit("sl-error");
        break;
      default:
        this.svg = svg.cloneNode(true);
        (_a = library == null ? void 0 : library.mutator) == null ? void 0 : _a.call(library, this.svg);
        this.emit("sl-load");
    }
  }
  render() {
    return this.svg;
  }
};
SlIcon.styles = [component_styles_default, icon_styles_default];
__decorateClass([
  r$3()
], SlIcon.prototype, "svg", 2);
__decorateClass([
  n$6({ reflect: true })
], SlIcon.prototype, "name", 2);
__decorateClass([
  n$6()
], SlIcon.prototype, "src", 2);
__decorateClass([
  n$6()
], SlIcon.prototype, "label", 2);
__decorateClass([
  n$6({ reflect: true })
], SlIcon.prototype, "library", 2);
__decorateClass([
  watch("label")
], SlIcon.prototype, "handleLabelChange", 1);
__decorateClass([
  watch(["name", "src", "library"])
], SlIcon.prototype, "setIcon", 1);

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4},e$4=t=>(...e)=>({_$litDirective$:t,values:e});let i$3 = class i{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i;}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}};

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const e$3=e$4(class extends i$3{constructor(t$1){if(super(t$1),t$1.type!==t.ATTRIBUTE||"class"!==t$1.name||t$1.strings?.length>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(t){return " "+Object.keys(t).filter((s=>t[s])).join(" ")+" "}update(s,[i]){if(void 0===this.st){this.st=new Set,void 0!==s.strings&&(this.nt=new Set(s.strings.join(" ").split(/\s/).filter((t=>""!==t))));for(const t in i)i[t]&&!this.nt?.has(t)&&this.st.add(t);return this.render(i)}const r=s.element.classList;for(const t of this.st)t in i||(r.remove(t),this.st.delete(t));for(const t in i){const s=!!i[t];s===this.st.has(t)||this.nt?.has(t)||(s?(r.add(t),this.st.add(t)):(r.remove(t),this.st.delete(t)));}return T}});

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const a=Symbol.for(""),o$7=t=>{if(t?.r===a)return t?._$litStatic$},i$2=(t,...r)=>({_$litStatic$:r.reduce(((r,e,a)=>r+(t=>{if(void 0!==t._$litStatic$)return t._$litStatic$;throw Error(`Value passed to 'literal' function must be a 'literal' result: ${t}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`)})(e)+t[a+1]),t[0]),r:a}),l$1=new Map,n$4=t=>(r,...e)=>{const a=e.length;let s,i;const n=[],u=[];let c,$=0,f=false;for(;$<a;){for(c=r[$];$<a&&void 0!==(i=e[$],s=o$7(i));)c+=s+r[++$],f=true;$!==a&&u.push(i),n.push(c),$++;}if($===a&&n.push(r[a]),f){const t=n.join("$$lit$$");void 0===(r=l$1.get(t))&&(n.raw=n,l$1.set(t,r=n)),e=u;}return t(r,...e)},u=n$4(x);

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const o$6=o=>o??E;

var SlIconButton = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasFocus = false;
    this.label = "";
    this.disabled = false;
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleClick(event) {
    if (this.disabled) {
      event.preventDefault();
      event.stopPropagation();
    }
  }
  /** Simulates a click on the icon button. */
  click() {
    this.button.click();
  }
  /** Sets focus on the icon button. */
  focus(options) {
    this.button.focus(options);
  }
  /** Removes focus from the icon button. */
  blur() {
    this.button.blur();
  }
  render() {
    const isLink = this.href ? true : false;
    const tag = isLink ? i$2`a` : i$2`button`;
    return u`
      <${tag}
        part="base"
        class=${e$3({
      "icon-button": true,
      "icon-button--disabled": !isLink && this.disabled,
      "icon-button--focused": this.hasFocus
    })}
        ?disabled=${o$6(isLink ? void 0 : this.disabled)}
        type=${o$6(isLink ? void 0 : "button")}
        href=${o$6(isLink ? this.href : void 0)}
        target=${o$6(isLink ? this.target : void 0)}
        download=${o$6(isLink ? this.download : void 0)}
        rel=${o$6(isLink && this.target ? "noreferrer noopener" : void 0)}
        role=${o$6(isLink ? void 0 : "button")}
        aria-disabled=${this.disabled ? "true" : "false"}
        aria-label="${this.label}"
        tabindex=${this.disabled ? "-1" : "0"}
        @blur=${this.handleBlur}
        @focus=${this.handleFocus}
        @click=${this.handleClick}
      >
        <sl-icon
          class="icon-button__icon"
          name=${o$6(this.name)}
          library=${o$6(this.library)}
          src=${o$6(this.src)}
          aria-hidden="true"
        ></sl-icon>
      </${tag}>
    `;
  }
};
SlIconButton.styles = [component_styles_default, icon_button_styles_default];
SlIconButton.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e$7(".icon-button")
], SlIconButton.prototype, "button", 2);
__decorateClass([
  r$3()
], SlIconButton.prototype, "hasFocus", 2);
__decorateClass([
  n$6()
], SlIconButton.prototype, "name", 2);
__decorateClass([
  n$6()
], SlIconButton.prototype, "library", 2);
__decorateClass([
  n$6()
], SlIconButton.prototype, "src", 2);
__decorateClass([
  n$6()
], SlIconButton.prototype, "href", 2);
__decorateClass([
  n$6()
], SlIconButton.prototype, "target", 2);
__decorateClass([
  n$6()
], SlIconButton.prototype, "download", 2);
__decorateClass([
  n$6()
], SlIconButton.prototype, "label", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlIconButton.prototype, "disabled", 2);

const connectedElements = new Set();
const translations = new Map();
let fallback;
let documentDirection = 'ltr';
let documentLanguage = 'en';
const isClient = (typeof MutationObserver !== "undefined" && typeof document !== "undefined" && typeof document.documentElement !== "undefined");
if (isClient) {
    const documentElementObserver = new MutationObserver(update);
    documentDirection = document.documentElement.dir || 'ltr';
    documentLanguage = document.documentElement.lang || navigator.language;
    documentElementObserver.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['dir', 'lang']
    });
}
function registerTranslation(...translation) {
    translation.map(t => {
        const code = t.$code.toLowerCase();
        if (translations.has(code)) {
            translations.set(code, Object.assign(Object.assign({}, translations.get(code)), t));
        }
        else {
            translations.set(code, t);
        }
        if (!fallback) {
            fallback = t;
        }
    });
    update();
}
function update() {
    if (isClient) {
        documentDirection = document.documentElement.dir || 'ltr';
        documentLanguage = document.documentElement.lang || navigator.language;
    }
    [...connectedElements.keys()].map((el) => {
        if (typeof el.requestUpdate === 'function') {
            el.requestUpdate();
        }
    });
}
let LocalizeController$1 = class LocalizeController {
    constructor(host) {
        this.host = host;
        this.host.addController(this);
    }
    hostConnected() {
        connectedElements.add(this.host);
    }
    hostDisconnected() {
        connectedElements.delete(this.host);
    }
    dir() {
        return `${this.host.dir || documentDirection}`.toLowerCase();
    }
    lang() {
        return `${this.host.lang || documentLanguage}`.toLowerCase();
    }
    getTranslationData(lang) {
        var _a, _b;
        const locale = new Intl.Locale(lang.replace(/_/g, '-'));
        const language = locale === null || locale === void 0 ? void 0 : locale.language.toLowerCase();
        const region = (_b = (_a = locale === null || locale === void 0 ? void 0 : locale.region) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : '';
        const primary = translations.get(`${language}-${region}`);
        const secondary = translations.get(language);
        return { locale, language, region, primary, secondary };
    }
    exists(key, options) {
        var _a;
        const { primary, secondary } = this.getTranslationData((_a = options.lang) !== null && _a !== void 0 ? _a : this.lang());
        options = Object.assign({ includeFallback: false }, options);
        if ((primary && primary[key]) ||
            (secondary && secondary[key]) ||
            (options.includeFallback && fallback && fallback[key])) {
            return true;
        }
        return false;
    }
    term(key, ...args) {
        const { primary, secondary } = this.getTranslationData(this.lang());
        let term;
        if (primary && primary[key]) {
            term = primary[key];
        }
        else if (secondary && secondary[key]) {
            term = secondary[key];
        }
        else if (fallback && fallback[key]) {
            term = fallback[key];
        }
        else {
            console.error(`No translation found for: ${String(key)}`);
            return String(key);
        }
        if (typeof term === 'function') {
            return term(...args);
        }
        return term;
    }
    date(dateToFormat, options) {
        dateToFormat = new Date(dateToFormat);
        return new Intl.DateTimeFormat(this.lang(), options).format(dateToFormat);
    }
    number(numberToFormat, options) {
        numberToFormat = Number(numberToFormat);
        return isNaN(numberToFormat) ? '' : new Intl.NumberFormat(this.lang(), options).format(numberToFormat);
    }
    relativeTime(value, unit, options) {
        return new Intl.RelativeTimeFormat(this.lang(), options).format(value, unit);
    }
};

// src/translations/en.ts
var translation = {
  $code: "en",
  $name: "English",
  $dir: "ltr",
  carousel: "Carousel",
  clearEntry: "Clear entry",
  close: "Close",
  copied: "Copied",
  copy: "Copy",
  currentValue: "Current value",
  error: "Error",
  goToSlide: (slide, count) => `Go to slide ${slide} of ${count}`,
  hidePassword: "Hide password",
  loading: "Loading",
  nextSlide: "Next slide",
  numOptionsSelected: (num) => {
    if (num === 0) return "No options selected";
    if (num === 1) return "1 option selected";
    return `${num} options selected`;
  },
  previousSlide: "Previous slide",
  progress: "Progress",
  remove: "Remove",
  resize: "Resize",
  scrollToEnd: "Scroll to end",
  scrollToStart: "Scroll to start",
  selectAColorFromTheScreen: "Select a color from the screen",
  showPassword: "Show password",
  slideNum: (slide) => `Slide ${slide}`,
  toggleColorFormat: "Toggle color format"
};
registerTranslation(translation);
var en_default = translation;

var LocalizeController = class extends LocalizeController$1 {
};
registerTranslation(en_default);

var id$1 = 0;
var SlTab = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.attrId = ++id$1;
    this.componentId = `sl-tab-${this.attrId}`;
    this.panel = "";
    this.active = false;
    this.closable = false;
    this.disabled = false;
    this.tabIndex = 0;
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "tab");
  }
  handleCloseClick(event) {
    event.stopPropagation();
    this.emit("sl-close");
  }
  handleActiveChange() {
    this.setAttribute("aria-selected", this.active ? "true" : "false");
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
    if (this.disabled && !this.active) {
      this.tabIndex = -1;
    } else {
      this.tabIndex = 0;
    }
  }
  render() {
    this.id = this.id.length > 0 ? this.id : this.componentId;
    return x`
      <div
        part="base"
        class=${e$3({
      tab: true,
      "tab--active": this.active,
      "tab--closable": this.closable,
      "tab--disabled": this.disabled
    })}
      >
        <slot></slot>
        ${this.closable ? x`
              <sl-icon-button
                part="close-button"
                exportparts="base:close-button__base"
                name="x-lg"
                library="system"
                label=${this.localize.term("close")}
                class="tab__close-button"
                @click=${this.handleCloseClick}
                tabindex="-1"
              ></sl-icon-button>
            ` : ""}
      </div>
    `;
  }
};
SlTab.styles = [component_styles_default, tab_styles_default];
SlTab.dependencies = { "sl-icon-button": SlIconButton };
__decorateClass([
  e$7(".tab")
], SlTab.prototype, "tab", 2);
__decorateClass([
  n$6({ reflect: true })
], SlTab.prototype, "panel", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlTab.prototype, "active", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlTab.prototype, "closable", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlTab.prototype, "disabled", 2);
__decorateClass([
  n$6({ type: Number, reflect: true })
], SlTab.prototype, "tabIndex", 2);
__decorateClass([
  watch("active")
], SlTab.prototype, "handleActiveChange", 1);
__decorateClass([
  watch("disabled")
], SlTab.prototype, "handleDisabledChange", 1);

var tagName$U = "sl-tab";
SlTab.define("sl-tab");
var reactWrapper$i = o$8({
  tagName: tagName$U,
  elementClass: SlTab,
  react: React$1,
  events: {
    onSlClose: "sl-close"
  },
  displayName: "SlTab"
});
var tab_default = reactWrapper$i;

// src/components/tab-group/tab-group.styles.ts
var tab_group_styles_default = i$7`
  :host {
    --indicator-color: var(--sl-color-primary-600);
    --track-color: var(--sl-color-neutral-200);
    --track-width: 2px;

    display: block;
  }

  .tab-group {
    display: flex;
    border-radius: 0;
  }

  .tab-group__tabs {
    display: flex;
    position: relative;
  }

  .tab-group__indicator {
    position: absolute;
    transition:
      var(--sl-transition-fast) translate ease,
      var(--sl-transition-fast) width ease;
  }

  .tab-group--has-scroll-controls .tab-group__nav-container {
    position: relative;
    padding: 0 var(--sl-spacing-x-large);
  }

  .tab-group--has-scroll-controls .tab-group__scroll-button--start--hidden,
  .tab-group--has-scroll-controls .tab-group__scroll-button--end--hidden {
    visibility: hidden;
  }

  .tab-group__body {
    display: block;
    overflow: auto;
  }

  .tab-group__scroll-button {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    bottom: 0;
    width: var(--sl-spacing-x-large);
  }

  .tab-group__scroll-button--start {
    left: 0;
  }

  .tab-group__scroll-button--end {
    right: 0;
  }

  .tab-group--rtl .tab-group__scroll-button--start {
    left: auto;
    right: 0;
  }

  .tab-group--rtl .tab-group__scroll-button--end {
    left: 0;
    right: auto;
  }

  /*
   * Top
   */

  .tab-group--top {
    flex-direction: column;
  }

  .tab-group--top .tab-group__nav-container {
    order: 1;
  }

  .tab-group--top .tab-group__nav {
    display: flex;
    overflow-x: auto;

    /* Hide scrollbar in Firefox */
    scrollbar-width: none;
  }

  /* Hide scrollbar in Chrome/Safari */
  .tab-group--top .tab-group__nav::-webkit-scrollbar {
    width: 0;
    height: 0;
  }

  .tab-group--top .tab-group__tabs {
    flex: 1 1 auto;
    position: relative;
    flex-direction: row;
    border-bottom: solid var(--track-width) var(--track-color);
  }

  .tab-group--top .tab-group__indicator {
    bottom: calc(-1 * var(--track-width));
    border-bottom: solid var(--track-width) var(--indicator-color);
  }

  .tab-group--top .tab-group__body {
    order: 2;
  }

  .tab-group--top ::slotted(sl-tab-panel) {
    --padding: var(--sl-spacing-medium) 0;
  }

  /*
   * Bottom
   */

  .tab-group--bottom {
    flex-direction: column;
  }

  .tab-group--bottom .tab-group__nav-container {
    order: 2;
  }

  .tab-group--bottom .tab-group__nav {
    display: flex;
    overflow-x: auto;

    /* Hide scrollbar in Firefox */
    scrollbar-width: none;
  }

  /* Hide scrollbar in Chrome/Safari */
  .tab-group--bottom .tab-group__nav::-webkit-scrollbar {
    width: 0;
    height: 0;
  }

  .tab-group--bottom .tab-group__tabs {
    flex: 1 1 auto;
    position: relative;
    flex-direction: row;
    border-top: solid var(--track-width) var(--track-color);
  }

  .tab-group--bottom .tab-group__indicator {
    top: calc(-1 * var(--track-width));
    border-top: solid var(--track-width) var(--indicator-color);
  }

  .tab-group--bottom .tab-group__body {
    order: 1;
  }

  .tab-group--bottom ::slotted(sl-tab-panel) {
    --padding: var(--sl-spacing-medium) 0;
  }

  /*
   * Start
   */

  .tab-group--start {
    flex-direction: row;
  }

  .tab-group--start .tab-group__nav-container {
    order: 1;
  }

  .tab-group--start .tab-group__tabs {
    flex: 0 0 auto;
    flex-direction: column;
    border-inline-end: solid var(--track-width) var(--track-color);
  }

  .tab-group--start .tab-group__indicator {
    right: calc(-1 * var(--track-width));
    border-right: solid var(--track-width) var(--indicator-color);
  }

  .tab-group--start.tab-group--rtl .tab-group__indicator {
    right: auto;
    left: calc(-1 * var(--track-width));
  }

  .tab-group--start .tab-group__body {
    flex: 1 1 auto;
    order: 2;
  }

  .tab-group--start ::slotted(sl-tab-panel) {
    --padding: 0 var(--sl-spacing-medium);
  }

  /*
   * End
   */

  .tab-group--end {
    flex-direction: row;
  }

  .tab-group--end .tab-group__nav-container {
    order: 2;
  }

  .tab-group--end .tab-group__tabs {
    flex: 0 0 auto;
    flex-direction: column;
    border-left: solid var(--track-width) var(--track-color);
  }

  .tab-group--end .tab-group__indicator {
    left: calc(-1 * var(--track-width));
    border-inline-start: solid var(--track-width) var(--indicator-color);
  }

  .tab-group--end.tab-group--rtl .tab-group__indicator {
    right: calc(-1 * var(--track-width));
    left: auto;
  }

  .tab-group--end .tab-group__body {
    flex: 1 1 auto;
    order: 1;
  }

  .tab-group--end ::slotted(sl-tab-panel) {
    --padding: 0 var(--sl-spacing-medium);
  }
`;

// src/components/resize-observer/resize-observer.styles.ts
var resize_observer_styles_default = i$7`
  :host {
    display: contents;
  }
`;

var SlResizeObserver = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.observedElements = [];
    this.disabled = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.resizeObserver = new ResizeObserver((entries) => {
      this.emit("sl-resize", { detail: { entries } });
    });
    if (!this.disabled) {
      this.startObserver();
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.stopObserver();
  }
  handleSlotChange() {
    if (!this.disabled) {
      this.startObserver();
    }
  }
  startObserver() {
    const slot = this.shadowRoot.querySelector("slot");
    if (slot !== null) {
      const elements = slot.assignedElements({ flatten: true });
      this.observedElements.forEach((el) => this.resizeObserver.unobserve(el));
      this.observedElements = [];
      elements.forEach((el) => {
        this.resizeObserver.observe(el);
        this.observedElements.push(el);
      });
    }
  }
  stopObserver() {
    this.resizeObserver.disconnect();
  }
  handleDisabledChange() {
    if (this.disabled) {
      this.stopObserver();
    } else {
      this.startObserver();
    }
  }
  render() {
    return x` <slot @slotchange=${this.handleSlotChange}></slot> `;
  }
};
SlResizeObserver.styles = [component_styles_default, resize_observer_styles_default];
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlResizeObserver.prototype, "disabled", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlResizeObserver.prototype, "handleDisabledChange", 1);

// src/internal/offset.ts
function getOffset(element, parent) {
  return {
    top: Math.round(element.getBoundingClientRect().top - parent.getBoundingClientRect().top),
    left: Math.round(element.getBoundingClientRect().left - parent.getBoundingClientRect().left)
  };
}

// src/internal/scroll.ts
var locks = /* @__PURE__ */ new Set();
function getScrollbarWidth() {
  const documentWidth = document.documentElement.clientWidth;
  return Math.abs(window.innerWidth - documentWidth);
}
function getExistingBodyPadding() {
  const padding = Number(getComputedStyle(document.body).paddingRight.replace(/px/, ""));
  if (isNaN(padding) || !padding) {
    return 0;
  }
  return padding;
}
function lockBodyScrolling(lockingEl) {
  locks.add(lockingEl);
  if (!document.documentElement.classList.contains("sl-scroll-lock")) {
    const scrollbarWidth = getScrollbarWidth() + getExistingBodyPadding();
    let scrollbarGutterProperty = getComputedStyle(document.documentElement).scrollbarGutter;
    if (!scrollbarGutterProperty || scrollbarGutterProperty === "auto") {
      scrollbarGutterProperty = "stable";
    }
    if (scrollbarWidth < 2) {
      scrollbarGutterProperty = "";
    }
    document.documentElement.style.setProperty("--sl-scroll-lock-gutter", scrollbarGutterProperty);
    document.documentElement.classList.add("sl-scroll-lock");
    document.documentElement.style.setProperty("--sl-scroll-lock-size", `${scrollbarWidth}px`);
  }
}
function unlockBodyScrolling(lockingEl) {
  locks.delete(lockingEl);
  if (locks.size === 0) {
    document.documentElement.classList.remove("sl-scroll-lock");
    document.documentElement.style.removeProperty("--sl-scroll-lock-size");
  }
}
function scrollIntoView(element, container, direction = "vertical", behavior = "smooth") {
  const offset = getOffset(element, container);
  const offsetTop = offset.top + container.scrollTop;
  const offsetLeft = offset.left + container.scrollLeft;
  const minX = container.scrollLeft;
  const maxX = container.scrollLeft + container.offsetWidth;
  const minY = container.scrollTop;
  const maxY = container.scrollTop + container.offsetHeight;
  if (direction === "horizontal" || direction === "both") {
    if (offsetLeft < minX) {
      container.scrollTo({ left: offsetLeft, behavior });
    } else if (offsetLeft + element.clientWidth > maxX) {
      container.scrollTo({ left: offsetLeft - container.offsetWidth + element.clientWidth, behavior });
    }
  }
  if (direction === "vertical" || direction === "both") {
    if (offsetTop < minY) {
      container.scrollTo({ top: offsetTop, behavior });
    } else if (offsetTop + element.clientHeight > maxY) {
      container.scrollTo({ top: offsetTop - container.offsetHeight + element.clientHeight, behavior });
    }
  }
}

var SlTabGroup = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.tabs = [];
    this.focusableTabs = [];
    this.panels = [];
    this.localize = new LocalizeController(this);
    this.hasScrollControls = false;
    this.shouldHideScrollStartButton = false;
    this.shouldHideScrollEndButton = false;
    this.placement = "top";
    this.activation = "auto";
    this.noScrollControls = false;
    this.fixedScrollControls = false;
    /**
     * The reality of the browser means that we can't expect the scroll position to be exactly what we want it to be, so
     * we add one pixel of wiggle room to our calculations.
     */
    this.scrollOffset = 1;
  }
  connectedCallback() {
    const whenAllDefined = Promise.all([
      customElements.whenDefined("sl-tab"),
      customElements.whenDefined("sl-tab-panel")
    ]);
    super.connectedCallback();
    this.resizeObserver = new ResizeObserver(() => {
      this.repositionIndicator();
      this.updateScrollControls();
    });
    this.mutationObserver = new MutationObserver((mutations) => {
      const instanceMutations = mutations.filter(({ target }) => {
        if (target === this) return true;
        if (target.closest("sl-tab-group") !== this) return false;
        const tagName = target.tagName.toLowerCase();
        return tagName === "sl-tab" || tagName === "sl-tab-panel";
      });
      if (instanceMutations.length === 0) {
        return;
      }
      if (instanceMutations.some((m) => !["aria-labelledby", "aria-controls"].includes(m.attributeName))) {
        setTimeout(() => this.setAriaLabels());
      }
      if (instanceMutations.some((m) => m.attributeName === "disabled")) {
        this.syncTabsAndPanels();
      } else if (instanceMutations.some((m) => m.attributeName === "active")) {
        const tabs = instanceMutations.filter((m) => m.attributeName === "active" && m.target.tagName.toLowerCase() === "sl-tab").map((m) => m.target);
        const newActiveTab = tabs.find((tab) => tab.active);
        if (newActiveTab) {
          this.setActiveTab(newActiveTab);
        }
      }
    });
    this.updateComplete.then(() => {
      this.syncTabsAndPanels();
      this.mutationObserver.observe(this, {
        attributes: true,
        attributeFilter: ["active", "disabled", "name", "panel"],
        childList: true,
        subtree: true
      });
      this.resizeObserver.observe(this.nav);
      whenAllDefined.then(() => {
        const intersectionObserver = new IntersectionObserver((entries, observer) => {
          var _a;
          if (entries[0].intersectionRatio > 0) {
            this.setAriaLabels();
            this.setActiveTab((_a = this.getActiveTab()) != null ? _a : this.tabs[0], { emitEvents: false });
            observer.unobserve(entries[0].target);
          }
        });
        intersectionObserver.observe(this.tabGroup);
      });
    });
  }
  disconnectedCallback() {
    var _a, _b;
    super.disconnectedCallback();
    (_a = this.mutationObserver) == null ? void 0 : _a.disconnect();
    if (this.nav) {
      (_b = this.resizeObserver) == null ? void 0 : _b.unobserve(this.nav);
    }
  }
  getAllTabs() {
    const slot = this.shadowRoot.querySelector('slot[name="nav"]');
    return slot.assignedElements();
  }
  getAllPanels() {
    return [...this.body.assignedElements()].filter((el) => el.tagName.toLowerCase() === "sl-tab-panel");
  }
  getActiveTab() {
    return this.tabs.find((el) => el.active);
  }
  handleClick(event) {
    const target = event.target;
    const tab = target.closest("sl-tab");
    const tabGroup = tab == null ? void 0 : tab.closest("sl-tab-group");
    if (tabGroup !== this) {
      return;
    }
    if (tab !== null) {
      this.setActiveTab(tab, { scrollBehavior: "smooth" });
    }
  }
  handleKeyDown(event) {
    const target = event.target;
    const tab = target.closest("sl-tab");
    const tabGroup = tab == null ? void 0 : tab.closest("sl-tab-group");
    if (tabGroup !== this) {
      return;
    }
    if (["Enter", " "].includes(event.key)) {
      if (tab !== null) {
        this.setActiveTab(tab, { scrollBehavior: "smooth" });
        event.preventDefault();
      }
    }
    if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
      const activeEl = this.tabs.find((t) => t.matches(":focus"));
      const isRtl = this.localize.dir() === "rtl";
      let nextTab = null;
      if ((activeEl == null ? void 0 : activeEl.tagName.toLowerCase()) === "sl-tab") {
        if (event.key === "Home") {
          nextTab = this.focusableTabs[0];
        } else if (event.key === "End") {
          nextTab = this.focusableTabs[this.focusableTabs.length - 1];
        } else if (["top", "bottom"].includes(this.placement) && event.key === (isRtl ? "ArrowRight" : "ArrowLeft") || ["start", "end"].includes(this.placement) && event.key === "ArrowUp") {
          const currentIndex = this.tabs.findIndex((el) => el === activeEl);
          nextTab = this.findNextFocusableTab(currentIndex, "backward");
        } else if (["top", "bottom"].includes(this.placement) && event.key === (isRtl ? "ArrowLeft" : "ArrowRight") || ["start", "end"].includes(this.placement) && event.key === "ArrowDown") {
          const currentIndex = this.tabs.findIndex((el) => el === activeEl);
          nextTab = this.findNextFocusableTab(currentIndex, "forward");
        }
        if (!nextTab) {
          return;
        }
        nextTab.tabIndex = 0;
        nextTab.focus({ preventScroll: true });
        if (this.activation === "auto") {
          this.setActiveTab(nextTab, { scrollBehavior: "smooth" });
        } else {
          this.tabs.forEach((tabEl) => {
            tabEl.tabIndex = tabEl === nextTab ? 0 : -1;
          });
        }
        if (["top", "bottom"].includes(this.placement)) {
          scrollIntoView(nextTab, this.nav, "horizontal");
        }
        event.preventDefault();
      }
    }
  }
  handleScrollToStart() {
    this.nav.scroll({
      left: this.localize.dir() === "rtl" ? this.nav.scrollLeft + this.nav.clientWidth : this.nav.scrollLeft - this.nav.clientWidth,
      behavior: "smooth"
    });
  }
  handleScrollToEnd() {
    this.nav.scroll({
      left: this.localize.dir() === "rtl" ? this.nav.scrollLeft - this.nav.clientWidth : this.nav.scrollLeft + this.nav.clientWidth,
      behavior: "smooth"
    });
  }
  setActiveTab(tab, options) {
    options = __spreadValues({
      emitEvents: true,
      scrollBehavior: "auto"
    }, options);
    if (tab !== this.activeTab && !tab.disabled) {
      const previousTab = this.activeTab;
      this.activeTab = tab;
      this.tabs.forEach((el) => {
        el.active = el === this.activeTab;
        el.tabIndex = el === this.activeTab ? 0 : -1;
      });
      this.panels.forEach((el) => {
        var _a;
        return el.active = el.name === ((_a = this.activeTab) == null ? void 0 : _a.panel);
      });
      this.syncIndicator();
      if (["top", "bottom"].includes(this.placement)) {
        scrollIntoView(this.activeTab, this.nav, "horizontal", options.scrollBehavior);
      }
      if (options.emitEvents) {
        if (previousTab) {
          this.emit("sl-tab-hide", { detail: { name: previousTab.panel } });
        }
        this.emit("sl-tab-show", { detail: { name: this.activeTab.panel } });
      }
    }
  }
  setAriaLabels() {
    this.tabs.forEach((tab) => {
      const panel = this.panels.find((el) => el.name === tab.panel);
      if (panel) {
        tab.setAttribute("aria-controls", panel.getAttribute("id"));
        panel.setAttribute("aria-labelledby", tab.getAttribute("id"));
      }
    });
  }
  repositionIndicator() {
    const currentTab = this.getActiveTab();
    if (!currentTab) {
      return;
    }
    const width = currentTab.clientWidth;
    const height = currentTab.clientHeight;
    const isRtl = this.localize.dir() === "rtl";
    const allTabs = this.getAllTabs();
    const precedingTabs = allTabs.slice(0, allTabs.indexOf(currentTab));
    const offset = precedingTabs.reduce(
      (previous, current) => ({
        left: previous.left + current.clientWidth,
        top: previous.top + current.clientHeight
      }),
      { left: 0, top: 0 }
    );
    switch (this.placement) {
      case "top":
      case "bottom":
        this.indicator.style.width = `${width}px`;
        this.indicator.style.height = "auto";
        this.indicator.style.translate = isRtl ? `${ -1 * offset.left}px` : `${offset.left}px`;
        break;
      case "start":
      case "end":
        this.indicator.style.width = "auto";
        this.indicator.style.height = `${height}px`;
        this.indicator.style.translate = `0 ${offset.top}px`;
        break;
    }
  }
  // This stores tabs and panels so we can refer to a cache instead of calling querySelectorAll() multiple times.
  syncTabsAndPanels() {
    this.tabs = this.getAllTabs();
    this.focusableTabs = this.tabs.filter((el) => !el.disabled);
    this.panels = this.getAllPanels();
    this.syncIndicator();
    this.updateComplete.then(() => this.updateScrollControls());
  }
  findNextFocusableTab(currentIndex, direction) {
    let nextTab = null;
    const iterator = direction === "forward" ? 1 : -1;
    let nextIndex = currentIndex + iterator;
    while (currentIndex < this.tabs.length) {
      nextTab = this.tabs[nextIndex] || null;
      if (nextTab === null) {
        if (direction === "forward") {
          nextTab = this.focusableTabs[0];
        } else {
          nextTab = this.focusableTabs[this.focusableTabs.length - 1];
        }
        break;
      }
      if (!nextTab.disabled) {
        break;
      }
      nextIndex += iterator;
    }
    return nextTab;
  }
  updateScrollButtons() {
    if (this.hasScrollControls && !this.fixedScrollControls) {
      this.shouldHideScrollStartButton = this.scrollFromStart() <= this.scrollOffset;
      this.shouldHideScrollEndButton = this.isScrolledToEnd();
    }
  }
  isScrolledToEnd() {
    return this.scrollFromStart() + this.nav.clientWidth >= this.nav.scrollWidth - this.scrollOffset;
  }
  scrollFromStart() {
    return this.localize.dir() === "rtl" ? -this.nav.scrollLeft : this.nav.scrollLeft;
  }
  updateScrollControls() {
    if (this.noScrollControls) {
      this.hasScrollControls = false;
    } else {
      this.hasScrollControls = ["top", "bottom"].includes(this.placement) && this.nav.scrollWidth > this.nav.clientWidth + 1;
    }
    this.updateScrollButtons();
  }
  syncIndicator() {
    const tab = this.getActiveTab();
    if (tab) {
      this.indicator.style.display = "block";
      this.repositionIndicator();
    } else {
      this.indicator.style.display = "none";
    }
  }
  /** Shows the specified tab panel. */
  show(panel) {
    const tab = this.tabs.find((el) => el.panel === panel);
    if (tab) {
      this.setActiveTab(tab, { scrollBehavior: "smooth" });
    }
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    return x`
      <div
        part="base"
        class=${e$3({
      "tab-group": true,
      "tab-group--top": this.placement === "top",
      "tab-group--bottom": this.placement === "bottom",
      "tab-group--start": this.placement === "start",
      "tab-group--end": this.placement === "end",
      "tab-group--rtl": this.localize.dir() === "rtl",
      "tab-group--has-scroll-controls": this.hasScrollControls
    })}
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
      >
        <div class="tab-group__nav-container" part="nav">
          ${this.hasScrollControls ? x`
                <sl-icon-button
                  part="scroll-button scroll-button--start"
                  exportparts="base:scroll-button__base"
                  class=${e$3({
      "tab-group__scroll-button": true,
      "tab-group__scroll-button--start": true,
      "tab-group__scroll-button--start--hidden": this.shouldHideScrollStartButton
    })}
                  name=${isRtl ? "chevron-right" : "chevron-left"}
                  library="system"
                  tabindex="-1"
                  aria-hidden="true"
                  label=${this.localize.term("scrollToStart")}
                  @click=${this.handleScrollToStart}
                ></sl-icon-button>
              ` : ""}

          <div class="tab-group__nav" @scrollend=${this.updateScrollButtons}>
            <div part="tabs" class="tab-group__tabs" role="tablist">
              <div part="active-tab-indicator" class="tab-group__indicator"></div>
              <sl-resize-observer @sl-resize=${this.syncIndicator}>
                <slot name="nav" @slotchange=${this.syncTabsAndPanels}></slot>
              </sl-resize-observer>
            </div>
          </div>

          ${this.hasScrollControls ? x`
                <sl-icon-button
                  part="scroll-button scroll-button--end"
                  exportparts="base:scroll-button__base"
                  class=${e$3({
      "tab-group__scroll-button": true,
      "tab-group__scroll-button--end": true,
      "tab-group__scroll-button--end--hidden": this.shouldHideScrollEndButton
    })}
                  name=${isRtl ? "chevron-left" : "chevron-right"}
                  library="system"
                  tabindex="-1"
                  aria-hidden="true"
                  label=${this.localize.term("scrollToEnd")}
                  @click=${this.handleScrollToEnd}
                ></sl-icon-button>
              ` : ""}
        </div>

        <slot part="body" class="tab-group__body" @slotchange=${this.syncTabsAndPanels}></slot>
      </div>
    `;
  }
};
SlTabGroup.styles = [component_styles_default, tab_group_styles_default];
SlTabGroup.dependencies = { "sl-icon-button": SlIconButton, "sl-resize-observer": SlResizeObserver };
__decorateClass([
  e$7(".tab-group")
], SlTabGroup.prototype, "tabGroup", 2);
__decorateClass([
  e$7(".tab-group__body")
], SlTabGroup.prototype, "body", 2);
__decorateClass([
  e$7(".tab-group__nav")
], SlTabGroup.prototype, "nav", 2);
__decorateClass([
  e$7(".tab-group__indicator")
], SlTabGroup.prototype, "indicator", 2);
__decorateClass([
  r$3()
], SlTabGroup.prototype, "hasScrollControls", 2);
__decorateClass([
  r$3()
], SlTabGroup.prototype, "shouldHideScrollStartButton", 2);
__decorateClass([
  r$3()
], SlTabGroup.prototype, "shouldHideScrollEndButton", 2);
__decorateClass([
  n$6()
], SlTabGroup.prototype, "placement", 2);
__decorateClass([
  n$6()
], SlTabGroup.prototype, "activation", 2);
__decorateClass([
  n$6({ attribute: "no-scroll-controls", type: Boolean })
], SlTabGroup.prototype, "noScrollControls", 2);
__decorateClass([
  n$6({ attribute: "fixed-scroll-controls", type: Boolean })
], SlTabGroup.prototype, "fixedScrollControls", 2);
__decorateClass([
  t$2({ passive: true })
], SlTabGroup.prototype, "updateScrollButtons", 1);
__decorateClass([
  watch("noScrollControls", { waitUntilFirstUpdate: true })
], SlTabGroup.prototype, "updateScrollControls", 1);
__decorateClass([
  watch("placement", { waitUntilFirstUpdate: true })
], SlTabGroup.prototype, "syncIndicator", 1);

var tagName$T = "sl-tab-group";
SlTabGroup.define("sl-tab-group");
var reactWrapper$h = o$8({
  tagName: tagName$T,
  elementClass: SlTabGroup,
  react: React$1,
  events: {
    onSlTabShow: "sl-tab-show",
    onSlTabHide: "sl-tab-hide"
  },
  displayName: "SlTabGroup"
});
var tab_group_default = reactWrapper$h;

// src/components/tab-panel/tab-panel.styles.ts
var tab_panel_styles_default = i$7`
  :host {
    --padding: 0;

    display: none;
  }

  :host([active]) {
    display: block;
  }

  .tab-panel {
    display: block;
    padding: var(--padding);
  }
`;

var id = 0;
var SlTabPanel = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.attrId = ++id;
    this.componentId = `sl-tab-panel-${this.attrId}`;
    this.name = "";
    this.active = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.id = this.id.length > 0 ? this.id : this.componentId;
    this.setAttribute("role", "tabpanel");
  }
  handleActiveChange() {
    this.setAttribute("aria-hidden", this.active ? "false" : "true");
  }
  render() {
    return x`
      <slot
        part="base"
        class=${e$3({
      "tab-panel": true,
      "tab-panel--active": this.active
    })}
      ></slot>
    `;
  }
};
SlTabPanel.styles = [component_styles_default, tab_panel_styles_default];
__decorateClass([
  n$6({ reflect: true })
], SlTabPanel.prototype, "name", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlTabPanel.prototype, "active", 2);
__decorateClass([
  watch("active")
], SlTabPanel.prototype, "handleActiveChange", 1);

var tagName$S = "sl-tab-panel";
SlTabPanel.define("sl-tab-panel");
var reactWrapper$g = o$8({
  tagName: tagName$S,
  elementClass: SlTabPanel,
  react: React$1,
  events: {},
  displayName: "SlTabPanel"
});
var tab_panel_default = reactWrapper$g;

// src/components/tag/tag.styles.ts
var tag_styles_default = i$7`
  :host {
    display: inline-block;
  }

  .tag {
    display: flex;
    align-items: center;
    border: solid 1px;
    line-height: 1;
    white-space: nowrap;
    user-select: none;
    -webkit-user-select: none;
  }

  .tag__remove::part(base) {
    color: inherit;
    padding: 0;
  }

  /*
   * Variant modifiers
   */

  .tag--primary {
    background-color: var(--sl-color-primary-50);
    border-color: var(--sl-color-primary-200);
    color: var(--sl-color-primary-800);
  }

  .tag--primary:active > sl-icon-button {
    color: var(--sl-color-primary-600);
  }

  .tag--success {
    background-color: var(--sl-color-success-50);
    border-color: var(--sl-color-success-200);
    color: var(--sl-color-success-800);
  }

  .tag--success:active > sl-icon-button {
    color: var(--sl-color-success-600);
  }

  .tag--neutral {
    background-color: var(--sl-color-neutral-50);
    border-color: var(--sl-color-neutral-200);
    color: var(--sl-color-neutral-800);
  }

  .tag--neutral:active > sl-icon-button {
    color: var(--sl-color-neutral-600);
  }

  .tag--warning {
    background-color: var(--sl-color-warning-50);
    border-color: var(--sl-color-warning-200);
    color: var(--sl-color-warning-800);
  }

  .tag--warning:active > sl-icon-button {
    color: var(--sl-color-warning-600);
  }

  .tag--danger {
    background-color: var(--sl-color-danger-50);
    border-color: var(--sl-color-danger-200);
    color: var(--sl-color-danger-800);
  }

  .tag--danger:active > sl-icon-button {
    color: var(--sl-color-danger-600);
  }

  /*
   * Size modifiers
   */

  .tag--small {
    font-size: var(--sl-button-font-size-small);
    height: calc(var(--sl-input-height-small) * 0.8);
    line-height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-small);
    padding: 0 var(--sl-spacing-x-small);
  }

  .tag--medium {
    font-size: var(--sl-button-font-size-medium);
    height: calc(var(--sl-input-height-medium) * 0.8);
    line-height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-medium);
    padding: 0 var(--sl-spacing-small);
  }

  .tag--large {
    font-size: var(--sl-button-font-size-large);
    height: calc(var(--sl-input-height-large) * 0.8);
    line-height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-large);
    padding: 0 var(--sl-spacing-medium);
  }

  .tag__remove {
    margin-inline-start: var(--sl-spacing-x-small);
  }

  /*
   * Pill modifier
   */

  .tag--pill {
    border-radius: var(--sl-border-radius-pill);
  }
`;

var SlTag = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.variant = "neutral";
    this.size = "medium";
    this.pill = false;
    this.removable = false;
  }
  handleRemoveClick() {
    this.emit("sl-remove");
  }
  render() {
    return x`
      <span
        part="base"
        class=${e$3({
      tag: true,
      // Types
      "tag--primary": this.variant === "primary",
      "tag--success": this.variant === "success",
      "tag--neutral": this.variant === "neutral",
      "tag--warning": this.variant === "warning",
      "tag--danger": this.variant === "danger",
      "tag--text": this.variant === "text",
      // Sizes
      "tag--small": this.size === "small",
      "tag--medium": this.size === "medium",
      "tag--large": this.size === "large",
      // Modifiers
      "tag--pill": this.pill,
      "tag--removable": this.removable
    })}
      >
        <slot part="content" class="tag__content"></slot>

        ${this.removable ? x`
              <sl-icon-button
                part="remove-button"
                exportparts="base:remove-button__base"
                name="x-lg"
                library="system"
                label=${this.localize.term("remove")}
                class="tag__remove"
                @click=${this.handleRemoveClick}
                tabindex="-1"
              ></sl-icon-button>
            ` : ""}
      </span>
    `;
  }
};
SlTag.styles = [component_styles_default, tag_styles_default];
SlTag.dependencies = { "sl-icon-button": SlIconButton };
__decorateClass([
  n$6({ reflect: true })
], SlTag.prototype, "variant", 2);
__decorateClass([
  n$6({ reflect: true })
], SlTag.prototype, "size", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlTag.prototype, "pill", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlTag.prototype, "removable", 2);

var tagName$R = "sl-tag";
SlTag.define("sl-tag");
o$8({
  tagName: tagName$R,
  elementClass: SlTag,
  react: React$1,
  events: {
    onSlRemove: "sl-remove"
  },
  displayName: "SlTag"
});

// src/components/textarea/textarea.styles.ts
var textarea_styles_default = i$7`
  :host {
    display: block;
  }

  .textarea {
    display: grid;
    align-items: center;
    position: relative;
    width: 100%;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-input-letter-spacing);
    vertical-align: middle;
    transition:
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) border,
      var(--sl-transition-fast) box-shadow,
      var(--sl-transition-fast) background-color;
    cursor: text;
  }

  /* Standard textareas */
  .textarea--standard {
    background-color: var(--sl-input-background-color);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
  }

  .textarea--standard:hover:not(.textarea--disabled) {
    background-color: var(--sl-input-background-color-hover);
    border-color: var(--sl-input-border-color-hover);
  }
  .textarea--standard:hover:not(.textarea--disabled) .textarea__control {
    color: var(--sl-input-color-hover);
  }

  .textarea--standard.textarea--focused:not(.textarea--disabled) {
    background-color: var(--sl-input-background-color-focus);
    border-color: var(--sl-input-border-color-focus);
    color: var(--sl-input-color-focus);
    box-shadow: 0 0 0 var(--sl-focus-ring-width) var(--sl-input-focus-ring-color);
  }

  .textarea--standard.textarea--focused:not(.textarea--disabled) .textarea__control {
    color: var(--sl-input-color-focus);
  }

  .textarea--standard.textarea--disabled {
    background-color: var(--sl-input-background-color-disabled);
    border-color: var(--sl-input-border-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .textarea__control,
  .textarea__size-adjuster {
    grid-area: 1 / 1 / 2 / 2;
  }

  .textarea__size-adjuster {
    visibility: hidden;
    pointer-events: none;
    opacity: 0;
  }

  .textarea--standard.textarea--disabled .textarea__control {
    color: var(--sl-input-color-disabled);
  }

  .textarea--standard.textarea--disabled .textarea__control::placeholder {
    color: var(--sl-input-placeholder-color-disabled);
  }

  /* Filled textareas */
  .textarea--filled {
    border: none;
    background-color: var(--sl-input-filled-background-color);
    color: var(--sl-input-color);
  }

  .textarea--filled:hover:not(.textarea--disabled) {
    background-color: var(--sl-input-filled-background-color-hover);
  }

  .textarea--filled.textarea--focused:not(.textarea--disabled) {
    background-color: var(--sl-input-filled-background-color-focus);
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .textarea--filled.textarea--disabled {
    background-color: var(--sl-input-filled-background-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .textarea__control {
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: 1.4;
    color: var(--sl-input-color);
    border: none;
    background: none;
    box-shadow: none;
    cursor: inherit;
    -webkit-appearance: none;
  }

  .textarea__control::-webkit-search-decoration,
  .textarea__control::-webkit-search-cancel-button,
  .textarea__control::-webkit-search-results-button,
  .textarea__control::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }

  .textarea__control::placeholder {
    color: var(--sl-input-placeholder-color);
    user-select: none;
    -webkit-user-select: none;
  }

  .textarea__control:focus {
    outline: none;
  }

  /*
   * Size modifiers
   */

  .textarea--small {
    border-radius: var(--sl-input-border-radius-small);
    font-size: var(--sl-input-font-size-small);
  }

  .textarea--small .textarea__control {
    padding: 0.5em var(--sl-input-spacing-small);
  }

  .textarea--medium {
    border-radius: var(--sl-input-border-radius-medium);
    font-size: var(--sl-input-font-size-medium);
  }

  .textarea--medium .textarea__control {
    padding: 0.5em var(--sl-input-spacing-medium);
  }

  .textarea--large {
    border-radius: var(--sl-input-border-radius-large);
    font-size: var(--sl-input-font-size-large);
  }

  .textarea--large .textarea__control {
    padding: 0.5em var(--sl-input-spacing-large);
  }

  /*
   * Resize types
   */

  .textarea--resize-none .textarea__control {
    resize: none;
  }

  .textarea--resize-vertical .textarea__control {
    resize: vertical;
  }

  .textarea--resize-auto .textarea__control {
    height: auto;
    resize: none;
    overflow-y: hidden;
  }
`;

// src/internal/default-value.ts
var defaultValue = (propertyName = "value") => (proto, key) => {
  const ctor = proto.constructor;
  const attributeChangedCallback = ctor.prototype.attributeChangedCallback;
  ctor.prototype.attributeChangedCallback = function(name, old, value) {
    var _a;
    const options = ctor.getPropertyOptions(propertyName);
    const attributeName = typeof options.attribute === "string" ? options.attribute : propertyName;
    if (name === attributeName) {
      const converter = options.converter || u$3;
      const fromAttribute = typeof converter === "function" ? converter : (_a = converter == null ? void 0 : converter.fromAttribute) != null ? _a : u$3.fromAttribute;
      const newValue = fromAttribute(value, options.type);
      if (this[propertyName] !== newValue) {
        this[key] = newValue;
      }
    }
    attributeChangedCallback.call(this, name, old, value);
  };
};

// src/styles/form-control.styles.ts
var form_control_styles_default = i$7`
  .form-control .form-control__label {
    display: none;
  }

  .form-control .form-control__help-text {
    display: none;
  }

  /* Label */
  .form-control--has-label .form-control__label {
    display: inline-block;
    color: var(--sl-input-label-color);
    margin-bottom: var(--sl-spacing-3x-small);
  }

  .form-control--has-label.form-control--small .form-control__label {
    font-size: var(--sl-input-label-font-size-small);
  }

  .form-control--has-label.form-control--medium .form-control__label {
    font-size: var(--sl-input-label-font-size-medium);
  }

  .form-control--has-label.form-control--large .form-control__label {
    font-size: var(--sl-input-label-font-size-large);
  }

  :host([required]) .form-control--has-label .form-control__label::after {
    content: var(--sl-input-required-content);
    margin-inline-start: var(--sl-input-required-content-offset);
    color: var(--sl-input-required-content-color);
  }

  /* Help text */
  .form-control--has-help-text .form-control__help-text {
    display: block;
    color: var(--sl-input-help-text-color);
    margin-top: var(--sl-spacing-3x-small);
  }

  .form-control--has-help-text.form-control--small .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-small);
  }

  .form-control--has-help-text.form-control--medium .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-medium);
  }

  .form-control--has-help-text.form-control--large .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-large);
  }

  .form-control--has-help-text.form-control--radio-group .form-control__help-text {
    margin-top: var(--sl-spacing-2x-small);
  }
`;

// src/internal/form.ts
var formCollections = /* @__PURE__ */ new WeakMap();
var reportValidityOverloads = /* @__PURE__ */ new WeakMap();
var checkValidityOverloads = /* @__PURE__ */ new WeakMap();
var userInteractedControls = /* @__PURE__ */ new WeakSet();
var interactions = /* @__PURE__ */ new WeakMap();
var FormControlController = class {
  constructor(host, options) {
    this.handleFormData = (event) => {
      const disabled = this.options.disabled(this.host);
      const name = this.options.name(this.host);
      const value = this.options.value(this.host);
      const isButton = this.host.tagName.toLowerCase() === "sl-button";
      if (this.host.isConnected && !disabled && !isButton && typeof name === "string" && name.length > 0 && typeof value !== "undefined") {
        if (Array.isArray(value)) {
          value.forEach((val) => {
            event.formData.append(name, val.toString());
          });
        } else {
          event.formData.append(name, value.toString());
        }
      }
    };
    this.handleFormSubmit = (event) => {
      var _a;
      const disabled = this.options.disabled(this.host);
      const reportValidity = this.options.reportValidity;
      if (this.form && !this.form.noValidate) {
        (_a = formCollections.get(this.form)) == null ? void 0 : _a.forEach((control) => {
          this.setUserInteracted(control, true);
        });
      }
      if (this.form && !this.form.noValidate && !disabled && !reportValidity(this.host)) {
        event.preventDefault();
        event.stopImmediatePropagation();
      }
    };
    this.handleFormReset = () => {
      this.options.setValue(this.host, this.options.defaultValue(this.host));
      this.setUserInteracted(this.host, false);
      interactions.set(this.host, []);
    };
    this.handleInteraction = (event) => {
      const emittedEvents = interactions.get(this.host);
      if (!emittedEvents.includes(event.type)) {
        emittedEvents.push(event.type);
      }
      if (emittedEvents.length === this.options.assumeInteractionOn.length) {
        this.setUserInteracted(this.host, true);
      }
    };
    this.checkFormValidity = () => {
      if (this.form && !this.form.noValidate) {
        const elements = this.form.querySelectorAll("*");
        for (const element of elements) {
          if (typeof element.checkValidity === "function") {
            if (!element.checkValidity()) {
              return false;
            }
          }
        }
      }
      return true;
    };
    this.reportFormValidity = () => {
      if (this.form && !this.form.noValidate) {
        const elements = this.form.querySelectorAll("*");
        for (const element of elements) {
          if (typeof element.reportValidity === "function") {
            if (!element.reportValidity()) {
              return false;
            }
          }
        }
      }
      return true;
    };
    (this.host = host).addController(this);
    this.options = __spreadValues({
      form: (input) => {
        const formId = input.form;
        if (formId) {
          const root = input.getRootNode();
          const form = root.querySelector(`#${formId}`);
          if (form) {
            return form;
          }
        }
        return input.closest("form");
      },
      name: (input) => input.name,
      value: (input) => input.value,
      defaultValue: (input) => input.defaultValue,
      disabled: (input) => {
        var _a;
        return (_a = input.disabled) != null ? _a : false;
      },
      reportValidity: (input) => typeof input.reportValidity === "function" ? input.reportValidity() : true,
      checkValidity: (input) => typeof input.checkValidity === "function" ? input.checkValidity() : true,
      setValue: (input, value) => input.value = value,
      assumeInteractionOn: ["sl-input"]
    }, options);
  }
  hostConnected() {
    const form = this.options.form(this.host);
    if (form) {
      this.attachForm(form);
    }
    interactions.set(this.host, []);
    this.options.assumeInteractionOn.forEach((event) => {
      this.host.addEventListener(event, this.handleInteraction);
    });
  }
  hostDisconnected() {
    this.detachForm();
    interactions.delete(this.host);
    this.options.assumeInteractionOn.forEach((event) => {
      this.host.removeEventListener(event, this.handleInteraction);
    });
  }
  hostUpdated() {
    const form = this.options.form(this.host);
    if (!form) {
      this.detachForm();
    }
    if (form && this.form !== form) {
      this.detachForm();
      this.attachForm(form);
    }
    if (this.host.hasUpdated) {
      this.setValidity(this.host.validity.valid);
    }
  }
  attachForm(form) {
    if (form) {
      this.form = form;
      if (formCollections.has(this.form)) {
        formCollections.get(this.form).add(this.host);
      } else {
        formCollections.set(this.form, /* @__PURE__ */ new Set([this.host]));
      }
      this.form.addEventListener("formdata", this.handleFormData);
      this.form.addEventListener("submit", this.handleFormSubmit);
      this.form.addEventListener("reset", this.handleFormReset);
      if (!reportValidityOverloads.has(this.form)) {
        reportValidityOverloads.set(this.form, this.form.reportValidity);
        this.form.reportValidity = () => this.reportFormValidity();
      }
      if (!checkValidityOverloads.has(this.form)) {
        checkValidityOverloads.set(this.form, this.form.checkValidity);
        this.form.checkValidity = () => this.checkFormValidity();
      }
    } else {
      this.form = void 0;
    }
  }
  detachForm() {
    if (!this.form) return;
    const formCollection = formCollections.get(this.form);
    if (!formCollection) {
      return;
    }
    formCollection.delete(this.host);
    if (formCollection.size <= 0) {
      this.form.removeEventListener("formdata", this.handleFormData);
      this.form.removeEventListener("submit", this.handleFormSubmit);
      this.form.removeEventListener("reset", this.handleFormReset);
      if (reportValidityOverloads.has(this.form)) {
        this.form.reportValidity = reportValidityOverloads.get(this.form);
        reportValidityOverloads.delete(this.form);
      }
      if (checkValidityOverloads.has(this.form)) {
        this.form.checkValidity = checkValidityOverloads.get(this.form);
        checkValidityOverloads.delete(this.form);
      }
      this.form = void 0;
    }
  }
  setUserInteracted(el, hasInteracted) {
    if (hasInteracted) {
      userInteractedControls.add(el);
    } else {
      userInteractedControls.delete(el);
    }
    el.requestUpdate();
  }
  doAction(type, submitter) {
    if (this.form) {
      const button = document.createElement("button");
      button.type = type;
      button.style.position = "absolute";
      button.style.width = "0";
      button.style.height = "0";
      button.style.clipPath = "inset(50%)";
      button.style.overflow = "hidden";
      button.style.whiteSpace = "nowrap";
      if (submitter) {
        button.name = submitter.name;
        button.value = submitter.value;
        ["formaction", "formenctype", "formmethod", "formnovalidate", "formtarget"].forEach((attr) => {
          if (submitter.hasAttribute(attr)) {
            button.setAttribute(attr, submitter.getAttribute(attr));
          }
        });
      }
      this.form.append(button);
      button.click();
      button.remove();
    }
  }
  /** Returns the associated `<form>` element, if one exists. */
  getForm() {
    var _a;
    return (_a = this.form) != null ? _a : null;
  }
  /** Resets the form, restoring all the control to their default value */
  reset(submitter) {
    this.doAction("reset", submitter);
  }
  /** Submits the form, triggering validation and form data injection. */
  submit(submitter) {
    this.doAction("submit", submitter);
  }
  /**
   * Synchronously sets the form control's validity. Call this when you know the future validity but need to update
   * the host element immediately, i.e. before Lit updates the component in the next update.
   */
  setValidity(isValid) {
    const host = this.host;
    const hasInteracted = Boolean(userInteractedControls.has(host));
    const required = Boolean(host.required);
    host.toggleAttribute("data-required", required);
    host.toggleAttribute("data-optional", !required);
    host.toggleAttribute("data-invalid", !isValid);
    host.toggleAttribute("data-valid", isValid);
    host.toggleAttribute("data-user-invalid", !isValid && hasInteracted);
    host.toggleAttribute("data-user-valid", isValid && hasInteracted);
  }
  /**
   * Updates the form control's validity based on the current value of `host.validity.valid`. Call this when anything
   * that affects constraint validation changes so the component receives the correct validity states.
   */
  updateValidity() {
    const host = this.host;
    this.setValidity(host.validity.valid);
  }
  /**
   * Dispatches a non-bubbling, cancelable custom event of type `sl-invalid`.
   * If the `sl-invalid` event will be cancelled then the original `invalid`
   * event (which may have been passed as argument) will also be cancelled.
   * If no original `invalid` event has been passed then the `sl-invalid`
   * event will be cancelled before being dispatched.
   */
  emitInvalidEvent(originalInvalidEvent) {
    const slInvalidEvent = new CustomEvent("sl-invalid", {
      bubbles: false,
      composed: false,
      cancelable: true,
      detail: {}
    });
    if (!originalInvalidEvent) {
      slInvalidEvent.preventDefault();
    }
    if (!this.host.dispatchEvent(slInvalidEvent)) {
      originalInvalidEvent == null ? void 0 : originalInvalidEvent.preventDefault();
    }
  }
};
var validValidityState = Object.freeze({
  badInput: false,
  customError: false,
  patternMismatch: false,
  rangeOverflow: false,
  rangeUnderflow: false,
  stepMismatch: false,
  tooLong: false,
  tooShort: false,
  typeMismatch: false,
  valid: true,
  valueMissing: false
});
var valueMissingValidityState = Object.freeze(__spreadProps(__spreadValues({}, validValidityState), {
  valid: false,
  valueMissing: true
}));
var customErrorValidityState = Object.freeze(__spreadProps(__spreadValues({}, validValidityState), {
  valid: false,
  customError: true
}));

// src/internal/slot.ts
var HasSlotController = class {
  constructor(host, ...slotNames) {
    this.slotNames = [];
    this.handleSlotChange = (event) => {
      const slot = event.target;
      if (this.slotNames.includes("[default]") && !slot.name || slot.name && this.slotNames.includes(slot.name)) {
        this.host.requestUpdate();
      }
    };
    (this.host = host).addController(this);
    this.slotNames = slotNames;
  }
  hasDefaultSlot() {
    return [...this.host.childNodes].some((node) => {
      if (node.nodeType === node.TEXT_NODE && node.textContent.trim() !== "") {
        return true;
      }
      if (node.nodeType === node.ELEMENT_NODE) {
        const el = node;
        const tagName = el.tagName.toLowerCase();
        if (tagName === "sl-visually-hidden") {
          return false;
        }
        if (!el.hasAttribute("slot")) {
          return true;
        }
      }
      return false;
    });
  }
  hasNamedSlot(name) {
    return this.host.querySelector(`:scope > [slot="${name}"]`) !== null;
  }
  test(slotName) {
    return slotName === "[default]" ? this.hasDefaultSlot() : this.hasNamedSlot(slotName);
  }
  hostConnected() {
    this.host.shadowRoot.addEventListener("slotchange", this.handleSlotChange);
  }
  hostDisconnected() {
    this.host.shadowRoot.removeEventListener("slotchange", this.handleSlotChange);
  }
};
function getTextContent(slot) {
  if (!slot) {
    return "";
  }
  const nodes = slot.assignedNodes({ flatten: true });
  let text = "";
  [...nodes].forEach((node) => {
    if (node.nodeType === Node.TEXT_NODE) {
      text += node.textContent;
    }
  });
  return text;
}

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const l=e$4(class extends i$3{constructor(r){if(super(r),r.type!==t.PROPERTY&&r.type!==t.ATTRIBUTE&&r.type!==t.BOOLEAN_ATTRIBUTE)throw Error("The `live` directive is not allowed on child or event bindings");if(!f$1(r))throw Error("`live` bindings can only contain a single expression")}render(r){return r}update(i,[t$1]){if(t$1===T||t$1===E)return t$1;const o=i.element,l=i.name;if(i.type===t.PROPERTY){if(t$1===o[l])return T}else if(i.type===t.BOOLEAN_ATTRIBUTE){if(!!t$1===o.hasAttribute(l))return T}else if(i.type===t.ATTRIBUTE&&o.getAttribute(l)===t$1+"")return T;return m(i),t$1}});

var SlTextarea = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      assumeInteractionOn: ["sl-blur", "sl-input"]
    });
    this.hasSlotController = new HasSlotController(this, "help-text", "label");
    this.hasFocus = false;
    this.title = "";
    this.name = "";
    this.value = "";
    this.size = "medium";
    this.filled = false;
    this.label = "";
    this.helpText = "";
    this.placeholder = "";
    this.rows = 4;
    this.resize = "vertical";
    this.disabled = false;
    this.readonly = false;
    this.form = "";
    this.required = false;
    this.spellcheck = true;
    this.defaultValue = "";
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  connectedCallback() {
    super.connectedCallback();
    this.resizeObserver = new ResizeObserver(() => this.setTextareaHeight());
    this.updateComplete.then(() => {
      this.setTextareaHeight();
      this.resizeObserver.observe(this.input);
    });
  }
  firstUpdated() {
    this.formControlController.updateValidity();
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    if (this.input) {
      (_a = this.resizeObserver) == null ? void 0 : _a.unobserve(this.input);
    }
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleChange() {
    this.value = this.input.value;
    this.setTextareaHeight();
    this.emit("sl-change");
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleInput() {
    this.value = this.input.value;
    this.emit("sl-input");
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  setTextareaHeight() {
    if (this.resize === "auto") {
      this.sizeAdjuster.style.height = `${this.input.clientHeight}px`;
      this.input.style.height = "auto";
      this.input.style.height = `${this.input.scrollHeight}px`;
    } else {
      this.input.style.height = "";
    }
  }
  handleDisabledChange() {
    this.formControlController.setValidity(this.disabled);
  }
  handleRowsChange() {
    this.setTextareaHeight();
  }
  async handleValueChange() {
    await this.updateComplete;
    this.formControlController.updateValidity();
    this.setTextareaHeight();
  }
  /** Sets focus on the textarea. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the textarea. */
  blur() {
    this.input.blur();
  }
  /** Selects all the text in the textarea. */
  select() {
    this.input.select();
  }
  /** Gets or sets the textarea's scroll position. */
  scrollPosition(position) {
    if (position) {
      if (typeof position.top === "number") this.input.scrollTop = position.top;
      if (typeof position.left === "number") this.input.scrollLeft = position.left;
      return void 0;
    }
    return {
      top: this.input.scrollTop,
      left: this.input.scrollTop
    };
  }
  /** Sets the start and end positions of the text selection (0-based). */
  setSelectionRange(selectionStart, selectionEnd, selectionDirection = "none") {
    this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);
  }
  /** Replaces a range of text with a new string. */
  setRangeText(replacement, start, end, selectMode = "preserve") {
    const selectionStart = start != null ? start : this.input.selectionStart;
    const selectionEnd = end != null ? end : this.input.selectionEnd;
    this.input.setRangeText(replacement, selectionStart, selectionEnd, selectMode);
    if (this.value !== this.input.value) {
      this.value = this.input.value;
      this.setTextareaHeight();
    }
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message) {
    this.input.setCustomValidity(message);
    this.formControlController.updateValidity();
  }
  render() {
    const hasLabelSlot = this.hasSlotController.test("label");
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasLabel = this.label ? true : !!hasLabelSlot;
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    return x`
      <div
        part="form-control"
        class=${e$3({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--has-label": hasLabel,
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          part="form-control-label"
          class="form-control__label"
          for="input"
          aria-hidden=${hasLabel ? "false" : "true"}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div
            part="base"
            class=${e$3({
      textarea: true,
      "textarea--small": this.size === "small",
      "textarea--medium": this.size === "medium",
      "textarea--large": this.size === "large",
      "textarea--standard": !this.filled,
      "textarea--filled": this.filled,
      "textarea--disabled": this.disabled,
      "textarea--focused": this.hasFocus,
      "textarea--empty": !this.value,
      "textarea--resize-none": this.resize === "none",
      "textarea--resize-vertical": this.resize === "vertical",
      "textarea--resize-auto": this.resize === "auto"
    })}
          >
            <textarea
              part="textarea"
              id="input"
              class="textarea__control"
              title=${this.title}
              name=${o$6(this.name)}
              .value=${l(this.value)}
              ?disabled=${this.disabled}
              ?readonly=${this.readonly}
              ?required=${this.required}
              placeholder=${o$6(this.placeholder)}
              rows=${o$6(this.rows)}
              minlength=${o$6(this.minlength)}
              maxlength=${o$6(this.maxlength)}
              autocapitalize=${o$6(this.autocapitalize)}
              autocorrect=${o$6(this.autocorrect)}
              ?autofocus=${this.autofocus}
              spellcheck=${o$6(this.spellcheck)}
              enterkeyhint=${o$6(this.enterkeyhint)}
              inputmode=${o$6(this.inputmode)}
              aria-describedby="help-text"
              @change=${this.handleChange}
              @input=${this.handleInput}
              @invalid=${this.handleInvalid}
              @focus=${this.handleFocus}
              @blur=${this.handleBlur}
            ></textarea>
            <!-- This "adjuster" exists to prevent layout shifting. https://github.com/shoelace-style/shoelace/issues/2180 -->
            <div part="textarea-adjuster" class="textarea__size-adjuster" ?hidden=${this.resize !== "auto"}></div>
          </div>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${hasHelpText ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlTextarea.styles = [component_styles_default, form_control_styles_default, textarea_styles_default];
__decorateClass([
  e$7(".textarea__control")
], SlTextarea.prototype, "input", 2);
__decorateClass([
  e$7(".textarea__size-adjuster")
], SlTextarea.prototype, "sizeAdjuster", 2);
__decorateClass([
  r$3()
], SlTextarea.prototype, "hasFocus", 2);
__decorateClass([
  n$6()
], SlTextarea.prototype, "title", 2);
__decorateClass([
  n$6()
], SlTextarea.prototype, "name", 2);
__decorateClass([
  n$6()
], SlTextarea.prototype, "value", 2);
__decorateClass([
  n$6({ reflect: true })
], SlTextarea.prototype, "size", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlTextarea.prototype, "filled", 2);
__decorateClass([
  n$6()
], SlTextarea.prototype, "label", 2);
__decorateClass([
  n$6({ attribute: "help-text" })
], SlTextarea.prototype, "helpText", 2);
__decorateClass([
  n$6()
], SlTextarea.prototype, "placeholder", 2);
__decorateClass([
  n$6({ type: Number })
], SlTextarea.prototype, "rows", 2);
__decorateClass([
  n$6()
], SlTextarea.prototype, "resize", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlTextarea.prototype, "disabled", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlTextarea.prototype, "readonly", 2);
__decorateClass([
  n$6({ reflect: true })
], SlTextarea.prototype, "form", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlTextarea.prototype, "required", 2);
__decorateClass([
  n$6({ type: Number })
], SlTextarea.prototype, "minlength", 2);
__decorateClass([
  n$6({ type: Number })
], SlTextarea.prototype, "maxlength", 2);
__decorateClass([
  n$6()
], SlTextarea.prototype, "autocapitalize", 2);
__decorateClass([
  n$6()
], SlTextarea.prototype, "autocorrect", 2);
__decorateClass([
  n$6()
], SlTextarea.prototype, "autocomplete", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlTextarea.prototype, "autofocus", 2);
__decorateClass([
  n$6()
], SlTextarea.prototype, "enterkeyhint", 2);
__decorateClass([
  n$6({
    type: Boolean,
    converter: {
      // Allow "true|false" attribute values but keep the property boolean
      fromAttribute: (value) => !value || value === "false" ? false : true,
      toAttribute: (value) => value ? "true" : "false"
    }
  })
], SlTextarea.prototype, "spellcheck", 2);
__decorateClass([
  n$6()
], SlTextarea.prototype, "inputmode", 2);
__decorateClass([
  defaultValue()
], SlTextarea.prototype, "defaultValue", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlTextarea.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("rows", { waitUntilFirstUpdate: true })
], SlTextarea.prototype, "handleRowsChange", 1);
__decorateClass([
  watch("value", { waitUntilFirstUpdate: true })
], SlTextarea.prototype, "handleValueChange", 1);

var tagName$Q = "sl-textarea";
SlTextarea.define("sl-textarea");
var reactWrapper$f = o$8({
  tagName: tagName$Q,
  elementClass: SlTextarea,
  react: React$1,
  events: {
    onSlBlur: "sl-blur",
    onSlChange: "sl-change",
    onSlFocus: "sl-focus",
    onSlInput: "sl-input",
    onSlInvalid: "sl-invalid"
  },
  displayName: "SlTextarea"
});
var textarea_default = reactWrapper$f;

// src/components/tooltip/tooltip.styles.ts
var tooltip_styles_default = i$7`
  :host {
    --max-width: 20rem;
    --hide-delay: 0ms;
    --show-delay: 150ms;

    display: contents;
  }

  .tooltip {
    --arrow-size: var(--sl-tooltip-arrow-size);
    --arrow-color: var(--sl-tooltip-background-color);
  }

  .tooltip::part(popup) {
    z-index: var(--sl-z-index-tooltip);
  }

  .tooltip[placement^='top']::part(popup) {
    transform-origin: bottom;
  }

  .tooltip[placement^='bottom']::part(popup) {
    transform-origin: top;
  }

  .tooltip[placement^='left']::part(popup) {
    transform-origin: right;
  }

  .tooltip[placement^='right']::part(popup) {
    transform-origin: left;
  }

  .tooltip__body {
    display: block;
    width: max-content;
    max-width: var(--max-width);
    border-radius: var(--sl-tooltip-border-radius);
    background-color: var(--sl-tooltip-background-color);
    font-family: var(--sl-tooltip-font-family);
    font-size: var(--sl-tooltip-font-size);
    font-weight: var(--sl-tooltip-font-weight);
    line-height: var(--sl-tooltip-line-height);
    text-align: start;
    white-space: normal;
    color: var(--sl-tooltip-color);
    padding: var(--sl-tooltip-padding);
    pointer-events: none;
    user-select: none;
    -webkit-user-select: none;
  }
`;

// src/components/popup/popup.styles.ts
var popup_styles_default = i$7`
  :host {
    --arrow-color: var(--sl-color-neutral-1000);
    --arrow-size: 6px;

    /*
     * These properties are computed to account for the arrow's dimensions after being rotated 45º. The constant
     * 0.7071 is derived from sin(45), which is the diagonal size of the arrow's container after rotating.
     */
    --arrow-size-diagonal: calc(var(--arrow-size) * 0.7071);
    --arrow-padding-offset: calc(var(--arrow-size-diagonal) - var(--arrow-size));

    display: contents;
  }

  .popup {
    position: absolute;
    isolation: isolate;
    max-width: var(--auto-size-available-width, none);
    max-height: var(--auto-size-available-height, none);
  }

  .popup--fixed {
    position: fixed;
  }

  .popup:not(.popup--active) {
    display: none;
  }

  .popup__arrow {
    position: absolute;
    width: calc(var(--arrow-size-diagonal) * 2);
    height: calc(var(--arrow-size-diagonal) * 2);
    rotate: 45deg;
    background: var(--arrow-color);
    z-index: -1;
  }

  /* Hover bridge */
  .popup-hover-bridge:not(.popup-hover-bridge--visible) {
    display: none;
  }

  .popup-hover-bridge {
    position: fixed;
    z-index: calc(var(--sl-z-index-dropdown) - 1);
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    clip-path: polygon(
      var(--hover-bridge-top-left-x, 0) var(--hover-bridge-top-left-y, 0),
      var(--hover-bridge-top-right-x, 0) var(--hover-bridge-top-right-y, 0),
      var(--hover-bridge-bottom-right-x, 0) var(--hover-bridge-bottom-right-y, 0),
      var(--hover-bridge-bottom-left-x, 0) var(--hover-bridge-bottom-left-y, 0)
    );
  }
`;

/**
 * Custom positioning reference element.
 * @see https://floating-ui.com/docs/virtual-elements
 */

const min = Math.min;
const max = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = v => ({
  x: v,
  y: v
});
const oppositeSideMap = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
const oppositeAlignmentMap = {
  start: 'end',
  end: 'start'
};
function clamp$1(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === 'function' ? value(param) : value;
}
function getSide(placement) {
  return placement.split('-')[0];
}
function getAlignment(placement) {
  return placement.split('-')[1];
}
function getOppositeAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}
function getAxisLength(axis) {
  return axis === 'y' ? 'height' : 'width';
}
const yAxisSides = /*#__PURE__*/new Set(['top', 'bottom']);
function getSideAxis(placement) {
  return yAxisSides.has(getSide(placement)) ? 'y' : 'x';
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);
}
const lrPlacement = ['left', 'right'];
const rlPlacement = ['right', 'left'];
const tbPlacement = ['top', 'bottom'];
const btPlacement = ['bottom', 'top'];
function getSideList(side, isStart, rtl) {
  switch (side) {
    case 'top':
    case 'bottom':
      if (rtl) return isStart ? rlPlacement : lrPlacement;
      return isStart ? lrPlacement : rlPlacement;
    case 'left':
    case 'right':
      return isStart ? tbPlacement : btPlacement;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === 'start', rtl);
  if (alignment) {
    list = list.map(side => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== 'number' ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === 'y';
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case 'top':
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case 'bottom':
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case 'right':
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case 'left':
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case 'start':
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case 'end':
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}

/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a given reference element.
 *
 * This export does not have any `platform` interface logic. You will need to
 * write one for the platform you are using Floating UI with.
 */
const computePosition$1 = async (reference, floating, config) => {
  const {
    placement = 'bottom',
    strategy = 'absolute',
    middleware = [],
    platform
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));
  let rects = await platform.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === 'object') {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};

/**
 * Resolves with an object of overflow side offsets that determine how much the
 * element is overflowing a given clipping boundary on each side.
 * - positive = overflowing the boundary by that number of pixels
 * - negative = how many pixels left before it will overflow
 * - 0 = lies flush with the boundary
 * @see https://floating-ui.com/docs/detectOverflow
 */
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = 'clippingAncestors',
    rootBoundary = 'viewport',
    elementContext = 'floating',
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === 'floating' ? 'reference' : 'floating';
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform.getClippingRect({
    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === 'floating' ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));
  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow$1 = options => ({
  name: 'arrow',
  options,
  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform,
      elements,
      middlewareData
    } = state;
    // Since `element` is required, we don't Partial<> the type.
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform.getDimensions(element);
    const isYAxis = axis === 'y';
    const minProp = isYAxis ? 'top' : 'left';
    const maxProp = isYAxis ? 'bottom' : 'right';
    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;

    // DOM platform can return `window` as the `offsetParent`.
    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;

    // If the padding is large enough that it causes the arrow to no longer be
    // centered, modify the padding so that it is centered.
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);

    // Make sure the arrow doesn't overflow the floating element if the center
    // point is outside the floating element's bounds.
    const min$1 = minPadding;
    const max = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset = clamp$1(min$1, center, max);

    // If the reference is small enough that the arrow's padding causes it to
    // to point to nothing for an aligned placement, adjust the offset of the
    // floating element itself. To ensure `shift()` continues to take action,
    // a single reset is performed when this is true.
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset,
        centerOffset: center - offset - alignmentOffset,
        ...(shouldAddOffset && {
          alignmentOffset
        })
      },
      reset: shouldAddOffset
    };
  }
});

/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */
const flip$2 = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'flip',
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = 'bestFit',
        fallbackAxisSideDirection = 'none',
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);

      // If a reset by the arrow was caused due to an alignment offset being
      // added, we should skip any logic now since `flip()` has already done its
      // work.
      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides[0]], overflow[sides[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];

      // One or more sides is overflowing.
      if (!overflows.every(side => side <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements[nextIndex];
        if (nextPlacement) {
          const ignoreCrossAxisOverflow = checkCrossAxis === 'alignment' ? initialSideAxis !== getSideAxis(nextPlacement) : false;
          if (!ignoreCrossAxisOverflow ||
          // We leave the current main axis only if every placement on that axis
          // overflows the main axis.
          overflowsData.every(d => getSideAxis(d.placement) === initialSideAxis ? d.overflows[0] > 0 : true)) {
            // Try next placement and re-run the lifecycle.
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
        }

        // First, find the candidates that fit on the mainAxis side of overflow,
        // then find the placement that fits the best on the main crossAxis side.
        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;

        // Otherwise fallback.
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case 'bestFit':
              {
                var _overflowsData$filter2;
                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {
                  if (hasFallbackAxisSideDirection) {
                    const currentSideAxis = getSideAxis(d.placement);
                    return currentSideAxis === initialSideAxis ||
                    // Create a bias to the `y` side axis due to horizontal
                    // reading directions favoring greater width.
                    currentSideAxis === 'y';
                  }
                  return true;
                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                if (placement) {
                  resetPlacement = placement;
                }
                break;
              }
            case 'initialPlacement':
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};

const originSides = /*#__PURE__*/new Set(['left', 'top']);

// For type backwards-compatibility, the `OffsetOptions` type was also
// Derivable.

async function convertValueToCoords(state, options) {
  const {
    placement,
    platform,
    elements
  } = state;
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === 'y';
  const mainAxisMulti = originSides.has(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);

  // eslint-disable-next-line prefer-const
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === 'number' ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === 'number') {
    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}

/**
 * Modifies the placement by translating the floating element along the
 * specified axes.
 * A number (shorthand for `mainAxis` or distance), or an axes configuration
 * object may be passed.
 * @see https://floating-ui.com/docs/offset
 */
const offset$1 = function (options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: 'offset',
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);

      // If the placement is the same and the arrow caused an alignment offset
      // then we don't need to change the positioning coordinates.
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};

/**
 * Optimizes the visibility of the floating element by shifting it in order to
 * keep it in view when it will overflow the clipping boundary.
 * @see https://floating-ui.com/docs/shift
 */
const shift$1 = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'shift',
    options,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: _ref => {
            let {
              x,
              y
            } = _ref;
            return {
              x,
              y
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === 'y' ? 'top' : 'left';
        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';
        const min = mainAxisCoord + overflow[minSide];
        const max = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp$1(min, mainAxisCoord, max);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === 'y' ? 'top' : 'left';
        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';
        const min = crossAxisCoord + overflow[minSide];
        const max = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp$1(min, crossAxisCoord, max);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y,
          enabled: {
            [mainAxis]: checkMainAxis,
            [crossAxis]: checkCrossAxis
          }
        }
      };
    }
  };
};

/**
 * Provides data that allows you to change the size of the floating element —
 * for instance, prevent it from overflowing the clipping boundary or match the
 * width of the reference element.
 * @see https://floating-ui.com/docs/size
 */
const size$1 = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'size',
    options,
    async fn(state) {
      var _state$middlewareData, _state$middlewareData2;
      const {
        placement,
        rects,
        platform,
        elements
      } = state;
      const {
        apply = () => {},
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === 'y';
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === 'top' || side === 'bottom') {
        heightSide = side;
        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';
      } else {
        widthSide = side;
        heightSide = alignment === 'end' ? 'top' : 'bottom';
      }
      const maximumClippingHeight = height - overflow.top - overflow.bottom;
      const maximumClippingWidth = width - overflow.left - overflow.right;
      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
        availableWidth = maximumClippingWidth;
      }
      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
        availableHeight = maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};

function hasWindow() {
  return typeof window !== 'undefined';
}
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || '').toLowerCase();
  }
  // Mocked nodes in testing environments may not be instances of Node. By
  // returning `#document` an infinite loop won't occur.
  // https://github.com/floating-ui/floating-ui/issues/2317
  return '#document';
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === 'undefined') {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
const invalidOverflowDisplayValues = /*#__PURE__*/new Set(['inline', 'contents']);
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !invalidOverflowDisplayValues.has(display);
}
const tableElements$1 = /*#__PURE__*/new Set(['table', 'td', 'th']);
function isTableElement(element) {
  return tableElements$1.has(getNodeName(element));
}
const topLayerSelectors = [':popover-open', ':modal'];
function isTopLayer(element) {
  return topLayerSelectors.some(selector => {
    try {
      return element.matches(selector);
    } catch (_e) {
      return false;
    }
  });
}
const transformProperties = ['transform', 'translate', 'scale', 'rotate', 'perspective'];
const willChangeValues = ['transform', 'translate', 'scale', 'rotate', 'perspective', 'filter'];
const containValues = ['paint', 'layout', 'strict', 'content'];
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement(elementOrCss) ? getComputedStyle$1(elementOrCss) : elementOrCss;

  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
  // https://drafts.csswg.org/css-transforms-2/#individual-transforms
  return transformProperties.some(value => css[value] ? css[value] !== 'none' : false) || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || willChangeValues.some(value => (css.willChange || '').includes(value)) || containValues.some(value => (css.contain || '').includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === 'undefined' || !CSS.supports) return false;
  return CSS.supports('-webkit-backdrop-filter', 'none');
}
const lastTraversableNodeNames = /*#__PURE__*/new Set(['html', 'body', '#document']);
function isLastTraversableNode(node) {
  return lastTraversableNodeNames.has(getNodeName(node));
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === 'html') {
    return node;
  }
  const result =
  // Step into the shadow DOM of the parent of a slotted node.
  node.assignedSlot ||
  // DOM Element detected.
  node.parentNode ||
  // ShadowRoot detected.
  isShadowRoot(node) && node.host ||
  // Fallback.
  getDocumentElement(node);
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

function getCssDimensions(element) {
  const css = getComputedStyle$1(element);
  // In testing environments, the `width` and `height` properties are empty
  // strings for SVG elements, returning NaN. Fallback to `0` in this case.
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}

function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}

function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;

  // 0, NaN, or Infinity should always fallback to 1.

  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}

const noOffsets = /*#__PURE__*/createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}

function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle$1(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}

// If <html> has a CSS width greater than the viewport, then this will be
// incorrect for RTL.
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}

function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
  if (ignoreScrollbarX === void 0) {
    ignoreScrollbarX = false;
  }
  const htmlRect = documentElement.getBoundingClientRect();
  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 :
  // RTL <body> scrollbar.
  getWindowScrollBarX(documentElement, htmlRect));
  const y = htmlRect.top + scroll.scrollTop;
  return {
    x,
    y
  };
}

function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === 'fixed';
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
  };
}

function getClientRects(element) {
  return Array.from(element.getClientRects());
}

// Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable.
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle$1(body).direction === 'rtl') {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}

const absoluteOrFixed = /*#__PURE__*/new Set(['absolute', 'fixed']);
// Returns the inner client rect, subtracting scrollbars if present.
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === 'viewport') {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === 'document') {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);
}

// A "clipping ancestor" is an `overflow` element with the characteristic of
// clipping (or hiding) child elements. This returns all clipping ancestors
// of the given element up the tree.
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === 'fixed';
  let currentNode = elementIsFixed ? getParentNode(element) : element;

  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && absoluteOrFixed.has(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      // Drop non-containing blocks.
      result = result.filter(ancestor => ancestor !== currentNode);
    } else {
      // Record last containing block for next iteration.
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}

// Gets the maximum area that the element is visible in due to any number of
// clipping ancestors.
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}

function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}

function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === 'fixed';
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);

  // If the <body> scrollbar appears on the left (e.g. RTL systems). Use
  // Firefox with layout.scrollbar.side = 3 in about:config to test this.
  function setLeftRTLScrollbarOffset() {
    offsets.x = getWindowScrollBarX(documentElement);
  }
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      setLeftRTLScrollbarOffset();
    }
  }
  if (isFixed && !isOffsetParentAnElement && documentElement) {
    setLeftRTLScrollbarOffset();
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}

function isStaticPositioned(element) {
  return getComputedStyle$1(element).position === 'static';
}

function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;

  // Firefox returns the <html> element as the offsetParent if it's non-static,
  // while Chrome and Safari return the <body> element. The <body> element must
  // be used to perform the correct calculations even if the <html> element is
  // non-static.
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}

// Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}

const getElementRects = async function (data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};

function isRTL(element) {
  return getComputedStyle$1(element).direction === 'rtl';
}

const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};

function rectsAreEqual(a, b) {
  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;
}

// https://samthor.au/2021/observing-dom/
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          // If the reference is clipped, the ratio is 0. Throttle the refresh
          // to prevent an infinite loop of updates.
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1000);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        // It's possible that even though the ratio is reported as 1, the
        // element is not actually fully within the IntersectionObserver's root
        // area anymore. This can happen under performance constraints. This may
        // be a bug in the browser's IntersectionObserver implementation. To
        // work around this, we compare the element's bounding rect now with
        // what it was at the time we created the IntersectionObserver. If they
        // are not equal then the element moved, so we refresh.
        refresh();
      }
      isFirstUpdate = false;
    }

    // Older browsers don't support a `document` as the root and will throw an
    // error.
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (_e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}

/**
 * Automatically updates the position of the floating element when necessary.
 * Should only be called when the floating element is mounted on the DOM or
 * visible on the screen.
 * @returns cleanup function that should be invoked when the floating element is
 * removed from the DOM or hidden from the screen.
 * @see https://floating-ui.com/docs/autoUpdate
 */
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === 'function',
    layoutShift = typeof IntersectionObserver === 'function',
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];
  ancestors.forEach(ancestor => {
    ancestorScroll && ancestor.addEventListener('scroll', update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener('resize', update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver(_ref => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        // Prevent update loops when using the `size` middleware.
        // https://github.com/floating-ui/floating-ui/issues/1740
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach(ancestor => {
      ancestorScroll && ancestor.removeEventListener('scroll', update);
      ancestorResize && ancestor.removeEventListener('resize', update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}

/**
 * Modifies the placement by translating the floating element along the
 * specified axes.
 * A number (shorthand for `mainAxis` or distance), or an axes configuration
 * object may be passed.
 * @see https://floating-ui.com/docs/offset
 */
const offset = offset$1;

/**
 * Optimizes the visibility of the floating element by shifting it in order to
 * keep it in view when it will overflow the clipping boundary.
 * @see https://floating-ui.com/docs/shift
 */
const shift = shift$1;

/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */
const flip$1 = flip$2;

/**
 * Provides data that allows you to change the size of the floating element —
 * for instance, prevent it from overflowing the clipping boundary or match the
 * width of the reference element.
 * @see https://floating-ui.com/docs/size
 */
const size = size$1;

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow = arrow$1;

/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a given reference element.
 */
const computePosition = (reference, floating, options) => {
  // This caches the expensive `getClippingElementAncestors` function so that
  // multiple lifecycle resets re-use the same result. It only lives for a
  // single call. If other functions become expensive, we can add them as well.
  const cache = new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

function e$2(t){return i$1(t)}function r$1(t){return t.assignedSlot?t.assignedSlot:t.parentNode instanceof ShadowRoot?t.parentNode.host:t.parentNode}function i$1(e){for(let t=e;t;t=r$1(t))if(t instanceof Element&&"none"===getComputedStyle(t).display)return null;for(let n=r$1(e);n;n=r$1(n)){if(!(n instanceof Element))continue;const e=getComputedStyle(n);if("contents"!==e.display){if("static"!==e.position||isContainingBlock(e))return n;if("BODY"===n.tagName)return n}}return null}

function isVirtualElement(e) {
  return e !== null && typeof e === "object" && "getBoundingClientRect" in e && ("contextElement" in e ? e.contextElement instanceof Element : true);
}
var SlPopup = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.active = false;
    this.placement = "top";
    this.strategy = "absolute";
    this.distance = 0;
    this.skidding = 0;
    this.arrow = false;
    this.arrowPlacement = "anchor";
    this.arrowPadding = 10;
    this.flip = false;
    this.flipFallbackPlacements = "";
    this.flipFallbackStrategy = "best-fit";
    this.flipPadding = 0;
    this.shift = false;
    this.shiftPadding = 0;
    this.autoSizePadding = 0;
    this.hoverBridge = false;
    this.updateHoverBridge = () => {
      if (this.hoverBridge && this.anchorEl) {
        const anchorRect = this.anchorEl.getBoundingClientRect();
        const popupRect = this.popup.getBoundingClientRect();
        const isVertical = this.placement.includes("top") || this.placement.includes("bottom");
        let topLeftX = 0;
        let topLeftY = 0;
        let topRightX = 0;
        let topRightY = 0;
        let bottomLeftX = 0;
        let bottomLeftY = 0;
        let bottomRightX = 0;
        let bottomRightY = 0;
        if (isVertical) {
          if (anchorRect.top < popupRect.top) {
            topLeftX = anchorRect.left;
            topLeftY = anchorRect.bottom;
            topRightX = anchorRect.right;
            topRightY = anchorRect.bottom;
            bottomLeftX = popupRect.left;
            bottomLeftY = popupRect.top;
            bottomRightX = popupRect.right;
            bottomRightY = popupRect.top;
          } else {
            topLeftX = popupRect.left;
            topLeftY = popupRect.bottom;
            topRightX = popupRect.right;
            topRightY = popupRect.bottom;
            bottomLeftX = anchorRect.left;
            bottomLeftY = anchorRect.top;
            bottomRightX = anchorRect.right;
            bottomRightY = anchorRect.top;
          }
        } else {
          if (anchorRect.left < popupRect.left) {
            topLeftX = anchorRect.right;
            topLeftY = anchorRect.top;
            topRightX = popupRect.left;
            topRightY = popupRect.top;
            bottomLeftX = anchorRect.right;
            bottomLeftY = anchorRect.bottom;
            bottomRightX = popupRect.left;
            bottomRightY = popupRect.bottom;
          } else {
            topLeftX = popupRect.right;
            topLeftY = popupRect.top;
            topRightX = anchorRect.left;
            topRightY = anchorRect.top;
            bottomLeftX = popupRect.right;
            bottomLeftY = popupRect.bottom;
            bottomRightX = anchorRect.left;
            bottomRightY = anchorRect.bottom;
          }
        }
        this.style.setProperty("--hover-bridge-top-left-x", `${topLeftX}px`);
        this.style.setProperty("--hover-bridge-top-left-y", `${topLeftY}px`);
        this.style.setProperty("--hover-bridge-top-right-x", `${topRightX}px`);
        this.style.setProperty("--hover-bridge-top-right-y", `${topRightY}px`);
        this.style.setProperty("--hover-bridge-bottom-left-x", `${bottomLeftX}px`);
        this.style.setProperty("--hover-bridge-bottom-left-y", `${bottomLeftY}px`);
        this.style.setProperty("--hover-bridge-bottom-right-x", `${bottomRightX}px`);
        this.style.setProperty("--hover-bridge-bottom-right-y", `${bottomRightY}px`);
      }
    };
  }
  async connectedCallback() {
    super.connectedCallback();
    await this.updateComplete;
    this.start();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.stop();
  }
  async updated(changedProps) {
    super.updated(changedProps);
    if (changedProps.has("active")) {
      if (this.active) {
        this.start();
      } else {
        this.stop();
      }
    }
    if (changedProps.has("anchor")) {
      this.handleAnchorChange();
    }
    if (this.active) {
      await this.updateComplete;
      this.reposition();
    }
  }
  async handleAnchorChange() {
    await this.stop();
    if (this.anchor && typeof this.anchor === "string") {
      const root = this.getRootNode();
      this.anchorEl = root.getElementById(this.anchor);
    } else if (this.anchor instanceof Element || isVirtualElement(this.anchor)) {
      this.anchorEl = this.anchor;
    } else {
      this.anchorEl = this.querySelector('[slot="anchor"]');
    }
    if (this.anchorEl instanceof HTMLSlotElement) {
      this.anchorEl = this.anchorEl.assignedElements({ flatten: true })[0];
    }
    if (this.anchorEl && this.active) {
      this.start();
    }
  }
  start() {
    if (!this.anchorEl || !this.active) {
      return;
    }
    this.cleanup = autoUpdate(this.anchorEl, this.popup, () => {
      this.reposition();
    });
  }
  async stop() {
    return new Promise((resolve) => {
      if (this.cleanup) {
        this.cleanup();
        this.cleanup = void 0;
        this.removeAttribute("data-current-placement");
        this.style.removeProperty("--auto-size-available-width");
        this.style.removeProperty("--auto-size-available-height");
        requestAnimationFrame(() => resolve());
      } else {
        resolve();
      }
    });
  }
  /** Forces the popup to recalculate and reposition itself. */
  reposition() {
    if (!this.active || !this.anchorEl) {
      return;
    }
    const middleware = [
      // The offset middleware goes first
      offset({ mainAxis: this.distance, crossAxis: this.skidding })
    ];
    if (this.sync) {
      middleware.push(
        size({
          apply: ({ rects }) => {
            const syncWidth = this.sync === "width" || this.sync === "both";
            const syncHeight = this.sync === "height" || this.sync === "both";
            this.popup.style.width = syncWidth ? `${rects.reference.width}px` : "";
            this.popup.style.height = syncHeight ? `${rects.reference.height}px` : "";
          }
        })
      );
    } else {
      this.popup.style.width = "";
      this.popup.style.height = "";
    }
    if (this.flip) {
      middleware.push(
        flip$1({
          boundary: this.flipBoundary,
          // @ts-expect-error - We're converting a string attribute to an array here
          fallbackPlacements: this.flipFallbackPlacements,
          fallbackStrategy: this.flipFallbackStrategy === "best-fit" ? "bestFit" : "initialPlacement",
          padding: this.flipPadding
        })
      );
    }
    if (this.shift) {
      middleware.push(
        shift({
          boundary: this.shiftBoundary,
          padding: this.shiftPadding
        })
      );
    }
    if (this.autoSize) {
      middleware.push(
        size({
          boundary: this.autoSizeBoundary,
          padding: this.autoSizePadding,
          apply: ({ availableWidth, availableHeight }) => {
            if (this.autoSize === "vertical" || this.autoSize === "both") {
              this.style.setProperty("--auto-size-available-height", `${availableHeight}px`);
            } else {
              this.style.removeProperty("--auto-size-available-height");
            }
            if (this.autoSize === "horizontal" || this.autoSize === "both") {
              this.style.setProperty("--auto-size-available-width", `${availableWidth}px`);
            } else {
              this.style.removeProperty("--auto-size-available-width");
            }
          }
        })
      );
    } else {
      this.style.removeProperty("--auto-size-available-width");
      this.style.removeProperty("--auto-size-available-height");
    }
    if (this.arrow) {
      middleware.push(
        arrow({
          element: this.arrowEl,
          padding: this.arrowPadding
        })
      );
    }
    const getOffsetParent = this.strategy === "absolute" ? (element) => platform.getOffsetParent(element, e$2) : platform.getOffsetParent;
    computePosition(this.anchorEl, this.popup, {
      placement: this.placement,
      middleware,
      strategy: this.strategy,
      platform: __spreadProps(__spreadValues({}, platform), {
        getOffsetParent
      })
    }).then(({ x, y, middlewareData, placement }) => {
      const isRtl = this.localize.dir() === "rtl";
      const staticSide = { top: "bottom", right: "left", bottom: "top", left: "right" }[placement.split("-")[0]];
      this.setAttribute("data-current-placement", placement);
      Object.assign(this.popup.style, {
        left: `${x}px`,
        top: `${y}px`
      });
      if (this.arrow) {
        const arrowX = middlewareData.arrow.x;
        const arrowY = middlewareData.arrow.y;
        let top = "";
        let right = "";
        let bottom = "";
        let left = "";
        if (this.arrowPlacement === "start") {
          const value = typeof arrowX === "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "";
          top = typeof arrowY === "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "";
          right = isRtl ? value : "";
          left = isRtl ? "" : value;
        } else if (this.arrowPlacement === "end") {
          const value = typeof arrowX === "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "";
          right = isRtl ? "" : value;
          left = isRtl ? value : "";
          bottom = typeof arrowY === "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "";
        } else if (this.arrowPlacement === "center") {
          left = typeof arrowX === "number" ? `calc(50% - var(--arrow-size-diagonal))` : "";
          top = typeof arrowY === "number" ? `calc(50% - var(--arrow-size-diagonal))` : "";
        } else {
          left = typeof arrowX === "number" ? `${arrowX}px` : "";
          top = typeof arrowY === "number" ? `${arrowY}px` : "";
        }
        Object.assign(this.arrowEl.style, {
          top,
          right,
          bottom,
          left,
          [staticSide]: "calc(var(--arrow-size-diagonal) * -1)"
        });
      }
    });
    requestAnimationFrame(() => this.updateHoverBridge());
    this.emit("sl-reposition");
  }
  render() {
    return x`
      <slot name="anchor" @slotchange=${this.handleAnchorChange}></slot>

      <span
        part="hover-bridge"
        class=${e$3({
      "popup-hover-bridge": true,
      "popup-hover-bridge--visible": this.hoverBridge && this.active
    })}
      ></span>

      <div
        part="popup"
        class=${e$3({
      popup: true,
      "popup--active": this.active,
      "popup--fixed": this.strategy === "fixed",
      "popup--has-arrow": this.arrow
    })}
      >
        <slot></slot>
        ${this.arrow ? x`<div part="arrow" class="popup__arrow" role="presentation"></div>` : ""}
      </div>
    `;
  }
};
SlPopup.styles = [component_styles_default, popup_styles_default];
__decorateClass([
  e$7(".popup")
], SlPopup.prototype, "popup", 2);
__decorateClass([
  e$7(".popup__arrow")
], SlPopup.prototype, "arrowEl", 2);
__decorateClass([
  n$6()
], SlPopup.prototype, "anchor", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlPopup.prototype, "active", 2);
__decorateClass([
  n$6({ reflect: true })
], SlPopup.prototype, "placement", 2);
__decorateClass([
  n$6({ reflect: true })
], SlPopup.prototype, "strategy", 2);
__decorateClass([
  n$6({ type: Number })
], SlPopup.prototype, "distance", 2);
__decorateClass([
  n$6({ type: Number })
], SlPopup.prototype, "skidding", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlPopup.prototype, "arrow", 2);
__decorateClass([
  n$6({ attribute: "arrow-placement" })
], SlPopup.prototype, "arrowPlacement", 2);
__decorateClass([
  n$6({ attribute: "arrow-padding", type: Number })
], SlPopup.prototype, "arrowPadding", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlPopup.prototype, "flip", 2);
__decorateClass([
  n$6({
    attribute: "flip-fallback-placements",
    converter: {
      fromAttribute: (value) => {
        return value.split(" ").map((p) => p.trim()).filter((p) => p !== "");
      },
      toAttribute: (value) => {
        return value.join(" ");
      }
    }
  })
], SlPopup.prototype, "flipFallbackPlacements", 2);
__decorateClass([
  n$6({ attribute: "flip-fallback-strategy" })
], SlPopup.prototype, "flipFallbackStrategy", 2);
__decorateClass([
  n$6({ type: Object })
], SlPopup.prototype, "flipBoundary", 2);
__decorateClass([
  n$6({ attribute: "flip-padding", type: Number })
], SlPopup.prototype, "flipPadding", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlPopup.prototype, "shift", 2);
__decorateClass([
  n$6({ type: Object })
], SlPopup.prototype, "shiftBoundary", 2);
__decorateClass([
  n$6({ attribute: "shift-padding", type: Number })
], SlPopup.prototype, "shiftPadding", 2);
__decorateClass([
  n$6({ attribute: "auto-size" })
], SlPopup.prototype, "autoSize", 2);
__decorateClass([
  n$6()
], SlPopup.prototype, "sync", 2);
__decorateClass([
  n$6({ type: Object })
], SlPopup.prototype, "autoSizeBoundary", 2);
__decorateClass([
  n$6({ attribute: "auto-size-padding", type: Number })
], SlPopup.prototype, "autoSizePadding", 2);
__decorateClass([
  n$6({ attribute: "hover-bridge", type: Boolean })
], SlPopup.prototype, "hoverBridge", 2);

// src/utilities/animation-registry.ts
var defaultAnimationRegistry = /* @__PURE__ */ new Map();
var customAnimationRegistry = /* @__PURE__ */ new WeakMap();
function ensureAnimation(animation) {
  return animation != null ? animation : { keyframes: [], options: { duration: 0 } };
}
function getLogicalAnimation(animation, dir) {
  if (dir.toLowerCase() === "rtl") {
    return {
      keyframes: animation.rtlKeyframes || animation.keyframes,
      options: animation.options
    };
  }
  return animation;
}
function setDefaultAnimation(animationName, animation) {
  defaultAnimationRegistry.set(animationName, ensureAnimation(animation));
}
function getAnimation(el, animationName, options) {
  const customAnimation = customAnimationRegistry.get(el);
  if (customAnimation == null ? void 0 : customAnimation[animationName]) {
    return getLogicalAnimation(customAnimation[animationName], options.dir);
  }
  const defaultAnimation = defaultAnimationRegistry.get(animationName);
  if (defaultAnimation) {
    return getLogicalAnimation(defaultAnimation, options.dir);
  }
  return {
    keyframes: [],
    options: { duration: 0 }
  };
}

// src/internal/event.ts
function waitForEvent(el, eventName) {
  return new Promise((resolve) => {
    function done(event) {
      if (event.target === el) {
        el.removeEventListener(eventName, done);
        resolve();
      }
    }
    el.addEventListener(eventName, done);
  });
}

// src/internal/animate.ts
function animateTo(el, keyframes, options) {
  return new Promise((resolve) => {
    if ((options == null ? void 0 : options.duration) === Infinity) {
      throw new Error("Promise-based animations must be finite.");
    }
    const animation = el.animate(keyframes, __spreadProps(__spreadValues({}, options), {
      duration: prefersReducedMotion() ? 0 : options.duration
    }));
    animation.addEventListener("cancel", resolve, { once: true });
    animation.addEventListener("finish", resolve, { once: true });
  });
}
function parseDuration(delay) {
  delay = delay.toString().toLowerCase();
  if (delay.indexOf("ms") > -1) {
    return parseFloat(delay);
  }
  if (delay.indexOf("s") > -1) {
    return parseFloat(delay) * 1e3;
  }
  return parseFloat(delay);
}
function prefersReducedMotion() {
  const query = window.matchMedia("(prefers-reduced-motion: reduce)");
  return query.matches;
}
function stopAnimations(el) {
  return Promise.all(
    el.getAnimations().map((animation) => {
      return new Promise((resolve) => {
        animation.cancel();
        requestAnimationFrame(resolve);
      });
    })
  );
}
function shimKeyframesHeightAuto(keyframes, calculatedHeight) {
  return keyframes.map((keyframe) => __spreadProps(__spreadValues({}, keyframe), {
    height: keyframe.height === "auto" ? `${calculatedHeight}px` : keyframe.height
  }));
}

var SlTooltip = class extends ShoelaceElement {
  constructor() {
    super();
    this.localize = new LocalizeController(this);
    this.content = "";
    this.placement = "top";
    this.disabled = false;
    this.distance = 8;
    this.open = false;
    this.skidding = 0;
    this.trigger = "hover focus";
    this.hoist = false;
    this.handleBlur = () => {
      if (this.hasTrigger("focus")) {
        this.hide();
      }
    };
    this.handleClick = () => {
      if (this.hasTrigger("click")) {
        if (this.open) {
          this.hide();
        } else {
          this.show();
        }
      }
    };
    this.handleFocus = () => {
      if (this.hasTrigger("focus")) {
        this.show();
      }
    };
    this.handleDocumentKeyDown = (event) => {
      if (event.key === "Escape") {
        event.stopPropagation();
        this.hide();
      }
    };
    this.handleMouseOver = () => {
      if (this.hasTrigger("hover")) {
        const delay = parseDuration(getComputedStyle(this).getPropertyValue("--show-delay"));
        clearTimeout(this.hoverTimeout);
        this.hoverTimeout = window.setTimeout(() => this.show(), delay);
      }
    };
    this.handleMouseOut = () => {
      if (this.hasTrigger("hover")) {
        const delay = parseDuration(getComputedStyle(this).getPropertyValue("--hide-delay"));
        clearTimeout(this.hoverTimeout);
        this.hoverTimeout = window.setTimeout(() => this.hide(), delay);
      }
    };
    this.addEventListener("blur", this.handleBlur, true);
    this.addEventListener("focus", this.handleFocus, true);
    this.addEventListener("click", this.handleClick);
    this.addEventListener("mouseover", this.handleMouseOver);
    this.addEventListener("mouseout", this.handleMouseOut);
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
  }
  firstUpdated() {
    this.body.hidden = !this.open;
    if (this.open) {
      this.popup.active = true;
      this.popup.reposition();
    }
  }
  hasTrigger(triggerType) {
    const triggers = this.trigger.split(" ");
    return triggers.includes(triggerType);
  }
  async handleOpenChange() {
    var _a, _b;
    if (this.open) {
      if (this.disabled) {
        return;
      }
      this.emit("sl-show");
      if ("CloseWatcher" in window) {
        (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
        this.closeWatcher = new CloseWatcher();
        this.closeWatcher.onclose = () => {
          this.hide();
        };
      } else {
        document.addEventListener("keydown", this.handleDocumentKeyDown);
      }
      await stopAnimations(this.body);
      this.body.hidden = false;
      this.popup.active = true;
      const { keyframes, options } = getAnimation(this, "tooltip.show", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      this.popup.reposition();
      this.emit("sl-after-show");
    } else {
      this.emit("sl-hide");
      (_b = this.closeWatcher) == null ? void 0 : _b.destroy();
      document.removeEventListener("keydown", this.handleDocumentKeyDown);
      await stopAnimations(this.body);
      const { keyframes, options } = getAnimation(this, "tooltip.hide", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      this.popup.active = false;
      this.body.hidden = true;
      this.emit("sl-after-hide");
    }
  }
  async handleOptionsChange() {
    if (this.hasUpdated) {
      await this.updateComplete;
      this.popup.reposition();
    }
  }
  handleDisabledChange() {
    if (this.disabled && this.open) {
      this.hide();
    }
  }
  /** Shows the tooltip. */
  async show() {
    if (this.open) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the tooltip */
  async hide() {
    if (!this.open) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  //
  // NOTE: Tooltip is a bit unique in that we're using aria-live instead of aria-labelledby to trick screen readers into
  // announcing the content. It works really well, but it violates an accessibility rule. We're also adding the
  // aria-describedby attribute to a slot, which is required by <sl-popup> to correctly locate the first assigned
  // element, otherwise positioning is incorrect.
  //
  render() {
    return x`
      <sl-popup
        part="base"
        exportparts="
          popup:base__popup,
          arrow:base__arrow
        "
        class=${e$3({
      tooltip: true,
      "tooltip--open": this.open
    })}
        placement=${this.placement}
        distance=${this.distance}
        skidding=${this.skidding}
        strategy=${this.hoist ? "fixed" : "absolute"}
        flip
        shift
        arrow
        hover-bridge
      >
        ${""}
        <slot slot="anchor" aria-describedby="tooltip"></slot>

        ${""}
        <div part="body" id="tooltip" class="tooltip__body" role="tooltip" aria-live=${this.open ? "polite" : "off"}>
          <slot name="content">${this.content}</slot>
        </div>
      </sl-popup>
    `;
  }
};
SlTooltip.styles = [component_styles_default, tooltip_styles_default];
SlTooltip.dependencies = { "sl-popup": SlPopup };
__decorateClass([
  e$7("slot:not([name])")
], SlTooltip.prototype, "defaultSlot", 2);
__decorateClass([
  e$7(".tooltip__body")
], SlTooltip.prototype, "body", 2);
__decorateClass([
  e$7("sl-popup")
], SlTooltip.prototype, "popup", 2);
__decorateClass([
  n$6()
], SlTooltip.prototype, "content", 2);
__decorateClass([
  n$6()
], SlTooltip.prototype, "placement", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlTooltip.prototype, "disabled", 2);
__decorateClass([
  n$6({ type: Number })
], SlTooltip.prototype, "distance", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlTooltip.prototype, "open", 2);
__decorateClass([
  n$6({ type: Number })
], SlTooltip.prototype, "skidding", 2);
__decorateClass([
  n$6()
], SlTooltip.prototype, "trigger", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlTooltip.prototype, "hoist", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlTooltip.prototype, "handleOpenChange", 1);
__decorateClass([
  watch(["content", "distance", "hoist", "placement", "skidding"])
], SlTooltip.prototype, "handleOptionsChange", 1);
__decorateClass([
  watch("disabled")
], SlTooltip.prototype, "handleDisabledChange", 1);
setDefaultAnimation("tooltip.show", {
  keyframes: [
    { opacity: 0, scale: 0.8 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 150, easing: "ease" }
});
setDefaultAnimation("tooltip.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.8 }
  ],
  options: { duration: 150, easing: "ease" }
});

var tagName$P = "sl-tooltip";
SlTooltip.define("sl-tooltip");
var reactWrapper$e = o$8({
  tagName: tagName$P,
  elementClass: SlTooltip,
  react: React$1,
  events: {
    onSlShow: "sl-show",
    onSlAfterShow: "sl-after-show",
    onSlHide: "sl-hide",
    onSlAfterHide: "sl-after-hide"
  },
  displayName: "SlTooltip"
});
var tooltip_default = reactWrapper$e;

// src/components/tree-item/tree-item.styles.ts
var tree_item_styles_default = i$7`
  :host {
    display: block;
    outline: 0;
    z-index: 0;
  }

  :host(:focus) {
    outline: none;
  }

  slot:not([name])::slotted(sl-icon) {
    margin-inline-end: var(--sl-spacing-x-small);
  }

  .tree-item {
    position: relative;
    display: flex;
    align-items: stretch;
    flex-direction: column;
    color: var(--sl-color-neutral-700);
    cursor: pointer;
    user-select: none;
    -webkit-user-select: none;
  }

  .tree-item__checkbox {
    pointer-events: none;
  }

  .tree-item__expand-button,
  .tree-item__checkbox,
  .tree-item__label {
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    line-height: var(--sl-line-height-dense);
    letter-spacing: var(--sl-letter-spacing-normal);
  }

  .tree-item__checkbox::part(base) {
    display: flex;
    align-items: center;
  }

  .tree-item__indentation {
    display: block;
    width: 1em;
    flex-shrink: 0;
  }

  .tree-item__expand-button {
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: content-box;
    color: var(--sl-color-neutral-500);
    padding: var(--sl-spacing-x-small);
    width: 1rem;
    height: 1rem;
    flex-shrink: 0;
    cursor: pointer;
  }

  .tree-item__expand-button {
    transition: var(--sl-transition-medium) rotate ease;
  }

  .tree-item--expanded .tree-item__expand-button {
    rotate: 90deg;
  }

  .tree-item--expanded.tree-item--rtl .tree-item__expand-button {
    rotate: -90deg;
  }

  .tree-item--expanded slot[name='expand-icon'],
  .tree-item:not(.tree-item--expanded) slot[name='collapse-icon'] {
    display: none;
  }

  .tree-item:not(.tree-item--has-expand-button) .tree-item__expand-icon-slot {
    display: none;
  }

  .tree-item__expand-button--visible {
    cursor: pointer;
  }

  .tree-item__item {
    display: flex;
    align-items: center;
    border-inline-start: solid 3px transparent;
  }

  .tree-item--disabled .tree-item__item {
    opacity: 0.5;
    outline: none;
    cursor: not-allowed;
  }

  :host(:focus-visible) .tree-item__item {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
    z-index: 2;
  }

  :host(:not([aria-disabled='true'])) .tree-item--selected .tree-item__item {
    background-color: var(--sl-color-neutral-100);
    border-inline-start-color: var(--sl-color-primary-600);
  }

  :host(:not([aria-disabled='true'])) .tree-item__expand-button {
    color: var(--sl-color-neutral-600);
  }

  .tree-item__label {
    display: flex;
    align-items: center;
    transition: var(--sl-transition-fast) color;
  }

  .tree-item__children {
    display: block;
    font-size: calc(1em + var(--indent-size, var(--sl-spacing-medium)));
  }

  /* Indentation lines */
  .tree-item__children {
    position: relative;
  }

  .tree-item__children::before {
    content: '';
    position: absolute;
    top: var(--indent-guide-offset);
    bottom: var(--indent-guide-offset);
    left: calc(1em - (var(--indent-guide-width) / 2) - 1px);
    border-inline-end: var(--indent-guide-width) var(--indent-guide-style) var(--indent-guide-color);
    z-index: 1;
  }

  .tree-item--rtl .tree-item__children::before {
    left: auto;
    right: 1em;
  }

  @media (forced-colors: active) {
    :host(:not([aria-disabled='true'])) .tree-item--selected .tree-item__item {
      outline: dashed 1px SelectedItem;
    }
  }
`;

// src/components/checkbox/checkbox.styles.ts
var checkbox_styles_default = i$7`
  :host {
    display: inline-block;
  }

  .checkbox {
    position: relative;
    display: inline-flex;
    align-items: flex-start;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    color: var(--sl-input-label-color);
    vertical-align: middle;
    cursor: pointer;
  }

  .checkbox--small {
    --toggle-size: var(--sl-toggle-size-small);
    font-size: var(--sl-input-font-size-small);
  }

  .checkbox--medium {
    --toggle-size: var(--sl-toggle-size-medium);
    font-size: var(--sl-input-font-size-medium);
  }

  .checkbox--large {
    --toggle-size: var(--sl-toggle-size-large);
    font-size: var(--sl-input-font-size-large);
  }

  .checkbox__control {
    flex: 0 0 auto;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--toggle-size);
    height: var(--toggle-size);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
    border-radius: 2px;
    background-color: var(--sl-input-background-color);
    color: var(--sl-color-neutral-0);
    transition:
      var(--sl-transition-fast) border-color,
      var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) box-shadow;
  }

  .checkbox__input {
    position: absolute;
    opacity: 0;
    padding: 0;
    margin: 0;
    pointer-events: none;
  }

  .checkbox__checked-icon,
  .checkbox__indeterminate-icon {
    display: inline-flex;
    width: var(--toggle-size);
    height: var(--toggle-size);
  }

  /* Hover */
  .checkbox:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__control:hover {
    border-color: var(--sl-input-border-color-hover);
    background-color: var(--sl-input-background-color-hover);
  }

  /* Focus */
  .checkbox:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__input:focus-visible ~ .checkbox__control {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  /* Checked/indeterminate */
  .checkbox--checked .checkbox__control,
  .checkbox--indeterminate .checkbox__control {
    border-color: var(--sl-color-primary-600);
    background-color: var(--sl-color-primary-600);
  }

  /* Checked/indeterminate + hover */
  .checkbox.checkbox--checked:not(.checkbox--disabled) .checkbox__control:hover,
  .checkbox.checkbox--indeterminate:not(.checkbox--disabled) .checkbox__control:hover {
    border-color: var(--sl-color-primary-500);
    background-color: var(--sl-color-primary-500);
  }

  /* Checked/indeterminate + focus */
  .checkbox.checkbox--checked:not(.checkbox--disabled) .checkbox__input:focus-visible ~ .checkbox__control,
  .checkbox.checkbox--indeterminate:not(.checkbox--disabled) .checkbox__input:focus-visible ~ .checkbox__control {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  /* Disabled */
  .checkbox--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .checkbox__label {
    display: inline-block;
    color: var(--sl-input-label-color);
    line-height: var(--toggle-size);
    margin-inline-start: 0.5em;
    user-select: none;
    -webkit-user-select: none;
  }

  :host([required]) .checkbox__label::after {
    content: var(--sl-input-required-content);
    color: var(--sl-input-required-content-color);
    margin-inline-start: var(--sl-input-required-content-offset);
  }
`;

var SlCheckbox = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      value: (control) => control.checked ? control.value || "on" : void 0,
      defaultValue: (control) => control.defaultChecked,
      setValue: (control, checked) => control.checked = checked
    });
    this.hasSlotController = new HasSlotController(this, "help-text");
    this.hasFocus = false;
    this.title = "";
    this.name = "";
    this.size = "medium";
    this.disabled = false;
    this.checked = false;
    this.indeterminate = false;
    this.defaultChecked = false;
    this.form = "";
    this.required = false;
    this.helpText = "";
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  firstUpdated() {
    this.formControlController.updateValidity();
  }
  handleClick() {
    this.checked = !this.checked;
    this.indeterminate = false;
    this.emit("sl-change");
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleInput() {
    this.emit("sl-input");
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleDisabledChange() {
    this.formControlController.setValidity(this.disabled);
  }
  handleStateChange() {
    this.input.checked = this.checked;
    this.input.indeterminate = this.indeterminate;
    this.formControlController.updateValidity();
  }
  /** Simulates a click on the checkbox. */
  click() {
    this.input.click();
  }
  /** Sets focus on the checkbox. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the checkbox. */
  blur() {
    this.input.blur();
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /**
   * Sets a custom validation message. The value provided will be shown to the user when the form is submitted. To clear
   * the custom validation message, call this method with an empty string.
   */
  setCustomValidity(message) {
    this.input.setCustomValidity(message);
    this.formControlController.updateValidity();
  }
  render() {
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    return x`
      <div
        class=${e$3({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          part="base"
          class=${e$3({
      checkbox: true,
      "checkbox--checked": this.checked,
      "checkbox--disabled": this.disabled,
      "checkbox--focused": this.hasFocus,
      "checkbox--indeterminate": this.indeterminate,
      "checkbox--small": this.size === "small",
      "checkbox--medium": this.size === "medium",
      "checkbox--large": this.size === "large"
    })}
        >
          <input
            class="checkbox__input"
            type="checkbox"
            title=${this.title}
            name=${this.name}
            value=${o$6(this.value)}
            .indeterminate=${l(this.indeterminate)}
            .checked=${l(this.checked)}
            .disabled=${this.disabled}
            .required=${this.required}
            aria-checked=${this.checked ? "true" : "false"}
            aria-describedby="help-text"
            @click=${this.handleClick}
            @input=${this.handleInput}
            @invalid=${this.handleInvalid}
            @blur=${this.handleBlur}
            @focus=${this.handleFocus}
          />

          <span
            part="control${this.checked ? " control--checked" : ""}${this.indeterminate ? " control--indeterminate" : ""}"
            class="checkbox__control"
          >
            ${this.checked ? x`
                  <sl-icon part="checked-icon" class="checkbox__checked-icon" library="system" name="check"></sl-icon>
                ` : ""}
            ${!this.checked && this.indeterminate ? x`
                  <sl-icon
                    part="indeterminate-icon"
                    class="checkbox__indeterminate-icon"
                    library="system"
                    name="indeterminate"
                  ></sl-icon>
                ` : ""}
          </span>

          <div part="label" class="checkbox__label">
            <slot></slot>
          </div>
        </label>

        <div
          aria-hidden=${hasHelpText ? "false" : "true"}
          class="form-control__help-text"
          id="help-text"
          part="form-control-help-text"
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlCheckbox.styles = [component_styles_default, form_control_styles_default, checkbox_styles_default];
SlCheckbox.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e$7('input[type="checkbox"]')
], SlCheckbox.prototype, "input", 2);
__decorateClass([
  r$3()
], SlCheckbox.prototype, "hasFocus", 2);
__decorateClass([
  n$6()
], SlCheckbox.prototype, "title", 2);
__decorateClass([
  n$6()
], SlCheckbox.prototype, "name", 2);
__decorateClass([
  n$6()
], SlCheckbox.prototype, "value", 2);
__decorateClass([
  n$6({ reflect: true })
], SlCheckbox.prototype, "size", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlCheckbox.prototype, "disabled", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlCheckbox.prototype, "checked", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlCheckbox.prototype, "indeterminate", 2);
__decorateClass([
  defaultValue("checked")
], SlCheckbox.prototype, "defaultChecked", 2);
__decorateClass([
  n$6({ reflect: true })
], SlCheckbox.prototype, "form", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlCheckbox.prototype, "required", 2);
__decorateClass([
  n$6({ attribute: "help-text" })
], SlCheckbox.prototype, "helpText", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlCheckbox.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch(["checked", "indeterminate"], { waitUntilFirstUpdate: true })
], SlCheckbox.prototype, "handleStateChange", 1);

// src/components/spinner/spinner.styles.ts
var spinner_styles_default = i$7`
  :host {
    --track-width: 2px;
    --track-color: rgb(128 128 128 / 25%);
    --indicator-color: var(--sl-color-primary-600);
    --speed: 2s;

    display: inline-flex;
    width: 1em;
    height: 1em;
    flex: none;
  }

  .spinner {
    flex: 1 1 auto;
    height: 100%;
    width: 100%;
  }

  .spinner__track,
  .spinner__indicator {
    fill: none;
    stroke-width: var(--track-width);
    r: calc(0.5em - var(--track-width) / 2);
    cx: 0.5em;
    cy: 0.5em;
    transform-origin: 50% 50%;
  }

  .spinner__track {
    stroke: var(--track-color);
    transform-origin: 0% 0%;
  }

  .spinner__indicator {
    stroke: var(--indicator-color);
    stroke-linecap: round;
    stroke-dasharray: 150% 75%;
    animation: spin var(--speed) linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
      stroke-dasharray: 0.05em, 3em;
    }

    50% {
      transform: rotate(450deg);
      stroke-dasharray: 1.375em, 1.375em;
    }

    100% {
      transform: rotate(1080deg);
      stroke-dasharray: 0.05em, 3em;
    }
  }
`;

var SlSpinner = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
  }
  render() {
    return x`
      <svg part="base" class="spinner" role="progressbar" aria-label=${this.localize.term("loading")}>
        <circle class="spinner__track"></circle>
        <circle class="spinner__indicator"></circle>
      </svg>
    `;
  }
};
SlSpinner.styles = [component_styles_default, spinner_styles_default];

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function n$3(n,r,t){return n?r(n):t?.(n)}

var _SlTreeItem = class _SlTreeItem extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.indeterminate = false;
    this.isLeaf = false;
    this.loading = false;
    this.selectable = false;
    this.expanded = false;
    this.selected = false;
    this.disabled = false;
    this.lazy = false;
  }
  static isTreeItem(node) {
    return node instanceof Element && node.getAttribute("role") === "treeitem";
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "treeitem");
    this.setAttribute("tabindex", "-1");
    if (this.isNestedItem()) {
      this.slot = "children";
    }
  }
  firstUpdated() {
    this.childrenContainer.hidden = !this.expanded;
    this.childrenContainer.style.height = this.expanded ? "auto" : "0";
    this.isLeaf = !this.lazy && this.getChildrenItems().length === 0;
    this.handleExpandedChange();
  }
  async animateCollapse() {
    this.emit("sl-collapse");
    await stopAnimations(this.childrenContainer);
    const { keyframes, options } = getAnimation(this, "tree-item.collapse", { dir: this.localize.dir() });
    await animateTo(
      this.childrenContainer,
      shimKeyframesHeightAuto(keyframes, this.childrenContainer.scrollHeight),
      options
    );
    this.childrenContainer.hidden = true;
    this.emit("sl-after-collapse");
  }
  // Checks whether the item is nested into an item
  isNestedItem() {
    const parent = this.parentElement;
    return !!parent && _SlTreeItem.isTreeItem(parent);
  }
  handleChildrenSlotChange() {
    this.loading = false;
    this.isLeaf = !this.lazy && this.getChildrenItems().length === 0;
  }
  willUpdate(changedProperties) {
    if (changedProperties.has("selected") && !changedProperties.has("indeterminate")) {
      this.indeterminate = false;
    }
  }
  async animateExpand() {
    this.emit("sl-expand");
    await stopAnimations(this.childrenContainer);
    this.childrenContainer.hidden = false;
    const { keyframes, options } = getAnimation(this, "tree-item.expand", { dir: this.localize.dir() });
    await animateTo(
      this.childrenContainer,
      shimKeyframesHeightAuto(keyframes, this.childrenContainer.scrollHeight),
      options
    );
    this.childrenContainer.style.height = "auto";
    this.emit("sl-after-expand");
  }
  handleLoadingChange() {
    this.setAttribute("aria-busy", this.loading ? "true" : "false");
    if (!this.loading) {
      this.animateExpand();
    }
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  handleSelectedChange() {
    this.setAttribute("aria-selected", this.selected ? "true" : "false");
  }
  handleExpandedChange() {
    if (!this.isLeaf) {
      this.setAttribute("aria-expanded", this.expanded ? "true" : "false");
    } else {
      this.removeAttribute("aria-expanded");
    }
  }
  handleExpandAnimation() {
    if (this.expanded) {
      if (this.lazy) {
        this.loading = true;
        this.emit("sl-lazy-load");
      } else {
        this.animateExpand();
      }
    } else {
      this.animateCollapse();
    }
  }
  handleLazyChange() {
    this.emit("sl-lazy-change");
  }
  /** Gets all the nested tree items in this node. */
  getChildrenItems({ includeDisabled = true } = {}) {
    return this.childrenSlot ? [...this.childrenSlot.assignedElements({ flatten: true })].filter(
      (item) => _SlTreeItem.isTreeItem(item) && (includeDisabled || !item.disabled)
    ) : [];
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    const showExpandButton = !this.loading && (!this.isLeaf || this.lazy);
    return x`
      <div
        part="base"
        class="${e$3({
      "tree-item": true,
      "tree-item--expanded": this.expanded,
      "tree-item--selected": this.selected,
      "tree-item--disabled": this.disabled,
      "tree-item--leaf": this.isLeaf,
      "tree-item--has-expand-button": showExpandButton,
      "tree-item--rtl": this.localize.dir() === "rtl"
    })}"
      >
        <div
          class="tree-item__item"
          part="
            item
            ${this.disabled ? "item--disabled" : ""}
            ${this.expanded ? "item--expanded" : ""}
            ${this.indeterminate ? "item--indeterminate" : ""}
            ${this.selected ? "item--selected" : ""}
          "
        >
          <div class="tree-item__indentation" part="indentation"></div>

          <div
            part="expand-button"
            class=${e$3({
      "tree-item__expand-button": true,
      "tree-item__expand-button--visible": showExpandButton
    })}
            aria-hidden="true"
          >
            ${n$3(
      this.loading,
      () => x` <sl-spinner part="spinner" exportparts="base:spinner__base"></sl-spinner> `
    )}
            <slot class="tree-item__expand-icon-slot" name="expand-icon">
              <sl-icon library="system" name=${isRtl ? "chevron-left" : "chevron-right"}></sl-icon>
            </slot>
            <slot class="tree-item__expand-icon-slot" name="collapse-icon">
              <sl-icon library="system" name=${isRtl ? "chevron-left" : "chevron-right"}></sl-icon>
            </slot>
          </div>

          ${n$3(
      this.selectable,
      () => x`
              <sl-checkbox
                part="checkbox"
                exportparts="
                    base:checkbox__base,
                    control:checkbox__control,
                    control--checked:checkbox__control--checked,
                    control--indeterminate:checkbox__control--indeterminate,
                    checked-icon:checkbox__checked-icon,
                    indeterminate-icon:checkbox__indeterminate-icon,
                    label:checkbox__label
                  "
                class="tree-item__checkbox"
                ?disabled="${this.disabled}"
                ?checked="${l(this.selected)}"
                ?indeterminate="${this.indeterminate}"
                tabindex="-1"
              ></sl-checkbox>
            `
    )}

          <slot class="tree-item__label" part="label"></slot>
        </div>

        <div class="tree-item__children" part="children" role="group">
          <slot name="children" @slotchange="${this.handleChildrenSlotChange}"></slot>
        </div>
      </div>
    `;
  }
};
_SlTreeItem.styles = [component_styles_default, tree_item_styles_default];
_SlTreeItem.dependencies = {
  "sl-checkbox": SlCheckbox,
  "sl-icon": SlIcon,
  "sl-spinner": SlSpinner
};
__decorateClass([
  r$3()
], _SlTreeItem.prototype, "indeterminate", 2);
__decorateClass([
  r$3()
], _SlTreeItem.prototype, "isLeaf", 2);
__decorateClass([
  r$3()
], _SlTreeItem.prototype, "loading", 2);
__decorateClass([
  r$3()
], _SlTreeItem.prototype, "selectable", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], _SlTreeItem.prototype, "expanded", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], _SlTreeItem.prototype, "selected", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], _SlTreeItem.prototype, "disabled", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], _SlTreeItem.prototype, "lazy", 2);
__decorateClass([
  e$7("slot:not([name])")
], _SlTreeItem.prototype, "defaultSlot", 2);
__decorateClass([
  e$7("slot[name=children]")
], _SlTreeItem.prototype, "childrenSlot", 2);
__decorateClass([
  e$7(".tree-item__item")
], _SlTreeItem.prototype, "itemElement", 2);
__decorateClass([
  e$7(".tree-item__children")
], _SlTreeItem.prototype, "childrenContainer", 2);
__decorateClass([
  e$7(".tree-item__expand-button slot")
], _SlTreeItem.prototype, "expandButtonSlot", 2);
__decorateClass([
  watch("loading", { waitUntilFirstUpdate: true })
], _SlTreeItem.prototype, "handleLoadingChange", 1);
__decorateClass([
  watch("disabled")
], _SlTreeItem.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("selected")
], _SlTreeItem.prototype, "handleSelectedChange", 1);
__decorateClass([
  watch("expanded", { waitUntilFirstUpdate: true })
], _SlTreeItem.prototype, "handleExpandedChange", 1);
__decorateClass([
  watch("expanded", { waitUntilFirstUpdate: true })
], _SlTreeItem.prototype, "handleExpandAnimation", 1);
__decorateClass([
  watch("lazy", { waitUntilFirstUpdate: true })
], _SlTreeItem.prototype, "handleLazyChange", 1);
var SlTreeItem = _SlTreeItem;
setDefaultAnimation("tree-item.expand", {
  keyframes: [
    { height: "0", opacity: "0", overflow: "hidden" },
    { height: "auto", opacity: "1", overflow: "hidden" }
  ],
  options: { duration: 250, easing: "cubic-bezier(0.4, 0.0, 0.2, 1)" }
});
setDefaultAnimation("tree-item.collapse", {
  keyframes: [
    { height: "auto", opacity: "1", overflow: "hidden" },
    { height: "0", opacity: "0", overflow: "hidden" }
  ],
  options: { duration: 200, easing: "cubic-bezier(0.4, 0.0, 0.2, 1)" }
});

var tagName$O = "sl-tree-item";
SlTreeItem.define("sl-tree-item");
o$8({
  tagName: tagName$O,
  elementClass: SlTreeItem,
  react: React$1,
  events: {
    onSlExpand: "sl-expand",
    onSlAfterExpand: "sl-after-expand",
    onSlCollapse: "sl-collapse",
    onSlAfterCollapse: "sl-after-collapse",
    onSlLazyChange: "sl-lazy-change",
    onSlLazyLoad: "sl-lazy-load"
  },
  displayName: "SlTreeItem"
});

// src/components/tree/tree.styles.ts
var tree_styles_default = i$7`
  :host {
    /*
     * These are actually used by tree item, but we define them here so they can more easily be set and all tree items
     * stay consistent.
     */
    --indent-guide-color: var(--sl-color-neutral-200);
    --indent-guide-offset: 0;
    --indent-guide-style: solid;
    --indent-guide-width: 0;
    --indent-size: var(--sl-spacing-large);

    display: block;

    /*
     * Tree item indentation uses the "em" unit to increment its width on each level, so setting the font size to zero
     * here removes the indentation for all the nodes on the first level.
     */
    font-size: 0;
  }
`;

// src/internal/math.ts
function clamp(value, min, max) {
  const noNegativeZero = (n) => Object.is(n, -0) ? 0 : n;
  if (value < min) {
    return noNegativeZero(min);
  }
  if (value > max) {
    return noNegativeZero(max);
  }
  return noNegativeZero(value);
}

function syncCheckboxes(changedTreeItem, initialSync = false) {
  function syncParentItem(treeItem) {
    const children = treeItem.getChildrenItems({ includeDisabled: false });
    if (children.length) {
      const allChecked = children.every((item) => item.selected);
      const allUnchecked = children.every((item) => !item.selected && !item.indeterminate);
      treeItem.selected = allChecked;
      treeItem.indeterminate = !allChecked && !allUnchecked;
    }
  }
  function syncAncestors(treeItem) {
    const parentItem = treeItem.parentElement;
    if (SlTreeItem.isTreeItem(parentItem)) {
      syncParentItem(parentItem);
      syncAncestors(parentItem);
    }
  }
  function syncDescendants(treeItem) {
    for (const childItem of treeItem.getChildrenItems()) {
      childItem.selected = initialSync ? treeItem.selected || childItem.selected : !childItem.disabled && treeItem.selected;
      syncDescendants(childItem);
    }
    if (initialSync) {
      syncParentItem(treeItem);
    }
  }
  syncDescendants(changedTreeItem);
  syncAncestors(changedTreeItem);
}
var SlTree = class extends ShoelaceElement {
  constructor() {
    super();
    this.selection = "single";
    this.clickTarget = null;
    this.localize = new LocalizeController(this);
    // Initializes new items by setting the `selectable` property and the expanded/collapsed icons if any
    this.initTreeItem = (item) => {
      item.selectable = this.selection === "multiple";
      ["expand", "collapse"].filter((status) => !!this.querySelector(`[slot="${status}-icon"]`)).forEach((status) => {
        const existingIcon = item.querySelector(`[slot="${status}-icon"]`);
        const expandButtonIcon = this.getExpandButtonIcon(status);
        if (!expandButtonIcon) return;
        if (existingIcon === null) {
          item.append(expandButtonIcon);
        } else if (existingIcon.hasAttribute("data-default")) {
          existingIcon.replaceWith(expandButtonIcon);
        } else ;
      });
    };
    this.handleTreeChanged = (mutations) => {
      for (const mutation of mutations) {
        const addedNodes = [...mutation.addedNodes].filter(SlTreeItem.isTreeItem);
        const removedNodes = [...mutation.removedNodes].filter(SlTreeItem.isTreeItem);
        addedNodes.forEach(this.initTreeItem);
        if (this.lastFocusedItem && removedNodes.includes(this.lastFocusedItem)) {
          this.lastFocusedItem = null;
        }
      }
    };
    this.handleFocusOut = (event) => {
      const relatedTarget = event.relatedTarget;
      if (!relatedTarget || !this.contains(relatedTarget)) {
        this.tabIndex = 0;
      }
    };
    this.handleFocusIn = (event) => {
      const target = event.target;
      if (event.target === this) {
        this.focusItem(this.lastFocusedItem || this.getAllTreeItems()[0]);
      }
      if (SlTreeItem.isTreeItem(target) && !target.disabled) {
        if (this.lastFocusedItem) {
          this.lastFocusedItem.tabIndex = -1;
        }
        this.lastFocusedItem = target;
        this.tabIndex = -1;
        target.tabIndex = 0;
      }
    };
    this.addEventListener("focusin", this.handleFocusIn);
    this.addEventListener("focusout", this.handleFocusOut);
    this.addEventListener("sl-lazy-change", this.handleSlotChange);
  }
  async connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "tree");
    this.setAttribute("tabindex", "0");
    await this.updateComplete;
    this.mutationObserver = new MutationObserver(this.handleTreeChanged);
    this.mutationObserver.observe(this, { childList: true, subtree: true });
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.mutationObserver) == null ? void 0 : _a.disconnect();
  }
  // Generates a clone of the expand icon element to use for each tree item
  getExpandButtonIcon(status) {
    const slot = status === "expand" ? this.expandedIconSlot : this.collapsedIconSlot;
    const icon = slot.assignedElements({ flatten: true })[0];
    if (icon) {
      const clone = icon.cloneNode(true);
      [clone, ...clone.querySelectorAll("[id]")].forEach((el) => el.removeAttribute("id"));
      clone.setAttribute("data-default", "");
      clone.slot = `${status}-icon`;
      return clone;
    }
    return null;
  }
  selectItem(selectedItem) {
    const previousSelection = [...this.selectedItems];
    if (this.selection === "multiple") {
      selectedItem.selected = !selectedItem.selected;
      if (selectedItem.lazy) {
        selectedItem.expanded = true;
      }
      syncCheckboxes(selectedItem);
    } else if (this.selection === "single" || selectedItem.isLeaf) {
      const items = this.getAllTreeItems();
      for (const item of items) {
        item.selected = item === selectedItem;
      }
    } else if (this.selection === "leaf") {
      selectedItem.expanded = !selectedItem.expanded;
    }
    const nextSelection = this.selectedItems;
    if (previousSelection.length !== nextSelection.length || nextSelection.some((item) => !previousSelection.includes(item))) {
      Promise.all(nextSelection.map((el) => el.updateComplete)).then(() => {
        this.emit("sl-selection-change", { detail: { selection: nextSelection } });
      });
    }
  }
  getAllTreeItems() {
    return [...this.querySelectorAll("sl-tree-item")];
  }
  focusItem(item) {
    item == null ? void 0 : item.focus();
  }
  handleKeyDown(event) {
    if (!["ArrowDown", "ArrowUp", "ArrowRight", "ArrowLeft", "Home", "End", "Enter", " "].includes(event.key)) {
      return;
    }
    if (event.composedPath().some((el) => {
      var _a;
      return ["input", "textarea"].includes((_a = el == null ? void 0 : el.tagName) == null ? void 0 : _a.toLowerCase());
    })) {
      return;
    }
    const items = this.getFocusableItems();
    const isLtr = this.localize.dir() === "ltr";
    const isRtl = this.localize.dir() === "rtl";
    if (items.length > 0) {
      event.preventDefault();
      const activeItemIndex = items.findIndex((item) => item.matches(":focus"));
      const activeItem = items[activeItemIndex];
      const focusItemAt = (index) => {
        const item = items[clamp(index, 0, items.length - 1)];
        this.focusItem(item);
      };
      const toggleExpand = (expanded) => {
        activeItem.expanded = expanded;
      };
      if (event.key === "ArrowDown") {
        focusItemAt(activeItemIndex + 1);
      } else if (event.key === "ArrowUp") {
        focusItemAt(activeItemIndex - 1);
      } else if (isLtr && event.key === "ArrowRight" || isRtl && event.key === "ArrowLeft") {
        if (!activeItem || activeItem.disabled || activeItem.expanded || activeItem.isLeaf && !activeItem.lazy) {
          focusItemAt(activeItemIndex + 1);
        } else {
          toggleExpand(true);
        }
      } else if (isLtr && event.key === "ArrowLeft" || isRtl && event.key === "ArrowRight") {
        if (!activeItem || activeItem.disabled || activeItem.isLeaf || !activeItem.expanded) {
          focusItemAt(activeItemIndex - 1);
        } else {
          toggleExpand(false);
        }
      } else if (event.key === "Home") {
        focusItemAt(0);
      } else if (event.key === "End") {
        focusItemAt(items.length - 1);
      } else if (event.key === "Enter" || event.key === " ") {
        if (!activeItem.disabled) {
          this.selectItem(activeItem);
        }
      }
    }
  }
  handleClick(event) {
    const target = event.target;
    const treeItem = target.closest("sl-tree-item");
    const isExpandButton = event.composedPath().some((el) => {
      var _a;
      return (_a = el == null ? void 0 : el.classList) == null ? void 0 : _a.contains("tree-item__expand-button");
    });
    if (!treeItem || treeItem.disabled || target !== this.clickTarget) {
      return;
    }
    if (isExpandButton) {
      treeItem.expanded = !treeItem.expanded;
    } else {
      this.selectItem(treeItem);
    }
  }
  handleMouseDown(event) {
    this.clickTarget = event.target;
  }
  handleSlotChange() {
    const items = this.getAllTreeItems();
    items.forEach(this.initTreeItem);
  }
  async handleSelectionChange() {
    const isSelectionMultiple = this.selection === "multiple";
    const items = this.getAllTreeItems();
    this.setAttribute("aria-multiselectable", isSelectionMultiple ? "true" : "false");
    for (const item of items) {
      item.selectable = isSelectionMultiple;
    }
    if (isSelectionMultiple) {
      await this.updateComplete;
      [...this.querySelectorAll(":scope > sl-tree-item")].forEach(
        (treeItem) => syncCheckboxes(treeItem, true)
      );
    }
  }
  /** @internal Returns the list of tree items that are selected in the tree. */
  get selectedItems() {
    const items = this.getAllTreeItems();
    const isSelected = (item) => item.selected;
    return items.filter(isSelected);
  }
  /** @internal Gets focusable tree items in the tree. */
  getFocusableItems() {
    const items = this.getAllTreeItems();
    const collapsedItems = /* @__PURE__ */ new Set();
    return items.filter((item) => {
      var _a;
      if (item.disabled) return false;
      const parent = (_a = item.parentElement) == null ? void 0 : _a.closest("[role=treeitem]");
      if (parent && (!parent.expanded || parent.loading || collapsedItems.has(parent))) {
        collapsedItems.add(item);
      }
      return !collapsedItems.has(item);
    });
  }
  render() {
    return x`
      <div
        part="base"
        class="tree"
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
        @mousedown=${this.handleMouseDown}
      >
        <slot @slotchange=${this.handleSlotChange}></slot>
        <span hidden aria-hidden="true"><slot name="expand-icon"></slot></span>
        <span hidden aria-hidden="true"><slot name="collapse-icon"></slot></span>
      </div>
    `;
  }
};
SlTree.styles = [component_styles_default, tree_styles_default];
__decorateClass([
  e$7("slot:not([name])")
], SlTree.prototype, "defaultSlot", 2);
__decorateClass([
  e$7("slot[name=expand-icon]")
], SlTree.prototype, "expandedIconSlot", 2);
__decorateClass([
  e$7("slot[name=collapse-icon]")
], SlTree.prototype, "collapsedIconSlot", 2);
__decorateClass([
  n$6()
], SlTree.prototype, "selection", 2);
__decorateClass([
  watch("selection")
], SlTree.prototype, "handleSelectionChange", 1);

var tagName$N = "sl-tree";
SlTree.define("sl-tree");
o$8({
  tagName: tagName$N,
  elementClass: SlTree,
  react: React$1,
  events: {
    onSlSelectionChange: "sl-selection-change"
  },
  displayName: "SlTree"
});

// src/components/rating/rating.styles.ts
var rating_styles_default = i$7`
  :host {
    --symbol-color: var(--sl-color-neutral-300);
    --symbol-color-active: var(--sl-color-amber-500);
    --symbol-size: 1.2rem;
    --symbol-spacing: var(--sl-spacing-3x-small);

    display: inline-flex;
  }

  .rating {
    position: relative;
    display: inline-flex;
    border-radius: var(--sl-border-radius-medium);
    vertical-align: middle;
  }

  .rating:focus {
    outline: none;
  }

  .rating:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .rating__symbols {
    display: inline-flex;
    position: relative;
    font-size: var(--symbol-size);
    line-height: 0;
    color: var(--symbol-color);
    white-space: nowrap;
    cursor: pointer;
  }

  .rating__symbols > * {
    padding: var(--symbol-spacing);
  }

  .rating__symbol--active,
  .rating__partial--filled {
    color: var(--symbol-color-active);
  }

  .rating__partial-symbol-container {
    position: relative;
  }

  .rating__partial--filled {
    position: absolute;
    top: var(--symbol-spacing);
    left: var(--symbol-spacing);
  }

  .rating__symbol {
    transition: var(--sl-transition-fast) scale;
    pointer-events: none;
  }

  .rating__symbol--hover {
    scale: 1.2;
  }

  .rating--disabled .rating__symbols,
  .rating--readonly .rating__symbols {
    cursor: default;
  }

  .rating--disabled .rating__symbol--hover,
  .rating--readonly .rating__symbol--hover {
    scale: none;
  }

  .rating--disabled {
    opacity: 0.5;
  }

  .rating--disabled .rating__symbols {
    cursor: not-allowed;
  }

  /* Forced colors mode */
  @media (forced-colors: active) {
    .rating__symbol--active {
      color: SelectedItem;
    }
  }
`;

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const n$2="important",i=" !"+n$2,o$5=e$4(class extends i$3{constructor(t$1){if(super(t$1),t$1.type!==t.ATTRIBUTE||"style"!==t$1.name||t$1.strings?.length>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce(((e,r)=>{const s=t[r];return null==s?e:e+`${r=r.includes("-")?r:r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${s};`}),"")}update(e,[r]){const{style:s}=e.element;if(void 0===this.ft)return this.ft=new Set(Object.keys(r)),this.render(r);for(const t of this.ft)null==r[t]&&(this.ft.delete(t),t.includes("-")?s.removeProperty(t):s[t]=null);for(const t in r){const e=r[t];if(null!=e){this.ft.add(t);const r="string"==typeof e&&e.endsWith(i);t.includes("-")||r?s.setProperty(t,r?e.slice(0,-11):e,r?n$2:""):s[t]=e;}}return T}});

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */let e$1 = class e extends i$3{constructor(i){if(super(i),this.it=E,i.type!==t.CHILD)throw Error(this.constructor.directiveName+"() can only be used in child bindings")}render(r){if(r===E||null==r)return this._t=void 0,this.it=r;if(r===T)return r;if("string"!=typeof r)throw Error(this.constructor.directiveName+"() called with a non-string value");if(r===this.it)return this._t;this.it=r;const s=[r];return s.raw=s,this._t={_$litType$:this.constructor.resultType,strings:s,values:[]}}};e$1.directiveName="unsafeHTML",e$1.resultType=1;const o$4=e$4(e$1);

var SlRating = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.hoverValue = 0;
    this.isHovering = false;
    this.label = "";
    this.value = 0;
    this.max = 5;
    this.precision = 1;
    this.readonly = false;
    this.disabled = false;
    this.getSymbol = () => '<sl-icon name="star-fill" library="system"></sl-icon>';
  }
  getValueFromMousePosition(event) {
    return this.getValueFromXCoordinate(event.clientX);
  }
  getValueFromTouchPosition(event) {
    return this.getValueFromXCoordinate(event.touches[0].clientX);
  }
  getValueFromXCoordinate(coordinate) {
    const isRtl = this.localize.dir() === "rtl";
    const { left, right, width } = this.rating.getBoundingClientRect();
    const value = isRtl ? this.roundToPrecision((right - coordinate) / width * this.max, this.precision) : this.roundToPrecision((coordinate - left) / width * this.max, this.precision);
    return clamp(value, 0, this.max);
  }
  handleClick(event) {
    if (this.disabled) {
      return;
    }
    this.setValue(this.getValueFromMousePosition(event));
    this.emit("sl-change");
  }
  setValue(newValue) {
    if (this.disabled || this.readonly) {
      return;
    }
    this.value = newValue === this.value ? 0 : newValue;
    this.isHovering = false;
  }
  handleKeyDown(event) {
    const isLtr = this.localize.dir() === "ltr";
    const isRtl = this.localize.dir() === "rtl";
    const oldValue = this.value;
    if (this.disabled || this.readonly) {
      return;
    }
    if (event.key === "ArrowDown" || isLtr && event.key === "ArrowLeft" || isRtl && event.key === "ArrowRight") {
      const decrement = event.shiftKey ? 1 : this.precision;
      this.value = Math.max(0, this.value - decrement);
      event.preventDefault();
    }
    if (event.key === "ArrowUp" || isLtr && event.key === "ArrowRight" || isRtl && event.key === "ArrowLeft") {
      const increment = event.shiftKey ? 1 : this.precision;
      this.value = Math.min(this.max, this.value + increment);
      event.preventDefault();
    }
    if (event.key === "Home") {
      this.value = 0;
      event.preventDefault();
    }
    if (event.key === "End") {
      this.value = this.max;
      event.preventDefault();
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
    }
  }
  handleMouseEnter(event) {
    this.isHovering = true;
    this.hoverValue = this.getValueFromMousePosition(event);
  }
  handleMouseMove(event) {
    this.hoverValue = this.getValueFromMousePosition(event);
  }
  handleMouseLeave() {
    this.isHovering = false;
  }
  handleTouchStart(event) {
    this.isHovering = true;
    this.hoverValue = this.getValueFromTouchPosition(event);
    event.preventDefault();
  }
  handleTouchMove(event) {
    this.hoverValue = this.getValueFromTouchPosition(event);
  }
  handleTouchEnd(event) {
    this.isHovering = false;
    this.setValue(this.hoverValue);
    this.emit("sl-change");
    event.preventDefault();
  }
  roundToPrecision(numberToRound, precision = 0.5) {
    const multiplier = 1 / precision;
    return Math.ceil(numberToRound * multiplier) / multiplier;
  }
  handleHoverValueChange() {
    this.emit("sl-hover", {
      detail: {
        phase: "move",
        value: this.hoverValue
      }
    });
  }
  handleIsHoveringChange() {
    this.emit("sl-hover", {
      detail: {
        phase: this.isHovering ? "start" : "end",
        value: this.hoverValue
      }
    });
  }
  /** Sets focus on the rating. */
  focus(options) {
    this.rating.focus(options);
  }
  /** Removes focus from the rating. */
  blur() {
    this.rating.blur();
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    const counter = Array.from(Array(this.max).keys());
    let displayValue = 0;
    if (this.disabled || this.readonly) {
      displayValue = this.value;
    } else {
      displayValue = this.isHovering ? this.hoverValue : this.value;
    }
    return x`
      <div
        part="base"
        class=${e$3({
      rating: true,
      "rating--readonly": this.readonly,
      "rating--disabled": this.disabled,
      "rating--rtl": isRtl
    })}
        role="slider"
        aria-label=${this.label}
        aria-disabled=${this.disabled ? "true" : "false"}
        aria-readonly=${this.readonly ? "true" : "false"}
        aria-valuenow=${this.value}
        aria-valuemin=${0}
        aria-valuemax=${this.max}
        tabindex=${this.disabled || this.readonly ? "-1" : "0"}
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
        @mouseenter=${this.handleMouseEnter}
        @touchstart=${this.handleTouchStart}
        @mouseleave=${this.handleMouseLeave}
        @touchend=${this.handleTouchEnd}
        @mousemove=${this.handleMouseMove}
        @touchmove=${this.handleTouchMove}
      >
        <span class="rating__symbols">
          ${counter.map((index) => {
      if (displayValue > index && displayValue < index + 1) {
        return x`
                <span
                  class=${e$3({
          rating__symbol: true,
          "rating__partial-symbol-container": true,
          "rating__symbol--hover": this.isHovering && Math.ceil(displayValue) === index + 1
        })}
                  role="presentation"
                >
                  <div
                    style=${o$5({
          clipPath: isRtl ? `inset(0 ${(displayValue - index) * 100}% 0 0)` : `inset(0 0 0 ${(displayValue - index) * 100}%)`
        })}
                  >
                    ${o$4(this.getSymbol(index + 1))}
                  </div>
                  <div
                    class="rating__partial--filled"
                    style=${o$5({
          clipPath: isRtl ? `inset(0 0 0 ${100 - (displayValue - index) * 100}%)` : `inset(0 ${100 - (displayValue - index) * 100}% 0 0)`
        })}
                  >
                    ${o$4(this.getSymbol(index + 1))}
                  </div>
                </span>
              `;
      }
      return x`
              <span
                class=${e$3({
        rating__symbol: true,
        "rating__symbol--hover": this.isHovering && Math.ceil(displayValue) === index + 1,
        "rating__symbol--active": displayValue >= index + 1
      })}
                role="presentation"
              >
                ${o$4(this.getSymbol(index + 1))}
              </span>
            `;
    })}
        </span>
      </div>
    `;
  }
};
SlRating.styles = [component_styles_default, rating_styles_default];
SlRating.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e$7(".rating")
], SlRating.prototype, "rating", 2);
__decorateClass([
  r$3()
], SlRating.prototype, "hoverValue", 2);
__decorateClass([
  r$3()
], SlRating.prototype, "isHovering", 2);
__decorateClass([
  n$6()
], SlRating.prototype, "label", 2);
__decorateClass([
  n$6({ type: Number })
], SlRating.prototype, "value", 2);
__decorateClass([
  n$6({ type: Number })
], SlRating.prototype, "max", 2);
__decorateClass([
  n$6({ type: Number })
], SlRating.prototype, "precision", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlRating.prototype, "readonly", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlRating.prototype, "disabled", 2);
__decorateClass([
  n$6()
], SlRating.prototype, "getSymbol", 2);
__decorateClass([
  t$2({ passive: true })
], SlRating.prototype, "handleTouchMove", 1);
__decorateClass([
  watch("hoverValue")
], SlRating.prototype, "handleHoverValueChange", 1);
__decorateClass([
  watch("isHovering")
], SlRating.prototype, "handleIsHoveringChange", 1);

var tagName$M = "sl-rating";
SlRating.define("sl-rating");
o$8({
  tagName: tagName$M,
  elementClass: SlRating,
  react: React$1,
  events: {
    onSlChange: "sl-change",
    onSlHover: "sl-hover"
  },
  displayName: "SlRating"
});

var availableUnits = [
  { max: 276e4, value: 6e4, unit: "minute" },
  // max 46 minutes
  { max: 72e6, value: 36e5, unit: "hour" },
  // max 20 hours
  { max: 5184e5, value: 864e5, unit: "day" },
  // max 6 days
  { max: 24192e5, value: 6048e5, unit: "week" },
  // max 28 days
  { max: 28512e6, value: 2592e6, unit: "month" },
  // max 11 months
  { max: Infinity, value: 31536e6, unit: "year" }
];
var SlRelativeTime = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.isoTime = "";
    this.relativeTime = "";
    this.date = /* @__PURE__ */ new Date();
    this.format = "long";
    this.numeric = "auto";
    this.sync = false;
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    clearTimeout(this.updateTimeout);
  }
  render() {
    const now = /* @__PURE__ */ new Date();
    const then = new Date(this.date);
    if (isNaN(then.getMilliseconds())) {
      this.relativeTime = "";
      this.isoTime = "";
      return "";
    }
    const diff = then.getTime() - now.getTime();
    const { unit, value } = availableUnits.find((singleUnit) => Math.abs(diff) < singleUnit.max);
    this.isoTime = then.toISOString();
    this.relativeTime = this.localize.relativeTime(Math.round(diff / value), unit, {
      numeric: this.numeric,
      style: this.format
    });
    clearTimeout(this.updateTimeout);
    if (this.sync) {
      let nextInterval;
      if (unit === "minute") {
        nextInterval = getTimeUntilNextUnit("second");
      } else if (unit === "hour") {
        nextInterval = getTimeUntilNextUnit("minute");
      } else if (unit === "day") {
        nextInterval = getTimeUntilNextUnit("hour");
      } else {
        nextInterval = getTimeUntilNextUnit("day");
      }
      this.updateTimeout = window.setTimeout(() => this.requestUpdate(), nextInterval);
    }
    return x` <time datetime=${this.isoTime}>${this.relativeTime}</time> `;
  }
};
__decorateClass([
  r$3()
], SlRelativeTime.prototype, "isoTime", 2);
__decorateClass([
  r$3()
], SlRelativeTime.prototype, "relativeTime", 2);
__decorateClass([
  n$6()
], SlRelativeTime.prototype, "date", 2);
__decorateClass([
  n$6()
], SlRelativeTime.prototype, "format", 2);
__decorateClass([
  n$6()
], SlRelativeTime.prototype, "numeric", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlRelativeTime.prototype, "sync", 2);
function getTimeUntilNextUnit(unit) {
  const units = { second: 1e3, minute: 6e4, hour: 36e5, day: 864e5 };
  const value = units[unit];
  return value - Date.now() % value;
}

var tagName$L = "sl-relative-time";
SlRelativeTime.define("sl-relative-time");
o$8({
  tagName: tagName$L,
  elementClass: SlRelativeTime,
  react: React$1,
  events: {},
  displayName: "SlRelativeTime"
});

var tagName$K = "sl-resize-observer";
SlResizeObserver.define("sl-resize-observer");
o$8({
  tagName: tagName$K,
  elementClass: SlResizeObserver,
  react: React$1,
  events: {
    onSlResize: "sl-resize"
  },
  displayName: "SlResizeObserver"
});

// src/components/select/select.styles.ts
var select_styles_default = i$7`
  :host {
    display: block;
  }

  /** The popup */
  .select {
    flex: 1 1 auto;
    display: inline-flex;
    width: 100%;
    position: relative;
    vertical-align: middle;
  }

  .select::part(popup) {
    z-index: var(--sl-z-index-dropdown);
  }

  .select[data-current-placement^='top']::part(popup) {
    transform-origin: bottom;
  }

  .select[data-current-placement^='bottom']::part(popup) {
    transform-origin: top;
  }

  /* Combobox */
  .select__combobox {
    flex: 1;
    display: flex;
    width: 100%;
    min-width: 0;
    position: relative;
    align-items: center;
    justify-content: start;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    letter-spacing: var(--sl-input-letter-spacing);
    vertical-align: middle;
    overflow: hidden;
    cursor: pointer;
    transition:
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) border,
      var(--sl-transition-fast) box-shadow,
      var(--sl-transition-fast) background-color;
  }

  .select__display-input {
    position: relative;
    width: 100%;
    font: inherit;
    border: none;
    background: none;
    color: var(--sl-input-color);
    cursor: inherit;
    overflow: hidden;
    padding: 0;
    margin: 0;
    -webkit-appearance: none;
  }

  .select__display-input::placeholder {
    color: var(--sl-input-placeholder-color);
  }

  .select:not(.select--disabled):hover .select__display-input {
    color: var(--sl-input-color-hover);
  }

  .select__display-input:focus {
    outline: none;
  }

  /* Visually hide the display input when multiple is enabled */
  .select--multiple:not(.select--placeholder-visible) .select__display-input {
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
  }

  .select__value-input {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    padding: 0;
    margin: 0;
    opacity: 0;
    z-index: -1;
  }

  .select__tags {
    display: flex;
    flex: 1;
    align-items: center;
    flex-wrap: wrap;
    margin-inline-start: var(--sl-spacing-2x-small);
  }

  .select__tags::slotted(sl-tag) {
    cursor: pointer !important;
  }

  .select--disabled .select__tags,
  .select--disabled .select__tags::slotted(sl-tag) {
    cursor: not-allowed !important;
  }

  /* Standard selects */
  .select--standard .select__combobox {
    background-color: var(--sl-input-background-color);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
  }

  .select--standard.select--disabled .select__combobox {
    background-color: var(--sl-input-background-color-disabled);
    border-color: var(--sl-input-border-color-disabled);
    color: var(--sl-input-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
    outline: none;
  }

  .select--standard:not(.select--disabled).select--open .select__combobox,
  .select--standard:not(.select--disabled).select--focused .select__combobox {
    background-color: var(--sl-input-background-color-focus);
    border-color: var(--sl-input-border-color-focus);
    box-shadow: 0 0 0 var(--sl-focus-ring-width) var(--sl-input-focus-ring-color);
  }

  /* Filled selects */
  .select--filled .select__combobox {
    border: none;
    background-color: var(--sl-input-filled-background-color);
    color: var(--sl-input-color);
  }

  .select--filled:hover:not(.select--disabled) .select__combobox {
    background-color: var(--sl-input-filled-background-color-hover);
  }

  .select--filled.select--disabled .select__combobox {
    background-color: var(--sl-input-filled-background-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .select--filled:not(.select--disabled).select--open .select__combobox,
  .select--filled:not(.select--disabled).select--focused .select__combobox {
    background-color: var(--sl-input-filled-background-color-focus);
    outline: var(--sl-focus-ring);
  }

  /* Sizes */
  .select--small .select__combobox {
    border-radius: var(--sl-input-border-radius-small);
    font-size: var(--sl-input-font-size-small);
    min-height: var(--sl-input-height-small);
    padding-block: 0;
    padding-inline: var(--sl-input-spacing-small);
  }

  .select--small .select__clear {
    margin-inline-start: var(--sl-input-spacing-small);
  }

  .select--small .select__prefix::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-small);
  }

  .select--small.select--multiple:not(.select--placeholder-visible) .select__prefix::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-small);
  }

  .select--small.select--multiple:not(.select--placeholder-visible) .select__combobox {
    padding-block: 2px;
    padding-inline-start: 0;
  }

  .select--small .select__tags {
    gap: 2px;
  }

  .select--medium .select__combobox {
    border-radius: var(--sl-input-border-radius-medium);
    font-size: var(--sl-input-font-size-medium);
    min-height: var(--sl-input-height-medium);
    padding-block: 0;
    padding-inline: var(--sl-input-spacing-medium);
  }

  .select--medium .select__clear {
    margin-inline-start: var(--sl-input-spacing-medium);
  }

  .select--medium .select__prefix::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-medium);
  }

  .select--medium.select--multiple:not(.select--placeholder-visible) .select__prefix::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-medium);
  }

  .select--medium.select--multiple:not(.select--placeholder-visible) .select__combobox {
    padding-inline-start: 0;
    padding-block: 3px;
  }

  .select--medium .select__tags {
    gap: 3px;
  }

  .select--large .select__combobox {
    border-radius: var(--sl-input-border-radius-large);
    font-size: var(--sl-input-font-size-large);
    min-height: var(--sl-input-height-large);
    padding-block: 0;
    padding-inline: var(--sl-input-spacing-large);
  }

  .select--large .select__clear {
    margin-inline-start: var(--sl-input-spacing-large);
  }

  .select--large .select__prefix::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-large);
  }

  .select--large.select--multiple:not(.select--placeholder-visible) .select__prefix::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-large);
  }

  .select--large.select--multiple:not(.select--placeholder-visible) .select__combobox {
    padding-inline-start: 0;
    padding-block: 4px;
  }

  .select--large .select__tags {
    gap: 4px;
  }

  /* Pills */
  .select--pill.select--small .select__combobox {
    border-radius: var(--sl-input-height-small);
  }

  .select--pill.select--medium .select__combobox {
    border-radius: var(--sl-input-height-medium);
  }

  .select--pill.select--large .select__combobox {
    border-radius: var(--sl-input-height-large);
  }

  /* Prefix and Suffix */
  .select__prefix,
  .select__suffix {
    flex: 0;
    display: inline-flex;
    align-items: center;
    color: var(--sl-input-placeholder-color);
  }

  .select__suffix::slotted(*) {
    margin-inline-start: var(--sl-spacing-small);
  }

  /* Clear button */
  .select__clear {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: inherit;
    color: var(--sl-input-icon-color);
    border: none;
    background: none;
    padding: 0;
    transition: var(--sl-transition-fast) color;
    cursor: pointer;
  }

  .select__clear:hover {
    color: var(--sl-input-icon-color-hover);
  }

  .select__clear:focus {
    outline: none;
  }

  /* Expand icon */
  .select__expand-icon {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    transition: var(--sl-transition-medium) rotate ease;
    rotate: 0;
    margin-inline-start: var(--sl-spacing-small);
  }

  .select--open .select__expand-icon {
    rotate: -180deg;
  }

  /* Listbox */
  .select__listbox {
    display: block;
    position: relative;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    box-shadow: var(--sl-shadow-large);
    background: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-radius: var(--sl-border-radius-medium);
    padding-block: var(--sl-spacing-x-small);
    padding-inline: 0;
    overflow: auto;
    overscroll-behavior: none;

    /* Make sure it adheres to the popup's auto size */
    max-width: var(--auto-size-available-width);
    max-height: var(--auto-size-available-height);
  }

  .select__listbox ::slotted(sl-divider) {
    --spacing: var(--sl-spacing-x-small);
  }

  .select__listbox ::slotted(small) {
    display: block;
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    color: var(--sl-color-neutral-500);
    padding-block: var(--sl-spacing-2x-small);
    padding-inline: var(--sl-spacing-x-large);
  }
`;

var SlSelect = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      assumeInteractionOn: ["sl-blur", "sl-input"]
    });
    this.hasSlotController = new HasSlotController(this, "help-text", "label");
    this.localize = new LocalizeController(this);
    this.typeToSelectString = "";
    this.hasFocus = false;
    this.displayLabel = "";
    this.selectedOptions = [];
    this.valueHasChanged = false;
    this.name = "";
    this._value = "";
    this.defaultValue = "";
    this.size = "medium";
    this.placeholder = "";
    this.multiple = false;
    this.maxOptionsVisible = 3;
    this.disabled = false;
    this.clearable = false;
    this.open = false;
    this.hoist = false;
    this.filled = false;
    this.pill = false;
    this.label = "";
    this.placement = "bottom";
    this.helpText = "";
    this.form = "";
    this.required = false;
    this.getTag = (option) => {
      return x`
      <sl-tag
        part="tag"
        exportparts="
              base:tag__base,
              content:tag__content,
              remove-button:tag__remove-button,
              remove-button__base:tag__remove-button__base
            "
        ?pill=${this.pill}
        size=${this.size}
        removable
        @sl-remove=${(event) => this.handleTagRemove(event, option)}
      >
        ${option.getTextLabel()}
      </sl-tag>
    `;
    };
    this.handleDocumentFocusIn = (event) => {
      const path = event.composedPath();
      if (this && !path.includes(this)) {
        this.hide();
      }
    };
    this.handleDocumentKeyDown = (event) => {
      const target = event.target;
      const isClearButton = target.closest(".select__clear") !== null;
      const isIconButton = target.closest("sl-icon-button") !== null;
      if (isClearButton || isIconButton) {
        return;
      }
      if (event.key === "Escape" && this.open && !this.closeWatcher) {
        event.preventDefault();
        event.stopPropagation();
        this.hide();
        this.displayInput.focus({ preventScroll: true });
      }
      if (event.key === "Enter" || event.key === " " && this.typeToSelectString === "") {
        event.preventDefault();
        event.stopImmediatePropagation();
        if (!this.open) {
          this.show();
          return;
        }
        if (this.currentOption && !this.currentOption.disabled) {
          this.valueHasChanged = true;
          if (this.multiple) {
            this.toggleOptionSelection(this.currentOption);
          } else {
            this.setSelectedOptions(this.currentOption);
          }
          this.updateComplete.then(() => {
            this.emit("sl-input");
            this.emit("sl-change");
          });
          if (!this.multiple) {
            this.hide();
            this.displayInput.focus({ preventScroll: true });
          }
        }
        return;
      }
      if (["ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
        const allOptions = this.getAllOptions();
        const currentIndex = allOptions.indexOf(this.currentOption);
        let newIndex = Math.max(0, currentIndex);
        event.preventDefault();
        if (!this.open) {
          this.show();
          if (this.currentOption) {
            return;
          }
        }
        if (event.key === "ArrowDown") {
          newIndex = currentIndex + 1;
          if (newIndex > allOptions.length - 1) newIndex = 0;
        } else if (event.key === "ArrowUp") {
          newIndex = currentIndex - 1;
          if (newIndex < 0) newIndex = allOptions.length - 1;
        } else if (event.key === "Home") {
          newIndex = 0;
        } else if (event.key === "End") {
          newIndex = allOptions.length - 1;
        }
        this.setCurrentOption(allOptions[newIndex]);
      }
      if (event.key && event.key.length === 1 || event.key === "Backspace") {
        const allOptions = this.getAllOptions();
        if (event.metaKey || event.ctrlKey || event.altKey) {
          return;
        }
        if (!this.open) {
          if (event.key === "Backspace") {
            return;
          }
          this.show();
        }
        event.stopPropagation();
        event.preventDefault();
        clearTimeout(this.typeToSelectTimeout);
        this.typeToSelectTimeout = window.setTimeout(() => this.typeToSelectString = "", 1e3);
        if (event.key === "Backspace") {
          this.typeToSelectString = this.typeToSelectString.slice(0, -1);
        } else {
          this.typeToSelectString += event.key.toLowerCase();
        }
        for (const option of allOptions) {
          const label = option.getTextLabel().toLowerCase();
          if (label.startsWith(this.typeToSelectString)) {
            this.setCurrentOption(option);
            break;
          }
        }
      }
    };
    this.handleDocumentMouseDown = (event) => {
      const path = event.composedPath();
      if (this && !path.includes(this)) {
        this.hide();
      }
    };
  }
  get value() {
    return this._value;
  }
  set value(val) {
    if (this.multiple) {
      val = Array.isArray(val) ? val : val.split(" ");
    } else {
      val = Array.isArray(val) ? val.join(" ") : val;
    }
    if (this._value === val) {
      return;
    }
    this.valueHasChanged = true;
    this._value = val;
  }
  /** Gets the validity state object */
  get validity() {
    return this.valueInput.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.valueInput.validationMessage;
  }
  connectedCallback() {
    super.connectedCallback();
    setTimeout(() => {
      this.handleDefaultSlotChange();
    });
    this.open = false;
  }
  addOpenListeners() {
    var _a;
    document.addEventListener("focusin", this.handleDocumentFocusIn);
    document.addEventListener("keydown", this.handleDocumentKeyDown);
    document.addEventListener("mousedown", this.handleDocumentMouseDown);
    if (this.getRootNode() !== document) {
      this.getRootNode().addEventListener("focusin", this.handleDocumentFocusIn);
    }
    if ("CloseWatcher" in window) {
      (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
      this.closeWatcher = new CloseWatcher();
      this.closeWatcher.onclose = () => {
        if (this.open) {
          this.hide();
          this.displayInput.focus({ preventScroll: true });
        }
      };
    }
  }
  removeOpenListeners() {
    var _a;
    document.removeEventListener("focusin", this.handleDocumentFocusIn);
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
    document.removeEventListener("mousedown", this.handleDocumentMouseDown);
    if (this.getRootNode() !== document) {
      this.getRootNode().removeEventListener("focusin", this.handleDocumentFocusIn);
    }
    (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
  }
  handleFocus() {
    this.hasFocus = true;
    this.displayInput.setSelectionRange(0, 0);
    this.emit("sl-focus");
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleLabelClick() {
    this.displayInput.focus();
  }
  handleComboboxMouseDown(event) {
    const path = event.composedPath();
    const isIconButton = path.some((el) => el instanceof Element && el.tagName.toLowerCase() === "sl-icon-button");
    if (this.disabled || isIconButton) {
      return;
    }
    event.preventDefault();
    this.displayInput.focus({ preventScroll: true });
    this.open = !this.open;
  }
  handleComboboxKeyDown(event) {
    if (event.key === "Tab") {
      return;
    }
    event.stopPropagation();
    this.handleDocumentKeyDown(event);
  }
  handleClearClick(event) {
    event.stopPropagation();
    this.valueHasChanged = true;
    if (this.value !== "") {
      this.setSelectedOptions([]);
      this.displayInput.focus({ preventScroll: true });
      this.updateComplete.then(() => {
        this.emit("sl-clear");
        this.emit("sl-input");
        this.emit("sl-change");
      });
    }
  }
  handleClearMouseDown(event) {
    event.stopPropagation();
    event.preventDefault();
  }
  handleOptionClick(event) {
    const target = event.target;
    const option = target.closest("sl-option");
    const oldValue = this.value;
    if (option && !option.disabled) {
      this.valueHasChanged = true;
      if (this.multiple) {
        this.toggleOptionSelection(option);
      } else {
        this.setSelectedOptions(option);
      }
      this.updateComplete.then(() => this.displayInput.focus({ preventScroll: true }));
      if (this.value !== oldValue) {
        this.updateComplete.then(() => {
          this.emit("sl-input");
          this.emit("sl-change");
        });
      }
      if (!this.multiple) {
        this.hide();
        this.displayInput.focus({ preventScroll: true });
      }
    }
  }
  /* @internal - used by options to update labels */
  handleDefaultSlotChange() {
    if (!customElements.get("sl-option")) {
      customElements.whenDefined("sl-option").then(() => this.handleDefaultSlotChange());
    }
    const allOptions = this.getAllOptions();
    const val = this.valueHasChanged ? this.value : this.defaultValue;
    const value = Array.isArray(val) ? val : [val];
    const values = [];
    allOptions.forEach((option) => values.push(option.value));
    this.setSelectedOptions(allOptions.filter((el) => value.includes(el.value)));
  }
  handleTagRemove(event, option) {
    event.stopPropagation();
    this.valueHasChanged = true;
    if (!this.disabled) {
      this.toggleOptionSelection(option, false);
      this.updateComplete.then(() => {
        this.emit("sl-input");
        this.emit("sl-change");
      });
    }
  }
  // Gets an array of all <sl-option> elements
  getAllOptions() {
    return [...this.querySelectorAll("sl-option")];
  }
  // Gets the first <sl-option> element
  getFirstOption() {
    return this.querySelector("sl-option");
  }
  // Sets the current option, which is the option the user is currently interacting with (e.g. via keyboard). Only one
  // option may be "current" at a time.
  setCurrentOption(option) {
    const allOptions = this.getAllOptions();
    allOptions.forEach((el) => {
      el.current = false;
      el.tabIndex = -1;
    });
    if (option) {
      this.currentOption = option;
      option.current = true;
      option.tabIndex = 0;
      option.focus();
    }
  }
  // Sets the selected option(s)
  setSelectedOptions(option) {
    const allOptions = this.getAllOptions();
    const newSelectedOptions = Array.isArray(option) ? option : [option];
    allOptions.forEach((el) => el.selected = false);
    if (newSelectedOptions.length) {
      newSelectedOptions.forEach((el) => el.selected = true);
    }
    this.selectionChanged();
  }
  // Toggles an option's selected state
  toggleOptionSelection(option, force) {
    if (force === true || force === false) {
      option.selected = force;
    } else {
      option.selected = !option.selected;
    }
    this.selectionChanged();
  }
  // This method must be called whenever the selection changes. It will update the selected options cache, the current
  // value, and the display value
  selectionChanged() {
    var _a, _b, _c;
    const options = this.getAllOptions();
    this.selectedOptions = options.filter((el) => el.selected);
    const cachedValueHasChanged = this.valueHasChanged;
    if (this.multiple) {
      this.value = this.selectedOptions.map((el) => el.value);
      if (this.placeholder && this.value.length === 0) {
        this.displayLabel = "";
      } else {
        this.displayLabel = this.localize.term("numOptionsSelected", this.selectedOptions.length);
      }
    } else {
      const selectedOption = this.selectedOptions[0];
      this.value = (_a = selectedOption == null ? void 0 : selectedOption.value) != null ? _a : "";
      this.displayLabel = (_c = (_b = selectedOption == null ? void 0 : selectedOption.getTextLabel) == null ? void 0 : _b.call(selectedOption)) != null ? _c : "";
    }
    this.valueHasChanged = cachedValueHasChanged;
    this.updateComplete.then(() => {
      this.formControlController.updateValidity();
    });
  }
  get tags() {
    return this.selectedOptions.map((option, index) => {
      if (index < this.maxOptionsVisible || this.maxOptionsVisible <= 0) {
        const tag = this.getTag(option, index);
        return x`<div @sl-remove=${(e) => this.handleTagRemove(e, option)}>
          ${typeof tag === "string" ? o$4(tag) : tag}
        </div>`;
      } else if (index === this.maxOptionsVisible) {
        return x`<sl-tag size=${this.size}>+${this.selectedOptions.length - index}</sl-tag>`;
      }
      return x``;
    });
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  handleDisabledChange() {
    if (this.disabled) {
      this.open = false;
      this.handleOpenChange();
    }
  }
  attributeChangedCallback(name, oldVal, newVal) {
    super.attributeChangedCallback(name, oldVal, newVal);
    if (name === "value") {
      const cachedValueHasChanged = this.valueHasChanged;
      this.value = this.defaultValue;
      this.valueHasChanged = cachedValueHasChanged;
    }
  }
  handleValueChange() {
    if (!this.valueHasChanged) {
      const cachedValueHasChanged = this.valueHasChanged;
      this.value = this.defaultValue;
      this.valueHasChanged = cachedValueHasChanged;
    }
    const allOptions = this.getAllOptions();
    const value = Array.isArray(this.value) ? this.value : [this.value];
    this.setSelectedOptions(allOptions.filter((el) => value.includes(el.value)));
  }
  async handleOpenChange() {
    if (this.open && !this.disabled) {
      this.setCurrentOption(this.selectedOptions[0] || this.getFirstOption());
      this.emit("sl-show");
      this.addOpenListeners();
      await stopAnimations(this);
      this.listbox.hidden = false;
      this.popup.active = true;
      requestAnimationFrame(() => {
        this.setCurrentOption(this.currentOption);
      });
      const { keyframes, options } = getAnimation(this, "select.show", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      if (this.currentOption) {
        scrollIntoView(this.currentOption, this.listbox, "vertical", "auto");
      }
      this.emit("sl-after-show");
    } else {
      this.emit("sl-hide");
      this.removeOpenListeners();
      await stopAnimations(this);
      const { keyframes, options } = getAnimation(this, "select.hide", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      this.listbox.hidden = true;
      this.popup.active = false;
      this.emit("sl-after-hide");
    }
  }
  /** Shows the listbox. */
  async show() {
    if (this.open || this.disabled) {
      this.open = false;
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the listbox. */
  async hide() {
    if (!this.open || this.disabled) {
      this.open = false;
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.valueInput.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.valueInput.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message) {
    this.valueInput.setCustomValidity(message);
    this.formControlController.updateValidity();
  }
  /** Sets focus on the control. */
  focus(options) {
    this.displayInput.focus(options);
  }
  /** Removes focus from the control. */
  blur() {
    this.displayInput.blur();
  }
  render() {
    const hasLabelSlot = this.hasSlotController.test("label");
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasLabel = this.label ? true : !!hasLabelSlot;
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    const hasClearIcon = this.clearable && !this.disabled && this.value.length > 0;
    const isPlaceholderVisible = this.placeholder && this.value && this.value.length <= 0;
    return x`
      <div
        part="form-control"
        class=${e$3({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--has-label": hasLabel,
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          id="label"
          part="form-control-label"
          class="form-control__label"
          aria-hidden=${hasLabel ? "false" : "true"}
          @click=${this.handleLabelClick}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <sl-popup
            class=${e$3({
      select: true,
      "select--standard": true,
      "select--filled": this.filled,
      "select--pill": this.pill,
      "select--open": this.open,
      "select--disabled": this.disabled,
      "select--multiple": this.multiple,
      "select--focused": this.hasFocus,
      "select--placeholder-visible": isPlaceholderVisible,
      "select--top": this.placement === "top",
      "select--bottom": this.placement === "bottom",
      "select--small": this.size === "small",
      "select--medium": this.size === "medium",
      "select--large": this.size === "large"
    })}
            placement=${this.placement}
            strategy=${this.hoist ? "fixed" : "absolute"}
            flip
            shift
            sync="width"
            auto-size="vertical"
            auto-size-padding="10"
          >
            <div
              part="combobox"
              class="select__combobox"
              slot="anchor"
              @keydown=${this.handleComboboxKeyDown}
              @mousedown=${this.handleComboboxMouseDown}
            >
              <slot part="prefix" name="prefix" class="select__prefix"></slot>

              <input
                part="display-input"
                class="select__display-input"
                type="text"
                placeholder=${this.placeholder}
                .disabled=${this.disabled}
                .value=${this.displayLabel}
                autocomplete="off"
                spellcheck="false"
                autocapitalize="off"
                readonly
                aria-controls="listbox"
                aria-expanded=${this.open ? "true" : "false"}
                aria-haspopup="listbox"
                aria-labelledby="label"
                aria-disabled=${this.disabled ? "true" : "false"}
                aria-describedby="help-text"
                role="combobox"
                tabindex="0"
                @focus=${this.handleFocus}
                @blur=${this.handleBlur}
              />

              ${this.multiple ? x`<div part="tags" class="select__tags">${this.tags}</div>` : ""}

              <input
                class="select__value-input"
                type="text"
                ?disabled=${this.disabled}
                ?required=${this.required}
                .value=${Array.isArray(this.value) ? this.value.join(", ") : this.value}
                tabindex="-1"
                aria-hidden="true"
                @focus=${() => this.focus()}
                @invalid=${this.handleInvalid}
              />

              ${hasClearIcon ? x`
                    <button
                      part="clear-button"
                      class="select__clear"
                      type="button"
                      aria-label=${this.localize.term("clearEntry")}
                      @mousedown=${this.handleClearMouseDown}
                      @click=${this.handleClearClick}
                      tabindex="-1"
                    >
                      <slot name="clear-icon">
                        <sl-icon name="x-circle-fill" library="system"></sl-icon>
                      </slot>
                    </button>
                  ` : ""}

              <slot name="suffix" part="suffix" class="select__suffix"></slot>

              <slot name="expand-icon" part="expand-icon" class="select__expand-icon">
                <sl-icon library="system" name="chevron-down"></sl-icon>
              </slot>
            </div>

            <div
              id="listbox"
              role="listbox"
              aria-expanded=${this.open ? "true" : "false"}
              aria-multiselectable=${this.multiple ? "true" : "false"}
              aria-labelledby="label"
              part="listbox"
              class="select__listbox"
              tabindex="-1"
              @mouseup=${this.handleOptionClick}
              @slotchange=${this.handleDefaultSlotChange}
            >
              <slot></slot>
            </div>
          </sl-popup>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${hasHelpText ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlSelect.styles = [component_styles_default, form_control_styles_default, select_styles_default];
SlSelect.dependencies = {
  "sl-icon": SlIcon,
  "sl-popup": SlPopup,
  "sl-tag": SlTag
};
__decorateClass([
  e$7(".select")
], SlSelect.prototype, "popup", 2);
__decorateClass([
  e$7(".select__combobox")
], SlSelect.prototype, "combobox", 2);
__decorateClass([
  e$7(".select__display-input")
], SlSelect.prototype, "displayInput", 2);
__decorateClass([
  e$7(".select__value-input")
], SlSelect.prototype, "valueInput", 2);
__decorateClass([
  e$7(".select__listbox")
], SlSelect.prototype, "listbox", 2);
__decorateClass([
  r$3()
], SlSelect.prototype, "hasFocus", 2);
__decorateClass([
  r$3()
], SlSelect.prototype, "displayLabel", 2);
__decorateClass([
  r$3()
], SlSelect.prototype, "currentOption", 2);
__decorateClass([
  r$3()
], SlSelect.prototype, "selectedOptions", 2);
__decorateClass([
  r$3()
], SlSelect.prototype, "valueHasChanged", 2);
__decorateClass([
  n$6()
], SlSelect.prototype, "name", 2);
__decorateClass([
  r$3()
], SlSelect.prototype, "value", 1);
__decorateClass([
  n$6({ attribute: "value" })
], SlSelect.prototype, "defaultValue", 2);
__decorateClass([
  n$6({ reflect: true })
], SlSelect.prototype, "size", 2);
__decorateClass([
  n$6()
], SlSelect.prototype, "placeholder", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlSelect.prototype, "multiple", 2);
__decorateClass([
  n$6({ attribute: "max-options-visible", type: Number })
], SlSelect.prototype, "maxOptionsVisible", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlSelect.prototype, "disabled", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlSelect.prototype, "clearable", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlSelect.prototype, "open", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlSelect.prototype, "hoist", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlSelect.prototype, "filled", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlSelect.prototype, "pill", 2);
__decorateClass([
  n$6()
], SlSelect.prototype, "label", 2);
__decorateClass([
  n$6({ reflect: true })
], SlSelect.prototype, "placement", 2);
__decorateClass([
  n$6({ attribute: "help-text" })
], SlSelect.prototype, "helpText", 2);
__decorateClass([
  n$6({ reflect: true })
], SlSelect.prototype, "form", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlSelect.prototype, "required", 2);
__decorateClass([
  n$6()
], SlSelect.prototype, "getTag", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlSelect.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch(["defaultValue", "value"], { waitUntilFirstUpdate: true })
], SlSelect.prototype, "handleValueChange", 1);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlSelect.prototype, "handleOpenChange", 1);
setDefaultAnimation("select.show", {
  keyframes: [
    { opacity: 0, scale: 0.9 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 100, easing: "ease" }
});
setDefaultAnimation("select.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.9 }
  ],
  options: { duration: 100, easing: "ease" }
});

var tagName$J = "sl-select";
SlSelect.define("sl-select");
var reactWrapper$d = o$8({
  tagName: tagName$J,
  elementClass: SlSelect,
  react: React$1,
  events: {
    onSlChange: "sl-change",
    onSlClear: "sl-clear",
    onSlInput: "sl-input",
    onSlFocus: "sl-focus",
    onSlBlur: "sl-blur",
    onSlShow: "sl-show",
    onSlAfterShow: "sl-after-show",
    onSlHide: "sl-hide",
    onSlAfterHide: "sl-after-hide",
    onSlInvalid: "sl-invalid"
  },
  displayName: "SlSelect"
});
var select_default = reactWrapper$d;

var tagName$I = "sl-spinner";
SlSpinner.define("sl-spinner");
var reactWrapper$c = o$8({
  tagName: tagName$I,
  elementClass: SlSpinner,
  react: React$1,
  events: {},
  displayName: "SlSpinner"
});
var spinner_default = reactWrapper$c;

// src/components/skeleton/skeleton.styles.ts
var skeleton_styles_default = i$7`
  :host {
    --border-radius: var(--sl-border-radius-pill);
    --color: var(--sl-color-neutral-200);
    --sheen-color: var(--sl-color-neutral-300);

    display: block;
    position: relative;
  }

  .skeleton {
    display: flex;
    width: 100%;
    height: 100%;
    min-height: 1rem;
  }

  .skeleton__indicator {
    flex: 1 1 auto;
    background: var(--color);
    border-radius: var(--border-radius);
  }

  .skeleton--sheen .skeleton__indicator {
    background: linear-gradient(270deg, var(--sheen-color), var(--color), var(--color), var(--sheen-color));
    background-size: 400% 100%;
    animation: sheen 8s ease-in-out infinite;
  }

  .skeleton--pulse .skeleton__indicator {
    animation: pulse 2s ease-in-out 0.5s infinite;
  }

  /* Forced colors mode */
  @media (forced-colors: active) {
    :host {
      --color: GrayText;
    }
  }

  @keyframes sheen {
    0% {
      background-position: 200% 0;
    }
    to {
      background-position: -200% 0;
    }
  }

  @keyframes pulse {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.4;
    }
    100% {
      opacity: 1;
    }
  }
`;

var SlSkeleton = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.effect = "none";
  }
  render() {
    return x`
      <div
        part="base"
        class=${e$3({
      skeleton: true,
      "skeleton--pulse": this.effect === "pulse",
      "skeleton--sheen": this.effect === "sheen"
    })}
      >
        <div part="indicator" class="skeleton__indicator"></div>
      </div>
    `;
  }
};
SlSkeleton.styles = [component_styles_default, skeleton_styles_default];
__decorateClass([
  n$6()
], SlSkeleton.prototype, "effect", 2);

var tagName$H = "sl-skeleton";
SlSkeleton.define("sl-skeleton");
o$8({
  tagName: tagName$H,
  elementClass: SlSkeleton,
  react: React$1,
  events: {},
  displayName: "SlSkeleton"
});

// src/components/switch/switch.styles.ts
var switch_styles_default = i$7`
  :host {
    display: inline-block;
  }

  :host([size='small']) {
    --height: var(--sl-toggle-size-small);
    --thumb-size: calc(var(--sl-toggle-size-small) + 4px);
    --width: calc(var(--height) * 2);

    font-size: var(--sl-input-font-size-small);
  }

  :host([size='medium']) {
    --height: var(--sl-toggle-size-medium);
    --thumb-size: calc(var(--sl-toggle-size-medium) + 4px);
    --width: calc(var(--height) * 2);

    font-size: var(--sl-input-font-size-medium);
  }

  :host([size='large']) {
    --height: var(--sl-toggle-size-large);
    --thumb-size: calc(var(--sl-toggle-size-large) + 4px);
    --width: calc(var(--height) * 2);

    font-size: var(--sl-input-font-size-large);
  }

  .switch {
    position: relative;
    display: inline-flex;
    align-items: center;
    font-family: var(--sl-input-font-family);
    font-size: inherit;
    font-weight: var(--sl-input-font-weight);
    color: var(--sl-input-label-color);
    vertical-align: middle;
    cursor: pointer;
  }

  .switch__control {
    flex: 0 0 auto;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--width);
    height: var(--height);
    background-color: var(--sl-color-neutral-400);
    border: solid var(--sl-input-border-width) var(--sl-color-neutral-400);
    border-radius: var(--height);
    transition:
      var(--sl-transition-fast) border-color,
      var(--sl-transition-fast) background-color;
  }

  .switch__control .switch__thumb {
    width: var(--thumb-size);
    height: var(--thumb-size);
    background-color: var(--sl-color-neutral-0);
    border-radius: 50%;
    border: solid var(--sl-input-border-width) var(--sl-color-neutral-400);
    translate: calc((var(--width) - var(--height)) / -2);
    transition:
      var(--sl-transition-fast) translate ease,
      var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) border-color,
      var(--sl-transition-fast) box-shadow;
  }

  .switch__input {
    position: absolute;
    opacity: 0;
    padding: 0;
    margin: 0;
    pointer-events: none;
  }

  /* Hover */
  .switch:not(.switch--checked):not(.switch--disabled) .switch__control:hover {
    background-color: var(--sl-color-neutral-400);
    border-color: var(--sl-color-neutral-400);
  }

  .switch:not(.switch--checked):not(.switch--disabled) .switch__control:hover .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-neutral-400);
  }

  /* Focus */
  .switch:not(.switch--checked):not(.switch--disabled) .switch__input:focus-visible ~ .switch__control {
    background-color: var(--sl-color-neutral-400);
    border-color: var(--sl-color-neutral-400);
  }

  .switch:not(.switch--checked):not(.switch--disabled) .switch__input:focus-visible ~ .switch__control .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  /* Checked */
  .switch--checked .switch__control {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
  }

  .switch--checked .switch__control .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    translate: calc((var(--width) - var(--height)) / 2);
  }

  /* Checked + hover */
  .switch.switch--checked:not(.switch--disabled) .switch__control:hover {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
  }

  .switch.switch--checked:not(.switch--disabled) .switch__control:hover .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
  }

  /* Checked + focus */
  .switch.switch--checked:not(.switch--disabled) .switch__input:focus-visible ~ .switch__control {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
  }

  .switch.switch--checked:not(.switch--disabled) .switch__input:focus-visible ~ .switch__control .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  /* Disabled */
  .switch--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .switch__label {
    display: inline-block;
    line-height: var(--height);
    margin-inline-start: 0.5em;
    user-select: none;
    -webkit-user-select: none;
  }

  :host([required]) .switch__label::after {
    content: var(--sl-input-required-content);
    color: var(--sl-input-required-content-color);
    margin-inline-start: var(--sl-input-required-content-offset);
  }

  @media (forced-colors: active) {
    .switch.switch--checked:not(.switch--disabled) .switch__control:hover .switch__thumb,
    .switch--checked .switch__control .switch__thumb {
      background-color: ButtonText;
    }
  }
`;

var SlSwitch = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      value: (control) => control.checked ? control.value || "on" : void 0,
      defaultValue: (control) => control.defaultChecked,
      setValue: (control, checked) => control.checked = checked
    });
    this.hasSlotController = new HasSlotController(this, "help-text");
    this.hasFocus = false;
    this.title = "";
    this.name = "";
    this.size = "medium";
    this.disabled = false;
    this.checked = false;
    this.defaultChecked = false;
    this.form = "";
    this.required = false;
    this.helpText = "";
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  firstUpdated() {
    this.formControlController.updateValidity();
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleInput() {
    this.emit("sl-input");
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  handleClick() {
    this.checked = !this.checked;
    this.emit("sl-change");
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleKeyDown(event) {
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      this.checked = false;
      this.emit("sl-change");
      this.emit("sl-input");
    }
    if (event.key === "ArrowRight") {
      event.preventDefault();
      this.checked = true;
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleCheckedChange() {
    this.input.checked = this.checked;
    this.formControlController.updateValidity();
  }
  handleDisabledChange() {
    this.formControlController.setValidity(true);
  }
  /** Simulates a click on the switch. */
  click() {
    this.input.click();
  }
  /** Sets focus on the switch. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the switch. */
  blur() {
    this.input.blur();
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message) {
    this.input.setCustomValidity(message);
    this.formControlController.updateValidity();
  }
  render() {
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    return x`
      <div
        class=${e$3({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          part="base"
          class=${e$3({
      switch: true,
      "switch--checked": this.checked,
      "switch--disabled": this.disabled,
      "switch--focused": this.hasFocus,
      "switch--small": this.size === "small",
      "switch--medium": this.size === "medium",
      "switch--large": this.size === "large"
    })}
        >
          <input
            class="switch__input"
            type="checkbox"
            title=${this.title}
            name=${this.name}
            value=${o$6(this.value)}
            .checked=${l(this.checked)}
            .disabled=${this.disabled}
            .required=${this.required}
            role="switch"
            aria-checked=${this.checked ? "true" : "false"}
            aria-describedby="help-text"
            @click=${this.handleClick}
            @input=${this.handleInput}
            @invalid=${this.handleInvalid}
            @blur=${this.handleBlur}
            @focus=${this.handleFocus}
            @keydown=${this.handleKeyDown}
          />

          <span part="control" class="switch__control">
            <span part="thumb" class="switch__thumb"></span>
          </span>

          <div part="label" class="switch__label">
            <slot></slot>
          </div>
        </label>

        <div
          aria-hidden=${hasHelpText ? "false" : "true"}
          class="form-control__help-text"
          id="help-text"
          part="form-control-help-text"
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlSwitch.styles = [component_styles_default, form_control_styles_default, switch_styles_default];
__decorateClass([
  e$7('input[type="checkbox"]')
], SlSwitch.prototype, "input", 2);
__decorateClass([
  r$3()
], SlSwitch.prototype, "hasFocus", 2);
__decorateClass([
  n$6()
], SlSwitch.prototype, "title", 2);
__decorateClass([
  n$6()
], SlSwitch.prototype, "name", 2);
__decorateClass([
  n$6()
], SlSwitch.prototype, "value", 2);
__decorateClass([
  n$6({ reflect: true })
], SlSwitch.prototype, "size", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlSwitch.prototype, "disabled", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlSwitch.prototype, "checked", 2);
__decorateClass([
  defaultValue("checked")
], SlSwitch.prototype, "defaultChecked", 2);
__decorateClass([
  n$6({ reflect: true })
], SlSwitch.prototype, "form", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlSwitch.prototype, "required", 2);
__decorateClass([
  n$6({ attribute: "help-text" })
], SlSwitch.prototype, "helpText", 2);
__decorateClass([
  watch("checked", { waitUntilFirstUpdate: true })
], SlSwitch.prototype, "handleCheckedChange", 1);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlSwitch.prototype, "handleDisabledChange", 1);

var tagName$G = "sl-switch";
SlSwitch.define("sl-switch");
o$8({
  tagName: tagName$G,
  elementClass: SlSwitch,
  react: React$1,
  events: {
    onSlBlur: "sl-blur",
    onSlChange: "sl-change",
    onSlInput: "sl-input",
    onSlFocus: "sl-focus",
    onSlInvalid: "sl-invalid"
  },
  displayName: "SlSwitch"
});

// src/components/split-panel/split-panel.styles.ts
var split_panel_styles_default = i$7`
  :host {
    --divider-width: 4px;
    --divider-hit-area: 12px;
    --min: 0%;
    --max: 100%;

    display: grid;
  }

  .start,
  .end {
    overflow: hidden;
  }

  .divider {
    flex: 0 0 var(--divider-width);
    display: flex;
    position: relative;
    align-items: center;
    justify-content: center;
    background-color: var(--sl-color-neutral-200);
    color: var(--sl-color-neutral-900);
    z-index: 1;
  }

  .divider:focus {
    outline: none;
  }

  :host(:not([disabled])) .divider:focus-visible {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  :host([disabled]) .divider {
    cursor: not-allowed;
  }

  /* Horizontal */
  :host(:not([vertical], [disabled])) .divider {
    cursor: col-resize;
  }

  :host(:not([vertical])) .divider::after {
    display: flex;
    content: '';
    position: absolute;
    height: 100%;
    left: calc(var(--divider-hit-area) / -2 + var(--divider-width) / 2);
    width: var(--divider-hit-area);
  }

  /* Vertical */
  :host([vertical]) {
    flex-direction: column;
  }

  :host([vertical]:not([disabled])) .divider {
    cursor: row-resize;
  }

  :host([vertical]) .divider::after {
    content: '';
    position: absolute;
    width: 100%;
    top: calc(var(--divider-hit-area) / -2 + var(--divider-width) / 2);
    height: var(--divider-hit-area);
  }

  @media (forced-colors: active) {
    .divider {
      outline: solid 1px transparent;
    }
  }
`;

// src/internal/drag.ts
function drag(container, options) {
  function move(pointerEvent) {
    const dims = container.getBoundingClientRect();
    const defaultView = container.ownerDocument.defaultView;
    const offsetX = dims.left + defaultView.scrollX;
    const offsetY = dims.top + defaultView.scrollY;
    const x = pointerEvent.pageX - offsetX;
    const y = pointerEvent.pageY - offsetY;
    if (options == null ? void 0 : options.onMove) {
      options.onMove(x, y);
    }
  }
  function stop() {
    document.removeEventListener("pointermove", move);
    document.removeEventListener("pointerup", stop);
    if (options == null ? void 0 : options.onStop) {
      options.onStop();
    }
  }
  document.addEventListener("pointermove", move, { passive: true });
  document.addEventListener("pointerup", stop);
  if ((options == null ? void 0 : options.initialEvent) instanceof PointerEvent) {
    move(options.initialEvent);
  }
}

var SNAP_NONE = () => null;
var SlSplitPanel = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.isCollapsed = false;
    this.localize = new LocalizeController(this);
    this.positionBeforeCollapsing = 0;
    this.position = 50;
    this.vertical = false;
    this.disabled = false;
    // Returned when the property is queried, so that string 'snap's are preserved.
    this.snapValue = "";
    // Actually used for computing snap points. All string snaps are converted via `toSnapFunction`.
    this.snapFunction = SNAP_NONE;
    this.snapThreshold = 12;
  }
  /**
   * Converts a string containing either a series of fixed/repeated snap points (e.g. "repeat(20%)", "100px 200px 800px", or "10% 50% repeat(10px)") into a SnapFunction. `SnapFunction`s take in a `SnapFunctionOpts` and return the position that the split panel should snap to.
   *
   * @param snap - The snap string.
   * @returns a `SnapFunction` representing the snap string's logic.
   */
  toSnapFunction(snap) {
    const snapPoints = snap.split(" ");
    return ({ pos, size, snapThreshold, isRtl, vertical }) => {
      let newPos = pos;
      let minDistance = Number.POSITIVE_INFINITY;
      snapPoints.forEach((value) => {
        let snapPoint;
        if (value.startsWith("repeat(")) {
          const repeatVal = snap.substring("repeat(".length, snap.length - 1);
          const isPercent = repeatVal.endsWith("%");
          const repeatNum = Number.parseFloat(repeatVal);
          const snapIntervalPx = isPercent ? size * (repeatNum / 100) : repeatNum;
          snapPoint = Math.round((isRtl && !vertical ? size - pos : pos) / snapIntervalPx) * snapIntervalPx;
        } else if (value.endsWith("%")) {
          snapPoint = size * (Number.parseFloat(value) / 100);
        } else {
          snapPoint = Number.parseFloat(value);
        }
        if (isRtl && !vertical) {
          snapPoint = size - snapPoint;
        }
        const distance = Math.abs(pos - snapPoint);
        if (distance <= snapThreshold && distance < minDistance) {
          newPos = snapPoint;
          minDistance = distance;
        }
      });
      return newPos;
    };
  }
  set snap(snap) {
    this.snapValue = snap != null ? snap : "";
    if (snap) {
      this.snapFunction = typeof snap === "string" ? this.toSnapFunction(snap) : snap;
    } else {
      this.snapFunction = SNAP_NONE;
    }
  }
  get snap() {
    return this.snapValue;
  }
  connectedCallback() {
    super.connectedCallback();
    this.resizeObserver = new ResizeObserver((entries) => this.handleResize(entries));
    this.updateComplete.then(() => this.resizeObserver.observe(this));
    this.detectSize();
    this.cachedPositionInPixels = this.percentageToPixels(this.position);
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.resizeObserver) == null ? void 0 : _a.unobserve(this);
  }
  detectSize() {
    const { width, height } = this.getBoundingClientRect();
    this.size = this.vertical ? height : width;
  }
  percentageToPixels(value) {
    return this.size * (value / 100);
  }
  pixelsToPercentage(value) {
    return value / this.size * 100;
  }
  handleDrag(event) {
    const isRtl = this.localize.dir() === "rtl";
    if (this.disabled) {
      return;
    }
    if (event.cancelable) {
      event.preventDefault();
    }
    drag(this, {
      onMove: (x, y) => {
        var _a;
        let newPositionInPixels = this.vertical ? y : x;
        if (this.primary === "end") {
          newPositionInPixels = this.size - newPositionInPixels;
        }
        newPositionInPixels = (_a = this.snapFunction({
          pos: newPositionInPixels,
          size: this.size,
          snapThreshold: this.snapThreshold,
          isRtl,
          vertical: this.vertical
        })) != null ? _a : newPositionInPixels;
        this.position = clamp(this.pixelsToPercentage(newPositionInPixels), 0, 100);
      },
      initialEvent: event
    });
  }
  handleKeyDown(event) {
    if (this.disabled) {
      return;
    }
    if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", "Home", "End", "Enter"].includes(event.key)) {
      let newPosition = this.position;
      const incr = (event.shiftKey ? 10 : 1) * (this.primary === "end" ? -1 : 1);
      event.preventDefault();
      if (event.key === "ArrowLeft" && !this.vertical || event.key === "ArrowUp" && this.vertical) {
        newPosition -= incr;
      }
      if (event.key === "ArrowRight" && !this.vertical || event.key === "ArrowDown" && this.vertical) {
        newPosition += incr;
      }
      if (event.key === "Home") {
        newPosition = this.primary === "end" ? 100 : 0;
      }
      if (event.key === "End") {
        newPosition = this.primary === "end" ? 0 : 100;
      }
      if (event.key === "Enter") {
        if (this.isCollapsed) {
          newPosition = this.positionBeforeCollapsing;
          this.isCollapsed = false;
        } else {
          const positionBeforeCollapsing = this.position;
          newPosition = 0;
          requestAnimationFrame(() => {
            this.isCollapsed = true;
            this.positionBeforeCollapsing = positionBeforeCollapsing;
          });
        }
      }
      this.position = clamp(newPosition, 0, 100);
    }
  }
  handleResize(entries) {
    const { width, height } = entries[0].contentRect;
    this.size = this.vertical ? height : width;
    if (isNaN(this.cachedPositionInPixels) || this.position === Infinity) {
      this.cachedPositionInPixels = Number(this.getAttribute("position-in-pixels"));
      this.positionInPixels = Number(this.getAttribute("position-in-pixels"));
      this.position = this.pixelsToPercentage(this.positionInPixels);
    }
    if (this.primary) {
      this.position = this.pixelsToPercentage(this.cachedPositionInPixels);
    }
  }
  handlePositionChange() {
    this.cachedPositionInPixels = this.percentageToPixels(this.position);
    this.isCollapsed = false;
    this.positionBeforeCollapsing = 0;
    this.positionInPixels = this.percentageToPixels(this.position);
    this.emit("sl-reposition");
  }
  handlePositionInPixelsChange() {
    this.position = this.pixelsToPercentage(this.positionInPixels);
  }
  handleVerticalChange() {
    this.detectSize();
  }
  render() {
    const gridTemplate = this.vertical ? "gridTemplateRows" : "gridTemplateColumns";
    const gridTemplateAlt = this.vertical ? "gridTemplateColumns" : "gridTemplateRows";
    const isRtl = this.localize.dir() === "rtl";
    const primary = `
      clamp(
        0%,
        clamp(
          var(--min),
          ${this.position}% - var(--divider-width) / 2,
          var(--max)
        ),
        calc(100% - var(--divider-width))
      )
    `;
    const secondary = "auto";
    if (this.primary === "end") {
      if (isRtl && !this.vertical) {
        this.style[gridTemplate] = `${primary} var(--divider-width) ${secondary}`;
      } else {
        this.style[gridTemplate] = `${secondary} var(--divider-width) ${primary}`;
      }
    } else {
      if (isRtl && !this.vertical) {
        this.style[gridTemplate] = `${secondary} var(--divider-width) ${primary}`;
      } else {
        this.style[gridTemplate] = `${primary} var(--divider-width) ${secondary}`;
      }
    }
    this.style[gridTemplateAlt] = "";
    return x`
      <slot name="start" part="panel start" class="start"></slot>

      <div
        part="divider"
        class="divider"
        tabindex=${o$6(this.disabled ? void 0 : "0")}
        role="separator"
        aria-valuenow=${this.position}
        aria-valuemin="0"
        aria-valuemax="100"
        aria-label=${this.localize.term("resize")}
        @keydown=${this.handleKeyDown}
        @mousedown=${this.handleDrag}
        @touchstart=${this.handleDrag}
      >
        <slot name="divider"></slot>
      </div>

      <slot name="end" part="panel end" class="end"></slot>
    `;
  }
};
SlSplitPanel.styles = [component_styles_default, split_panel_styles_default];
__decorateClass([
  e$7(".divider")
], SlSplitPanel.prototype, "divider", 2);
__decorateClass([
  n$6({ type: Number, reflect: true })
], SlSplitPanel.prototype, "position", 2);
__decorateClass([
  n$6({ attribute: "position-in-pixels", type: Number })
], SlSplitPanel.prototype, "positionInPixels", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlSplitPanel.prototype, "vertical", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlSplitPanel.prototype, "disabled", 2);
__decorateClass([
  n$6()
], SlSplitPanel.prototype, "primary", 2);
__decorateClass([
  n$6({ reflect: true })
], SlSplitPanel.prototype, "snap", 1);
__decorateClass([
  n$6({ type: Number, attribute: "snap-threshold" })
], SlSplitPanel.prototype, "snapThreshold", 2);
__decorateClass([
  watch("position")
], SlSplitPanel.prototype, "handlePositionChange", 1);
__decorateClass([
  watch("positionInPixels")
], SlSplitPanel.prototype, "handlePositionInPixelsChange", 1);
__decorateClass([
  watch("vertical")
], SlSplitPanel.prototype, "handleVerticalChange", 1);

var tagName$F = "sl-split-panel";
SlSplitPanel.define("sl-split-panel");
o$8({
  tagName: tagName$F,
  elementClass: SlSplitPanel,
  react: React$1,
  events: {
    onSlReposition: "sl-reposition"
  },
  displayName: "SlSplitPanel"
});

// src/components/mutation-observer/mutation-observer.styles.ts
var mutation_observer_styles_default = i$7`
  :host {
    display: contents;
  }
`;

var SlMutationObserver = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.attrOldValue = false;
    this.charData = false;
    this.charDataOldValue = false;
    this.childList = false;
    this.disabled = false;
    this.handleMutation = (mutationList) => {
      this.emit("sl-mutation", {
        detail: { mutationList }
      });
    };
  }
  connectedCallback() {
    super.connectedCallback();
    this.mutationObserver = new MutationObserver(this.handleMutation);
    if (!this.disabled) {
      this.startObserver();
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.stopObserver();
  }
  startObserver() {
    const observeAttributes = typeof this.attr === "string" && this.attr.length > 0;
    const attributeFilter = observeAttributes && this.attr !== "*" ? this.attr.split(" ") : void 0;
    try {
      this.mutationObserver.observe(this, {
        subtree: true,
        childList: this.childList,
        attributes: observeAttributes,
        attributeFilter,
        attributeOldValue: this.attrOldValue,
        characterData: this.charData,
        characterDataOldValue: this.charDataOldValue
      });
    } catch (e) {
    }
  }
  stopObserver() {
    this.mutationObserver.disconnect();
  }
  handleDisabledChange() {
    if (this.disabled) {
      this.stopObserver();
    } else {
      this.startObserver();
    }
  }
  handleChange() {
    this.stopObserver();
    this.startObserver();
  }
  render() {
    return x` <slot></slot> `;
  }
};
SlMutationObserver.styles = [component_styles_default, mutation_observer_styles_default];
__decorateClass([
  n$6({ reflect: true })
], SlMutationObserver.prototype, "attr", 2);
__decorateClass([
  n$6({ attribute: "attr-old-value", type: Boolean, reflect: true })
], SlMutationObserver.prototype, "attrOldValue", 2);
__decorateClass([
  n$6({ attribute: "char-data", type: Boolean, reflect: true })
], SlMutationObserver.prototype, "charData", 2);
__decorateClass([
  n$6({ attribute: "char-data-old-value", type: Boolean, reflect: true })
], SlMutationObserver.prototype, "charDataOldValue", 2);
__decorateClass([
  n$6({ attribute: "child-list", type: Boolean, reflect: true })
], SlMutationObserver.prototype, "childList", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlMutationObserver.prototype, "disabled", 2);
__decorateClass([
  watch("disabled")
], SlMutationObserver.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("attr", { waitUntilFirstUpdate: true }),
  watch("attr-old-value", { waitUntilFirstUpdate: true }),
  watch("char-data", { waitUntilFirstUpdate: true }),
  watch("char-data-old-value", { waitUntilFirstUpdate: true }),
  watch("childList", { waitUntilFirstUpdate: true })
], SlMutationObserver.prototype, "handleChange", 1);

var tagName$E = "sl-mutation-observer";
SlMutationObserver.define("sl-mutation-observer");
o$8({
  tagName: tagName$E,
  elementClass: SlMutationObserver,
  react: React$1,
  events: {
    onSlMutation: "sl-mutation"
  },
  displayName: "SlMutationObserver"
});

// src/components/progress-bar/progress-bar.styles.ts
var progress_bar_styles_default = i$7`
  :host {
    --height: 1rem;
    --track-color: var(--sl-color-neutral-200);
    --indicator-color: var(--sl-color-primary-600);
    --label-color: var(--sl-color-neutral-0);

    display: block;
  }

  .progress-bar {
    position: relative;
    background-color: var(--track-color);
    height: var(--height);
    border-radius: var(--sl-border-radius-pill);
    box-shadow: inset var(--sl-shadow-small);
    overflow: hidden;
  }

  .progress-bar__indicator {
    height: 100%;
    font-family: var(--sl-font-sans);
    font-size: 12px;
    font-weight: var(--sl-font-weight-normal);
    background-color: var(--indicator-color);
    color: var(--label-color);
    text-align: center;
    line-height: var(--height);
    white-space: nowrap;
    overflow: hidden;
    transition:
      400ms width,
      400ms background-color;
    user-select: none;
    -webkit-user-select: none;
  }

  /* Indeterminate */
  .progress-bar--indeterminate .progress-bar__indicator {
    position: absolute;
    animation: indeterminate 2.5s infinite cubic-bezier(0.37, 0, 0.63, 1);
  }

  .progress-bar--indeterminate.progress-bar--rtl .progress-bar__indicator {
    animation-name: indeterminate-rtl;
  }

  @media (forced-colors: active) {
    .progress-bar {
      outline: solid 1px SelectedItem;
      background-color: var(--sl-color-neutral-0);
    }

    .progress-bar__indicator {
      outline: solid 1px SelectedItem;
      background-color: SelectedItem;
    }
  }

  @keyframes indeterminate {
    0% {
      left: -50%;
      width: 50%;
    }
    75%,
    100% {
      left: 100%;
      width: 50%;
    }
  }

  @keyframes indeterminate-rtl {
    0% {
      right: -50%;
      width: 50%;
    }
    75%,
    100% {
      right: 100%;
      width: 50%;
    }
  }
`;

var SlProgressBar = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.value = 0;
    this.indeterminate = false;
    this.label = "";
  }
  render() {
    return x`
      <div
        part="base"
        class=${e$3({
      "progress-bar": true,
      "progress-bar--indeterminate": this.indeterminate,
      "progress-bar--rtl": this.localize.dir() === "rtl"
    })}
        role="progressbar"
        title=${o$6(this.title)}
        aria-label=${this.label.length > 0 ? this.label : this.localize.term("progress")}
        aria-valuemin="0"
        aria-valuemax="100"
        aria-valuenow=${this.indeterminate ? 0 : this.value}
      >
        <div part="indicator" class="progress-bar__indicator" style=${o$5({ width: `${this.value}%` })}>
          ${!this.indeterminate ? x` <slot part="label" class="progress-bar__label"></slot> ` : ""}
        </div>
      </div>
    `;
  }
};
SlProgressBar.styles = [component_styles_default, progress_bar_styles_default];
__decorateClass([
  n$6({ type: Number, reflect: true })
], SlProgressBar.prototype, "value", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlProgressBar.prototype, "indeterminate", 2);
__decorateClass([
  n$6()
], SlProgressBar.prototype, "label", 2);

var tagName$D = "sl-progress-bar";
SlProgressBar.define("sl-progress-bar");
o$8({
  tagName: tagName$D,
  elementClass: SlProgressBar,
  react: React$1,
  events: {},
  displayName: "SlProgressBar"
});

// src/components/progress-ring/progress-ring.styles.ts
var progress_ring_styles_default = i$7`
  :host {
    --size: 128px;
    --track-width: 4px;
    --track-color: var(--sl-color-neutral-200);
    --indicator-width: var(--track-width);
    --indicator-color: var(--sl-color-primary-600);
    --indicator-transition-duration: 0.35s;

    display: inline-flex;
  }

  .progress-ring {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .progress-ring__image {
    width: var(--size);
    height: var(--size);
    rotate: -90deg;
    transform-origin: 50% 50%;
  }

  .progress-ring__track,
  .progress-ring__indicator {
    --radius: calc(var(--size) / 2 - max(var(--track-width), var(--indicator-width)) * 0.5);
    --circumference: calc(var(--radius) * 2 * 3.141592654);

    fill: none;
    r: var(--radius);
    cx: calc(var(--size) / 2);
    cy: calc(var(--size) / 2);
  }

  .progress-ring__track {
    stroke: var(--track-color);
    stroke-width: var(--track-width);
  }

  .progress-ring__indicator {
    stroke: var(--indicator-color);
    stroke-width: var(--indicator-width);
    stroke-linecap: round;
    transition-property: stroke-dashoffset;
    transition-duration: var(--indicator-transition-duration);
    stroke-dasharray: var(--circumference) var(--circumference);
    stroke-dashoffset: calc(var(--circumference) - var(--percentage) * var(--circumference));
  }

  .progress-ring__label {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    text-align: center;
    user-select: none;
    -webkit-user-select: none;
  }
`;

var SlProgressRing = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.value = 0;
    this.label = "";
  }
  updated(changedProps) {
    super.updated(changedProps);
    if (changedProps.has("value")) {
      const radius = parseFloat(getComputedStyle(this.indicator).getPropertyValue("r"));
      const circumference = 2 * Math.PI * radius;
      const offset = circumference - this.value / 100 * circumference;
      this.indicatorOffset = `${offset}px`;
    }
  }
  render() {
    return x`
      <div
        part="base"
        class="progress-ring"
        role="progressbar"
        aria-label=${this.label.length > 0 ? this.label : this.localize.term("progress")}
        aria-describedby="label"
        aria-valuemin="0"
        aria-valuemax="100"
        aria-valuenow="${this.value}"
        style="--percentage: ${this.value / 100}"
      >
        <svg class="progress-ring__image">
          <circle class="progress-ring__track"></circle>
          <circle class="progress-ring__indicator" style="stroke-dashoffset: ${this.indicatorOffset}"></circle>
        </svg>

        <slot id="label" part="label" class="progress-ring__label"></slot>
      </div>
    `;
  }
};
SlProgressRing.styles = [component_styles_default, progress_ring_styles_default];
__decorateClass([
  e$7(".progress-ring__indicator")
], SlProgressRing.prototype, "indicator", 2);
__decorateClass([
  r$3()
], SlProgressRing.prototype, "indicatorOffset", 2);
__decorateClass([
  n$6({ type: Number, reflect: true })
], SlProgressRing.prototype, "value", 2);
__decorateClass([
  n$6()
], SlProgressRing.prototype, "label", 2);

var tagName$C = "sl-progress-ring";
SlProgressRing.define("sl-progress-ring");
o$8({
  tagName: tagName$C,
  elementClass: SlProgressRing,
  react: React$1,
  events: {},
  displayName: "SlProgressRing"
});

// src/components/qr-code/qr-code.styles.ts
var qr_code_styles_default = i$7`
  :host {
    display: inline-block;
  }
`;

/*
 jquery-qrcode v0.14.0 - https://larsjung.de/jquery-qrcode/ */
let G=null;class H{}H.render=function(w,B){G(w,B);};self.QrCreator=H;
(function(w){function B(t,c,a,e){var b={},h=w(a,c);h.u(t);h.J();e=e||0;var r=h.h(),d=h.h()+2*e;b.text=t;b.level=c;b.version=a;b.O=d;b.a=function(b,a){b-=e;a-=e;return 0>b||b>=r||0>a||a>=r?false:h.a(b,a)};return b}function C(t,c,a,e,b,h,r,d,g,x){function u(b,a,f,c,d,r,g){b?(t.lineTo(a+r,f+g),t.arcTo(a,f,c,d,h)):t.lineTo(a,f);}r?t.moveTo(c+h,a):t.moveTo(c,a);u(d,e,a,e,b,-h,0);u(g,e,b,c,b,0,-h);u(x,c,b,c,a,h,0);u(r,c,a,e,a,0,h);}function z(t,c,a,e,b,h,r,d,g,x){function u(b,a,c,d){t.moveTo(b+c,a);t.lineTo(b,
a);t.lineTo(b,a+d);t.arcTo(b,a,b+c,a,h);}r&&u(c,a,h,h);d&&u(e,a,-h,h);g&&u(e,b,-h,-h);x&&u(c,b,h,-h);}function A(t,c){var a=c.fill;if("string"===typeof a)t.fillStyle=a;else {var e=a.type,b=a.colorStops;a=a.position.map((b)=>Math.round(b*c.size));if("linear-gradient"===e)var h=t.createLinearGradient.apply(t,a);else if("radial-gradient"===e)h=t.createRadialGradient.apply(t,a);else throw Error("Unsupported fill");b.forEach(([b,a])=>{h.addColorStop(b,a);});t.fillStyle=h;}}function y(t,c){a:{var a=c.text,e=
c.v,b=c.N,h=c.K,r=c.P;b=Math.max(1,b||1);for(h=Math.min(40,h||40);b<=h;b+=1)try{var d=B(a,e,b,r);break a}catch(J){}d=void 0;}if(!d)return null;a=t.getContext("2d");c.background&&(a.fillStyle=c.background,a.fillRect(c.left,c.top,c.size,c.size));e=d.O;h=c.size/e;a.beginPath();for(r=0;r<e;r+=1)for(b=0;b<e;b+=1){var g=a,x=c.left+b*h,u=c.top+r*h,p=r,q=b,f=d.a,k=x+h,m=u+h,D=p-1,E=p+1,n=q-1,l=q+1,y=Math.floor(Math.min(.5,Math.max(0,c.R))*h),v=f(p,q),I=f(D,n),w=f(D,q);D=f(D,l);var F=f(p,l);l=f(E,l);q=f(E,
q);E=f(E,n);p=f(p,n);x=Math.round(x);u=Math.round(u);k=Math.round(k);m=Math.round(m);v?C(g,x,u,k,m,y,!w&&!p,!w&&!F,!q&&!F,!q&&!p):z(g,x,u,k,m,y,w&&p&&I,w&&F&&D,q&&F&&l,q&&p&&E);}A(a,c);a.fill();return t}var v={minVersion:1,maxVersion:40,ecLevel:"L",left:0,top:0,size:200,fill:"#000",background:null,text:"no text",radius:.5,quiet:0};G=function(t,c){var a={};Object.assign(a,v,t);a.N=a.minVersion;a.K=a.maxVersion;a.v=a.ecLevel;a.left=a.left;a.top=a.top;a.size=a.size;a.fill=a.fill;a.background=a.background;
a.text=a.text;a.R=a.radius;a.P=a.quiet;if(c instanceof HTMLCanvasElement){if(c.width!==a.size||c.height!==a.size)c.width=a.size,c.height=a.size;c.getContext("2d").clearRect(0,0,c.width,c.height);y(c,a);}else t=document.createElement("canvas"),t.width=a.size,t.height=a.size,a=y(t,a),c.appendChild(a);};})(function(){function w(c){var a=C.s(c);return {S:function(){return 4},b:function(){return a.length},write:function(c){for(var b=0;b<a.length;b+=1)c.put(a[b],8);}}}function B(){var c=[],a=0,e={B:function(){return c},
c:function(b){return 1==(c[Math.floor(b/8)]>>>7-b%8&1)},put:function(b,h){for(var a=0;a<h;a+=1)e.m(1==(b>>>h-a-1&1));},f:function(){return a},m:function(b){var h=Math.floor(a/8);c.length<=h&&c.push(0);b&&(c[h]|=128>>>a%8);a+=1;}};return e}function C(c,a){function e(b,h){for(var a=-1;7>=a;a+=1)if(!(-1>=b+a||d<=b+a))for(var c=-1;7>=c;c+=1) -1>=h+c||d<=h+c||(r[b+a][h+c]=0<=a&&6>=a&&(0==c||6==c)||0<=c&&6>=c&&(0==a||6==a)||2<=a&&4>=a&&2<=c&&4>=c?true:false);}function b(b,a){for(var f=d=4*c+17,k=Array(f),m=0;m<
f;m+=1){k[m]=Array(f);for(var p=0;p<f;p+=1)k[m][p]=null;}r=k;e(0,0);e(d-7,0);e(0,d-7);f=y.G(c);for(k=0;k<f.length;k+=1)for(m=0;m<f.length;m+=1){p=f[k];var q=f[m];if(null==r[p][q])for(var n=-2;2>=n;n+=1)for(var l=-2;2>=l;l+=1)r[p+n][q+l]=-2==n||2==n||-2==l||2==l||0==n&&0==l;}for(f=8;f<d-8;f+=1)null==r[f][6]&&(r[f][6]=0==f%2);for(f=8;f<d-8;f+=1)null==r[6][f]&&(r[6][f]=0==f%2);f=y.w(h<<3|a);for(k=0;15>k;k+=1)m=!b&&1==(f>>k&1),r[6>k?k:8>k?k+1:d-15+k][8]=m,r[8][8>k?d-k-1:9>k?15-k:14-k]=m;r[d-8][8]=!b;if(7<=
c){f=y.A(c);for(k=0;18>k;k+=1)m=!b&&1==(f>>k&1),r[Math.floor(k/3)][k%3+d-8-3]=m;for(k=0;18>k;k+=1)m=!b&&1==(f>>k&1),r[k%3+d-8-3][Math.floor(k/3)]=m;}if(null==g){b=t.I(c,h);f=B();for(k=0;k<x.length;k+=1)m=x[k],f.put(4,4),f.put(m.b(),y.f(4,c)),m.write(f);for(k=m=0;k<b.length;k+=1)m+=b[k].j;if(f.f()>8*m)throw Error("code length overflow. ("+f.f()+">"+8*m+")");for(f.f()+4<=8*m&&f.put(0,4);0!=f.f()%8;)f.m(false);for(;!(f.f()>=8*m);){f.put(236,8);if(f.f()>=8*m)break;f.put(17,8);}var u=0;m=k=0;p=Array(b.length);
q=Array(b.length);for(n=0;n<b.length;n+=1){var v=b[n].j,w=b[n].o-v;k=Math.max(k,v);m=Math.max(m,w);p[n]=Array(v);for(l=0;l<p[n].length;l+=1)p[n][l]=255&f.B()[l+u];u+=v;l=y.C(w);v=z(p[n],l.b()-1).l(l);q[n]=Array(l.b()-1);for(l=0;l<q[n].length;l+=1)w=l+v.b()-q[n].length,q[n][l]=0<=w?v.c(w):0;}for(l=f=0;l<b.length;l+=1)f+=b[l].o;f=Array(f);for(l=u=0;l<k;l+=1)for(n=0;n<b.length;n+=1)l<p[n].length&&(f[u]=p[n][l],u+=1);for(l=0;l<m;l+=1)for(n=0;n<b.length;n+=1)l<q[n].length&&(f[u]=q[n][l],u+=1);g=f;}b=g;f=
-1;k=d-1;m=7;p=0;a=y.F(a);for(q=d-1;0<q;q-=2)for(6==q&&--q;;){for(n=0;2>n;n+=1)null==r[k][q-n]&&(l=false,p<b.length&&(l=1==(b[p]>>>m&1)),a(k,q-n)&&(l=!l),r[k][q-n]=l,--m,-1==m&&(p+=1,m=7));k+=f;if(0>k||d<=k){k-=f;f=-f;break}}}var h=A[a],r=null,d=0,g=null,x=[],u={u:function(b){b=w(b);x.push(b);g=null;},a:function(b,a){if(0>b||d<=b||0>a||d<=a)throw Error(b+","+a);return r[b][a]},h:function(){return d},J:function(){for(var a=0,h=0,c=0;8>c;c+=1){b(true,c);var d=y.D(u);if(0==c||a>d)a=d,h=c;}b(false,h);}};return u}
function z(c,a){if("undefined"==typeof c.length)throw Error(c.length+"/"+a);var e=function(){for(var b=0;b<c.length&&0==c[b];)b+=1;for(var r=Array(c.length-b+a),d=0;d<c.length-b;d+=1)r[d]=c[d+b];return r}(),b={c:function(b){return e[b]},b:function(){return e.length},multiply:function(a){for(var h=Array(b.b()+a.b()-1),c=0;c<b.b();c+=1)for(var g=0;g<a.b();g+=1)h[c+g]^=v.i(v.g(b.c(c))+v.g(a.c(g)));return z(h,0)},l:function(a){if(0>b.b()-a.b())return b;for(var c=v.g(b.c(0))-v.g(a.c(0)),h=Array(b.b()),
g=0;g<b.b();g+=1)h[g]=b.c(g);for(g=0;g<a.b();g+=1)h[g]^=v.i(v.g(a.c(g))+c);return z(h,0).l(a)}};return b}C.s=function(c){for(var a=[],e=0;e<c.length;e++){var b=c.charCodeAt(e);128>b?a.push(b):2048>b?a.push(192|b>>6,128|b&63):55296>b||57344<=b?a.push(224|b>>12,128|b>>6&63,128|b&63):(e++,b=65536+((b&1023)<<10|c.charCodeAt(e)&1023),a.push(240|b>>18,128|b>>12&63,128|b>>6&63,128|b&63));}return a};var A={L:1,M:0,Q:3,H:2},y=function(){function c(b){for(var a=0;0!=b;)a+=1,b>>>=1;return a}var a=[[],[6,18],
[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],
[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],e={w:function(b){for(var a=b<<10;0<=c(a)-c(1335);)a^=1335<<c(a)-c(1335);return (b<<10|a)^21522},A:function(b){for(var a=b<<12;0<=c(a)-c(7973);)a^=7973<<c(a)-c(7973);return b<<12|a},G:function(b){return a[b-1]},F:function(b){switch(b){case 0:return function(b,a){return 0==(b+a)%2};case 1:return function(b){return 0==b%2};case 2:return function(b,a){return 0==a%3};case 3:return function(b,a){return 0==
(b+a)%3};case 4:return function(b,a){return 0==(Math.floor(b/2)+Math.floor(a/3))%2};case 5:return function(b,a){return 0==b*a%2+b*a%3};case 6:return function(b,a){return 0==(b*a%2+b*a%3)%2};case 7:return function(b,a){return 0==(b*a%3+(b+a)%2)%2};default:throw Error("bad maskPattern:"+b);}},C:function(b){for(var a=z([1],0),c=0;c<b;c+=1)a=a.multiply(z([1,v.i(c)],0));return a},f:function(b,a){if(4!=b||1>a||40<a)throw Error("mode: "+b+"; type: "+a);return 10>a?8:16},D:function(b){for(var a=b.h(),c=0,
d=0;d<a;d+=1)for(var g=0;g<a;g+=1){for(var e=0,t=b.a(d,g),p=-1;1>=p;p+=1)if(!(0>d+p||a<=d+p))for(var q=-1;1>=q;q+=1)0>g+q||a<=g+q||(0!=p||0!=q)&&t==b.a(d+p,g+q)&&(e+=1);5<e&&(c+=3+e-5);}for(d=0;d<a-1;d+=1)for(g=0;g<a-1;g+=1)if(e=0,b.a(d,g)&&(e+=1),b.a(d+1,g)&&(e+=1),b.a(d,g+1)&&(e+=1),b.a(d+1,g+1)&&(e+=1),0==e||4==e)c+=3;for(d=0;d<a;d+=1)for(g=0;g<a-6;g+=1)b.a(d,g)&&!b.a(d,g+1)&&b.a(d,g+2)&&b.a(d,g+3)&&b.a(d,g+4)&&!b.a(d,g+5)&&b.a(d,g+6)&&(c+=40);for(g=0;g<a;g+=1)for(d=0;d<a-6;d+=1)b.a(d,g)&&!b.a(d+
1,g)&&b.a(d+2,g)&&b.a(d+3,g)&&b.a(d+4,g)&&!b.a(d+5,g)&&b.a(d+6,g)&&(c+=40);for(g=e=0;g<a;g+=1)for(d=0;d<a;d+=1)b.a(d,g)&&(e+=1);return c+=Math.abs(100*e/a/a-50)/5*10}};return e}(),v=function(){for(var c=Array(256),a=Array(256),e=0;8>e;e+=1)c[e]=1<<e;for(e=8;256>e;e+=1)c[e]=c[e-4]^c[e-5]^c[e-6]^c[e-8];for(e=0;255>e;e+=1)a[c[e]]=e;return {g:function(b){if(1>b)throw Error("glog("+b+")");return a[b]},i:function(b){for(;0>b;)b+=255;for(;256<=b;)b-=255;return c[b]}}}(),t=function(){function c(b,c){switch(c){case A.L:return a[4*
(b-1)];case A.M:return a[4*(b-1)+1];case A.Q:return a[4*(b-1)+2];case A.H:return a[4*(b-1)+3]}}var a=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,
2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12,7,37,13],[5,122,98,1,123,99],[7,73,
45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,
151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],
[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],
[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],e={I:function(b,a){var e=c(b,a);if("undefined"==
typeof e)throw Error("bad rs block @ typeNumber:"+b+"/errorCorrectLevel:"+a);b=e.length/3;a=[];for(var d=0;d<b;d+=1)for(var g=e[3*d],h=e[3*d+1],t=e[3*d+2],p=0;p<g;p+=1){var q=t,f={};f.o=h;f.j=q;a.push(f);}return a}};return e}();return C}());
const QrCreator$1 = QrCreator;

var SlQrCode = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.value = "";
    this.label = "";
    this.size = 128;
    this.fill = "black";
    this.background = "white";
    this.radius = 0;
    this.errorCorrection = "H";
  }
  firstUpdated() {
    this.generate();
  }
  generate() {
    if (!this.hasUpdated) {
      return;
    }
    QrCreator$1.render(
      {
        text: this.value,
        radius: this.radius,
        ecLevel: this.errorCorrection,
        fill: this.fill,
        background: this.background,
        // We draw the canvas larger and scale its container down to avoid blurring on high-density displays
        size: this.size * 2
      },
      this.canvas
    );
  }
  render() {
    var _a;
    return x`
      <canvas
        part="base"
        class="qr-code"
        role="img"
        aria-label=${((_a = this.label) == null ? void 0 : _a.length) > 0 ? this.label : this.value}
        style=${o$5({
      width: `${this.size}px`,
      height: `${this.size}px`
    })}
      ></canvas>
    `;
  }
};
SlQrCode.styles = [component_styles_default, qr_code_styles_default];
__decorateClass([
  e$7("canvas")
], SlQrCode.prototype, "canvas", 2);
__decorateClass([
  n$6()
], SlQrCode.prototype, "value", 2);
__decorateClass([
  n$6()
], SlQrCode.prototype, "label", 2);
__decorateClass([
  n$6({ type: Number })
], SlQrCode.prototype, "size", 2);
__decorateClass([
  n$6()
], SlQrCode.prototype, "fill", 2);
__decorateClass([
  n$6()
], SlQrCode.prototype, "background", 2);
__decorateClass([
  n$6({ type: Number })
], SlQrCode.prototype, "radius", 2);
__decorateClass([
  n$6({ attribute: "error-correction" })
], SlQrCode.prototype, "errorCorrection", 2);
__decorateClass([
  watch(["background", "errorCorrection", "fill", "radius", "size", "value"])
], SlQrCode.prototype, "generate", 1);

var tagName$B = "sl-qr-code";
SlQrCode.define("sl-qr-code");
o$8({
  tagName: tagName$B,
  elementClass: SlQrCode,
  react: React$1,
  events: {},
  displayName: "SlQrCode"
});

// src/components/button/button.styles.ts
var button_styles_default = i$7`
  :host {
    display: inline-block;
    position: relative;
    width: auto;
    cursor: pointer;
  }

  .button {
    display: inline-flex;
    align-items: stretch;
    justify-content: center;
    width: 100%;
    border-style: solid;
    border-width: var(--sl-input-border-width);
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-font-weight-semibold);
    text-decoration: none;
    user-select: none;
    -webkit-user-select: none;
    white-space: nowrap;
    vertical-align: middle;
    padding: 0;
    transition:
      var(--sl-transition-x-fast) background-color,
      var(--sl-transition-x-fast) color,
      var(--sl-transition-x-fast) border,
      var(--sl-transition-x-fast) box-shadow;
    cursor: inherit;
  }

  .button::-moz-focus-inner {
    border: 0;
  }

  .button:focus {
    outline: none;
  }

  .button:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .button--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* When disabled, prevent mouse events from bubbling up from children */
  .button--disabled * {
    pointer-events: none;
  }

  .button__prefix,
  .button__suffix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    pointer-events: none;
  }

  .button__label {
    display: inline-block;
  }

  .button__label::slotted(sl-icon) {
    vertical-align: -2px;
  }

  /*
   * Standard buttons
   */

  /* Default */
  .button--standard.button--default {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-input-border-color);
    color: var(--sl-color-neutral-700);
  }

  .button--standard.button--default:hover:not(.button--disabled) {
    background-color: var(--sl-color-primary-50);
    border-color: var(--sl-color-primary-300);
    color: var(--sl-color-primary-700);
  }

  .button--standard.button--default:active:not(.button--disabled) {
    background-color: var(--sl-color-primary-100);
    border-color: var(--sl-color-primary-400);
    color: var(--sl-color-primary-700);
  }

  /* Primary */
  .button--standard.button--primary {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--primary:hover:not(.button--disabled) {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--primary:active:not(.button--disabled) {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  /* Success */
  .button--standard.button--success {
    background-color: var(--sl-color-success-600);
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--success:hover:not(.button--disabled) {
    background-color: var(--sl-color-success-500);
    border-color: var(--sl-color-success-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--success:active:not(.button--disabled) {
    background-color: var(--sl-color-success-600);
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  /* Neutral */
  .button--standard.button--neutral {
    background-color: var(--sl-color-neutral-600);
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--neutral:hover:not(.button--disabled) {
    background-color: var(--sl-color-neutral-500);
    border-color: var(--sl-color-neutral-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--neutral:active:not(.button--disabled) {
    background-color: var(--sl-color-neutral-600);
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  /* Warning */
  .button--standard.button--warning {
    background-color: var(--sl-color-warning-600);
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }
  .button--standard.button--warning:hover:not(.button--disabled) {
    background-color: var(--sl-color-warning-500);
    border-color: var(--sl-color-warning-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--warning:active:not(.button--disabled) {
    background-color: var(--sl-color-warning-600);
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  /* Danger */
  .button--standard.button--danger {
    background-color: var(--sl-color-danger-600);
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--danger:hover:not(.button--disabled) {
    background-color: var(--sl-color-danger-500);
    border-color: var(--sl-color-danger-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--danger:active:not(.button--disabled) {
    background-color: var(--sl-color-danger-600);
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  /*
   * Outline buttons
   */

  .button--outline {
    background: none;
    border: solid 1px;
  }

  /* Default */
  .button--outline.button--default {
    border-color: var(--sl-input-border-color);
    color: var(--sl-color-neutral-700);
  }

  .button--outline.button--default:hover:not(.button--disabled),
  .button--outline.button--default.button--checked:not(.button--disabled) {
    border-color: var(--sl-color-primary-600);
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--default:active:not(.button--disabled) {
    border-color: var(--sl-color-primary-700);
    background-color: var(--sl-color-primary-700);
    color: var(--sl-color-neutral-0);
  }

  /* Primary */
  .button--outline.button--primary {
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-primary-600);
  }

  .button--outline.button--primary:hover:not(.button--disabled),
  .button--outline.button--primary.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--primary:active:not(.button--disabled) {
    border-color: var(--sl-color-primary-700);
    background-color: var(--sl-color-primary-700);
    color: var(--sl-color-neutral-0);
  }

  /* Success */
  .button--outline.button--success {
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-success-600);
  }

  .button--outline.button--success:hover:not(.button--disabled),
  .button--outline.button--success.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--success:active:not(.button--disabled) {
    border-color: var(--sl-color-success-700);
    background-color: var(--sl-color-success-700);
    color: var(--sl-color-neutral-0);
  }

  /* Neutral */
  .button--outline.button--neutral {
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-600);
  }

  .button--outline.button--neutral:hover:not(.button--disabled),
  .button--outline.button--neutral.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--neutral:active:not(.button--disabled) {
    border-color: var(--sl-color-neutral-700);
    background-color: var(--sl-color-neutral-700);
    color: var(--sl-color-neutral-0);
  }

  /* Warning */
  .button--outline.button--warning {
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-warning-600);
  }

  .button--outline.button--warning:hover:not(.button--disabled),
  .button--outline.button--warning.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--warning:active:not(.button--disabled) {
    border-color: var(--sl-color-warning-700);
    background-color: var(--sl-color-warning-700);
    color: var(--sl-color-neutral-0);
  }

  /* Danger */
  .button--outline.button--danger {
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-danger-600);
  }

  .button--outline.button--danger:hover:not(.button--disabled),
  .button--outline.button--danger.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--danger:active:not(.button--disabled) {
    border-color: var(--sl-color-danger-700);
    background-color: var(--sl-color-danger-700);
    color: var(--sl-color-neutral-0);
  }

  @media (forced-colors: active) {
    .button.button--outline.button--checked:not(.button--disabled) {
      outline: solid 2px transparent;
    }
  }

  /*
   * Text buttons
   */

  .button--text {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-600);
  }

  .button--text:hover:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-500);
  }

  .button--text:focus-visible:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-500);
  }

  .button--text:active:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-700);
  }

  /*
   * Size modifiers
   */

  .button--small {
    height: auto;
    min-height: var(--sl-input-height-small);
    font-size: var(--sl-button-font-size-small);
    line-height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-small);
  }

  .button--medium {
    height: auto;
    min-height: var(--sl-input-height-medium);
    font-size: var(--sl-button-font-size-medium);
    line-height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-medium);
  }

  .button--large {
    height: auto;
    min-height: var(--sl-input-height-large);
    font-size: var(--sl-button-font-size-large);
    line-height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-large);
  }

  /*
   * Pill modifier
   */

  .button--pill.button--small {
    border-radius: var(--sl-input-height-small);
  }

  .button--pill.button--medium {
    border-radius: var(--sl-input-height-medium);
  }

  .button--pill.button--large {
    border-radius: var(--sl-input-height-large);
  }

  /*
   * Circle modifier
   */

  .button--circle {
    padding-left: 0;
    padding-right: 0;
  }

  .button--circle.button--small {
    width: var(--sl-input-height-small);
    border-radius: 50%;
  }

  .button--circle.button--medium {
    width: var(--sl-input-height-medium);
    border-radius: 50%;
  }

  .button--circle.button--large {
    width: var(--sl-input-height-large);
    border-radius: 50%;
  }

  .button--circle .button__prefix,
  .button--circle .button__suffix,
  .button--circle .button__caret {
    display: none;
  }

  /*
   * Caret modifier
   */

  .button--caret .button__suffix {
    display: none;
  }

  .button--caret .button__caret {
    height: auto;
  }

  /*
   * Loading modifier
   */

  .button--loading {
    position: relative;
    cursor: wait;
  }

  .button--loading .button__prefix,
  .button--loading .button__label,
  .button--loading .button__suffix,
  .button--loading .button__caret {
    visibility: hidden;
  }

  .button--loading sl-spinner {
    --indicator-color: currentColor;
    position: absolute;
    font-size: 1em;
    height: 1em;
    width: 1em;
    top: calc(50% - 0.5em);
    left: calc(50% - 0.5em);
  }

  /*
   * Badges
   */

  .button ::slotted(sl-badge) {
    position: absolute;
    top: 0;
    right: 0;
    translate: 50% -50%;
    pointer-events: none;
  }

  .button--rtl ::slotted(sl-badge) {
    right: auto;
    left: 0;
    translate: -50% -50%;
  }

  /*
   * Button spacing
   */

  .button--has-label.button--small .button__label {
    padding: 0 var(--sl-spacing-small);
  }

  .button--has-label.button--medium .button__label {
    padding: 0 var(--sl-spacing-medium);
  }

  .button--has-label.button--large .button__label {
    padding: 0 var(--sl-spacing-large);
  }

  .button--has-prefix.button--small {
    padding-inline-start: var(--sl-spacing-x-small);
  }

  .button--has-prefix.button--small .button__label {
    padding-inline-start: var(--sl-spacing-x-small);
  }

  .button--has-prefix.button--medium {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-prefix.button--medium .button__label {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-prefix.button--large {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-prefix.button--large .button__label {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-suffix.button--small,
  .button--caret.button--small {
    padding-inline-end: var(--sl-spacing-x-small);
  }

  .button--has-suffix.button--small .button__label,
  .button--caret.button--small .button__label {
    padding-inline-end: var(--sl-spacing-x-small);
  }

  .button--has-suffix.button--medium,
  .button--caret.button--medium {
    padding-inline-end: var(--sl-spacing-small);
  }

  .button--has-suffix.button--medium .button__label,
  .button--caret.button--medium .button__label {
    padding-inline-end: var(--sl-spacing-small);
  }

  .button--has-suffix.button--large,
  .button--caret.button--large {
    padding-inline-end: var(--sl-spacing-small);
  }

  .button--has-suffix.button--large .button__label,
  .button--caret.button--large .button__label {
    padding-inline-end: var(--sl-spacing-small);
  }

  /*
   * Button groups support a variety of button types (e.g. buttons with tooltips, buttons as dropdown triggers, etc.).
   * This means buttons aren't always direct descendants of the button group, thus we can't target them with the
   * ::slotted selector. To work around this, the button group component does some magic to add these special classes to
   * buttons and we style them here instead.
   */

  :host([data-sl-button-group__button--first]:not([data-sl-button-group__button--last])) .button {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }

  :host([data-sl-button-group__button--inner]) .button {
    border-radius: 0;
  }

  :host([data-sl-button-group__button--last]:not([data-sl-button-group__button--first])) .button {
    border-start-start-radius: 0;
    border-end-start-radius: 0;
  }

  /* All except the first */
  :host([data-sl-button-group__button]:not([data-sl-button-group__button--first])) {
    margin-inline-start: calc(-1 * var(--sl-input-border-width));
  }

  /* Add a visual separator between solid buttons */
  :host(
      [data-sl-button-group__button]:not(
          [data-sl-button-group__button--first],
          [data-sl-button-group__button--radio],
          [variant='default']
        ):not(:hover)
    )
    .button:after {
    content: '';
    position: absolute;
    top: 0;
    inset-inline-start: 0;
    bottom: 0;
    border-left: solid 1px rgb(128 128 128 / 33%);
    mix-blend-mode: multiply;
  }

  /* Bump hovered, focused, and checked buttons up so their focus ring isn't clipped */
  :host([data-sl-button-group__button--hover]) {
    z-index: 1;
  }

  /* Focus and checked are always on top */
  :host([data-sl-button-group__button--focus]),
  :host([data-sl-button-group__button][checked]) {
    z-index: 2;
  }
`;

var radio_button_styles_default = i$7`
  ${button_styles_default}

  .button__prefix,
  .button__suffix,
  .button__label {
    display: inline-flex;
    position: relative;
    align-items: center;
  }

  /* We use a hidden input so constraint validation errors work, since they don't appear to show when used with buttons.
    We can't actually hide it, though, otherwise the messages will be suppressed by the browser. */
  .hidden-input {
    all: unset;
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    outline: dotted 1px red;
    opacity: 0;
    z-index: -1;
  }
`;

var SlRadioButton = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "[default]", "prefix", "suffix");
    this.hasFocus = false;
    this.checked = false;
    this.disabled = false;
    this.size = "medium";
    this.pill = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "presentation");
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleClick(e) {
    if (this.disabled) {
      e.preventDefault();
      e.stopPropagation();
      return;
    }
    this.checked = true;
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  /** Sets focus on the radio button. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the radio button. */
  blur() {
    this.input.blur();
  }
  render() {
    return u`
      <div part="base" role="presentation">
        <button
          part="${`button${this.checked ? " button--checked" : ""}`}"
          role="radio"
          aria-checked="${this.checked}"
          class=${e$3({
      button: true,
      "button--default": true,
      "button--small": this.size === "small",
      "button--medium": this.size === "medium",
      "button--large": this.size === "large",
      "button--checked": this.checked,
      "button--disabled": this.disabled,
      "button--focused": this.hasFocus,
      "button--outline": true,
      "button--pill": this.pill,
      "button--has-label": this.hasSlotController.test("[default]"),
      "button--has-prefix": this.hasSlotController.test("prefix"),
      "button--has-suffix": this.hasSlotController.test("suffix")
    })}
          aria-disabled=${this.disabled}
          type="button"
          value=${o$6(this.value)}
          @blur=${this.handleBlur}
          @focus=${this.handleFocus}
          @click=${this.handleClick}
        >
          <slot name="prefix" part="prefix" class="button__prefix"></slot>
          <slot part="label" class="button__label"></slot>
          <slot name="suffix" part="suffix" class="button__suffix"></slot>
        </button>
      </div>
    `;
  }
};
SlRadioButton.styles = [component_styles_default, radio_button_styles_default];
__decorateClass([
  e$7(".button")
], SlRadioButton.prototype, "input", 2);
__decorateClass([
  e$7(".hidden-input")
], SlRadioButton.prototype, "hiddenInput", 2);
__decorateClass([
  r$3()
], SlRadioButton.prototype, "hasFocus", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlRadioButton.prototype, "checked", 2);
__decorateClass([
  n$6()
], SlRadioButton.prototype, "value", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlRadioButton.prototype, "disabled", 2);
__decorateClass([
  n$6({ reflect: true })
], SlRadioButton.prototype, "size", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlRadioButton.prototype, "pill", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlRadioButton.prototype, "handleDisabledChange", 1);

var tagName$A = "sl-radio-button";
SlRadioButton.define("sl-radio-button");
o$8({
  tagName: tagName$A,
  elementClass: SlRadioButton,
  react: React$1,
  events: {
    onSlBlur: "sl-blur",
    onSlFocus: "sl-focus"
  },
  displayName: "SlRadioButton"
});

// src/components/radio/radio.styles.ts
var radio_styles_default = i$7`
  :host {
    display: block;
  }

  :host(:focus-visible) {
    outline: 0px;
  }

  .radio {
    display: inline-flex;
    align-items: top;
    font-family: var(--sl-input-font-family);
    font-size: var(--sl-input-font-size-medium);
    font-weight: var(--sl-input-font-weight);
    color: var(--sl-input-label-color);
    vertical-align: middle;
    cursor: pointer;
  }

  .radio--small {
    --toggle-size: var(--sl-toggle-size-small);
    font-size: var(--sl-input-font-size-small);
  }

  .radio--medium {
    --toggle-size: var(--sl-toggle-size-medium);
    font-size: var(--sl-input-font-size-medium);
  }

  .radio--large {
    --toggle-size: var(--sl-toggle-size-large);
    font-size: var(--sl-input-font-size-large);
  }

  .radio__checked-icon {
    display: inline-flex;
    width: var(--toggle-size);
    height: var(--toggle-size);
  }

  .radio__control {
    flex: 0 0 auto;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--toggle-size);
    height: var(--toggle-size);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
    border-radius: 50%;
    background-color: var(--sl-input-background-color);
    color: transparent;
    transition:
      var(--sl-transition-fast) border-color,
      var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) box-shadow;
  }

  .radio__input {
    position: absolute;
    opacity: 0;
    padding: 0;
    margin: 0;
    pointer-events: none;
  }

  /* Hover */
  .radio:not(.radio--checked):not(.radio--disabled) .radio__control:hover {
    border-color: var(--sl-input-border-color-hover);
    background-color: var(--sl-input-background-color-hover);
  }

  /* Checked */
  .radio--checked .radio__control {
    color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    background-color: var(--sl-color-primary-600);
  }

  /* Checked + hover */
  .radio.radio--checked:not(.radio--disabled) .radio__control:hover {
    border-color: var(--sl-color-primary-500);
    background-color: var(--sl-color-primary-500);
  }

  /* Checked + focus */
  :host(:focus-visible) .radio__control {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  /* Disabled */
  .radio--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* When the control isn't checked, hide the circle for Windows High Contrast mode a11y */
  .radio:not(.radio--checked) svg circle {
    opacity: 0;
  }

  .radio__label {
    display: inline-block;
    color: var(--sl-input-label-color);
    line-height: var(--toggle-size);
    margin-inline-start: 0.5em;
    user-select: none;
    -webkit-user-select: none;
  }
`;

var SlRadio = class extends ShoelaceElement {
  constructor() {
    super();
    this.checked = false;
    this.hasFocus = false;
    this.size = "medium";
    this.disabled = false;
    this.handleBlur = () => {
      this.hasFocus = false;
      this.emit("sl-blur");
    };
    this.handleClick = () => {
      if (!this.disabled) {
        this.checked = true;
      }
    };
    this.handleFocus = () => {
      this.hasFocus = true;
      this.emit("sl-focus");
    };
    this.addEventListener("blur", this.handleBlur);
    this.addEventListener("click", this.handleClick);
    this.addEventListener("focus", this.handleFocus);
  }
  connectedCallback() {
    super.connectedCallback();
    this.setInitialAttributes();
  }
  setInitialAttributes() {
    this.setAttribute("role", "radio");
    this.setAttribute("tabindex", "-1");
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  handleCheckedChange() {
    this.setAttribute("aria-checked", this.checked ? "true" : "false");
    this.setAttribute("tabindex", this.checked ? "0" : "-1");
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  render() {
    return x`
      <span
        part="base"
        class=${e$3({
      radio: true,
      "radio--checked": this.checked,
      "radio--disabled": this.disabled,
      "radio--focused": this.hasFocus,
      "radio--small": this.size === "small",
      "radio--medium": this.size === "medium",
      "radio--large": this.size === "large"
    })}
      >
        <span part="${`control${this.checked ? " control--checked" : ""}`}" class="radio__control">
          ${this.checked ? x` <sl-icon part="checked-icon" class="radio__checked-icon" library="system" name="radio"></sl-icon> ` : ""}
        </span>

        <slot part="label" class="radio__label"></slot>
      </span>
    `;
  }
};
SlRadio.styles = [component_styles_default, radio_styles_default];
SlRadio.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  r$3()
], SlRadio.prototype, "checked", 2);
__decorateClass([
  r$3()
], SlRadio.prototype, "hasFocus", 2);
__decorateClass([
  n$6()
], SlRadio.prototype, "value", 2);
__decorateClass([
  n$6({ reflect: true })
], SlRadio.prototype, "size", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlRadio.prototype, "disabled", 2);
__decorateClass([
  watch("checked")
], SlRadio.prototype, "handleCheckedChange", 1);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlRadio.prototype, "handleDisabledChange", 1);

var tagName$z = "sl-radio";
SlRadio.define("sl-radio");
o$8({
  tagName: tagName$z,
  elementClass: SlRadio,
  react: React$1,
  events: {
    onSlBlur: "sl-blur",
    onSlFocus: "sl-focus"
  },
  displayName: "SlRadio"
});

// src/components/range/range.styles.ts
var range_styles_default = i$7`
  :host {
    --thumb-size: 20px;
    --tooltip-offset: 10px;
    --track-color-active: var(--sl-color-neutral-200);
    --track-color-inactive: var(--sl-color-neutral-200);
    --track-active-offset: 0%;
    --track-height: 6px;

    display: block;
  }

  .range {
    position: relative;
  }

  .range__control {
    --percent: 0%;
    -webkit-appearance: none;
    border-radius: 3px;
    width: 100%;
    height: var(--track-height);
    background: transparent;
    line-height: var(--sl-input-height-medium);
    vertical-align: middle;
    margin: 0;

    background-image: linear-gradient(
      to right,
      var(--track-color-inactive) 0%,
      var(--track-color-inactive) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) 100%
    );
  }

  .range--rtl .range__control {
    background-image: linear-gradient(
      to left,
      var(--track-color-inactive) 0%,
      var(--track-color-inactive) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) 100%
    );
  }

  /* Webkit */
  .range__control::-webkit-slider-runnable-track {
    width: 100%;
    height: var(--track-height);
    border-radius: 3px;
    border: none;
  }

  .range__control::-webkit-slider-thumb {
    border: none;
    width: var(--thumb-size);
    height: var(--thumb-size);
    border-radius: 50%;
    background-color: var(--sl-color-primary-600);
    border: solid var(--sl-input-border-width) var(--sl-color-primary-600);
    -webkit-appearance: none;
    margin-top: calc(var(--thumb-size) / -2 + var(--track-height) / 2);
    cursor: pointer;
  }

  .range__control:enabled::-webkit-slider-thumb:hover {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
  }

  .range__control:enabled:focus-visible::-webkit-slider-thumb {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .range__control:enabled::-webkit-slider-thumb:active {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    cursor: grabbing;
  }

  /* Firefox */
  .range__control::-moz-focus-outer {
    border: 0;
  }

  .range__control::-moz-range-progress {
    background-color: var(--track-color-active);
    border-radius: 3px;
    height: var(--track-height);
  }

  .range__control::-moz-range-track {
    width: 100%;
    height: var(--track-height);
    background-color: var(--track-color-inactive);
    border-radius: 3px;
    border: none;
  }

  .range__control::-moz-range-thumb {
    border: none;
    height: var(--thumb-size);
    width: var(--thumb-size);
    border-radius: 50%;
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    transition:
      var(--sl-transition-fast) border-color,
      var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) box-shadow;
    cursor: pointer;
  }

  .range__control:enabled::-moz-range-thumb:hover {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
  }

  .range__control:enabled:focus-visible::-moz-range-thumb {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .range__control:enabled::-moz-range-thumb:active {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    cursor: grabbing;
  }

  /* States */
  .range__control:focus-visible {
    outline: none;
  }

  .range__control:disabled {
    opacity: 0.5;
  }

  .range__control:disabled::-webkit-slider-thumb {
    cursor: not-allowed;
  }

  .range__control:disabled::-moz-range-thumb {
    cursor: not-allowed;
  }

  /* Tooltip output */
  .range__tooltip {
    position: absolute;
    z-index: var(--sl-z-index-tooltip);
    left: 0;
    border-radius: var(--sl-tooltip-border-radius);
    background-color: var(--sl-tooltip-background-color);
    font-family: var(--sl-tooltip-font-family);
    font-size: var(--sl-tooltip-font-size);
    font-weight: var(--sl-tooltip-font-weight);
    line-height: var(--sl-tooltip-line-height);
    color: var(--sl-tooltip-color);
    opacity: 0;
    padding: var(--sl-tooltip-padding);
    transition: var(--sl-transition-fast) opacity;
    pointer-events: none;
  }

  .range__tooltip:after {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    left: 50%;
    translate: calc(-1 * var(--sl-tooltip-arrow-size));
  }

  .range--tooltip-visible .range__tooltip {
    opacity: 1;
  }

  /* Tooltip on top */
  .range--tooltip-top .range__tooltip {
    top: calc(-1 * var(--thumb-size) - var(--tooltip-offset));
  }

  .range--tooltip-top .range__tooltip:after {
    border-top: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-left: var(--sl-tooltip-arrow-size) solid transparent;
    border-right: var(--sl-tooltip-arrow-size) solid transparent;
    top: 100%;
  }

  /* Tooltip on bottom */
  .range--tooltip-bottom .range__tooltip {
    bottom: calc(-1 * var(--thumb-size) - var(--tooltip-offset));
  }

  .range--tooltip-bottom .range__tooltip:after {
    border-bottom: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-left: var(--sl-tooltip-arrow-size) solid transparent;
    border-right: var(--sl-tooltip-arrow-size) solid transparent;
    bottom: 100%;
  }

  @media (forced-colors: active) {
    .range__control,
    .range__tooltip {
      border: solid 1px transparent;
    }

    .range__control::-webkit-slider-thumb {
      border: solid 1px transparent;
    }

    .range__control::-moz-range-thumb {
      border: solid 1px transparent;
    }

    .range__tooltip:after {
      display: none;
    }
  }
`;

var SlRange = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this);
    this.hasSlotController = new HasSlotController(this, "help-text", "label");
    this.localize = new LocalizeController(this);
    this.hasFocus = false;
    this.hasTooltip = false;
    this.title = "";
    this.name = "";
    this.value = 0;
    this.label = "";
    this.helpText = "";
    this.disabled = false;
    this.min = 0;
    this.max = 100;
    this.step = 1;
    this.tooltip = "top";
    this.tooltipFormatter = (value) => value.toString();
    this.form = "";
    this.defaultValue = 0;
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  connectedCallback() {
    super.connectedCallback();
    this.resizeObserver = new ResizeObserver(() => this.syncRange());
    if (this.value < this.min) {
      this.value = this.min;
    }
    if (this.value > this.max) {
      this.value = this.max;
    }
    this.updateComplete.then(() => {
      this.syncRange();
      this.resizeObserver.observe(this.input);
    });
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.resizeObserver) == null ? void 0 : _a.unobserve(this.input);
  }
  handleChange() {
    this.emit("sl-change");
  }
  handleInput() {
    this.value = parseFloat(this.input.value);
    this.emit("sl-input");
    this.syncRange();
  }
  handleBlur() {
    this.hasFocus = false;
    this.hasTooltip = false;
    this.emit("sl-blur");
  }
  handleFocus() {
    this.hasFocus = true;
    this.hasTooltip = true;
    this.emit("sl-focus");
  }
  handleThumbDragStart() {
    this.hasTooltip = true;
  }
  handleThumbDragEnd() {
    this.hasTooltip = false;
  }
  syncProgress(percent) {
    this.input.style.setProperty("--percent", `${percent * 100}%`);
  }
  syncTooltip(percent) {
    if (this.output !== null) {
      const inputWidth = this.input.offsetWidth;
      const tooltipWidth = this.output.offsetWidth;
      const thumbSize = getComputedStyle(this.input).getPropertyValue("--thumb-size");
      const isRtl = this.localize.dir() === "rtl";
      const percentAsWidth = inputWidth * percent;
      if (isRtl) {
        const x = `${inputWidth - percentAsWidth}px + ${percent} * ${thumbSize}`;
        this.output.style.translate = `calc((${x} - ${tooltipWidth / 2}px - ${thumbSize} / 2))`;
      } else {
        const x = `${percentAsWidth}px - ${percent} * ${thumbSize}`;
        this.output.style.translate = `calc(${x} - ${tooltipWidth / 2}px + ${thumbSize} / 2)`;
      }
    }
  }
  handleValueChange() {
    this.formControlController.updateValidity();
    this.input.value = this.value.toString();
    this.value = parseFloat(this.input.value);
    this.syncRange();
  }
  handleDisabledChange() {
    this.formControlController.setValidity(this.disabled);
  }
  syncRange() {
    const percent = Math.max(0, (this.value - this.min) / (this.max - this.min));
    this.syncProgress(percent);
    if (this.tooltip !== "none" && this.hasTooltip) {
      this.updateComplete.then(() => this.syncTooltip(percent));
    }
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  /** Sets focus on the range. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the range. */
  blur() {
    this.input.blur();
  }
  /** Increments the value of the range by the value of the step attribute. */
  stepUp() {
    this.input.stepUp();
    if (this.value !== Number(this.input.value)) {
      this.value = Number(this.input.value);
    }
  }
  /** Decrements the value of the range by the value of the step attribute. */
  stepDown() {
    this.input.stepDown();
    if (this.value !== Number(this.input.value)) {
      this.value = Number(this.input.value);
    }
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message) {
    this.input.setCustomValidity(message);
    this.formControlController.updateValidity();
  }
  render() {
    const hasLabelSlot = this.hasSlotController.test("label");
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasLabel = this.label ? true : !!hasLabelSlot;
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    return x`
      <div
        part="form-control"
        class=${e$3({
      "form-control": true,
      "form-control--medium": true,
      // range only has one size
      "form-control--has-label": hasLabel,
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          part="form-control-label"
          class="form-control__label"
          for="input"
          aria-hidden=${hasLabel ? "false" : "true"}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div
            part="base"
            class=${e$3({
      range: true,
      "range--disabled": this.disabled,
      "range--focused": this.hasFocus,
      "range--rtl": this.localize.dir() === "rtl",
      "range--tooltip-visible": this.hasTooltip,
      "range--tooltip-top": this.tooltip === "top",
      "range--tooltip-bottom": this.tooltip === "bottom"
    })}
            @mousedown=${this.handleThumbDragStart}
            @mouseup=${this.handleThumbDragEnd}
            @touchstart=${this.handleThumbDragStart}
            @touchend=${this.handleThumbDragEnd}
          >
            <input
              part="input"
              id="input"
              class="range__control"
              title=${this.title}
              type="range"
              name=${o$6(this.name)}
              ?disabled=${this.disabled}
              min=${o$6(this.min)}
              max=${o$6(this.max)}
              step=${o$6(this.step)}
              .value=${l(this.value.toString())}
              aria-describedby="help-text"
              @change=${this.handleChange}
              @focus=${this.handleFocus}
              @input=${this.handleInput}
              @invalid=${this.handleInvalid}
              @blur=${this.handleBlur}
            />
            ${this.tooltip !== "none" && !this.disabled ? x`
                  <output part="tooltip" class="range__tooltip">
                    ${typeof this.tooltipFormatter === "function" ? this.tooltipFormatter(this.value) : this.value}
                  </output>
                ` : ""}
          </div>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${hasHelpText ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlRange.styles = [component_styles_default, form_control_styles_default, range_styles_default];
__decorateClass([
  e$7(".range__control")
], SlRange.prototype, "input", 2);
__decorateClass([
  e$7(".range__tooltip")
], SlRange.prototype, "output", 2);
__decorateClass([
  r$3()
], SlRange.prototype, "hasFocus", 2);
__decorateClass([
  r$3()
], SlRange.prototype, "hasTooltip", 2);
__decorateClass([
  n$6()
], SlRange.prototype, "title", 2);
__decorateClass([
  n$6()
], SlRange.prototype, "name", 2);
__decorateClass([
  n$6({ type: Number })
], SlRange.prototype, "value", 2);
__decorateClass([
  n$6()
], SlRange.prototype, "label", 2);
__decorateClass([
  n$6({ attribute: "help-text" })
], SlRange.prototype, "helpText", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlRange.prototype, "disabled", 2);
__decorateClass([
  n$6({ type: Number })
], SlRange.prototype, "min", 2);
__decorateClass([
  n$6({ type: Number })
], SlRange.prototype, "max", 2);
__decorateClass([
  n$6({ type: Number })
], SlRange.prototype, "step", 2);
__decorateClass([
  n$6()
], SlRange.prototype, "tooltip", 2);
__decorateClass([
  n$6({ attribute: false })
], SlRange.prototype, "tooltipFormatter", 2);
__decorateClass([
  n$6({ reflect: true })
], SlRange.prototype, "form", 2);
__decorateClass([
  defaultValue()
], SlRange.prototype, "defaultValue", 2);
__decorateClass([
  t$2({ passive: true })
], SlRange.prototype, "handleThumbDragStart", 1);
__decorateClass([
  watch("value", { waitUntilFirstUpdate: true })
], SlRange.prototype, "handleValueChange", 1);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlRange.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("hasTooltip", { waitUntilFirstUpdate: true })
], SlRange.prototype, "syncRange", 1);

var tagName$y = "sl-range";
SlRange.define("sl-range");
o$8({
  tagName: tagName$y,
  elementClass: SlRange,
  react: React$1,
  events: {
    onSlBlur: "sl-blur",
    onSlChange: "sl-change",
    onSlFocus: "sl-focus",
    onSlInput: "sl-input",
    onSlInvalid: "sl-invalid"
  },
  displayName: "SlRange"
});

// src/components/radio-group/radio-group.styles.ts
var radio_group_styles_default = i$7`
  :host {
    display: block;
  }

  .form-control {
    position: relative;
    border: none;
    padding: 0;
    margin: 0;
  }

  .form-control__label {
    padding: 0;
  }

  .radio-group--required .radio-group__label::after {
    content: var(--sl-input-required-content);
    margin-inline-start: var(--sl-input-required-content-offset);
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
`;

// src/components/button-group/button-group.styles.ts
var button_group_styles_default = i$7`
  :host {
    display: inline-block;
  }

  .button-group {
    display: flex;
    flex-wrap: nowrap;
  }
`;

var SlButtonGroup = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.disableRole = false;
    this.label = "";
  }
  handleFocus(event) {
    const button = findButton(event.target);
    button == null ? void 0 : button.toggleAttribute("data-sl-button-group__button--focus", true);
  }
  handleBlur(event) {
    const button = findButton(event.target);
    button == null ? void 0 : button.toggleAttribute("data-sl-button-group__button--focus", false);
  }
  handleMouseOver(event) {
    const button = findButton(event.target);
    button == null ? void 0 : button.toggleAttribute("data-sl-button-group__button--hover", true);
  }
  handleMouseOut(event) {
    const button = findButton(event.target);
    button == null ? void 0 : button.toggleAttribute("data-sl-button-group__button--hover", false);
  }
  handleSlotChange() {
    const slottedElements = [...this.defaultSlot.assignedElements({ flatten: true })];
    slottedElements.forEach((el) => {
      const index = slottedElements.indexOf(el);
      const button = findButton(el);
      if (button) {
        button.toggleAttribute("data-sl-button-group__button", true);
        button.toggleAttribute("data-sl-button-group__button--first", index === 0);
        button.toggleAttribute("data-sl-button-group__button--inner", index > 0 && index < slottedElements.length - 1);
        button.toggleAttribute("data-sl-button-group__button--last", index === slottedElements.length - 1);
        button.toggleAttribute(
          "data-sl-button-group__button--radio",
          button.tagName.toLowerCase() === "sl-radio-button"
        );
      }
    });
  }
  render() {
    return x`
      <div
        part="base"
        class="button-group"
        role="${this.disableRole ? "presentation" : "group"}"
        aria-label=${this.label}
        @focusout=${this.handleBlur}
        @focusin=${this.handleFocus}
        @mouseover=${this.handleMouseOver}
        @mouseout=${this.handleMouseOut}
      >
        <slot @slotchange=${this.handleSlotChange}></slot>
      </div>
    `;
  }
};
SlButtonGroup.styles = [component_styles_default, button_group_styles_default];
__decorateClass([
  e$7("slot")
], SlButtonGroup.prototype, "defaultSlot", 2);
__decorateClass([
  r$3()
], SlButtonGroup.prototype, "disableRole", 2);
__decorateClass([
  n$6()
], SlButtonGroup.prototype, "label", 2);
function findButton(el) {
  var _a;
  const selector = "sl-button, sl-radio-button";
  return (_a = el.closest(selector)) != null ? _a : el.querySelector(selector);
}

var SlRadioGroup = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this);
    this.hasSlotController = new HasSlotController(this, "help-text", "label");
    this.customValidityMessage = "";
    this.hasButtonGroup = false;
    this.errorMessage = "";
    this.defaultValue = "";
    this.label = "";
    this.helpText = "";
    this.name = "option";
    this.value = "";
    this.size = "medium";
    this.form = "";
    this.required = false;
  }
  /** Gets the validity state object */
  get validity() {
    const isRequiredAndEmpty = this.required && !this.value;
    const hasCustomValidityMessage = this.customValidityMessage !== "";
    if (hasCustomValidityMessage) {
      return customErrorValidityState;
    } else if (isRequiredAndEmpty) {
      return valueMissingValidityState;
    }
    return validValidityState;
  }
  /** Gets the validation message */
  get validationMessage() {
    const isRequiredAndEmpty = this.required && !this.value;
    const hasCustomValidityMessage = this.customValidityMessage !== "";
    if (hasCustomValidityMessage) {
      return this.customValidityMessage;
    } else if (isRequiredAndEmpty) {
      return this.validationInput.validationMessage;
    }
    return "";
  }
  connectedCallback() {
    super.connectedCallback();
    this.defaultValue = this.value;
  }
  firstUpdated() {
    this.formControlController.updateValidity();
  }
  getAllRadios() {
    return [...this.querySelectorAll("sl-radio, sl-radio-button")];
  }
  handleRadioClick(event) {
    const target = event.target.closest("sl-radio, sl-radio-button");
    const radios = this.getAllRadios();
    const oldValue = this.value;
    if (!target || target.disabled) {
      return;
    }
    this.value = target.value;
    radios.forEach((radio) => radio.checked = radio === target);
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleKeyDown(event) {
    var _a;
    if (!["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", " "].includes(event.key)) {
      return;
    }
    const radios = this.getAllRadios().filter((radio) => !radio.disabled);
    const checkedRadio = (_a = radios.find((radio) => radio.checked)) != null ? _a : radios[0];
    const incr = event.key === " " ? 0 : ["ArrowUp", "ArrowLeft"].includes(event.key) ? -1 : 1;
    const oldValue = this.value;
    let index = radios.indexOf(checkedRadio) + incr;
    if (index < 0) {
      index = radios.length - 1;
    }
    if (index > radios.length - 1) {
      index = 0;
    }
    this.getAllRadios().forEach((radio) => {
      radio.checked = false;
      if (!this.hasButtonGroup) {
        radio.setAttribute("tabindex", "-1");
      }
    });
    this.value = radios[index].value;
    radios[index].checked = true;
    if (!this.hasButtonGroup) {
      radios[index].setAttribute("tabindex", "0");
      radios[index].focus();
    } else {
      radios[index].shadowRoot.querySelector("button").focus();
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
    event.preventDefault();
  }
  handleLabelClick() {
    this.focus();
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  async syncRadioElements() {
    var _a, _b;
    const radios = this.getAllRadios();
    await Promise.all(
      // Sync the checked state and size
      radios.map(async (radio) => {
        await radio.updateComplete;
        radio.checked = radio.value === this.value;
        radio.size = this.size;
      })
    );
    this.hasButtonGroup = radios.some((radio) => radio.tagName.toLowerCase() === "sl-radio-button");
    if (radios.length > 0 && !radios.some((radio) => radio.checked)) {
      if (this.hasButtonGroup) {
        const buttonRadio = (_a = radios[0].shadowRoot) == null ? void 0 : _a.querySelector("button");
        if (buttonRadio) {
          buttonRadio.setAttribute("tabindex", "0");
        }
      } else {
        radios[0].setAttribute("tabindex", "0");
      }
    }
    if (this.hasButtonGroup) {
      const buttonGroup = (_b = this.shadowRoot) == null ? void 0 : _b.querySelector("sl-button-group");
      if (buttonGroup) {
        buttonGroup.disableRole = true;
      }
    }
  }
  syncRadios() {
    if (customElements.get("sl-radio") && customElements.get("sl-radio-button")) {
      this.syncRadioElements();
      return;
    }
    if (customElements.get("sl-radio")) {
      this.syncRadioElements();
    } else {
      customElements.whenDefined("sl-radio").then(() => this.syncRadios());
    }
    if (customElements.get("sl-radio-button")) {
      this.syncRadioElements();
    } else {
      customElements.whenDefined("sl-radio-button").then(() => this.syncRadios());
    }
  }
  updateCheckedRadio() {
    const radios = this.getAllRadios();
    radios.forEach((radio) => radio.checked = radio.value === this.value);
    this.formControlController.setValidity(this.validity.valid);
  }
  handleSizeChange() {
    this.syncRadios();
  }
  handleValueChange() {
    if (this.hasUpdated) {
      this.updateCheckedRadio();
    }
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    const isRequiredAndEmpty = this.required && !this.value;
    const hasCustomValidityMessage = this.customValidityMessage !== "";
    if (isRequiredAndEmpty || hasCustomValidityMessage) {
      this.formControlController.emitInvalidEvent();
      return false;
    }
    return true;
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    const isValid = this.validity.valid;
    this.errorMessage = this.customValidityMessage || isValid ? "" : this.validationInput.validationMessage;
    this.formControlController.setValidity(isValid);
    this.validationInput.hidden = true;
    clearTimeout(this.validationTimeout);
    if (!isValid) {
      this.validationInput.hidden = false;
      this.validationInput.reportValidity();
      this.validationTimeout = setTimeout(() => this.validationInput.hidden = true, 1e4);
    }
    return isValid;
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message = "") {
    this.customValidityMessage = message;
    this.errorMessage = message;
    this.validationInput.setCustomValidity(message);
    this.formControlController.updateValidity();
  }
  /** Sets focus on the radio-group. */
  focus(options) {
    const radios = this.getAllRadios();
    const checked = radios.find((radio) => radio.checked);
    const firstEnabledRadio = radios.find((radio) => !radio.disabled);
    const radioToFocus = checked || firstEnabledRadio;
    if (radioToFocus) {
      radioToFocus.focus(options);
    }
  }
  render() {
    const hasLabelSlot = this.hasSlotController.test("label");
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasLabel = this.label ? true : !!hasLabelSlot;
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    const defaultSlot = x`
      <slot @slotchange=${this.syncRadios} @click=${this.handleRadioClick} @keydown=${this.handleKeyDown}></slot>
    `;
    return x`
      <fieldset
        part="form-control"
        class=${e$3({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--radio-group": true,
      "form-control--has-label": hasLabel,
      "form-control--has-help-text": hasHelpText
    })}
        role="radiogroup"
        aria-labelledby="label"
        aria-describedby="help-text"
        aria-errormessage="error-message"
      >
        <label
          part="form-control-label"
          id="label"
          class="form-control__label"
          aria-hidden=${hasLabel ? "false" : "true"}
          @click=${this.handleLabelClick}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div class="visually-hidden">
            <div id="error-message" aria-live="assertive">${this.errorMessage}</div>
            <label class="radio-group__validation">
              <input
                type="text"
                class="radio-group__validation-input"
                ?required=${this.required}
                tabindex="-1"
                hidden
                @invalid=${this.handleInvalid}
              />
            </label>
          </div>

          ${this.hasButtonGroup ? x`
                <sl-button-group part="button-group" exportparts="base:button-group__base" role="presentation">
                  ${defaultSlot}
                </sl-button-group>
              ` : defaultSlot}
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${hasHelpText ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </fieldset>
    `;
  }
};
SlRadioGroup.styles = [component_styles_default, form_control_styles_default, radio_group_styles_default];
SlRadioGroup.dependencies = { "sl-button-group": SlButtonGroup };
__decorateClass([
  e$7("slot:not([name])")
], SlRadioGroup.prototype, "defaultSlot", 2);
__decorateClass([
  e$7(".radio-group__validation-input")
], SlRadioGroup.prototype, "validationInput", 2);
__decorateClass([
  r$3()
], SlRadioGroup.prototype, "hasButtonGroup", 2);
__decorateClass([
  r$3()
], SlRadioGroup.prototype, "errorMessage", 2);
__decorateClass([
  r$3()
], SlRadioGroup.prototype, "defaultValue", 2);
__decorateClass([
  n$6()
], SlRadioGroup.prototype, "label", 2);
__decorateClass([
  n$6({ attribute: "help-text" })
], SlRadioGroup.prototype, "helpText", 2);
__decorateClass([
  n$6()
], SlRadioGroup.prototype, "name", 2);
__decorateClass([
  n$6({ reflect: true })
], SlRadioGroup.prototype, "value", 2);
__decorateClass([
  n$6({ reflect: true })
], SlRadioGroup.prototype, "size", 2);
__decorateClass([
  n$6({ reflect: true })
], SlRadioGroup.prototype, "form", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlRadioGroup.prototype, "required", 2);
__decorateClass([
  watch("size", { waitUntilFirstUpdate: true })
], SlRadioGroup.prototype, "handleSizeChange", 1);
__decorateClass([
  watch("value")
], SlRadioGroup.prototype, "handleValueChange", 1);

var tagName$x = "sl-radio-group";
SlRadioGroup.define("sl-radio-group");
o$8({
  tagName: tagName$x,
  elementClass: SlRadioGroup,
  react: React$1,
  events: {
    onSlChange: "sl-change",
    onSlInput: "sl-input",
    onSlInvalid: "sl-invalid"
  },
  displayName: "SlRadioGroup"
});

// src/components/image-comparer/image-comparer.styles.ts
var image_comparer_styles_default = i$7`
  :host {
    --divider-width: 2px;
    --handle-size: 2.5rem;

    display: inline-block;
    position: relative;
  }

  .image-comparer {
    max-width: 100%;
    max-height: 100%;
    overflow: hidden;
  }

  .image-comparer__before,
  .image-comparer__after {
    display: block;
    pointer-events: none;
  }

  .image-comparer__before::slotted(img),
  .image-comparer__after::slotted(img),
  .image-comparer__before::slotted(svg),
  .image-comparer__after::slotted(svg) {
    display: block;
    max-width: 100% !important;
    height: auto;
  }

  .image-comparer__after {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }

  .image-comparer__divider {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    width: var(--divider-width);
    height: 100%;
    background-color: var(--sl-color-neutral-0);
    translate: calc(var(--divider-width) / -2);
    cursor: ew-resize;
  }

  .image-comparer__handle {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: calc(50% - (var(--handle-size) / 2));
    width: var(--handle-size);
    height: var(--handle-size);
    background-color: var(--sl-color-neutral-0);
    border-radius: var(--sl-border-radius-circle);
    font-size: calc(var(--handle-size) * 0.5);
    color: var(--sl-color-neutral-700);
    cursor: inherit;
    z-index: 10;
  }

  .image-comparer__handle:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }
`;

var SlImageComparer = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.position = 50;
  }
  handleDrag(event) {
    const { width } = this.base.getBoundingClientRect();
    const isRtl = this.localize.dir() === "rtl";
    event.preventDefault();
    drag(this.base, {
      onMove: (x) => {
        this.position = parseFloat(clamp(x / width * 100, 0, 100).toFixed(2));
        if (isRtl) this.position = 100 - this.position;
      },
      initialEvent: event
    });
  }
  handleKeyDown(event) {
    const isLtr = this.localize.dir() === "ltr";
    const isRtl = this.localize.dir() === "rtl";
    if (["ArrowLeft", "ArrowRight", "Home", "End"].includes(event.key)) {
      const incr = event.shiftKey ? 10 : 1;
      let newPosition = this.position;
      event.preventDefault();
      if (isLtr && event.key === "ArrowLeft" || isRtl && event.key === "ArrowRight") {
        newPosition -= incr;
      }
      if (isLtr && event.key === "ArrowRight" || isRtl && event.key === "ArrowLeft") {
        newPosition += incr;
      }
      if (event.key === "Home") {
        newPosition = 0;
      }
      if (event.key === "End") {
        newPosition = 100;
      }
      newPosition = clamp(newPosition, 0, 100);
      this.position = newPosition;
    }
  }
  handlePositionChange() {
    this.emit("sl-change");
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    return x`
      <div
        part="base"
        id="image-comparer"
        class=${e$3({
      "image-comparer": true,
      "image-comparer--rtl": isRtl
    })}
        @keydown=${this.handleKeyDown}
      >
        <div class="image-comparer__image">
          <div part="before" class="image-comparer__before">
            <slot name="before"></slot>
          </div>

          <div
            part="after"
            class="image-comparer__after"
            style=${o$5({
      clipPath: isRtl ? `inset(0 0 0 ${100 - this.position}%)` : `inset(0 ${100 - this.position}% 0 0)`
    })}
          >
            <slot name="after"></slot>
          </div>
        </div>

        <div
          part="divider"
          class="image-comparer__divider"
          style=${o$5({
      left: isRtl ? `${100 - this.position}%` : `${this.position}%`
    })}
          @mousedown=${this.handleDrag}
          @touchstart=${this.handleDrag}
        >
          <div
            part="handle"
            class="image-comparer__handle"
            role="scrollbar"
            aria-valuenow=${this.position}
            aria-valuemin="0"
            aria-valuemax="100"
            aria-controls="image-comparer"
            tabindex="0"
          >
            <slot name="handle">
              <sl-icon library="system" name="grip-vertical"></sl-icon>
            </slot>
          </div>
        </div>
      </div>
    `;
  }
};
SlImageComparer.styles = [component_styles_default, image_comparer_styles_default];
SlImageComparer.scopedElement = { "sl-icon": SlIcon };
__decorateClass([
  e$7(".image-comparer")
], SlImageComparer.prototype, "base", 2);
__decorateClass([
  e$7(".image-comparer__handle")
], SlImageComparer.prototype, "handle", 2);
__decorateClass([
  n$6({ type: Number, reflect: true })
], SlImageComparer.prototype, "position", 2);
__decorateClass([
  watch("position", { waitUntilFirstUpdate: true })
], SlImageComparer.prototype, "handlePositionChange", 1);

var tagName$w = "sl-image-comparer";
SlImageComparer.define("sl-image-comparer");
o$8({
  tagName: tagName$w,
  elementClass: SlImageComparer,
  react: React$1,
  events: {
    onSlChange: "sl-change"
  },
  displayName: "SlImageComparer"
});

// src/components/include/include.styles.ts
var include_styles_default = i$7`
  :host {
    display: block;
  }
`;

// src/components/include/request.ts
var includeFiles = /* @__PURE__ */ new Map();
function requestInclude(src, mode = "cors") {
  const prev = includeFiles.get(src);
  if (prev !== void 0) {
    return Promise.resolve(prev);
  }
  const fileDataPromise = fetch(src, { mode }).then(async (response) => {
    const res = {
      ok: response.ok,
      status: response.status,
      html: await response.text()
    };
    includeFiles.set(src, res);
    return res;
  });
  includeFiles.set(src, fileDataPromise);
  return fileDataPromise;
}

var SlInclude = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.mode = "cors";
    this.allowScripts = false;
  }
  executeScript(script) {
    const newScript = document.createElement("script");
    [...script.attributes].forEach((attr) => newScript.setAttribute(attr.name, attr.value));
    newScript.textContent = script.textContent;
    script.parentNode.replaceChild(newScript, script);
  }
  async handleSrcChange() {
    try {
      const src = this.src;
      const file = await requestInclude(src, this.mode);
      if (src !== this.src) {
        return;
      }
      if (!file.ok) {
        this.emit("sl-error", { detail: { status: file.status } });
        return;
      }
      this.innerHTML = file.html;
      if (this.allowScripts) {
        [...this.querySelectorAll("script")].forEach((script) => this.executeScript(script));
      }
      this.emit("sl-load");
    } catch (e) {
      this.emit("sl-error", { detail: { status: -1 } });
    }
  }
  render() {
    return x`<slot></slot>`;
  }
};
SlInclude.styles = [component_styles_default, include_styles_default];
__decorateClass([
  n$6()
], SlInclude.prototype, "src", 2);
__decorateClass([
  n$6()
], SlInclude.prototype, "mode", 2);
__decorateClass([
  n$6({ attribute: "allow-scripts", type: Boolean })
], SlInclude.prototype, "allowScripts", 2);
__decorateClass([
  watch("src")
], SlInclude.prototype, "handleSrcChange", 1);

var tagName$v = "sl-include";
SlInclude.define("sl-include");
o$8({
  tagName: tagName$v,
  elementClass: SlInclude,
  react: React$1,
  events: {
    onSlLoad: "sl-load",
    onSlError: "sl-error"
  },
  displayName: "SlInclude"
});

// src/components/menu/menu.styles.ts
var menu_styles_default = i$7`
  :host {
    display: block;
    position: relative;
    background: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-radius: var(--sl-border-radius-medium);
    padding: var(--sl-spacing-x-small) 0;
    overflow: auto;
    overscroll-behavior: none;
  }

  ::slotted(sl-divider) {
    --spacing: var(--sl-spacing-x-small);
  }
`;

var SlMenu = class extends ShoelaceElement {
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "menu");
  }
  handleClick(event) {
    const menuItemTypes = ["menuitem", "menuitemcheckbox"];
    const composedPath = event.composedPath();
    const target = composedPath.find((el) => {
      var _a;
      return menuItemTypes.includes(((_a = el == null ? void 0 : el.getAttribute) == null ? void 0 : _a.call(el, "role")) || "");
    });
    if (!target) return;
    const closestMenu = composedPath.find((el) => {
      var _a;
      return ((_a = el == null ? void 0 : el.getAttribute) == null ? void 0 : _a.call(el, "role")) === "menu";
    });
    const clickHasSubmenu = closestMenu !== this;
    if (clickHasSubmenu) return;
    const item = target;
    if (item.type === "checkbox") {
      item.checked = !item.checked;
    }
    this.emit("sl-select", { detail: { item } });
  }
  handleKeyDown(event) {
    if (event.key === "Enter" || event.key === " ") {
      const item = this.getCurrentItem();
      event.preventDefault();
      event.stopPropagation();
      item == null ? void 0 : item.click();
    } else if (["ArrowDown", "ArrowUp", "Home", "End"].includes(event.key)) {
      const items = this.getAllItems();
      const activeItem = this.getCurrentItem();
      let index = activeItem ? items.indexOf(activeItem) : 0;
      if (items.length > 0) {
        event.preventDefault();
        event.stopPropagation();
        if (event.key === "ArrowDown") {
          index++;
        } else if (event.key === "ArrowUp") {
          index--;
        } else if (event.key === "Home") {
          index = 0;
        } else if (event.key === "End") {
          index = items.length - 1;
        }
        if (index < 0) {
          index = items.length - 1;
        }
        if (index > items.length - 1) {
          index = 0;
        }
        this.setCurrentItem(items[index]);
        items[index].focus();
      }
    }
  }
  handleMouseDown(event) {
    const target = event.target;
    if (this.isMenuItem(target)) {
      this.setCurrentItem(target);
    }
  }
  handleSlotChange() {
    const items = this.getAllItems();
    if (items.length > 0) {
      this.setCurrentItem(items[0]);
    }
  }
  isMenuItem(item) {
    var _a;
    return item.tagName.toLowerCase() === "sl-menu-item" || ["menuitem", "menuitemcheckbox", "menuitemradio"].includes((_a = item.getAttribute("role")) != null ? _a : "");
  }
  /** @internal Gets all slotted menu items, ignoring dividers, headers, and other elements. */
  getAllItems() {
    return [...this.defaultSlot.assignedElements({ flatten: true })].filter((el) => {
      if (el.inert || !this.isMenuItem(el)) {
        return false;
      }
      return true;
    });
  }
  /**
   * @internal Gets the current menu item, which is the menu item that has `tabindex="0"` within the roving tab index.
   * The menu item may or may not have focus, but for keyboard interaction purposes it's considered the "active" item.
   */
  getCurrentItem() {
    return this.getAllItems().find((i) => i.getAttribute("tabindex") === "0");
  }
  /**
   * @internal Sets the current menu item to the specified element. This sets `tabindex="0"` on the target element and
   * `tabindex="-1"` to all other items. This method must be called prior to setting focus on a menu item.
   */
  setCurrentItem(item) {
    const items = this.getAllItems();
    items.forEach((i) => {
      i.setAttribute("tabindex", i === item ? "0" : "-1");
    });
  }
  render() {
    return x`
      <slot
        @slotchange=${this.handleSlotChange}
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
        @mousedown=${this.handleMouseDown}
      ></slot>
    `;
  }
};
SlMenu.styles = [component_styles_default, menu_styles_default];
__decorateClass([
  e$7("slot")
], SlMenu.prototype, "defaultSlot", 2);

var tagName$u = "sl-menu";
SlMenu.define("sl-menu");
var reactWrapper$b = o$8({
  tagName: tagName$u,
  elementClass: SlMenu,
  react: React$1,
  events: {
    onSlSelect: "sl-select"
  },
  displayName: "SlMenu"
});
var menu_default = reactWrapper$b;

// src/components/input/input.styles.ts
var input_styles_default = i$7`
  :host {
    display: block;
  }

  .input {
    flex: 1 1 auto;
    display: inline-flex;
    align-items: stretch;
    justify-content: start;
    position: relative;
    width: 100%;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    letter-spacing: var(--sl-input-letter-spacing);
    vertical-align: middle;
    overflow: hidden;
    cursor: text;
    transition:
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) border,
      var(--sl-transition-fast) box-shadow,
      var(--sl-transition-fast) background-color;
  }

  /* Standard inputs */
  .input--standard {
    background-color: var(--sl-input-background-color);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
  }

  .input--standard:hover:not(.input--disabled) {
    background-color: var(--sl-input-background-color-hover);
    border-color: var(--sl-input-border-color-hover);
  }

  .input--standard.input--focused:not(.input--disabled) {
    background-color: var(--sl-input-background-color-focus);
    border-color: var(--sl-input-border-color-focus);
    box-shadow: 0 0 0 var(--sl-focus-ring-width) var(--sl-input-focus-ring-color);
  }

  .input--standard.input--focused:not(.input--disabled) .input__control {
    color: var(--sl-input-color-focus);
  }

  .input--standard.input--disabled {
    background-color: var(--sl-input-background-color-disabled);
    border-color: var(--sl-input-border-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .input--standard.input--disabled .input__control {
    color: var(--sl-input-color-disabled);
  }

  .input--standard.input--disabled .input__control::placeholder {
    color: var(--sl-input-placeholder-color-disabled);
  }

  /* Filled inputs */
  .input--filled {
    border: none;
    background-color: var(--sl-input-filled-background-color);
    color: var(--sl-input-color);
  }

  .input--filled:hover:not(.input--disabled) {
    background-color: var(--sl-input-filled-background-color-hover);
  }

  .input--filled.input--focused:not(.input--disabled) {
    background-color: var(--sl-input-filled-background-color-focus);
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .input--filled.input--disabled {
    background-color: var(--sl-input-filled-background-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .input__control {
    flex: 1 1 auto;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    min-width: 0;
    height: 100%;
    color: var(--sl-input-color);
    border: none;
    background: inherit;
    box-shadow: none;
    padding: 0;
    margin: 0;
    cursor: inherit;
    -webkit-appearance: none;
  }

  .input__control::-webkit-search-decoration,
  .input__control::-webkit-search-cancel-button,
  .input__control::-webkit-search-results-button,
  .input__control::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }

  .input__control:-webkit-autofill,
  .input__control:-webkit-autofill:hover,
  .input__control:-webkit-autofill:focus,
  .input__control:-webkit-autofill:active {
    box-shadow: 0 0 0 var(--sl-input-height-large) var(--sl-input-background-color-hover) inset !important;
    -webkit-text-fill-color: var(--sl-color-primary-500);
    caret-color: var(--sl-input-color);
  }

  .input--filled .input__control:-webkit-autofill,
  .input--filled .input__control:-webkit-autofill:hover,
  .input--filled .input__control:-webkit-autofill:focus,
  .input--filled .input__control:-webkit-autofill:active {
    box-shadow: 0 0 0 var(--sl-input-height-large) var(--sl-input-filled-background-color) inset !important;
  }

  .input__control::placeholder {
    color: var(--sl-input-placeholder-color);
    user-select: none;
    -webkit-user-select: none;
  }

  .input:hover:not(.input--disabled) .input__control {
    color: var(--sl-input-color-hover);
  }

  .input__control:focus {
    outline: none;
  }

  .input__prefix,
  .input__suffix {
    display: inline-flex;
    flex: 0 0 auto;
    align-items: center;
    cursor: default;
  }

  .input__prefix ::slotted(sl-icon),
  .input__suffix ::slotted(sl-icon) {
    color: var(--sl-input-icon-color);
  }

  /*
   * Size modifiers
   */

  .input--small {
    border-radius: var(--sl-input-border-radius-small);
    font-size: var(--sl-input-font-size-small);
    height: var(--sl-input-height-small);
  }

  .input--small .input__control {
    height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-small);
  }

  .input--small .input__clear,
  .input--small .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-small) * 2);
  }

  .input--small .input__prefix ::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-small);
  }

  .input--small .input__suffix ::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-small);
  }

  .input--medium {
    border-radius: var(--sl-input-border-radius-medium);
    font-size: var(--sl-input-font-size-medium);
    height: var(--sl-input-height-medium);
  }

  .input--medium .input__control {
    height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-medium);
  }

  .input--medium .input__clear,
  .input--medium .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-medium) * 2);
  }

  .input--medium .input__prefix ::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-medium);
  }

  .input--medium .input__suffix ::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-medium);
  }

  .input--large {
    border-radius: var(--sl-input-border-radius-large);
    font-size: var(--sl-input-font-size-large);
    height: var(--sl-input-height-large);
  }

  .input--large .input__control {
    height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-large);
  }

  .input--large .input__clear,
  .input--large .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-large) * 2);
  }

  .input--large .input__prefix ::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-large);
  }

  .input--large .input__suffix ::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-large);
  }

  /*
   * Pill modifier
   */

  .input--pill.input--small {
    border-radius: var(--sl-input-height-small);
  }

  .input--pill.input--medium {
    border-radius: var(--sl-input-height-medium);
  }

  .input--pill.input--large {
    border-radius: var(--sl-input-height-large);
  }

  /*
   * Clearable + Password Toggle
   */

  .input__clear,
  .input__password-toggle {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: inherit;
    color: var(--sl-input-icon-color);
    border: none;
    background: none;
    padding: 0;
    transition: var(--sl-transition-fast) color;
    cursor: pointer;
  }

  .input__clear:hover,
  .input__password-toggle:hover {
    color: var(--sl-input-icon-color-hover);
  }

  .input__clear:focus,
  .input__password-toggle:focus {
    outline: none;
  }

  /* Don't show the browser's password toggle in Edge */
  ::-ms-reveal {
    display: none;
  }

  /* Hide the built-in number spinner */
  .input--no-spin-buttons input[type='number']::-webkit-outer-spin-button,
  .input--no-spin-buttons input[type='number']::-webkit-inner-spin-button {
    -webkit-appearance: none;
    display: none;
  }

  .input--no-spin-buttons input[type='number'] {
    -moz-appearance: textfield;
  }
`;

var SlInput = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      assumeInteractionOn: ["sl-blur", "sl-input"]
    });
    this.hasSlotController = new HasSlotController(this, "help-text", "label");
    this.localize = new LocalizeController(this);
    this.hasFocus = false;
    this.title = "";
    // make reactive to pass through
    this.__numberInput = Object.assign(document.createElement("input"), { type: "number" });
    this.__dateInput = Object.assign(document.createElement("input"), { type: "date" });
    this.type = "text";
    this.name = "";
    this.value = "";
    this.defaultValue = "";
    this.size = "medium";
    this.filled = false;
    this.pill = false;
    this.label = "";
    this.helpText = "";
    this.clearable = false;
    this.disabled = false;
    this.placeholder = "";
    this.readonly = false;
    this.passwordToggle = false;
    this.passwordVisible = false;
    this.noSpinButtons = false;
    this.form = "";
    this.required = false;
    this.spellcheck = true;
  }
  //
  // NOTE: We use an in-memory input for these getters/setters instead of the one in the template because the properties
  // can be set before the component is rendered.
  //
  /**
   * Gets or sets the current value as a `Date` object. Returns `null` if the value can't be converted. This will use the native `<input type="{{type}}">` implementation and may result in an error.
   */
  get valueAsDate() {
    var _a;
    this.__dateInput.type = this.type;
    this.__dateInput.value = this.value;
    return ((_a = this.input) == null ? void 0 : _a.valueAsDate) || this.__dateInput.valueAsDate;
  }
  set valueAsDate(newValue) {
    this.__dateInput.type = this.type;
    this.__dateInput.valueAsDate = newValue;
    this.value = this.__dateInput.value;
  }
  /** Gets or sets the current value as a number. Returns `NaN` if the value can't be converted. */
  get valueAsNumber() {
    var _a;
    this.__numberInput.value = this.value;
    return ((_a = this.input) == null ? void 0 : _a.valueAsNumber) || this.__numberInput.valueAsNumber;
  }
  set valueAsNumber(newValue) {
    this.__numberInput.valueAsNumber = newValue;
    this.value = this.__numberInput.value;
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  firstUpdated() {
    this.formControlController.updateValidity();
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleChange() {
    this.value = this.input.value;
    this.emit("sl-change");
  }
  handleClearClick(event) {
    event.preventDefault();
    if (this.value !== "") {
      this.value = "";
      this.emit("sl-clear");
      this.emit("sl-input");
      this.emit("sl-change");
    }
    this.input.focus();
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleInput() {
    this.value = this.input.value;
    this.formControlController.updateValidity();
    this.emit("sl-input");
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  handleKeyDown(event) {
    const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;
    if (event.key === "Enter" && !hasModifier) {
      setTimeout(() => {
        if (!event.defaultPrevented && !event.isComposing) {
          this.formControlController.submit();
        }
      });
    }
  }
  handlePasswordToggle() {
    this.passwordVisible = !this.passwordVisible;
  }
  handleDisabledChange() {
    this.formControlController.setValidity(this.disabled);
  }
  handleStepChange() {
    this.input.step = String(this.step);
    this.formControlController.updateValidity();
  }
  async handleValueChange() {
    await this.updateComplete;
    this.formControlController.updateValidity();
  }
  /** Sets focus on the input. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the input. */
  blur() {
    this.input.blur();
  }
  /** Selects all the text in the input. */
  select() {
    this.input.select();
  }
  /** Sets the start and end positions of the text selection (0-based). */
  setSelectionRange(selectionStart, selectionEnd, selectionDirection = "none") {
    this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);
  }
  /** Replaces a range of text with a new string. */
  setRangeText(replacement, start, end, selectMode = "preserve") {
    const selectionStart = start != null ? start : this.input.selectionStart;
    const selectionEnd = end != null ? end : this.input.selectionEnd;
    this.input.setRangeText(replacement, selectionStart, selectionEnd, selectMode);
    if (this.value !== this.input.value) {
      this.value = this.input.value;
    }
  }
  /** Displays the browser picker for an input element (only works if the browser supports it for the input type). */
  showPicker() {
    if ("showPicker" in HTMLInputElement.prototype) {
      this.input.showPicker();
    }
  }
  /** Increments the value of a numeric input type by the value of the step attribute. */
  stepUp() {
    this.input.stepUp();
    if (this.value !== this.input.value) {
      this.value = this.input.value;
    }
  }
  /** Decrements the value of a numeric input type by the value of the step attribute. */
  stepDown() {
    this.input.stepDown();
    if (this.value !== this.input.value) {
      this.value = this.input.value;
    }
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message) {
    this.input.setCustomValidity(message);
    this.formControlController.updateValidity();
  }
  render() {
    const hasLabelSlot = this.hasSlotController.test("label");
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasLabel = this.label ? true : !!hasLabelSlot;
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    const hasClearIcon = this.clearable && !this.disabled && !this.readonly;
    const isClearIconVisible = hasClearIcon && (typeof this.value === "number" || this.value.length > 0);
    return x`
      <div
        part="form-control"
        class=${e$3({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--has-label": hasLabel,
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          part="form-control-label"
          class="form-control__label"
          for="input"
          aria-hidden=${hasLabel ? "false" : "true"}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div
            part="base"
            class=${e$3({
      input: true,
      // Sizes
      "input--small": this.size === "small",
      "input--medium": this.size === "medium",
      "input--large": this.size === "large",
      // States
      "input--pill": this.pill,
      "input--standard": !this.filled,
      "input--filled": this.filled,
      "input--disabled": this.disabled,
      "input--focused": this.hasFocus,
      "input--empty": !this.value,
      "input--no-spin-buttons": this.noSpinButtons
    })}
          >
            <span part="prefix" class="input__prefix">
              <slot name="prefix"></slot>
            </span>

            <input
              part="input"
              id="input"
              class="input__control"
              type=${this.type === "password" && this.passwordVisible ? "text" : this.type}
              title=${this.title}
              name=${o$6(this.name)}
              ?disabled=${this.disabled}
              ?readonly=${this.readonly}
              ?required=${this.required}
              placeholder=${o$6(this.placeholder)}
              minlength=${o$6(this.minlength)}
              maxlength=${o$6(this.maxlength)}
              min=${o$6(this.min)}
              max=${o$6(this.max)}
              step=${o$6(this.step)}
              .value=${l(this.value)}
              autocapitalize=${o$6(this.autocapitalize)}
              autocomplete=${o$6(this.autocomplete)}
              autocorrect=${o$6(this.autocorrect)}
              ?autofocus=${this.autofocus}
              spellcheck=${this.spellcheck}
              pattern=${o$6(this.pattern)}
              enterkeyhint=${o$6(this.enterkeyhint)}
              inputmode=${o$6(this.inputmode)}
              aria-describedby="help-text"
              @change=${this.handleChange}
              @input=${this.handleInput}
              @invalid=${this.handleInvalid}
              @keydown=${this.handleKeyDown}
              @focus=${this.handleFocus}
              @blur=${this.handleBlur}
            />

            ${isClearIconVisible ? x`
                  <button
                    part="clear-button"
                    class="input__clear"
                    type="button"
                    aria-label=${this.localize.term("clearEntry")}
                    @click=${this.handleClearClick}
                    tabindex="-1"
                  >
                    <slot name="clear-icon">
                      <sl-icon name="x-circle-fill" library="system"></sl-icon>
                    </slot>
                  </button>
                ` : ""}
            ${this.passwordToggle && !this.disabled ? x`
                  <button
                    part="password-toggle-button"
                    class="input__password-toggle"
                    type="button"
                    aria-label=${this.localize.term(this.passwordVisible ? "hidePassword" : "showPassword")}
                    @click=${this.handlePasswordToggle}
                    tabindex="-1"
                  >
                    ${this.passwordVisible ? x`
                          <slot name="show-password-icon">
                            <sl-icon name="eye-slash" library="system"></sl-icon>
                          </slot>
                        ` : x`
                          <slot name="hide-password-icon">
                            <sl-icon name="eye" library="system"></sl-icon>
                          </slot>
                        `}
                  </button>
                ` : ""}

            <span part="suffix" class="input__suffix">
              <slot name="suffix"></slot>
            </span>
          </div>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${hasHelpText ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlInput.styles = [component_styles_default, form_control_styles_default, input_styles_default];
SlInput.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e$7(".input__control")
], SlInput.prototype, "input", 2);
__decorateClass([
  r$3()
], SlInput.prototype, "hasFocus", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "title", 2);
__decorateClass([
  n$6({ reflect: true })
], SlInput.prototype, "type", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "name", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "value", 2);
__decorateClass([
  defaultValue()
], SlInput.prototype, "defaultValue", 2);
__decorateClass([
  n$6({ reflect: true })
], SlInput.prototype, "size", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlInput.prototype, "filled", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlInput.prototype, "pill", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "label", 2);
__decorateClass([
  n$6({ attribute: "help-text" })
], SlInput.prototype, "helpText", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlInput.prototype, "clearable", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlInput.prototype, "disabled", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "placeholder", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlInput.prototype, "readonly", 2);
__decorateClass([
  n$6({ attribute: "password-toggle", type: Boolean })
], SlInput.prototype, "passwordToggle", 2);
__decorateClass([
  n$6({ attribute: "password-visible", type: Boolean })
], SlInput.prototype, "passwordVisible", 2);
__decorateClass([
  n$6({ attribute: "no-spin-buttons", type: Boolean })
], SlInput.prototype, "noSpinButtons", 2);
__decorateClass([
  n$6({ reflect: true })
], SlInput.prototype, "form", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlInput.prototype, "required", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "pattern", 2);
__decorateClass([
  n$6({ type: Number })
], SlInput.prototype, "minlength", 2);
__decorateClass([
  n$6({ type: Number })
], SlInput.prototype, "maxlength", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "min", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "max", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "step", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "autocapitalize", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "autocorrect", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "autocomplete", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlInput.prototype, "autofocus", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "enterkeyhint", 2);
__decorateClass([
  n$6({
    type: Boolean,
    converter: {
      // Allow "true|false" attribute values but keep the property boolean
      fromAttribute: (value) => !value || value === "false" ? false : true,
      toAttribute: (value) => value ? "true" : "false"
    }
  })
], SlInput.prototype, "spellcheck", 2);
__decorateClass([
  n$6()
], SlInput.prototype, "inputmode", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlInput.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("step", { waitUntilFirstUpdate: true })
], SlInput.prototype, "handleStepChange", 1);
__decorateClass([
  watch("value", { waitUntilFirstUpdate: true })
], SlInput.prototype, "handleValueChange", 1);

var tagName$t = "sl-input";
SlInput.define("sl-input");
var reactWrapper$a = o$8({
  tagName: tagName$t,
  elementClass: SlInput,
  react: React$1,
  events: {
    onSlBlur: "sl-blur",
    onSlChange: "sl-change",
    onSlClear: "sl-clear",
    onSlFocus: "sl-focus",
    onSlInput: "sl-input",
    onSlInvalid: "sl-invalid"
  },
  displayName: "SlInput"
});
var input_default = reactWrapper$a;

// src/components/menu-item/menu-item.styles.ts
var menu_item_styles_default = i$7`
  :host {
    --submenu-offset: -2px;

    display: block;
  }

  :host([inert]) {
    display: none;
  }

  .menu-item {
    position: relative;
    display: flex;
    align-items: stretch;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-letter-spacing-normal);
    color: var(--sl-color-neutral-700);
    padding: var(--sl-spacing-2x-small) var(--sl-spacing-2x-small);
    transition: var(--sl-transition-fast) fill;
    user-select: none;
    -webkit-user-select: none;
    white-space: nowrap;
    cursor: pointer;
  }

  .menu-item.menu-item--disabled {
    outline: none;
    opacity: 0.5;
    cursor: not-allowed;
  }

  .menu-item.menu-item--loading {
    outline: none;
    cursor: wait;
  }

  .menu-item.menu-item--loading *:not(sl-spinner) {
    opacity: 0.5;
  }

  .menu-item--loading sl-spinner {
    --indicator-color: currentColor;
    --track-width: 1px;
    position: absolute;
    font-size: 0.75em;
    top: calc(50% - 0.5em);
    left: 0.65rem;
    opacity: 1;
  }

  .menu-item .menu-item__label {
    flex: 1 1 auto;
    display: inline-block;
    text-overflow: ellipsis;
    overflow: hidden;
  }

  .menu-item .menu-item__prefix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .menu-item .menu-item__prefix::slotted(*) {
    margin-inline-end: var(--sl-spacing-x-small);
  }

  .menu-item .menu-item__suffix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .menu-item .menu-item__suffix::slotted(*) {
    margin-inline-start: var(--sl-spacing-x-small);
  }

  /* Safe triangle */
  .menu-item--submenu-expanded::after {
    content: '';
    position: fixed;
    z-index: calc(var(--sl-z-index-dropdown) - 1);
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    clip-path: polygon(
      var(--safe-triangle-cursor-x, 0) var(--safe-triangle-cursor-y, 0),
      var(--safe-triangle-submenu-start-x, 0) var(--safe-triangle-submenu-start-y, 0),
      var(--safe-triangle-submenu-end-x, 0) var(--safe-triangle-submenu-end-y, 0)
    );
  }

  :host(:focus-visible) {
    outline: none;
  }

  :host(:hover:not([aria-disabled='true'], :focus-visible)) .menu-item,
  .menu-item--submenu-expanded {
    background-color: var(--sl-color-neutral-100);
    color: var(--sl-color-neutral-1000);
  }

  :host(:focus-visible) .menu-item {
    outline: none;
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
    opacity: 1;
  }

  .menu-item .menu-item__check,
  .menu-item .menu-item__chevron {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.5em;
    visibility: hidden;
  }

  .menu-item--checked .menu-item__check,
  .menu-item--has-submenu .menu-item__chevron {
    visibility: visible;
  }

  /* Add elevation and z-index to submenus */
  sl-popup::part(popup) {
    box-shadow: var(--sl-shadow-large);
    z-index: var(--sl-z-index-dropdown);
    margin-left: var(--submenu-offset);
  }

  .menu-item--rtl sl-popup::part(popup) {
    margin-left: calc(-1 * var(--submenu-offset));
  }

  @media (forced-colors: active) {
    :host(:hover:not([aria-disabled='true'])) .menu-item,
    :host(:focus-visible) .menu-item {
      outline: dashed 1px SelectedItem;
      outline-offset: -1px;
    }
  }

  ::slotted(sl-menu) {
    max-width: var(--auto-size-available-width) !important;
    max-height: var(--auto-size-available-height) !important;
  }
`;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const s=(i,t)=>{const e=i._$AN;if(void 0===e)return  false;for(const i of e)i._$AO?.(t,false),s(i,t);return  true},o$3=i=>{let t,e;do{if(void 0===(t=i._$AM))break;e=t._$AN,e.delete(i),i=t;}while(0===e?.size)},r=i=>{for(let t;t=i._$AM;i=t){let e=t._$AN;if(void 0===e)t._$AN=e=new Set;else if(e.has(i))break;e.add(i),c(t);}};function h$1(i){ void 0!==this._$AN?(o$3(this),this._$AM=i,r(this)):this._$AM=i;}function n$1(i,t=false,e=0){const r=this._$AH,h=this._$AN;if(void 0!==h&&0!==h.size)if(t)if(Array.isArray(r))for(let i=e;i<r.length;i++)s(r[i],false),o$3(r[i]);else null!=r&&(s(r,false),o$3(r));else s(this,i);}const c=i=>{i.type==t.CHILD&&(i._$AP??=n$1,i._$AQ??=h$1);};class f extends i$3{constructor(){super(...arguments),this._$AN=void 0;}_$AT(i,t,e){super._$AT(i,t,e),r(this),this.isConnected=i._$AU;}_$AO(i,t=true){i!==this.isConnected&&(this.isConnected=i,i?this.reconnected?.():this.disconnected?.()),t&&(s(this,i),o$3(this));}setValue(t){if(f$1(this._$Ct))this._$Ct._$AI(t,this);else {const i=[...this._$Ct._$AH];i[this._$Ci]=t,this._$Ct._$AI(i,this,0);}}disconnected(){}reconnected(){}}

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const e=()=>new h;class h{}const o$2=new WeakMap,n=e$4(class extends f{render(i){return E}update(i,[s]){const e=s!==this.G;return e&&void 0!==this.G&&this.rt(void 0),(e||this.lt!==this.ct)&&(this.G=s,this.ht=i.options?.host,this.rt(this.ct=i.element)),E}rt(t){if(this.isConnected||(t=void 0),"function"==typeof this.G){const i=this.ht??globalThis;let s=o$2.get(i);void 0===s&&(s=new WeakMap,o$2.set(i,s)),void 0!==s.get(this.G)&&this.G.call(this.ht,void 0),s.set(this.G,t),void 0!==t&&this.G.call(this.ht,t);}else this.G.value=t;}get lt(){return "function"==typeof this.G?o$2.get(this.ht??globalThis)?.get(this.G):this.G?.value}disconnected(){this.lt===this.ct&&this.rt(void 0);}reconnected(){this.rt(this.ct);}});

// src/components/menu-item/submenu-controller.ts
var SubmenuController = class {
  constructor(host, hasSlotController) {
    this.popupRef = e();
    this.enableSubmenuTimer = -1;
    this.isConnected = false;
    this.isPopupConnected = false;
    this.skidding = 0;
    this.submenuOpenDelay = 100;
    // Set the safe triangle cursor position
    this.handleMouseMove = (event) => {
      this.host.style.setProperty("--safe-triangle-cursor-x", `${event.clientX}px`);
      this.host.style.setProperty("--safe-triangle-cursor-y", `${event.clientY}px`);
    };
    this.handleMouseOver = () => {
      if (this.hasSlotController.test("submenu")) {
        this.enableSubmenu();
      }
    };
    // Focus on the first menu-item of a submenu.
    this.handleKeyDown = (event) => {
      switch (event.key) {
        case "Escape":
        case "Tab":
          this.disableSubmenu();
          break;
        case "ArrowLeft":
          if (event.target !== this.host) {
            event.preventDefault();
            event.stopPropagation();
            this.host.focus();
            this.disableSubmenu();
          }
          break;
        case "ArrowRight":
        case "Enter":
        case " ":
          this.handleSubmenuEntry(event);
          break;
      }
    };
    this.handleClick = (event) => {
      var _a;
      if (event.target === this.host) {
        event.preventDefault();
        event.stopPropagation();
      } else if (event.target instanceof Element && (event.target.tagName === "sl-menu-item" || ((_a = event.target.role) == null ? void 0 : _a.startsWith("menuitem")))) {
        this.disableSubmenu();
      }
    };
    // Close this submenu on focus outside of the parent or any descendants.
    this.handleFocusOut = (event) => {
      if (event.relatedTarget && event.relatedTarget instanceof Element && this.host.contains(event.relatedTarget)) {
        return;
      }
      this.disableSubmenu();
    };
    // Prevent the parent menu-item from getting focus on mouse movement on the submenu
    this.handlePopupMouseover = (event) => {
      event.stopPropagation();
    };
    // Set the safe triangle values for the submenu when the position changes
    this.handlePopupReposition = () => {
      const submenuSlot = this.host.renderRoot.querySelector("slot[name='submenu']");
      const menu = submenuSlot == null ? void 0 : submenuSlot.assignedElements({ flatten: true }).filter((el) => el.localName === "sl-menu")[0];
      const isRtl = getComputedStyle(this.host).direction === "rtl";
      if (!menu) {
        return;
      }
      const { left, top, width, height } = menu.getBoundingClientRect();
      this.host.style.setProperty("--safe-triangle-submenu-start-x", `${isRtl ? left + width : left}px`);
      this.host.style.setProperty("--safe-triangle-submenu-start-y", `${top}px`);
      this.host.style.setProperty("--safe-triangle-submenu-end-x", `${isRtl ? left + width : left}px`);
      this.host.style.setProperty("--safe-triangle-submenu-end-y", `${top + height}px`);
    };
    (this.host = host).addController(this);
    this.hasSlotController = hasSlotController;
  }
  hostConnected() {
    if (this.hasSlotController.test("submenu") && !this.host.disabled) {
      this.addListeners();
    }
  }
  hostDisconnected() {
    this.removeListeners();
  }
  hostUpdated() {
    if (this.hasSlotController.test("submenu") && !this.host.disabled) {
      this.addListeners();
      this.updateSkidding();
    } else {
      this.removeListeners();
    }
  }
  addListeners() {
    if (!this.isConnected) {
      this.host.addEventListener("mousemove", this.handleMouseMove);
      this.host.addEventListener("mouseover", this.handleMouseOver);
      this.host.addEventListener("keydown", this.handleKeyDown);
      this.host.addEventListener("click", this.handleClick);
      this.host.addEventListener("focusout", this.handleFocusOut);
      this.isConnected = true;
    }
    if (!this.isPopupConnected) {
      if (this.popupRef.value) {
        this.popupRef.value.addEventListener("mouseover", this.handlePopupMouseover);
        this.popupRef.value.addEventListener("sl-reposition", this.handlePopupReposition);
        this.isPopupConnected = true;
      }
    }
  }
  removeListeners() {
    if (this.isConnected) {
      this.host.removeEventListener("mousemove", this.handleMouseMove);
      this.host.removeEventListener("mouseover", this.handleMouseOver);
      this.host.removeEventListener("keydown", this.handleKeyDown);
      this.host.removeEventListener("click", this.handleClick);
      this.host.removeEventListener("focusout", this.handleFocusOut);
      this.isConnected = false;
    }
    if (this.isPopupConnected) {
      if (this.popupRef.value) {
        this.popupRef.value.removeEventListener("mouseover", this.handlePopupMouseover);
        this.popupRef.value.removeEventListener("sl-reposition", this.handlePopupReposition);
        this.isPopupConnected = false;
      }
    }
  }
  handleSubmenuEntry(event) {
    const submenuSlot = this.host.renderRoot.querySelector("slot[name='submenu']");
    if (!submenuSlot) {
      console.error("Cannot activate a submenu if no corresponding menuitem can be found.", this);
      return;
    }
    let menuItems = null;
    for (const elt of submenuSlot.assignedElements()) {
      menuItems = elt.querySelectorAll("sl-menu-item, [role^='menuitem']");
      if (menuItems.length !== 0) {
        break;
      }
    }
    if (!menuItems || menuItems.length === 0) {
      return;
    }
    menuItems[0].setAttribute("tabindex", "0");
    for (let i = 1; i !== menuItems.length; ++i) {
      menuItems[i].setAttribute("tabindex", "-1");
    }
    if (this.popupRef.value) {
      event.preventDefault();
      event.stopPropagation();
      if (this.popupRef.value.active) {
        if (menuItems[0] instanceof HTMLElement) {
          menuItems[0].focus();
        }
      } else {
        this.enableSubmenu(false);
        this.host.updateComplete.then(() => {
          if (menuItems[0] instanceof HTMLElement) {
            menuItems[0].focus();
          }
        });
        this.host.requestUpdate();
      }
    }
  }
  setSubmenuState(state) {
    if (this.popupRef.value) {
      if (this.popupRef.value.active !== state) {
        this.popupRef.value.active = state;
        this.host.requestUpdate();
      }
    }
  }
  // Shows the submenu. Supports disabling the opening delay, e.g. for keyboard events that want to set the focus to the
  // newly opened menu.
  enableSubmenu(delay = true) {
    if (delay) {
      window.clearTimeout(this.enableSubmenuTimer);
      this.enableSubmenuTimer = window.setTimeout(() => {
        this.setSubmenuState(true);
      }, this.submenuOpenDelay);
    } else {
      this.setSubmenuState(true);
    }
  }
  disableSubmenu() {
    window.clearTimeout(this.enableSubmenuTimer);
    this.setSubmenuState(false);
  }
  // Calculate the space the top of a menu takes-up, for aligning the popup menu-item with the activating element.
  updateSkidding() {
    var _a;
    if (!((_a = this.host.parentElement) == null ? void 0 : _a.computedStyleMap)) {
      return;
    }
    const styleMap = this.host.parentElement.computedStyleMap();
    const attrs = ["padding-top", "border-top-width", "margin-top"];
    const skidding = attrs.reduce((accumulator, attr) => {
      var _a2;
      const styleValue = (_a2 = styleMap.get(attr)) != null ? _a2 : new CSSUnitValue(0, "px");
      const unitValue = styleValue instanceof CSSUnitValue ? styleValue : new CSSUnitValue(0, "px");
      const pxValue = unitValue.to("px");
      return accumulator - pxValue.value;
    }, 0);
    this.skidding = skidding;
  }
  isExpanded() {
    return this.popupRef.value ? this.popupRef.value.active : false;
  }
  renderSubmenu() {
    const isRtl = getComputedStyle(this.host).direction === "rtl";
    if (!this.isConnected) {
      return x` <slot name="submenu" hidden></slot> `;
    }
    return x`
      <sl-popup
        ${n(this.popupRef)}
        placement=${isRtl ? "left-start" : "right-start"}
        anchor="anchor"
        flip
        flip-fallback-strategy="best-fit"
        skidding="${this.skidding}"
        strategy="fixed"
        auto-size="vertical"
        auto-size-padding="10"
      >
        <slot name="submenu"></slot>
      </sl-popup>
    `;
  }
};

var SlMenuItem = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.type = "normal";
    this.checked = false;
    this.value = "";
    this.loading = false;
    this.disabled = false;
    this.hasSlotController = new HasSlotController(this, "submenu");
    this.submenuController = new SubmenuController(this, this.hasSlotController);
    this.handleHostClick = (event) => {
      if (this.disabled) {
        event.preventDefault();
        event.stopImmediatePropagation();
      }
    };
    this.handleMouseOver = (event) => {
      this.focus();
      event.stopPropagation();
    };
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("click", this.handleHostClick);
    this.addEventListener("mouseover", this.handleMouseOver);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("click", this.handleHostClick);
    this.removeEventListener("mouseover", this.handleMouseOver);
  }
  handleDefaultSlotChange() {
    const textLabel = this.getTextLabel();
    if (typeof this.cachedTextLabel === "undefined") {
      this.cachedTextLabel = textLabel;
      return;
    }
    if (textLabel !== this.cachedTextLabel) {
      this.cachedTextLabel = textLabel;
      this.emit("slotchange", { bubbles: true, composed: false, cancelable: false });
    }
  }
  handleCheckedChange() {
    if (this.checked && this.type !== "checkbox") {
      this.checked = false;
      console.error('The checked attribute can only be used on menu items with type="checkbox"', this);
      return;
    }
    if (this.type === "checkbox") {
      this.setAttribute("aria-checked", this.checked ? "true" : "false");
    } else {
      this.removeAttribute("aria-checked");
    }
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  handleTypeChange() {
    if (this.type === "checkbox") {
      this.setAttribute("role", "menuitemcheckbox");
      this.setAttribute("aria-checked", this.checked ? "true" : "false");
    } else {
      this.setAttribute("role", "menuitem");
      this.removeAttribute("aria-checked");
    }
  }
  /** Returns a text label based on the contents of the menu item's default slot. */
  getTextLabel() {
    return getTextContent(this.defaultSlot);
  }
  isSubmenu() {
    return this.hasSlotController.test("submenu");
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    const isSubmenuExpanded = this.submenuController.isExpanded();
    return x`
      <div
        id="anchor"
        part="base"
        class=${e$3({
      "menu-item": true,
      "menu-item--rtl": isRtl,
      "menu-item--checked": this.checked,
      "menu-item--disabled": this.disabled,
      "menu-item--loading": this.loading,
      "menu-item--has-submenu": this.isSubmenu(),
      "menu-item--submenu-expanded": isSubmenuExpanded
    })}
        ?aria-haspopup="${this.isSubmenu()}"
        ?aria-expanded="${isSubmenuExpanded ? true : false}"
      >
        <span part="checked-icon" class="menu-item__check">
          <sl-icon name="check" library="system" aria-hidden="true"></sl-icon>
        </span>

        <slot name="prefix" part="prefix" class="menu-item__prefix"></slot>

        <slot part="label" class="menu-item__label" @slotchange=${this.handleDefaultSlotChange}></slot>

        <slot name="suffix" part="suffix" class="menu-item__suffix"></slot>

        <span part="submenu-icon" class="menu-item__chevron">
          <sl-icon name=${isRtl ? "chevron-left" : "chevron-right"} library="system" aria-hidden="true"></sl-icon>
        </span>

        ${this.submenuController.renderSubmenu()}
        ${this.loading ? x` <sl-spinner part="spinner" exportparts="base:spinner__base"></sl-spinner> ` : ""}
      </div>
    `;
  }
};
SlMenuItem.styles = [component_styles_default, menu_item_styles_default];
SlMenuItem.dependencies = {
  "sl-icon": SlIcon,
  "sl-popup": SlPopup,
  "sl-spinner": SlSpinner
};
__decorateClass([
  e$7("slot:not([name])")
], SlMenuItem.prototype, "defaultSlot", 2);
__decorateClass([
  e$7(".menu-item")
], SlMenuItem.prototype, "menuItem", 2);
__decorateClass([
  n$6()
], SlMenuItem.prototype, "type", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlMenuItem.prototype, "checked", 2);
__decorateClass([
  n$6()
], SlMenuItem.prototype, "value", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlMenuItem.prototype, "loading", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlMenuItem.prototype, "disabled", 2);
__decorateClass([
  watch("checked")
], SlMenuItem.prototype, "handleCheckedChange", 1);
__decorateClass([
  watch("disabled")
], SlMenuItem.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("type")
], SlMenuItem.prototype, "handleTypeChange", 1);

var tagName$s = "sl-menu-item";
SlMenuItem.define("sl-menu-item");
var reactWrapper$9 = o$8({
  tagName: tagName$s,
  elementClass: SlMenuItem,
  react: React$1,
  events: {},
  displayName: "SlMenuItem"
});
var menu_item_default = reactWrapper$9;

// src/components/menu-label/menu-label.styles.ts
var menu_label_styles_default = i$7`
  :host {
    display: block;
  }

  .menu-label {
    display: inline-block;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-letter-spacing-normal);
    color: var(--sl-color-neutral-500);
    padding: var(--sl-spacing-2x-small) var(--sl-spacing-x-large);
    user-select: none;
    -webkit-user-select: none;
  }
`;

var SlMenuLabel = class extends ShoelaceElement {
  render() {
    return x` <slot part="base" class="menu-label"></slot> `;
  }
};
SlMenuLabel.styles = [component_styles_default, menu_label_styles_default];

var tagName$r = "sl-menu-label";
SlMenuLabel.define("sl-menu-label");
o$8({
  tagName: tagName$r,
  elementClass: SlMenuLabel,
  react: React$1,
  events: {},
  displayName: "SlMenuLabel"
});

// src/components/option/option.styles.ts
var option_styles_default = i$7`
  :host {
    display: block;
    user-select: none;
    -webkit-user-select: none;
  }

  :host(:focus) {
    outline: none;
  }

  .option {
    position: relative;
    display: flex;
    align-items: center;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-letter-spacing-normal);
    color: var(--sl-color-neutral-700);
    padding: var(--sl-spacing-x-small) var(--sl-spacing-medium) var(--sl-spacing-x-small) var(--sl-spacing-x-small);
    transition: var(--sl-transition-fast) fill;
    cursor: pointer;
  }

  .option--hover:not(.option--current):not(.option--disabled) {
    background-color: var(--sl-color-neutral-100);
    color: var(--sl-color-neutral-1000);
  }

  .option--current,
  .option--current.option--disabled {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
    opacity: 1;
  }

  .option--disabled {
    outline: none;
    opacity: 0.5;
    cursor: not-allowed;
  }

  .option__label {
    flex: 1 1 auto;
    display: inline-block;
    line-height: var(--sl-line-height-dense);
  }

  .option .option__check {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    visibility: hidden;
    padding-inline-end: var(--sl-spacing-2x-small);
  }

  .option--selected .option__check {
    visibility: visible;
  }

  .option__prefix,
  .option__suffix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .option__prefix::slotted(*) {
    margin-inline-end: var(--sl-spacing-x-small);
  }

  .option__suffix::slotted(*) {
    margin-inline-start: var(--sl-spacing-x-small);
  }

  @media (forced-colors: active) {
    :host(:hover:not([aria-disabled='true'])) .option {
      outline: dashed 1px SelectedItem;
      outline-offset: -1px;
    }
  }
`;

var SlOption = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    // @ts-expect-error - Controller is currently unused
    this.localize = new LocalizeController(this);
    this.isInitialized = false;
    this.current = false;
    this.selected = false;
    this.hasHover = false;
    this.value = "";
    this.disabled = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "option");
    this.setAttribute("aria-selected", "false");
  }
  handleDefaultSlotChange() {
    if (this.isInitialized) {
      customElements.whenDefined("sl-select").then(() => {
        const controller = this.closest("sl-select");
        if (controller) {
          controller.handleDefaultSlotChange();
        }
      });
    } else {
      this.isInitialized = true;
    }
  }
  handleMouseEnter() {
    this.hasHover = true;
  }
  handleMouseLeave() {
    this.hasHover = false;
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  handleSelectedChange() {
    this.setAttribute("aria-selected", this.selected ? "true" : "false");
  }
  handleValueChange() {
    if (typeof this.value !== "string") {
      this.value = String(this.value);
    }
    if (this.value.includes(" ")) {
      console.error(`Option values cannot include a space. All spaces have been replaced with underscores.`, this);
      this.value = this.value.replace(/ /g, "_");
    }
  }
  /** Returns a plain text label based on the option's content. */
  getTextLabel() {
    const nodes = this.childNodes;
    let label = "";
    [...nodes].forEach((node) => {
      if (node.nodeType === Node.ELEMENT_NODE) {
        if (!node.hasAttribute("slot")) {
          label += node.textContent;
        }
      }
      if (node.nodeType === Node.TEXT_NODE) {
        label += node.textContent;
      }
    });
    return label.trim();
  }
  render() {
    return x`
      <div
        part="base"
        class=${e$3({
      option: true,
      "option--current": this.current,
      "option--disabled": this.disabled,
      "option--selected": this.selected,
      "option--hover": this.hasHover
    })}
        @mouseenter=${this.handleMouseEnter}
        @mouseleave=${this.handleMouseLeave}
      >
        <sl-icon part="checked-icon" class="option__check" name="check" library="system" aria-hidden="true"></sl-icon>
        <slot part="prefix" name="prefix" class="option__prefix"></slot>
        <slot part="label" class="option__label" @slotchange=${this.handleDefaultSlotChange}></slot>
        <slot part="suffix" name="suffix" class="option__suffix"></slot>
      </div>
    `;
  }
};
SlOption.styles = [component_styles_default, option_styles_default];
SlOption.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e$7(".option__label")
], SlOption.prototype, "defaultSlot", 2);
__decorateClass([
  r$3()
], SlOption.prototype, "current", 2);
__decorateClass([
  r$3()
], SlOption.prototype, "selected", 2);
__decorateClass([
  r$3()
], SlOption.prototype, "hasHover", 2);
__decorateClass([
  n$6({ reflect: true })
], SlOption.prototype, "value", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlOption.prototype, "disabled", 2);
__decorateClass([
  watch("disabled")
], SlOption.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("selected")
], SlOption.prototype, "handleSelectedChange", 1);
__decorateClass([
  watch("value")
], SlOption.prototype, "handleValueChange", 1);

var tagName$q = "sl-option";
SlOption.define("sl-option");
var reactWrapper$8 = o$8({
  tagName: tagName$q,
  elementClass: SlOption,
  react: React$1,
  events: {},
  displayName: "SlOption"
});
var option_default = reactWrapper$8;

var tagName$p = "sl-popup";
SlPopup.define("sl-popup");
o$8({
  tagName: tagName$p,
  elementClass: SlPopup,
  react: React$1,
  events: {
    onSlReposition: "sl-reposition"
  },
  displayName: "SlPopup"
});

// src/components/divider/divider.styles.ts
var divider_styles_default = i$7`
  :host {
    --color: var(--sl-panel-border-color);
    --width: var(--sl-panel-border-width);
    --spacing: var(--sl-spacing-medium);
  }

  :host(:not([vertical])) {
    display: block;
    border-top: solid var(--width) var(--color);
    margin: var(--spacing) 0;
  }

  :host([vertical]) {
    display: inline-block;
    height: 100%;
    border-left: solid var(--width) var(--color);
    margin: 0 var(--spacing);
  }
`;

var SlDivider = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.vertical = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "separator");
  }
  handleVerticalChange() {
    this.setAttribute("aria-orientation", this.vertical ? "vertical" : "horizontal");
  }
};
SlDivider.styles = [component_styles_default, divider_styles_default];
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlDivider.prototype, "vertical", 2);
__decorateClass([
  watch("vertical")
], SlDivider.prototype, "handleVerticalChange", 1);

var tagName$o = "sl-divider";
SlDivider.define("sl-divider");
var reactWrapper$7 = o$8({
  tagName: tagName$o,
  elementClass: SlDivider,
  react: React$1,
  events: {},
  displayName: "SlDivider"
});
var divider_default = reactWrapper$7;

// src/components/drawer/drawer.styles.ts
var drawer_styles_default = i$7`
  :host {
    --size: 25rem;
    --header-spacing: var(--sl-spacing-large);
    --body-spacing: var(--sl-spacing-large);
    --footer-spacing: var(--sl-spacing-large);

    display: contents;
  }

  .drawer {
    top: 0;
    inset-inline-start: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    overflow: hidden;
  }

  .drawer--contained {
    position: absolute;
    z-index: initial;
  }

  .drawer--fixed {
    position: fixed;
    z-index: var(--sl-z-index-drawer);
  }

  .drawer__panel {
    position: absolute;
    display: flex;
    flex-direction: column;
    z-index: 2;
    max-width: 100%;
    max-height: 100%;
    background-color: var(--sl-panel-background-color);
    box-shadow: var(--sl-shadow-x-large);
    overflow: auto;
    pointer-events: all;
  }

  .drawer__panel:focus {
    outline: none;
  }

  .drawer--top .drawer__panel {
    top: 0;
    inset-inline-end: auto;
    bottom: auto;
    inset-inline-start: 0;
    width: 100%;
    height: var(--size);
  }

  .drawer--end .drawer__panel {
    top: 0;
    inset-inline-end: 0;
    bottom: auto;
    inset-inline-start: auto;
    width: var(--size);
    height: 100%;
  }

  .drawer--bottom .drawer__panel {
    top: auto;
    inset-inline-end: auto;
    bottom: 0;
    inset-inline-start: 0;
    width: 100%;
    height: var(--size);
  }

  .drawer--start .drawer__panel {
    top: 0;
    inset-inline-end: auto;
    bottom: auto;
    inset-inline-start: 0;
    width: var(--size);
    height: 100%;
  }

  .drawer__header {
    display: flex;
  }

  .drawer__title {
    flex: 1 1 auto;
    font: inherit;
    font-size: var(--sl-font-size-large);
    line-height: var(--sl-line-height-dense);
    padding: var(--header-spacing);
    margin: 0;
  }

  .drawer__header-actions {
    flex-shrink: 0;
    display: flex;
    flex-wrap: wrap;
    justify-content: end;
    gap: var(--sl-spacing-2x-small);
    padding: 0 var(--header-spacing);
  }

  .drawer__header-actions sl-icon-button,
  .drawer__header-actions ::slotted(sl-icon-button) {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-medium);
  }

  .drawer__body {
    flex: 1 1 auto;
    display: block;
    padding: var(--body-spacing);
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  .drawer__footer {
    text-align: right;
    padding: var(--footer-spacing);
  }

  .drawer__footer ::slotted(sl-button:not(:last-of-type)) {
    margin-inline-end: var(--sl-spacing-x-small);
  }

  .drawer:not(.drawer--has-footer) .drawer__footer {
    display: none;
  }

  .drawer__overlay {
    display: block;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: var(--sl-overlay-background-color);
    pointer-events: all;
  }

  .drawer--contained .drawer__overlay {
    display: none;
  }

  @media (forced-colors: active) {
    .drawer__panel {
      border: solid 1px var(--sl-color-neutral-0);
    }
  }
`;

// src/internal/active-elements.ts
function* activeElements(activeElement = document.activeElement) {
  if (activeElement === null || activeElement === void 0) return;
  yield activeElement;
  if ("shadowRoot" in activeElement && activeElement.shadowRoot && activeElement.shadowRoot.mode !== "closed") {
    yield* __yieldStar(activeElements(activeElement.shadowRoot.activeElement));
  }
}
function getDeepestActiveElement() {
  return [...activeElements()].pop();
}

// src/internal/tabbable.ts
var computedStyleMap = /* @__PURE__ */ new WeakMap();
function getCachedComputedStyle(el) {
  let computedStyle = computedStyleMap.get(el);
  if (!computedStyle) {
    computedStyle = window.getComputedStyle(el, null);
    computedStyleMap.set(el, computedStyle);
  }
  return computedStyle;
}
function isVisible(el) {
  if (typeof el.checkVisibility === "function") {
    return el.checkVisibility({ checkOpacity: false, checkVisibilityCSS: true });
  }
  const computedStyle = getCachedComputedStyle(el);
  return computedStyle.visibility !== "hidden" && computedStyle.display !== "none";
}
function isOverflowingAndTabbable(el) {
  const computedStyle = getCachedComputedStyle(el);
  const { overflowY, overflowX } = computedStyle;
  if (overflowY === "scroll" || overflowX === "scroll") {
    return true;
  }
  if (overflowY !== "auto" || overflowX !== "auto") {
    return false;
  }
  const isOverflowingY = el.scrollHeight > el.clientHeight;
  if (isOverflowingY && overflowY === "auto") {
    return true;
  }
  const isOverflowingX = el.scrollWidth > el.clientWidth;
  if (isOverflowingX && overflowX === "auto") {
    return true;
  }
  return false;
}
function isTabbable(el) {
  const tag = el.tagName.toLowerCase();
  const tabindex = Number(el.getAttribute("tabindex"));
  const hasTabindex = el.hasAttribute("tabindex");
  if (hasTabindex && (isNaN(tabindex) || tabindex <= -1)) {
    return false;
  }
  if (el.hasAttribute("disabled")) {
    return false;
  }
  if (el.closest("[inert]")) {
    return false;
  }
  if (tag === "input" && el.getAttribute("type") === "radio") {
    const rootNode = el.getRootNode();
    const findRadios = `input[type='radio'][name="${el.getAttribute("name")}"]`;
    const firstChecked = rootNode.querySelector(`${findRadios}:checked`);
    if (firstChecked) {
      return firstChecked === el;
    }
    const firstRadio = rootNode.querySelector(findRadios);
    return firstRadio === el;
  }
  if (!isVisible(el)) {
    return false;
  }
  if ((tag === "audio" || tag === "video") && el.hasAttribute("controls")) {
    return true;
  }
  if (el.hasAttribute("tabindex")) {
    return true;
  }
  if (el.hasAttribute("contenteditable") && el.getAttribute("contenteditable") !== "false") {
    return true;
  }
  const isNativelyTabbable = [
    "button",
    "input",
    "select",
    "textarea",
    "a",
    "audio",
    "video",
    "summary",
    "iframe"
  ].includes(tag);
  if (isNativelyTabbable) {
    return true;
  }
  return isOverflowingAndTabbable(el);
}
function getTabbableBoundary(root) {
  var _a, _b;
  const tabbableElements = getTabbableElements(root);
  const start = (_a = tabbableElements[0]) != null ? _a : null;
  const end = (_b = tabbableElements[tabbableElements.length - 1]) != null ? _b : null;
  return { start, end };
}
function getSlottedChildrenOutsideRootElement(slotElement, root) {
  var _a;
  return ((_a = slotElement.getRootNode({ composed: true })) == null ? void 0 : _a.host) !== root;
}
function getTabbableElements(root) {
  const walkedEls = /* @__PURE__ */ new WeakMap();
  const tabbableElements = [];
  function walk(el) {
    if (el instanceof Element) {
      if (el.hasAttribute("inert") || el.closest("[inert]")) {
        return;
      }
      if (walkedEls.has(el)) {
        return;
      }
      walkedEls.set(el, true);
      if (!tabbableElements.includes(el) && isTabbable(el)) {
        tabbableElements.push(el);
      }
      if (el instanceof HTMLSlotElement && getSlottedChildrenOutsideRootElement(el, root)) {
        el.assignedElements({ flatten: true }).forEach((assignedEl) => {
          walk(assignedEl);
        });
      }
      if (el.shadowRoot !== null && el.shadowRoot.mode === "open") {
        walk(el.shadowRoot);
      }
    }
    for (const e of el.children) {
      walk(e);
    }
  }
  walk(root);
  return tabbableElements.sort((a, b) => {
    const aTabindex = Number(a.getAttribute("tabindex")) || 0;
    const bTabindex = Number(b.getAttribute("tabindex")) || 0;
    return bTabindex - aTabindex;
  });
}

// src/internal/modal.ts
var activeModals = [];
var Modal = class {
  constructor(element) {
    this.tabDirection = "forward";
    this.handleFocusIn = () => {
      if (!this.isActive()) return;
      this.checkFocus();
    };
    this.handleKeyDown = (event) => {
      var _a;
      if (event.key !== "Tab" || this.isExternalActivated) return;
      if (!this.isActive()) return;
      const currentActiveElement = getDeepestActiveElement();
      this.previousFocus = currentActiveElement;
      if (this.previousFocus && this.possiblyHasTabbableChildren(this.previousFocus)) {
        return;
      }
      if (event.shiftKey) {
        this.tabDirection = "backward";
      } else {
        this.tabDirection = "forward";
      }
      const tabbableElements = getTabbableElements(this.element);
      let currentFocusIndex = tabbableElements.findIndex((el) => el === currentActiveElement);
      this.previousFocus = this.currentFocus;
      const addition = this.tabDirection === "forward" ? 1 : -1;
      while (true) {
        if (currentFocusIndex + addition >= tabbableElements.length) {
          currentFocusIndex = 0;
        } else if (currentFocusIndex + addition < 0) {
          currentFocusIndex = tabbableElements.length - 1;
        } else {
          currentFocusIndex += addition;
        }
        this.previousFocus = this.currentFocus;
        const nextFocus = (
          /** @type {HTMLElement} */
          tabbableElements[currentFocusIndex]
        );
        if (this.tabDirection === "backward") {
          if (this.previousFocus && this.possiblyHasTabbableChildren(this.previousFocus)) {
            return;
          }
        }
        if (nextFocus && this.possiblyHasTabbableChildren(nextFocus)) {
          return;
        }
        event.preventDefault();
        this.currentFocus = nextFocus;
        (_a = this.currentFocus) == null ? void 0 : _a.focus({ preventScroll: false });
        const allActiveElements = [...activeElements()];
        if (allActiveElements.includes(this.currentFocus) || !allActiveElements.includes(this.previousFocus)) {
          break;
        }
      }
      setTimeout(() => this.checkFocus());
    };
    this.handleKeyUp = () => {
      this.tabDirection = "forward";
    };
    this.element = element;
    this.elementsWithTabbableControls = ["iframe"];
  }
  /** Activates focus trapping. */
  activate() {
    activeModals.push(this.element);
    document.addEventListener("focusin", this.handleFocusIn);
    document.addEventListener("keydown", this.handleKeyDown);
    document.addEventListener("keyup", this.handleKeyUp);
  }
  /** Deactivates focus trapping. */
  deactivate() {
    activeModals = activeModals.filter((modal) => modal !== this.element);
    this.currentFocus = null;
    document.removeEventListener("focusin", this.handleFocusIn);
    document.removeEventListener("keydown", this.handleKeyDown);
    document.removeEventListener("keyup", this.handleKeyUp);
  }
  /** Determines if this modal element is currently active or not. */
  isActive() {
    return activeModals[activeModals.length - 1] === this.element;
  }
  /** Activates external modal behavior and temporarily disables focus trapping. */
  activateExternal() {
    this.isExternalActivated = true;
  }
  /** Deactivates external modal behavior and re-enables focus trapping. */
  deactivateExternal() {
    this.isExternalActivated = false;
  }
  checkFocus() {
    if (this.isActive() && !this.isExternalActivated) {
      const tabbableElements = getTabbableElements(this.element);
      if (!this.element.matches(":focus-within")) {
        const start = tabbableElements[0];
        const end = tabbableElements[tabbableElements.length - 1];
        const target = this.tabDirection === "forward" ? start : end;
        if (typeof (target == null ? void 0 : target.focus) === "function") {
          this.currentFocus = target;
          target.focus({ preventScroll: false });
        }
      }
    }
  }
  possiblyHasTabbableChildren(element) {
    return this.elementsWithTabbableControls.includes(element.tagName.toLowerCase()) || element.hasAttribute("controls");
  }
};

// src/internal/closeActiveElement.ts
var blurActiveElement = (elm) => {
  var _a;
  const { activeElement } = document;
  if (activeElement && elm.contains(activeElement)) {
    (_a = document.activeElement) == null ? void 0 : _a.blur();
  }
};

// src/internal/string.ts
function uppercaseFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

// src/components/drawer/drawer.component.ts
var SlDrawer = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "footer");
    this.localize = new LocalizeController(this);
    this.modal = new Modal(this);
    this.open = false;
    this.label = "";
    this.placement = "end";
    this.contained = false;
    this.noHeader = false;
    this.handleDocumentKeyDown = (event) => {
      if (this.contained) {
        return;
      }
      if (event.key === "Escape" && this.modal.isActive() && this.open) {
        event.stopImmediatePropagation();
        this.requestClose("keyboard");
      }
    };
  }
  firstUpdated() {
    this.drawer.hidden = !this.open;
    if (this.open) {
      this.addOpenListeners();
      if (!this.contained) {
        this.modal.activate();
        lockBodyScrolling(this);
      }
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    unlockBodyScrolling(this);
    this.removeOpenListeners();
  }
  requestClose(source) {
    const slRequestClose = this.emit("sl-request-close", {
      cancelable: true,
      detail: { source }
    });
    if (slRequestClose.defaultPrevented) {
      const animation = getAnimation(this, "drawer.denyClose", { dir: this.localize.dir() });
      animateTo(this.panel, animation.keyframes, animation.options);
      return;
    }
    this.hide();
  }
  addOpenListeners() {
    var _a;
    if ("CloseWatcher" in window) {
      (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
      if (!this.contained) {
        this.closeWatcher = new CloseWatcher();
        this.closeWatcher.onclose = () => this.requestClose("keyboard");
      }
    } else {
      document.addEventListener("keydown", this.handleDocumentKeyDown);
    }
  }
  removeOpenListeners() {
    var _a;
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
    (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
  }
  async handleOpenChange() {
    if (this.open) {
      this.emit("sl-show");
      this.addOpenListeners();
      this.originalTrigger = document.activeElement;
      if (!this.contained) {
        this.modal.activate();
        lockBodyScrolling(this);
      }
      const autoFocusTarget = this.querySelector("[autofocus]");
      if (autoFocusTarget) {
        autoFocusTarget.removeAttribute("autofocus");
      }
      await Promise.all([stopAnimations(this.drawer), stopAnimations(this.overlay)]);
      this.drawer.hidden = false;
      requestAnimationFrame(() => {
        const slInitialFocus = this.emit("sl-initial-focus", { cancelable: true });
        if (!slInitialFocus.defaultPrevented) {
          if (autoFocusTarget) {
            autoFocusTarget.focus({ preventScroll: true });
          } else {
            this.panel.focus({ preventScroll: true });
          }
        }
        if (autoFocusTarget) {
          autoFocusTarget.setAttribute("autofocus", "");
        }
      });
      const panelAnimation = getAnimation(this, `drawer.show${uppercaseFirstLetter(this.placement)}`, {
        dir: this.localize.dir()
      });
      const overlayAnimation = getAnimation(this, "drawer.overlay.show", { dir: this.localize.dir() });
      await Promise.all([
        animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options),
        animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)
      ]);
      this.emit("sl-after-show");
    } else {
      blurActiveElement(this);
      this.emit("sl-hide");
      this.removeOpenListeners();
      if (!this.contained) {
        this.modal.deactivate();
        unlockBodyScrolling(this);
      }
      await Promise.all([stopAnimations(this.drawer), stopAnimations(this.overlay)]);
      const panelAnimation = getAnimation(this, `drawer.hide${uppercaseFirstLetter(this.placement)}`, {
        dir: this.localize.dir()
      });
      const overlayAnimation = getAnimation(this, "drawer.overlay.hide", { dir: this.localize.dir() });
      await Promise.all([
        animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options).then(() => {
          this.overlay.hidden = true;
        }),
        animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options).then(() => {
          this.panel.hidden = true;
        })
      ]);
      this.drawer.hidden = true;
      this.overlay.hidden = false;
      this.panel.hidden = false;
      const trigger = this.originalTrigger;
      if (typeof (trigger == null ? void 0 : trigger.focus) === "function") {
        setTimeout(() => trigger.focus());
      }
      this.emit("sl-after-hide");
    }
  }
  handleNoModalChange() {
    if (this.open && !this.contained) {
      this.modal.activate();
      lockBodyScrolling(this);
    }
    if (this.open && this.contained) {
      this.modal.deactivate();
      unlockBodyScrolling(this);
    }
  }
  /** Shows the drawer. */
  async show() {
    if (this.open) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the drawer */
  async hide() {
    if (!this.open) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  render() {
    return x`
      <div
        part="base"
        class=${e$3({
      drawer: true,
      "drawer--open": this.open,
      "drawer--top": this.placement === "top",
      "drawer--end": this.placement === "end",
      "drawer--bottom": this.placement === "bottom",
      "drawer--start": this.placement === "start",
      "drawer--contained": this.contained,
      "drawer--fixed": !this.contained,
      "drawer--rtl": this.localize.dir() === "rtl",
      "drawer--has-footer": this.hasSlotController.test("footer")
    })}
      >
        <div part="overlay" class="drawer__overlay" @click=${() => this.requestClose("overlay")} tabindex="-1"></div>

        <div
          part="panel"
          class="drawer__panel"
          role="dialog"
          aria-modal="true"
          aria-hidden=${this.open ? "false" : "true"}
          aria-label=${o$6(this.noHeader ? this.label : void 0)}
          aria-labelledby=${o$6(!this.noHeader ? "title" : void 0)}
          tabindex="0"
        >
          ${!this.noHeader ? x`
                <header part="header" class="drawer__header">
                  <h2 part="title" class="drawer__title" id="title">
                    <!-- If there's no label, use an invisible character to prevent the header from collapsing -->
                    <slot name="label"> ${this.label.length > 0 ? this.label : String.fromCharCode(65279)} </slot>
                  </h2>
                  <div part="header-actions" class="drawer__header-actions">
                    <slot name="header-actions"></slot>
                    <sl-icon-button
                      part="close-button"
                      exportparts="base:close-button__base"
                      class="drawer__close"
                      name="x-lg"
                      label=${this.localize.term("close")}
                      library="system"
                      @click=${() => this.requestClose("close-button")}
                    ></sl-icon-button>
                  </div>
                </header>
              ` : ""}

          <slot part="body" class="drawer__body"></slot>

          <footer part="footer" class="drawer__footer">
            <slot name="footer"></slot>
          </footer>
        </div>
      </div>
    `;
  }
};
SlDrawer.styles = [component_styles_default, drawer_styles_default];
SlDrawer.dependencies = { "sl-icon-button": SlIconButton };
__decorateClass([
  e$7(".drawer")
], SlDrawer.prototype, "drawer", 2);
__decorateClass([
  e$7(".drawer__panel")
], SlDrawer.prototype, "panel", 2);
__decorateClass([
  e$7(".drawer__overlay")
], SlDrawer.prototype, "overlay", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlDrawer.prototype, "open", 2);
__decorateClass([
  n$6({ reflect: true })
], SlDrawer.prototype, "label", 2);
__decorateClass([
  n$6({ reflect: true })
], SlDrawer.prototype, "placement", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlDrawer.prototype, "contained", 2);
__decorateClass([
  n$6({ attribute: "no-header", type: Boolean, reflect: true })
], SlDrawer.prototype, "noHeader", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlDrawer.prototype, "handleOpenChange", 1);
__decorateClass([
  watch("contained", { waitUntilFirstUpdate: true })
], SlDrawer.prototype, "handleNoModalChange", 1);
setDefaultAnimation("drawer.showTop", {
  keyframes: [
    { opacity: 0, translate: "0 -100%" },
    { opacity: 1, translate: "0 0" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.hideTop", {
  keyframes: [
    { opacity: 1, translate: "0 0" },
    { opacity: 0, translate: "0 -100%" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.showEnd", {
  keyframes: [
    { opacity: 0, translate: "100%" },
    { opacity: 1, translate: "0" }
  ],
  rtlKeyframes: [
    { opacity: 0, translate: "-100%" },
    { opacity: 1, translate: "0" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.hideEnd", {
  keyframes: [
    { opacity: 1, translate: "0" },
    { opacity: 0, translate: "100%" }
  ],
  rtlKeyframes: [
    { opacity: 1, translate: "0" },
    { opacity: 0, translate: "-100%" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.showBottom", {
  keyframes: [
    { opacity: 0, translate: "0 100%" },
    { opacity: 1, translate: "0 0" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.hideBottom", {
  keyframes: [
    { opacity: 1, translate: "0 0" },
    { opacity: 0, translate: "0 100%" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.showStart", {
  keyframes: [
    { opacity: 0, translate: "-100%" },
    { opacity: 1, translate: "0" }
  ],
  rtlKeyframes: [
    { opacity: 0, translate: "100%" },
    { opacity: 1, translate: "0" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.hideStart", {
  keyframes: [
    { opacity: 1, translate: "0" },
    { opacity: 0, translate: "-100%" }
  ],
  rtlKeyframes: [
    { opacity: 1, translate: "0" },
    { opacity: 0, translate: "100%" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.denyClose", {
  keyframes: [{ scale: 1 }, { scale: 1.01 }, { scale: 1 }],
  options: { duration: 250 }
});
setDefaultAnimation("drawer.overlay.show", {
  keyframes: [{ opacity: 0 }, { opacity: 1 }],
  options: { duration: 250 }
});
setDefaultAnimation("drawer.overlay.hide", {
  keyframes: [{ opacity: 1 }, { opacity: 0 }],
  options: { duration: 250 }
});

var tagName$n = "sl-drawer";
SlDrawer.define("sl-drawer");
o$8({
  tagName: tagName$n,
  elementClass: SlDrawer,
  react: React$1,
  events: {
    onSlShow: "sl-show",
    onSlAfterShow: "sl-after-show",
    onSlHide: "sl-hide",
    onSlAfterHide: "sl-after-hide",
    onSlInitialFocus: "sl-initial-focus",
    onSlRequestClose: "sl-request-close"
  },
  displayName: "SlDrawer"
});

// src/components/dropdown/dropdown.styles.ts
var dropdown_styles_default = i$7`
  :host {
    display: inline-block;
  }

  .dropdown::part(popup) {
    z-index: var(--sl-z-index-dropdown);
  }

  .dropdown[data-current-placement^='top']::part(popup) {
    transform-origin: bottom;
  }

  .dropdown[data-current-placement^='bottom']::part(popup) {
    transform-origin: top;
  }

  .dropdown[data-current-placement^='left']::part(popup) {
    transform-origin: right;
  }

  .dropdown[data-current-placement^='right']::part(popup) {
    transform-origin: left;
  }

  .dropdown__trigger {
    display: block;
  }

  .dropdown__panel {
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    box-shadow: var(--sl-shadow-large);
    border-radius: var(--sl-border-radius-medium);
    pointer-events: none;
  }

  .dropdown--open .dropdown__panel {
    display: block;
    pointer-events: all;
  }

  /* When users slot a menu, make sure it conforms to the popup's auto-size */
  ::slotted(sl-menu) {
    max-width: var(--auto-size-available-width) !important;
    max-height: var(--auto-size-available-height) !important;
  }
`;

var SlDropdown = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.open = false;
    this.placement = "bottom-start";
    this.disabled = false;
    this.stayOpenOnSelect = false;
    this.distance = 0;
    this.skidding = 0;
    this.hoist = false;
    this.sync = void 0;
    this.handleKeyDown = (event) => {
      if (this.open && event.key === "Escape") {
        event.stopPropagation();
        this.hide();
        this.focusOnTrigger();
      }
    };
    this.handleDocumentKeyDown = (event) => {
      var _a;
      if (event.key === "Escape" && this.open && !this.closeWatcher) {
        event.stopPropagation();
        this.focusOnTrigger();
        this.hide();
        return;
      }
      if (event.key === "Tab") {
        if (this.open && ((_a = document.activeElement) == null ? void 0 : _a.tagName.toLowerCase()) === "sl-menu-item") {
          event.preventDefault();
          this.hide();
          this.focusOnTrigger();
          return;
        }
        const computeClosestContaining = (element, tagName) => {
          if (!element) return null;
          const closest = element.closest(tagName);
          if (closest) return closest;
          const rootNode = element.getRootNode();
          if (rootNode instanceof ShadowRoot) {
            return computeClosestContaining(rootNode.host, tagName);
          }
          return null;
        };
        setTimeout(() => {
          var _a2;
          const activeElement = ((_a2 = this.containingElement) == null ? void 0 : _a2.getRootNode()) instanceof ShadowRoot ? getDeepestActiveElement() : document.activeElement;
          if (!this.containingElement || computeClosestContaining(activeElement, this.containingElement.tagName.toLowerCase()) !== this.containingElement) {
            this.hide();
          }
        });
      }
    };
    this.handleDocumentMouseDown = (event) => {
      const path = event.composedPath();
      if (this.containingElement && !path.includes(this.containingElement)) {
        this.hide();
      }
    };
    this.handlePanelSelect = (event) => {
      const target = event.target;
      if (!this.stayOpenOnSelect && target.tagName.toLowerCase() === "sl-menu") {
        this.hide();
        this.focusOnTrigger();
      }
    };
  }
  connectedCallback() {
    super.connectedCallback();
    if (!this.containingElement) {
      this.containingElement = this;
    }
  }
  firstUpdated() {
    this.panel.hidden = !this.open;
    if (this.open) {
      this.addOpenListeners();
      this.popup.active = true;
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeOpenListeners();
    this.hide();
  }
  focusOnTrigger() {
    const trigger = this.trigger.assignedElements({ flatten: true })[0];
    if (typeof (trigger == null ? void 0 : trigger.focus) === "function") {
      trigger.focus();
    }
  }
  getMenu() {
    return this.panel.assignedElements({ flatten: true }).find((el) => el.tagName.toLowerCase() === "sl-menu");
  }
  handleTriggerClick() {
    if (this.open) {
      this.hide();
    } else {
      this.show();
      this.focusOnTrigger();
    }
  }
  async handleTriggerKeyDown(event) {
    if ([" ", "Enter"].includes(event.key)) {
      event.preventDefault();
      this.handleTriggerClick();
      return;
    }
    const menu = this.getMenu();
    if (menu) {
      const menuItems = menu.getAllItems();
      const firstMenuItem = menuItems[0];
      const lastMenuItem = menuItems[menuItems.length - 1];
      if (["ArrowDown", "ArrowUp", "Home", "End"].includes(event.key)) {
        event.preventDefault();
        if (!this.open) {
          this.show();
          await this.updateComplete;
        }
        if (menuItems.length > 0) {
          this.updateComplete.then(() => {
            if (event.key === "ArrowDown" || event.key === "Home") {
              menu.setCurrentItem(firstMenuItem);
              firstMenuItem.focus();
            }
            if (event.key === "ArrowUp" || event.key === "End") {
              menu.setCurrentItem(lastMenuItem);
              lastMenuItem.focus();
            }
          });
        }
      }
    }
  }
  handleTriggerKeyUp(event) {
    if (event.key === " ") {
      event.preventDefault();
    }
  }
  handleTriggerSlotChange() {
    this.updateAccessibleTrigger();
  }
  //
  // Slotted triggers can be arbitrary content, but we need to link them to the dropdown panel with `aria-haspopup` and
  // `aria-expanded`. These must be applied to the "accessible trigger" (the tabbable portion of the trigger element
  // that gets slotted in) so screen readers will understand them. The accessible trigger could be the slotted element,
  // a child of the slotted element, or an element in the slotted element's shadow root.
  //
  // For example, the accessible trigger of an <sl-button> is a <button> located inside its shadow root.
  //
  // To determine this, we assume the first tabbable element in the trigger slot is the "accessible trigger."
  //
  updateAccessibleTrigger() {
    const assignedElements = this.trigger.assignedElements({ flatten: true });
    const accessibleTrigger = assignedElements.find((el) => getTabbableBoundary(el).start);
    let target;
    if (accessibleTrigger) {
      switch (accessibleTrigger.tagName.toLowerCase()) {
        // Shoelace buttons have to update the internal button so it's announced correctly by screen readers
        case "sl-button":
        case "sl-icon-button":
          target = accessibleTrigger.button;
          break;
        default:
          target = accessibleTrigger;
      }
      target.setAttribute("aria-haspopup", "true");
      target.setAttribute("aria-expanded", this.open ? "true" : "false");
    }
  }
  /** Shows the dropdown panel. */
  async show() {
    if (this.open) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the dropdown panel */
  async hide() {
    if (!this.open) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  /**
   * Instructs the dropdown menu to reposition. Useful when the position or size of the trigger changes when the menu
   * is activated.
   */
  reposition() {
    this.popup.reposition();
  }
  addOpenListeners() {
    var _a;
    this.panel.addEventListener("sl-select", this.handlePanelSelect);
    if ("CloseWatcher" in window) {
      (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
      this.closeWatcher = new CloseWatcher();
      this.closeWatcher.onclose = () => {
        this.hide();
        this.focusOnTrigger();
      };
    } else {
      this.panel.addEventListener("keydown", this.handleKeyDown);
    }
    document.addEventListener("keydown", this.handleDocumentKeyDown);
    document.addEventListener("mousedown", this.handleDocumentMouseDown);
  }
  removeOpenListeners() {
    var _a;
    if (this.panel) {
      this.panel.removeEventListener("sl-select", this.handlePanelSelect);
      this.panel.removeEventListener("keydown", this.handleKeyDown);
    }
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
    document.removeEventListener("mousedown", this.handleDocumentMouseDown);
    (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
  }
  async handleOpenChange() {
    if (this.disabled) {
      this.open = false;
      return;
    }
    this.updateAccessibleTrigger();
    if (this.open) {
      this.emit("sl-show");
      this.addOpenListeners();
      await stopAnimations(this);
      this.panel.hidden = false;
      this.popup.active = true;
      const { keyframes, options } = getAnimation(this, "dropdown.show", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      this.emit("sl-after-show");
    } else {
      this.emit("sl-hide");
      this.removeOpenListeners();
      await stopAnimations(this);
      const { keyframes, options } = getAnimation(this, "dropdown.hide", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      this.panel.hidden = true;
      this.popup.active = false;
      this.emit("sl-after-hide");
    }
  }
  render() {
    return x`
      <sl-popup
        part="base"
        exportparts="popup:base__popup"
        id="dropdown"
        placement=${this.placement}
        distance=${this.distance}
        skidding=${this.skidding}
        strategy=${this.hoist ? "fixed" : "absolute"}
        flip
        shift
        auto-size="vertical"
        auto-size-padding="10"
        sync=${o$6(this.sync ? this.sync : void 0)}
        class=${e$3({
      dropdown: true,
      "dropdown--open": this.open
    })}
      >
        <slot
          name="trigger"
          slot="anchor"
          part="trigger"
          class="dropdown__trigger"
          @click=${this.handleTriggerClick}
          @keydown=${this.handleTriggerKeyDown}
          @keyup=${this.handleTriggerKeyUp}
          @slotchange=${this.handleTriggerSlotChange}
        ></slot>

        <div aria-hidden=${this.open ? "false" : "true"} aria-labelledby="dropdown">
          <slot part="panel" class="dropdown__panel"></slot>
        </div>
      </sl-popup>
    `;
  }
};
SlDropdown.styles = [component_styles_default, dropdown_styles_default];
SlDropdown.dependencies = { "sl-popup": SlPopup };
__decorateClass([
  e$7(".dropdown")
], SlDropdown.prototype, "popup", 2);
__decorateClass([
  e$7(".dropdown__trigger")
], SlDropdown.prototype, "trigger", 2);
__decorateClass([
  e$7(".dropdown__panel")
], SlDropdown.prototype, "panel", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlDropdown.prototype, "open", 2);
__decorateClass([
  n$6({ reflect: true })
], SlDropdown.prototype, "placement", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlDropdown.prototype, "disabled", 2);
__decorateClass([
  n$6({ attribute: "stay-open-on-select", type: Boolean, reflect: true })
], SlDropdown.prototype, "stayOpenOnSelect", 2);
__decorateClass([
  n$6({ attribute: false })
], SlDropdown.prototype, "containingElement", 2);
__decorateClass([
  n$6({ type: Number })
], SlDropdown.prototype, "distance", 2);
__decorateClass([
  n$6({ type: Number })
], SlDropdown.prototype, "skidding", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlDropdown.prototype, "hoist", 2);
__decorateClass([
  n$6({ reflect: true })
], SlDropdown.prototype, "sync", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlDropdown.prototype, "handleOpenChange", 1);
setDefaultAnimation("dropdown.show", {
  keyframes: [
    { opacity: 0, scale: 0.9 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 100, easing: "ease" }
});
setDefaultAnimation("dropdown.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.9 }
  ],
  options: { duration: 100, easing: "ease" }
});

var tagName$m = "sl-dropdown";
SlDropdown.define("sl-dropdown");
var reactWrapper$6 = o$8({
  tagName: tagName$m,
  elementClass: SlDropdown,
  react: React$1,
  events: {
    onSlShow: "sl-show",
    onSlAfterShow: "sl-after-show",
    onSlHide: "sl-hide",
    onSlAfterHide: "sl-after-hide"
  },
  displayName: "SlDropdown"
});
var dropdown_default = reactWrapper$6;

var SlFormatDate = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.date = /* @__PURE__ */ new Date();
    this.hourFormat = "auto";
  }
  render() {
    const date = new Date(this.date);
    const hour12 = this.hourFormat === "auto" ? void 0 : this.hourFormat === "12";
    if (isNaN(date.getMilliseconds())) {
      return void 0;
    }
    return x`
      <time datetime=${date.toISOString()}>
        ${this.localize.date(date, {
      weekday: this.weekday,
      era: this.era,
      year: this.year,
      month: this.month,
      day: this.day,
      hour: this.hour,
      minute: this.minute,
      second: this.second,
      timeZoneName: this.timeZoneName,
      timeZone: this.timeZone,
      hour12
    })}
      </time>
    `;
  }
};
__decorateClass([
  n$6()
], SlFormatDate.prototype, "date", 2);
__decorateClass([
  n$6()
], SlFormatDate.prototype, "weekday", 2);
__decorateClass([
  n$6()
], SlFormatDate.prototype, "era", 2);
__decorateClass([
  n$6()
], SlFormatDate.prototype, "year", 2);
__decorateClass([
  n$6()
], SlFormatDate.prototype, "month", 2);
__decorateClass([
  n$6()
], SlFormatDate.prototype, "day", 2);
__decorateClass([
  n$6()
], SlFormatDate.prototype, "hour", 2);
__decorateClass([
  n$6()
], SlFormatDate.prototype, "minute", 2);
__decorateClass([
  n$6()
], SlFormatDate.prototype, "second", 2);
__decorateClass([
  n$6({ attribute: "time-zone-name" })
], SlFormatDate.prototype, "timeZoneName", 2);
__decorateClass([
  n$6({ attribute: "time-zone" })
], SlFormatDate.prototype, "timeZone", 2);
__decorateClass([
  n$6({ attribute: "hour-format" })
], SlFormatDate.prototype, "hourFormat", 2);

var tagName$l = "sl-format-date";
SlFormatDate.define("sl-format-date");
o$8({
  tagName: tagName$l,
  elementClass: SlFormatDate,
  react: React$1,
  events: {},
  displayName: "SlFormatDate"
});

var SlFormatBytes = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.value = 0;
    this.unit = "byte";
    this.display = "short";
  }
  render() {
    if (isNaN(this.value)) {
      return "";
    }
    const bitPrefixes = ["", "kilo", "mega", "giga", "tera"];
    const bytePrefixes = ["", "kilo", "mega", "giga", "tera", "peta"];
    const prefix = this.unit === "bit" ? bitPrefixes : bytePrefixes;
    const index = Math.max(0, Math.min(Math.floor(Math.log10(this.value) / 3), prefix.length - 1));
    const unit = prefix[index] + this.unit;
    const valueToFormat = parseFloat((this.value / Math.pow(1e3, index)).toPrecision(3));
    return this.localize.number(valueToFormat, {
      style: "unit",
      unit,
      unitDisplay: this.display
    });
  }
};
__decorateClass([
  n$6({ type: Number })
], SlFormatBytes.prototype, "value", 2);
__decorateClass([
  n$6()
], SlFormatBytes.prototype, "unit", 2);
__decorateClass([
  n$6()
], SlFormatBytes.prototype, "display", 2);

var tagName$k = "sl-format-bytes";
SlFormatBytes.define("sl-format-bytes");
o$8({
  tagName: tagName$k,
  elementClass: SlFormatBytes,
  react: React$1,
  events: {},
  displayName: "SlFormatBytes"
});

var SlFormatNumber = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.value = 0;
    this.type = "decimal";
    this.noGrouping = false;
    this.currency = "USD";
    this.currencyDisplay = "symbol";
  }
  render() {
    if (isNaN(this.value)) {
      return "";
    }
    return this.localize.number(this.value, {
      style: this.type,
      currency: this.currency,
      currencyDisplay: this.currencyDisplay,
      useGrouping: !this.noGrouping,
      minimumIntegerDigits: this.minimumIntegerDigits,
      minimumFractionDigits: this.minimumFractionDigits,
      maximumFractionDigits: this.maximumFractionDigits,
      minimumSignificantDigits: this.minimumSignificantDigits,
      maximumSignificantDigits: this.maximumSignificantDigits
    });
  }
};
__decorateClass([
  n$6({ type: Number })
], SlFormatNumber.prototype, "value", 2);
__decorateClass([
  n$6()
], SlFormatNumber.prototype, "type", 2);
__decorateClass([
  n$6({ attribute: "no-grouping", type: Boolean })
], SlFormatNumber.prototype, "noGrouping", 2);
__decorateClass([
  n$6()
], SlFormatNumber.prototype, "currency", 2);
__decorateClass([
  n$6({ attribute: "currency-display" })
], SlFormatNumber.prototype, "currencyDisplay", 2);
__decorateClass([
  n$6({ attribute: "minimum-integer-digits", type: Number })
], SlFormatNumber.prototype, "minimumIntegerDigits", 2);
__decorateClass([
  n$6({ attribute: "minimum-fraction-digits", type: Number })
], SlFormatNumber.prototype, "minimumFractionDigits", 2);
__decorateClass([
  n$6({ attribute: "maximum-fraction-digits", type: Number })
], SlFormatNumber.prototype, "maximumFractionDigits", 2);
__decorateClass([
  n$6({ attribute: "minimum-significant-digits", type: Number })
], SlFormatNumber.prototype, "minimumSignificantDigits", 2);
__decorateClass([
  n$6({ attribute: "maximum-significant-digits", type: Number })
], SlFormatNumber.prototype, "maximumSignificantDigits", 2);

var tagName$j = "sl-format-number";
SlFormatNumber.define("sl-format-number");
o$8({
  tagName: tagName$j,
  elementClass: SlFormatNumber,
  react: React$1,
  events: {},
  displayName: "SlFormatNumber"
});

var tagName$i = "sl-icon";
SlIcon.define("sl-icon");
var reactWrapper$5 = o$8({
  tagName: tagName$i,
  elementClass: SlIcon,
  react: React$1,
  events: {
    onSlLoad: "sl-load",
    onSlError: "sl-error"
  },
  displayName: "SlIcon"
});
var icon_default = reactWrapper$5;

var tagName$h = "sl-icon-button";
SlIconButton.define("sl-icon-button");
o$8({
  tagName: tagName$h,
  elementClass: SlIconButton,
  react: React$1,
  events: {
    onSlBlur: "sl-blur",
    onSlFocus: "sl-focus"
  },
  displayName: "SlIconButton"
});

var tagName$g = "sl-button-group";
SlButtonGroup.define("sl-button-group");
o$8({
  tagName: tagName$g,
  elementClass: SlButtonGroup,
  react: React$1,
  events: {},
  displayName: "SlButtonGroup"
});

// src/components/carousel/autoplay-controller.ts
var AutoplayController = class {
  constructor(host, tickCallback) {
    this.timerId = 0;
    this.activeInteractions = 0;
    this.paused = false;
    this.stopped = true;
    this.pause = () => {
      if (!this.activeInteractions++) {
        this.paused = true;
        this.host.requestUpdate();
      }
    };
    this.resume = () => {
      if (!--this.activeInteractions) {
        this.paused = false;
        this.host.requestUpdate();
      }
    };
    host.addController(this);
    this.host = host;
    this.tickCallback = tickCallback;
  }
  hostConnected() {
    this.host.addEventListener("mouseenter", this.pause);
    this.host.addEventListener("mouseleave", this.resume);
    this.host.addEventListener("focusin", this.pause);
    this.host.addEventListener("focusout", this.resume);
    this.host.addEventListener("touchstart", this.pause, { passive: true });
    this.host.addEventListener("touchend", this.resume);
  }
  hostDisconnected() {
    this.stop();
    this.host.removeEventListener("mouseenter", this.pause);
    this.host.removeEventListener("mouseleave", this.resume);
    this.host.removeEventListener("focusin", this.pause);
    this.host.removeEventListener("focusout", this.resume);
    this.host.removeEventListener("touchstart", this.pause);
    this.host.removeEventListener("touchend", this.resume);
  }
  start(interval) {
    this.stop();
    this.stopped = false;
    this.timerId = window.setInterval(() => {
      if (!this.paused) {
        this.tickCallback();
      }
    }, interval);
  }
  stop() {
    clearInterval(this.timerId);
    this.stopped = true;
    this.host.requestUpdate();
  }
};

// src/components/carousel/carousel.styles.ts
var carousel_styles_default = i$7`
  :host {
    --slide-gap: var(--sl-spacing-medium, 1rem);
    --aspect-ratio: 16 / 9;
    --scroll-hint: 0px;

    display: flex;
  }

  .carousel {
    display: grid;
    grid-template-columns: min-content 1fr min-content;
    grid-template-rows: 1fr min-content;
    grid-template-areas:
      '. slides .'
      '. pagination .';
    gap: var(--sl-spacing-medium);
    align-items: center;
    min-height: 100%;
    min-width: 100%;
    position: relative;
  }

  .carousel__pagination {
    grid-area: pagination;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--sl-spacing-small);
  }

  .carousel__slides {
    grid-area: slides;

    display: grid;
    height: 100%;
    width: 100%;
    align-items: center;
    justify-items: center;
    overflow: auto;
    overscroll-behavior-x: contain;
    scrollbar-width: none;
    aspect-ratio: calc(var(--aspect-ratio) * var(--slides-per-page));
    border-radius: var(--sl-border-radius-small);

    --slide-size: calc((100% - (var(--slides-per-page) - 1) * var(--slide-gap)) / var(--slides-per-page));
  }

  @media (prefers-reduced-motion) {
    :where(.carousel__slides) {
      scroll-behavior: auto;
    }
  }

  .carousel__slides--horizontal {
    grid-auto-flow: column;
    grid-auto-columns: var(--slide-size);
    grid-auto-rows: 100%;
    column-gap: var(--slide-gap);
    scroll-snap-type: x mandatory;
    scroll-padding-inline: var(--scroll-hint);
    padding-inline: var(--scroll-hint);
    overflow-y: hidden;
  }

  .carousel__slides--vertical {
    grid-auto-flow: row;
    grid-auto-columns: 100%;
    grid-auto-rows: var(--slide-size);
    row-gap: var(--slide-gap);
    scroll-snap-type: y mandatory;
    scroll-padding-block: var(--scroll-hint);
    padding-block: var(--scroll-hint);
    overflow-x: hidden;
  }

  .carousel__slides--dragging {
  }

  :host([vertical]) ::slotted(sl-carousel-item) {
    height: 100%;
  }

  .carousel__slides::-webkit-scrollbar {
    display: none;
  }

  .carousel__navigation {
    grid-area: navigation;
    display: contents;
    font-size: var(--sl-font-size-x-large);
  }

  .carousel__navigation-button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    background: none;
    border: none;
    border-radius: var(--sl-border-radius-small);
    font-size: inherit;
    color: var(--sl-color-neutral-600);
    padding: var(--sl-spacing-x-small);
    cursor: pointer;
    transition: var(--sl-transition-medium) color;
    appearance: none;
  }

  .carousel__navigation-button--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .carousel__navigation-button--disabled::part(base) {
    pointer-events: none;
  }

  .carousel__navigation-button--previous {
    grid-column: 1;
    grid-row: 1;
  }

  .carousel__navigation-button--next {
    grid-column: 3;
    grid-row: 1;
  }

  .carousel__pagination-item {
    display: block;
    cursor: pointer;
    background: none;
    border: 0;
    border-radius: var(--sl-border-radius-circle);
    width: var(--sl-spacing-small);
    height: var(--sl-spacing-small);
    background-color: var(--sl-color-neutral-300);
    padding: 0;
    margin: 0;
  }

  .carousel__pagination-item--active {
    background-color: var(--sl-color-neutral-700);
    transform: scale(1.2);
  }

  /* Focus styles */
  .carousel__slides:focus-visible,
  .carousel__navigation-button:focus-visible,
  .carousel__pagination-item:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }
`;

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function*o$1(o,f){if(void 0!==o){let i=0;for(const t of o)yield f(t,i++);}}

/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function*o(o,t,e=1){const i=void 0===t?0:o;t??=o;for(let o=i;e>0?o<t:t<o;o+=e)yield o;}

var SlCarousel = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.loop = false;
    this.navigation = false;
    this.pagination = false;
    this.autoplay = false;
    this.autoplayInterval = 3e3;
    this.slidesPerPage = 1;
    this.slidesPerMove = 1;
    this.orientation = "horizontal";
    this.mouseDragging = false;
    this.activeSlide = 0;
    this.scrolling = false;
    this.dragging = false;
    this.autoplayController = new AutoplayController(this, () => this.next());
    this.dragStartPosition = [-1, -1];
    this.localize = new LocalizeController(this);
    this.pendingSlideChange = false;
    this.handleMouseDrag = (event) => {
      if (!this.dragging) {
        this.scrollContainer.style.setProperty("scroll-snap-type", "none");
        this.dragging = true;
        this.dragStartPosition = [event.clientX, event.clientY];
      }
      this.scrollContainer.scrollBy({
        left: -event.movementX,
        top: -event.movementY,
        behavior: "instant"
      });
    };
    this.handleMouseDragEnd = () => {
      const scrollContainer = this.scrollContainer;
      document.removeEventListener("pointermove", this.handleMouseDrag, { capture: true });
      const startLeft = scrollContainer.scrollLeft;
      const startTop = scrollContainer.scrollTop;
      scrollContainer.style.removeProperty("scroll-snap-type");
      scrollContainer.style.setProperty("overflow", "hidden");
      const finalLeft = scrollContainer.scrollLeft;
      const finalTop = scrollContainer.scrollTop;
      scrollContainer.style.removeProperty("overflow");
      scrollContainer.style.setProperty("scroll-snap-type", "none");
      scrollContainer.scrollTo({ left: startLeft, top: startTop, behavior: "instant" });
      requestAnimationFrame(async () => {
        if (startLeft !== finalLeft || startTop !== finalTop) {
          scrollContainer.scrollTo({
            left: finalLeft,
            top: finalTop,
            behavior: prefersReducedMotion() ? "auto" : "smooth"
          });
          await waitForEvent(scrollContainer, "scrollend");
        }
        scrollContainer.style.removeProperty("scroll-snap-type");
        this.dragging = false;
        this.dragStartPosition = [-1, -1];
        this.handleScrollEnd();
      });
    };
    this.handleSlotChange = (mutations) => {
      const needsInitialization = mutations.some(
        (mutation) => [...mutation.addedNodes, ...mutation.removedNodes].some(
          (el) => this.isCarouselItem(el) && !el.hasAttribute("data-clone")
        )
      );
      if (needsInitialization) {
        this.initializeSlides();
      }
      this.requestUpdate();
    };
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "region");
    this.setAttribute("aria-label", this.localize.term("carousel"));
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.mutationObserver) == null ? void 0 : _a.disconnect();
  }
  firstUpdated() {
    this.initializeSlides();
    this.mutationObserver = new MutationObserver(this.handleSlotChange);
    this.mutationObserver.observe(this, {
      childList: true,
      subtree: true
    });
  }
  willUpdate(changedProperties) {
    if (changedProperties.has("slidesPerMove") || changedProperties.has("slidesPerPage")) {
      this.slidesPerMove = Math.min(this.slidesPerMove, this.slidesPerPage);
    }
  }
  getPageCount() {
    const slidesCount = this.getSlides().length;
    const { slidesPerPage, slidesPerMove, loop } = this;
    const pages = loop ? slidesCount / slidesPerMove : (slidesCount - slidesPerPage) / slidesPerMove + 1;
    return Math.ceil(pages);
  }
  getCurrentPage() {
    return Math.ceil(this.activeSlide / this.slidesPerMove);
  }
  canScrollNext() {
    return this.loop || this.getCurrentPage() < this.getPageCount() - 1;
  }
  canScrollPrev() {
    return this.loop || this.getCurrentPage() > 0;
  }
  /** @internal Gets all carousel items. */
  getSlides({ excludeClones = true } = {}) {
    return [...this.children].filter(
      (el) => this.isCarouselItem(el) && (!excludeClones || !el.hasAttribute("data-clone"))
    );
  }
  handleClick(event) {
    if (this.dragging && this.dragStartPosition[0] > 0 && this.dragStartPosition[1] > 0) {
      const deltaX = Math.abs(this.dragStartPosition[0] - event.clientX);
      const deltaY = Math.abs(this.dragStartPosition[1] - event.clientY);
      const delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      if (delta >= 10) {
        event.preventDefault();
      }
    }
  }
  handleKeyDown(event) {
    if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
      const target = event.target;
      const isRtl = this.localize.dir() === "rtl";
      const isFocusInPagination = target.closest('[part~="pagination-item"]') !== null;
      const isNext = event.key === "ArrowDown" || !isRtl && event.key === "ArrowRight" || isRtl && event.key === "ArrowLeft";
      const isPrevious = event.key === "ArrowUp" || !isRtl && event.key === "ArrowLeft" || isRtl && event.key === "ArrowRight";
      event.preventDefault();
      if (isPrevious) {
        this.previous();
      }
      if (isNext) {
        this.next();
      }
      if (event.key === "Home") {
        this.goToSlide(0);
      }
      if (event.key === "End") {
        this.goToSlide(this.getSlides().length - 1);
      }
      if (isFocusInPagination) {
        this.updateComplete.then(() => {
          var _a;
          const activePaginationItem = (_a = this.shadowRoot) == null ? void 0 : _a.querySelector(
            '[part~="pagination-item--active"]'
          );
          if (activePaginationItem) {
            activePaginationItem.focus();
          }
        });
      }
    }
  }
  handleMouseDragStart(event) {
    const canDrag = this.mouseDragging && event.button === 0;
    if (canDrag) {
      event.preventDefault();
      document.addEventListener("pointermove", this.handleMouseDrag, { capture: true, passive: true });
      document.addEventListener("pointerup", this.handleMouseDragEnd, { capture: true, once: true });
    }
  }
  handleScroll() {
    this.scrolling = true;
    if (!this.pendingSlideChange) {
      this.synchronizeSlides();
    }
  }
  /** @internal Synchronizes the slides with the IntersectionObserver API. */
  synchronizeSlides() {
    const io = new IntersectionObserver(
      (entries) => {
        io.disconnect();
        for (const entry of entries) {
          const slide = entry.target;
          slide.toggleAttribute("inert", !entry.isIntersecting);
          slide.classList.toggle("--in-view", entry.isIntersecting);
          slide.setAttribute("aria-hidden", entry.isIntersecting ? "false" : "true");
        }
        const firstIntersecting = entries.find((entry) => entry.isIntersecting);
        if (!firstIntersecting) {
          return;
        }
        const slidesWithClones = this.getSlides({ excludeClones: false });
        const slidesCount = this.getSlides().length;
        const slideIndex = slidesWithClones.indexOf(firstIntersecting.target);
        const normalizedIndex = this.loop ? slideIndex - this.slidesPerPage : slideIndex;
        this.activeSlide = (Math.ceil(normalizedIndex / this.slidesPerMove) * this.slidesPerMove + slidesCount) % slidesCount;
        if (!this.scrolling) {
          if (this.loop && firstIntersecting.target.hasAttribute("data-clone")) {
            const clonePosition = Number(firstIntersecting.target.getAttribute("data-clone"));
            this.goToSlide(clonePosition, "instant");
          }
        }
      },
      {
        root: this.scrollContainer,
        threshold: 0.6
      }
    );
    this.getSlides({ excludeClones: false }).forEach((slide) => {
      io.observe(slide);
    });
  }
  handleScrollEnd() {
    if (!this.scrolling || this.dragging) return;
    this.scrolling = false;
    this.pendingSlideChange = false;
    this.synchronizeSlides();
  }
  isCarouselItem(node) {
    return node instanceof Element && node.tagName.toLowerCase() === "sl-carousel-item";
  }
  initializeSlides() {
    this.getSlides({ excludeClones: false }).forEach((slide, index) => {
      slide.classList.remove("--in-view");
      slide.classList.remove("--is-active");
      slide.setAttribute("role", "group");
      slide.setAttribute("aria-label", this.localize.term("slideNum", index + 1));
      if (this.pagination) {
        slide.setAttribute("id", `slide-${index + 1}`);
        slide.setAttribute("role", "tabpanel");
        slide.removeAttribute("aria-label");
        slide.setAttribute("aria-labelledby", `tab-${index + 1}`);
      }
      if (slide.hasAttribute("data-clone")) {
        slide.remove();
      }
    });
    this.updateSlidesSnap();
    if (this.loop) {
      this.createClones();
    }
    this.goToSlide(this.activeSlide, "auto");
    this.synchronizeSlides();
  }
  createClones() {
    const slides = this.getSlides();
    const slidesPerPage = this.slidesPerPage;
    const lastSlides = slides.slice(-slidesPerPage);
    const firstSlides = slides.slice(0, slidesPerPage);
    lastSlides.reverse().forEach((slide, i) => {
      const clone = slide.cloneNode(true);
      clone.setAttribute("data-clone", String(slides.length - i - 1));
      this.prepend(clone);
    });
    firstSlides.forEach((slide, i) => {
      const clone = slide.cloneNode(true);
      clone.setAttribute("data-clone", String(i));
      this.append(clone);
    });
  }
  handleSlideChange() {
    const slides = this.getSlides();
    slides.forEach((slide, i) => {
      slide.classList.toggle("--is-active", i === this.activeSlide);
    });
    if (this.hasUpdated) {
      this.emit("sl-slide-change", {
        detail: {
          index: this.activeSlide,
          slide: slides[this.activeSlide]
        }
      });
    }
  }
  updateSlidesSnap() {
    const slides = this.getSlides();
    const slidesPerMove = this.slidesPerMove;
    slides.forEach((slide, i) => {
      const shouldSnap = (i + slidesPerMove) % slidesPerMove === 0;
      if (shouldSnap) {
        slide.style.removeProperty("scroll-snap-align");
      } else {
        slide.style.setProperty("scroll-snap-align", "none");
      }
    });
  }
  handleAutoplayChange() {
    this.autoplayController.stop();
    if (this.autoplay) {
      this.autoplayController.start(this.autoplayInterval);
    }
  }
  /**
   * Move the carousel backward by `slides-per-move` slides.
   *
   * @param behavior - The behavior used for scrolling.
   */
  previous(behavior = "smooth") {
    this.goToSlide(this.activeSlide - this.slidesPerMove, behavior);
  }
  /**
   * Move the carousel forward by `slides-per-move` slides.
   *
   * @param behavior - The behavior used for scrolling.
   */
  next(behavior = "smooth") {
    this.goToSlide(this.activeSlide + this.slidesPerMove, behavior);
  }
  /**
   * Scrolls the carousel to the slide specified by `index`.
   *
   * @param index - The slide index.
   * @param behavior - The behavior used for scrolling.
   */
  goToSlide(index, behavior = "smooth") {
    const { slidesPerPage, loop } = this;
    const slides = this.getSlides();
    const slidesWithClones = this.getSlides({ excludeClones: false });
    if (!slides.length) {
      return;
    }
    const newActiveSlide = loop ? (index + slides.length) % slides.length : clamp(index, 0, slides.length - slidesPerPage);
    this.activeSlide = newActiveSlide;
    const isRtl = this.localize.dir() === "rtl";
    const nextSlideIndex = clamp(
      index + (loop ? slidesPerPage : 0) + (isRtl ? slidesPerPage - 1 : 0),
      0,
      slidesWithClones.length - 1
    );
    const nextSlide = slidesWithClones[nextSlideIndex];
    this.scrollToSlide(nextSlide, prefersReducedMotion() ? "auto" : behavior);
  }
  scrollToSlide(slide, behavior = "smooth") {
    this.pendingSlideChange = true;
    window.requestAnimationFrame(() => {
      if (!this.scrollContainer) {
        return;
      }
      const scrollContainer = this.scrollContainer;
      const scrollContainerRect = scrollContainer.getBoundingClientRect();
      const nextSlideRect = slide.getBoundingClientRect();
      const nextLeft = nextSlideRect.left - scrollContainerRect.left;
      const nextTop = nextSlideRect.top - scrollContainerRect.top;
      if (nextLeft || nextTop) {
        this.pendingSlideChange = true;
        scrollContainer.scrollTo({
          left: nextLeft + scrollContainer.scrollLeft,
          top: nextTop + scrollContainer.scrollTop,
          behavior
        });
      } else {
        this.pendingSlideChange = false;
      }
    });
  }
  render() {
    const { slidesPerMove, scrolling } = this;
    const pagesCount = this.getPageCount();
    const currentPage = this.getCurrentPage();
    const prevEnabled = this.canScrollPrev();
    const nextEnabled = this.canScrollNext();
    const isLtr = this.localize.dir() === "ltr";
    return x`
      <div part="base" class="carousel">
        <div
          id="scroll-container"
          part="scroll-container"
          class="${e$3({
      carousel__slides: true,
      "carousel__slides--horizontal": this.orientation === "horizontal",
      "carousel__slides--vertical": this.orientation === "vertical",
      "carousel__slides--dragging": this.dragging
    })}"
          style="--slides-per-page: ${this.slidesPerPage};"
          aria-busy="${scrolling ? "true" : "false"}"
          aria-atomic="true"
          tabindex="0"
          @keydown=${this.handleKeyDown}
          @mousedown="${this.handleMouseDragStart}"
          @scroll="${this.handleScroll}"
          @scrollend=${this.handleScrollEnd}
          @click=${this.handleClick}
        >
          <slot></slot>
        </div>

        ${this.navigation ? x`
              <div part="navigation" class="carousel__navigation">
                <button
                  part="navigation-button navigation-button--previous"
                  class="${e$3({
      "carousel__navigation-button": true,
      "carousel__navigation-button--previous": true,
      "carousel__navigation-button--disabled": !prevEnabled
    })}"
                  aria-label="${this.localize.term("previousSlide")}"
                  aria-controls="scroll-container"
                  aria-disabled="${prevEnabled ? "false" : "true"}"
                  @click=${prevEnabled ? () => this.previous() : null}
                >
                  <slot name="previous-icon">
                    <sl-icon library="system" name="${isLtr ? "chevron-left" : "chevron-right"}"></sl-icon>
                  </slot>
                </button>

                <button
                  part="navigation-button navigation-button--next"
                  class=${e$3({
      "carousel__navigation-button": true,
      "carousel__navigation-button--next": true,
      "carousel__navigation-button--disabled": !nextEnabled
    })}
                  aria-label="${this.localize.term("nextSlide")}"
                  aria-controls="scroll-container"
                  aria-disabled="${nextEnabled ? "false" : "true"}"
                  @click=${nextEnabled ? () => this.next() : null}
                >
                  <slot name="next-icon">
                    <sl-icon library="system" name="${isLtr ? "chevron-right" : "chevron-left"}"></sl-icon>
                  </slot>
                </button>
              </div>
            ` : ""}
        ${this.pagination ? x`
              <div part="pagination" role="tablist" class="carousel__pagination">
                ${o$1(o(pagesCount), (index) => {
      const isActive = index === currentPage;
      return x`
                    <button
                      part="pagination-item ${isActive ? "pagination-item--active" : ""}"
                      class="${e$3({
        "carousel__pagination-item": true,
        "carousel__pagination-item--active": isActive
      })}"
                      role="tab"
                      id="tab-${index + 1}"
                      aria-controls="slide-${index + 1}"
                      aria-selected="${isActive ? "true" : "false"}"
                      aria-label="${isActive ? this.localize.term("slideNum", index + 1) : this.localize.term("goToSlide", index + 1, pagesCount)}"
                      tabindex=${isActive ? "0" : "-1"}
                      @click=${() => this.goToSlide(index * slidesPerMove)}
                      @keydown=${this.handleKeyDown}
                    ></button>
                  `;
    })}
              </div>
            ` : ""}
      </div>
    `;
  }
};
SlCarousel.styles = [component_styles_default, carousel_styles_default];
SlCarousel.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlCarousel.prototype, "loop", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlCarousel.prototype, "navigation", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlCarousel.prototype, "pagination", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlCarousel.prototype, "autoplay", 2);
__decorateClass([
  n$6({ type: Number, attribute: "autoplay-interval" })
], SlCarousel.prototype, "autoplayInterval", 2);
__decorateClass([
  n$6({ type: Number, attribute: "slides-per-page" })
], SlCarousel.prototype, "slidesPerPage", 2);
__decorateClass([
  n$6({ type: Number, attribute: "slides-per-move" })
], SlCarousel.prototype, "slidesPerMove", 2);
__decorateClass([
  n$6()
], SlCarousel.prototype, "orientation", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true, attribute: "mouse-dragging" })
], SlCarousel.prototype, "mouseDragging", 2);
__decorateClass([
  e$7(".carousel__slides")
], SlCarousel.prototype, "scrollContainer", 2);
__decorateClass([
  e$7(".carousel__pagination")
], SlCarousel.prototype, "paginationContainer", 2);
__decorateClass([
  r$3()
], SlCarousel.prototype, "activeSlide", 2);
__decorateClass([
  r$3()
], SlCarousel.prototype, "scrolling", 2);
__decorateClass([
  r$3()
], SlCarousel.prototype, "dragging", 2);
__decorateClass([
  t$2({ passive: true })
], SlCarousel.prototype, "handleScroll", 1);
__decorateClass([
  watch("loop", { waitUntilFirstUpdate: true }),
  watch("slidesPerPage", { waitUntilFirstUpdate: true })
], SlCarousel.prototype, "initializeSlides", 1);
__decorateClass([
  watch("activeSlide")
], SlCarousel.prototype, "handleSlideChange", 1);
__decorateClass([
  watch("slidesPerMove")
], SlCarousel.prototype, "updateSlidesSnap", 1);
__decorateClass([
  watch("autoplay")
], SlCarousel.prototype, "handleAutoplayChange", 1);

var tagName$f = "sl-carousel";
SlCarousel.define("sl-carousel");
o$8({
  tagName: tagName$f,
  elementClass: SlCarousel,
  react: React$1,
  events: {
    onSlSlideChange: "sl-slide-change"
  },
  displayName: "SlCarousel"
});

// src/components/carousel-item/carousel-item.styles.ts
var carousel_item_styles_default = i$7`
  :host {
    --aspect-ratio: inherit;

    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    width: 100%;
    max-height: 100%;
    aspect-ratio: var(--aspect-ratio);
    scroll-snap-align: start;
    scroll-snap-stop: always;
  }

  ::slotted(img) {
    width: 100% !important;
    height: 100% !important;
    object-fit: cover;
  }
`;

var SlCarouselItem = class extends ShoelaceElement {
  connectedCallback() {
    super.connectedCallback();
  }
  render() {
    return x` <slot></slot> `;
  }
};
SlCarouselItem.styles = [component_styles_default, carousel_item_styles_default];

var tagName$e = "sl-carousel-item";
SlCarouselItem.define("sl-carousel-item");
o$8({
  tagName: tagName$e,
  elementClass: SlCarouselItem,
  react: React$1,
  events: {},
  displayName: "SlCarouselItem"
});

var tagName$d = "sl-checkbox";
SlCheckbox.define("sl-checkbox");
var reactWrapper$4 = o$8({
  tagName: tagName$d,
  elementClass: SlCheckbox,
  react: React$1,
  events: {
    onSlBlur: "sl-blur",
    onSlChange: "sl-change",
    onSlFocus: "sl-focus",
    onSlInput: "sl-input",
    onSlInvalid: "sl-invalid"
  },
  displayName: "SlCheckbox"
});
var checkbox_default = reactWrapper$4;

// src/components/color-picker/color-picker.styles.ts
var color_picker_styles_default = i$7`
  :host {
    --grid-width: 280px;
    --grid-height: 200px;
    --grid-handle-size: 16px;
    --slider-height: 15px;
    --slider-handle-size: 17px;
    --swatch-size: 25px;

    display: inline-block;
  }

  .color-picker {
    width: var(--grid-width);
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    color: var(--color);
    background-color: var(--sl-panel-background-color);
    border-radius: var(--sl-border-radius-medium);
    user-select: none;
    -webkit-user-select: none;
  }

  .color-picker--inline {
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
  }

  .color-picker--inline:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .color-picker__grid {
    position: relative;
    height: var(--grid-height);
    background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%),
      linear-gradient(to right, #fff 0%, rgba(255, 255, 255, 0) 100%);
    border-top-left-radius: var(--sl-border-radius-medium);
    border-top-right-radius: var(--sl-border-radius-medium);
    cursor: crosshair;
    forced-color-adjust: none;
  }

  .color-picker__grid-handle {
    position: absolute;
    width: var(--grid-handle-size);
    height: var(--grid-handle-size);
    border-radius: 50%;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.25);
    border: solid 2px white;
    margin-top: calc(var(--grid-handle-size) / -2);
    margin-left: calc(var(--grid-handle-size) / -2);
    transition: var(--sl-transition-fast) scale;
  }

  .color-picker__grid-handle--dragging {
    cursor: none;
    scale: 1.5;
  }

  .color-picker__grid-handle:focus-visible {
    outline: var(--sl-focus-ring);
  }

  .color-picker__controls {
    padding: var(--sl-spacing-small);
    display: flex;
    align-items: center;
  }

  .color-picker__sliders {
    flex: 1 1 auto;
  }

  .color-picker__slider {
    position: relative;
    height: var(--slider-height);
    border-radius: var(--sl-border-radius-pill);
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.2);
    forced-color-adjust: none;
  }

  .color-picker__slider:not(:last-of-type) {
    margin-bottom: var(--sl-spacing-small);
  }

  .color-picker__slider-handle {
    position: absolute;
    top: calc(50% - var(--slider-handle-size) / 2);
    width: var(--slider-handle-size);
    height: var(--slider-handle-size);
    background-color: white;
    border-radius: 50%;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.25);
    margin-left: calc(var(--slider-handle-size) / -2);
  }

  .color-picker__slider-handle:focus-visible {
    outline: var(--sl-focus-ring);
  }

  .color-picker__hue {
    background-image: linear-gradient(
      to right,
      rgb(255, 0, 0) 0%,
      rgb(255, 255, 0) 17%,
      rgb(0, 255, 0) 33%,
      rgb(0, 255, 255) 50%,
      rgb(0, 0, 255) 67%,
      rgb(255, 0, 255) 83%,
      rgb(255, 0, 0) 100%
    );
  }

  .color-picker__alpha .color-picker__alpha-gradient {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: inherit;
  }

  .color-picker__preview {
    flex: 0 0 auto;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
    width: 2.25rem;
    height: 2.25rem;
    border: none;
    border-radius: var(--sl-border-radius-circle);
    background: none;
    margin-left: var(--sl-spacing-small);
    cursor: copy;
    forced-color-adjust: none;
  }

  .color-picker__preview:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: inherit;
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.2);

    /* We use a custom property in lieu of currentColor because of https://bugs.webkit.org/show_bug.cgi?id=216780 */
    background-color: var(--preview-color);
  }

  .color-picker__preview:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .color-picker__preview-color {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: solid 1px rgba(0, 0, 0, 0.125);
  }

  .color-picker__preview-color--copied {
    animation: pulse 0.75s;
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 var(--sl-color-primary-500);
    }
    70% {
      box-shadow: 0 0 0 0.5rem transparent;
    }
    100% {
      box-shadow: 0 0 0 0 transparent;
    }
  }

  .color-picker__user-input {
    display: flex;
    padding: 0 var(--sl-spacing-small) var(--sl-spacing-small) var(--sl-spacing-small);
  }

  .color-picker__user-input sl-input {
    min-width: 0; /* fix input width in Safari */
    flex: 1 1 auto;
  }

  .color-picker__user-input sl-button-group {
    margin-left: var(--sl-spacing-small);
  }

  .color-picker__user-input sl-button {
    min-width: 3.25rem;
    max-width: 3.25rem;
    font-size: 1rem;
  }

  .color-picker__swatches {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    grid-gap: 0.5rem;
    justify-items: center;
    border-top: solid 1px var(--sl-color-neutral-200);
    padding: var(--sl-spacing-small);
    forced-color-adjust: none;
  }

  .color-picker__swatch {
    position: relative;
    width: var(--swatch-size);
    height: var(--swatch-size);
    border-radius: var(--sl-border-radius-small);
  }

  .color-picker__swatch .color-picker__swatch-color {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: solid 1px rgba(0, 0, 0, 0.125);
    border-radius: inherit;
    cursor: pointer;
  }

  .color-picker__swatch:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .color-picker__transparent-bg {
    background-image: linear-gradient(45deg, var(--sl-color-neutral-300) 25%, transparent 25%),
      linear-gradient(45deg, transparent 75%, var(--sl-color-neutral-300) 75%),
      linear-gradient(45deg, transparent 75%, var(--sl-color-neutral-300) 75%),
      linear-gradient(45deg, var(--sl-color-neutral-300) 25%, transparent 25%);
    background-size: 10px 10px;
    background-position:
      0 0,
      0 0,
      -5px -5px,
      5px 5px;
  }

  .color-picker--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .color-picker--disabled .color-picker__grid,
  .color-picker--disabled .color-picker__grid-handle,
  .color-picker--disabled .color-picker__slider,
  .color-picker--disabled .color-picker__slider-handle,
  .color-picker--disabled .color-picker__preview,
  .color-picker--disabled .color-picker__swatch,
  .color-picker--disabled .color-picker__swatch-color {
    pointer-events: none;
  }

  /*
   * Color dropdown
   */

  .color-dropdown::part(panel) {
    max-height: none;
    background-color: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-radius: var(--sl-border-radius-medium);
    overflow: visible;
  }

  .color-dropdown__trigger {
    display: inline-block;
    position: relative;
    background-color: transparent;
    border: none;
    cursor: pointer;
    forced-color-adjust: none;
  }

  .color-dropdown__trigger.color-dropdown__trigger--small {
    width: var(--sl-input-height-small);
    height: var(--sl-input-height-small);
    border-radius: var(--sl-border-radius-circle);
  }

  .color-dropdown__trigger.color-dropdown__trigger--medium {
    width: var(--sl-input-height-medium);
    height: var(--sl-input-height-medium);
    border-radius: var(--sl-border-radius-circle);
  }

  .color-dropdown__trigger.color-dropdown__trigger--large {
    width: var(--sl-input-height-large);
    height: var(--sl-input-height-large);
    border-radius: var(--sl-border-radius-circle);
  }

  .color-dropdown__trigger:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: inherit;
    background-color: currentColor;
    box-shadow:
      inset 0 0 0 2px var(--sl-input-border-color),
      inset 0 0 0 4px var(--sl-color-neutral-0);
  }

  .color-dropdown__trigger--empty:before {
    background-color: transparent;
  }

  .color-dropdown__trigger:focus-visible {
    outline: none;
  }

  .color-dropdown__trigger:focus-visible:not(.color-dropdown__trigger--disabled) {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .color-dropdown__trigger.color-dropdown__trigger--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

var SlButton = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      assumeInteractionOn: ["click"]
    });
    this.hasSlotController = new HasSlotController(this, "[default]", "prefix", "suffix");
    this.localize = new LocalizeController(this);
    this.hasFocus = false;
    this.invalid = false;
    this.title = "";
    this.variant = "default";
    this.size = "medium";
    this.caret = false;
    this.disabled = false;
    this.loading = false;
    this.outline = false;
    this.pill = false;
    this.circle = false;
    this.type = "button";
    this.name = "";
    this.value = "";
    this.href = "";
    this.rel = "noreferrer noopener";
  }
  /** Gets the validity state object */
  get validity() {
    if (this.isButton()) {
      return this.button.validity;
    }
    return validValidityState;
  }
  /** Gets the validation message */
  get validationMessage() {
    if (this.isButton()) {
      return this.button.validationMessage;
    }
    return "";
  }
  firstUpdated() {
    if (this.isButton()) {
      this.formControlController.updateValidity();
    }
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleClick() {
    if (this.type === "submit") {
      this.formControlController.submit(this);
    }
    if (this.type === "reset") {
      this.formControlController.reset(this);
    }
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  isButton() {
    return this.href ? false : true;
  }
  isLink() {
    return this.href ? true : false;
  }
  handleDisabledChange() {
    if (this.isButton()) {
      this.formControlController.setValidity(this.disabled);
    }
  }
  /** Simulates a click on the button. */
  click() {
    this.button.click();
  }
  /** Sets focus on the button. */
  focus(options) {
    this.button.focus(options);
  }
  /** Removes focus from the button. */
  blur() {
    this.button.blur();
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    if (this.isButton()) {
      return this.button.checkValidity();
    }
    return true;
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    if (this.isButton()) {
      return this.button.reportValidity();
    }
    return true;
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message) {
    if (this.isButton()) {
      this.button.setCustomValidity(message);
      this.formControlController.updateValidity();
    }
  }
  render() {
    const isLink = this.isLink();
    const tag = isLink ? i$2`a` : i$2`button`;
    return u`
      <${tag}
        part="base"
        class=${e$3({
      button: true,
      "button--default": this.variant === "default",
      "button--primary": this.variant === "primary",
      "button--success": this.variant === "success",
      "button--neutral": this.variant === "neutral",
      "button--warning": this.variant === "warning",
      "button--danger": this.variant === "danger",
      "button--text": this.variant === "text",
      "button--small": this.size === "small",
      "button--medium": this.size === "medium",
      "button--large": this.size === "large",
      "button--caret": this.caret,
      "button--circle": this.circle,
      "button--disabled": this.disabled,
      "button--focused": this.hasFocus,
      "button--loading": this.loading,
      "button--standard": !this.outline,
      "button--outline": this.outline,
      "button--pill": this.pill,
      "button--rtl": this.localize.dir() === "rtl",
      "button--has-label": this.hasSlotController.test("[default]"),
      "button--has-prefix": this.hasSlotController.test("prefix"),
      "button--has-suffix": this.hasSlotController.test("suffix")
    })}
        ?disabled=${o$6(isLink ? void 0 : this.disabled)}
        type=${o$6(isLink ? void 0 : this.type)}
        title=${this.title}
        name=${o$6(isLink ? void 0 : this.name)}
        value=${o$6(isLink ? void 0 : this.value)}
        href=${o$6(isLink && !this.disabled ? this.href : void 0)}
        target=${o$6(isLink ? this.target : void 0)}
        download=${o$6(isLink ? this.download : void 0)}
        rel=${o$6(isLink ? this.rel : void 0)}
        role=${o$6(isLink ? void 0 : "button")}
        aria-disabled=${this.disabled ? "true" : "false"}
        tabindex=${this.disabled ? "-1" : "0"}
        @blur=${this.handleBlur}
        @focus=${this.handleFocus}
        @invalid=${this.isButton() ? this.handleInvalid : null}
        @click=${this.handleClick}
      >
        <slot name="prefix" part="prefix" class="button__prefix"></slot>
        <slot part="label" class="button__label"></slot>
        <slot name="suffix" part="suffix" class="button__suffix"></slot>
        ${this.caret ? u` <sl-icon part="caret" class="button__caret" library="system" name="caret"></sl-icon> ` : ""}
        ${this.loading ? u`<sl-spinner part="spinner"></sl-spinner>` : ""}
      </${tag}>
    `;
  }
};
SlButton.styles = [component_styles_default, button_styles_default];
SlButton.dependencies = {
  "sl-icon": SlIcon,
  "sl-spinner": SlSpinner
};
__decorateClass([
  e$7(".button")
], SlButton.prototype, "button", 2);
__decorateClass([
  r$3()
], SlButton.prototype, "hasFocus", 2);
__decorateClass([
  r$3()
], SlButton.prototype, "invalid", 2);
__decorateClass([
  n$6()
], SlButton.prototype, "title", 2);
__decorateClass([
  n$6({ reflect: true })
], SlButton.prototype, "variant", 2);
__decorateClass([
  n$6({ reflect: true })
], SlButton.prototype, "size", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlButton.prototype, "caret", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlButton.prototype, "disabled", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlButton.prototype, "loading", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlButton.prototype, "outline", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlButton.prototype, "pill", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlButton.prototype, "circle", 2);
__decorateClass([
  n$6()
], SlButton.prototype, "type", 2);
__decorateClass([
  n$6()
], SlButton.prototype, "name", 2);
__decorateClass([
  n$6()
], SlButton.prototype, "value", 2);
__decorateClass([
  n$6()
], SlButton.prototype, "href", 2);
__decorateClass([
  n$6()
], SlButton.prototype, "target", 2);
__decorateClass([
  n$6()
], SlButton.prototype, "rel", 2);
__decorateClass([
  n$6()
], SlButton.prototype, "download", 2);
__decorateClass([
  n$6()
], SlButton.prototype, "form", 2);
__decorateClass([
  n$6({ attribute: "formaction" })
], SlButton.prototype, "formAction", 2);
__decorateClass([
  n$6({ attribute: "formenctype" })
], SlButton.prototype, "formEnctype", 2);
__decorateClass([
  n$6({ attribute: "formmethod" })
], SlButton.prototype, "formMethod", 2);
__decorateClass([
  n$6({ attribute: "formnovalidate", type: Boolean })
], SlButton.prototype, "formNoValidate", 2);
__decorateClass([
  n$6({ attribute: "formtarget" })
], SlButton.prototype, "formTarget", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlButton.prototype, "handleDisabledChange", 1);

/**
 * Take input from [0, n] and return it as [0, 1]
 * @hidden
 */
function bound01(n, max) {
    if (isOnePointZero(n)) {
        n = '100%';
    }
    const isPercent = isPercentage(n);
    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
    // Automatically convert percentage into number
    if (isPercent) {
        n = parseInt(String(n * max), 10) / 100;
    }
    // Handle floating point rounding errors
    if (Math.abs(n - max) < 0.000001) {
        return 1;
    }
    // Convert into [0, 1] range if it isn't already
    if (max === 360) {
        // If n is a hue given in degrees,
        // wrap around out-of-range values into [0, 360] range
        // then convert into [0, 1].
        n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));
    }
    else {
        // If n not a hue given in degrees
        // Convert into [0, 1] range if it isn't already.
        n = (n % max) / parseFloat(String(max));
    }
    return n;
}
/**
 * Force a number between 0 and 1
 * @hidden
 */
function clamp01(val) {
    return Math.min(1, Math.max(0, val));
}
/**
 * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
 * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
 * @hidden
 */
function isOnePointZero(n) {
    return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;
}
/**
 * Check to see if string passed in is a percentage
 * @hidden
 */
function isPercentage(n) {
    return typeof n === 'string' && n.indexOf('%') !== -1;
}
/**
 * Return a valid alpha value [0,1] with all invalid values being set to 1
 * @hidden
 */
function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
    }
    return a;
}
/**
 * Replace a decimal with it's percentage value
 * @hidden
 */
function convertToPercentage(n) {
    if (Number(n) <= 1) {
        return `${Number(n) * 100}%`;
    }
    return n;
}
/**
 * Force a hex value to have 2 characters
 * @hidden
 */
function pad2(c) {
    return c.length === 1 ? '0' + c : String(c);
}

// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
/**
 * Handle bounds / percentage checking to conform to CSS color spec
 * <http://www.w3.org/TR/css3-color/>
 * *Assumes:* r, g, b in [0, 255] or [0, 1]
 * *Returns:* { r, g, b } in [0, 255]
 */
function rgbToRgb(r, g, b) {
    return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255,
    };
}
/**
 * Converts an RGB color value to HSL.
 * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
 * *Returns:* { h, s, l } in [0,1]
 */
function rgbToHsl(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0;
    let s = 0;
    const l = (max + min) / 2;
    if (max === min) {
        s = 0;
        h = 0; // achromatic
    }
    else {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return { h, s, l };
}
function hue2rgb(p, q, t) {
    if (t < 0) {
        t += 1;
    }
    if (t > 1) {
        t -= 1;
    }
    if (t < 1 / 6) {
        return p + (q - p) * (6 * t);
    }
    if (t < 1 / 2) {
        return q;
    }
    if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
    }
    return p;
}
/**
 * Converts an HSL color value to RGB.
 *
 * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
 * *Returns:* { r, g, b } in the set [0, 255]
 */
function hslToRgb(h, s, l) {
    let r;
    let g;
    let b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    if (s === 0) {
        // achromatic
        g = l;
        b = l;
        r = l;
    }
    else {
        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return { r: r * 255, g: g * 255, b: b * 255 };
}
/**
 * Converts an RGB color value to HSV
 *
 * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
 * *Returns:* { h, s, v } in [0,1]
 */
function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0;
    const v = max;
    const d = max - min;
    const s = max === 0 ? 0 : d / max;
    if (max === min) {
        h = 0; // achromatic
    }
    else {
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return { h, s, v };
}
/**
 * Converts an HSV color value to RGB.
 *
 * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
 * *Returns:* { r, g, b } in the set [0, 255]
 */
function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    const i = Math.floor(h);
    const f = h - i;
    const p = v * (1 - s);
    const q = v * (1 - f * s);
    const t = v * (1 - (1 - f) * s);
    const mod = i % 6;
    const r = [v, q, p, p, t, v][mod];
    const g = [t, v, v, q, p, p][mod];
    const b = [p, p, t, v, v, q][mod];
    return { r: r * 255, g: g * 255, b: b * 255 };
}
/**
 * Converts an RGB color to hex
 *
 * *Assumes:* r, g, and b are contained in the set [0, 255]
 * *Returns:* a 3 or 6 character hex
 */
function rgbToHex(r, g, b, allow3Char) {
    const hex = [
        pad2(Math.round(r).toString(16)),
        pad2(Math.round(g).toString(16)),
        pad2(Math.round(b).toString(16)),
    ];
    // Return a 3 character hex if possible
    if (allow3Char &&
        hex[0].startsWith(hex[0].charAt(1)) &&
        hex[1].startsWith(hex[1].charAt(1)) &&
        hex[2].startsWith(hex[2].charAt(1))) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join('');
}
/**
 * Converts an RGBA color plus alpha transparency to hex
 *
 * *Assumes:* r, g, b are contained in the set [0, 255] and a in [0, 1]
 * *Returns:* a 4 or 8 character rgba hex
 */
// eslint-disable-next-line max-params
function rgbaToHex(r, g, b, a, allow4Char) {
    const hex = [
        pad2(Math.round(r).toString(16)),
        pad2(Math.round(g).toString(16)),
        pad2(Math.round(b).toString(16)),
        pad2(convertDecimalToHex(a)),
    ];
    // Return a 4 character hex if possible
    if (allow4Char &&
        hex[0].startsWith(hex[0].charAt(1)) &&
        hex[1].startsWith(hex[1].charAt(1)) &&
        hex[2].startsWith(hex[2].charAt(1)) &&
        hex[3].startsWith(hex[3].charAt(1))) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    return hex.join('');
}
/**
 * Converts CMYK to RBG
 * Assumes c, m, y, k are in the set [0, 100]
 */
function cmykToRgb(c, m, y, k) {
    const cConv = c / 100;
    const mConv = m / 100;
    const yConv = y / 100;
    const kConv = k / 100;
    const r = 255 * (1 - cConv) * (1 - kConv);
    const g = 255 * (1 - mConv) * (1 - kConv);
    const b = 255 * (1 - yConv) * (1 - kConv);
    return { r, g, b };
}
function rgbToCmyk(r, g, b) {
    let c = 1 - r / 255;
    let m = 1 - g / 255;
    let y = 1 - b / 255;
    let k = Math.min(c, m, y);
    if (k === 1) {
        c = 0;
        m = 0;
        y = 0;
    }
    else {
        c = ((c - k) / (1 - k)) * 100;
        m = ((m - k) / (1 - k)) * 100;
        y = ((y - k) / (1 - k)) * 100;
    }
    k *= 100;
    return {
        c: Math.round(c),
        m: Math.round(m),
        y: Math.round(y),
        k: Math.round(k),
    };
}
/** Converts a decimal to a hex value */
function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
}
/** Converts a hex value to a decimal */
function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
}
/** Parse a base-16 hex value into a base-10 integer */
function parseIntFromHex(val) {
    return parseInt(val, 16);
}
function numberInputToObject(color) {
    return {
        r: color >> 16,
        g: (color & 0xff00) >> 8,
        b: color & 0xff,
    };
}

// https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json
/**
 * @hidden
 */
const names = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    goldenrod: '#daa520',
    gold: '#ffd700',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    lavenderblush: '#fff0f5',
    lavender: '#e6e6fa',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    rebeccapurple: '#663399',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32',
};

/**
 * Given a string or object, convert that input to RGB
 *
 * Possible string inputs:
 * ```
 * "red"
 * "#f00" or "f00"
 * "#ff0000" or "ff0000"
 * "#ff000000" or "ff000000"
 * "rgb 255 0 0" or "rgb (255, 0, 0)"
 * "rgb 1.0 0 0" or "rgb (1, 0, 0)"
 * "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
 * "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
 * "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
 * "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
 * "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
 * "cmyk(0, 20, 0, 0)" or "cmyk 0 20 0 0"
 * ```
 */
function inputToRGB(color) {
    let rgb = { r: 0, g: 0, b: 0 };
    let a = 1;
    let s = null;
    let v = null;
    let l = null;
    let ok = false;
    let format = false;
    if (typeof color === 'string') {
        color = stringInputToObject(color);
    }
    if (typeof color === 'object') {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = 'hsv';
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = 'hsl';
        }
        else if (isValidCSSUnit(color.c) &&
            isValidCSSUnit(color.m) &&
            isValidCSSUnit(color.y) &&
            isValidCSSUnit(color.k)) {
            rgb = cmykToRgb(color.c, color.m, color.y, color.k);
            ok = true;
            format = 'cmyk';
        }
        if (Object.prototype.hasOwnProperty.call(color, 'a')) {
            a = color.a;
        }
    }
    a = boundAlpha(a);
    return {
        ok,
        format: color.format || format,
        r: Math.min(255, Math.max(rgb.r, 0)),
        g: Math.min(255, Math.max(rgb.g, 0)),
        b: Math.min(255, Math.max(rgb.b, 0)),
        a,
    };
}
// <http://www.w3.org/TR/css3-values/#integers>
const CSS_INTEGER = '[-\\+]?\\d+%?';
// <http://www.w3.org/TR/css3-values/#number-value>
const CSS_NUMBER = '[-\\+]?\\d*\\.\\d+%?';
// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
const CSS_UNIT = '(?:' + CSS_NUMBER + ')|(?:' + CSS_INTEGER + ')';
// Actual matching.
// Parentheses and commas are optional, but not required.
// Whitespace can take the place of commas or opening paren
// eslint-disable-next-line prettier/prettier
const PERMISSIVE_MATCH3 = '[\\s|\\(]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')\\s*\\)?';
const PERMISSIVE_MATCH4 = 
// eslint-disable-next-line prettier/prettier
'[\\s|\\(]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')\\s*\\)?';
const matchers = {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),
    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),
    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),
    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),
    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),
    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),
    cmyk: new RegExp('cmyk' + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
};
/**
 * Permissive string parsing.  Take in a number of formats, and output an object
 * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}` or `{c, m, y, k}` or `{c, m, y, k, a}`
 */
function stringInputToObject(color) {
    color = color.trim().toLowerCase();
    if (color.length === 0) {
        return false;
    }
    let named = false;
    if (names[color]) {
        color = names[color];
        named = true;
    }
    else if (color === 'transparent') {
        return { r: 0, g: 0, b: 0, a: 0, format: 'name' };
    }
    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    let match = matchers.rgb.exec(color);
    if (match) {
        return { r: match[1], g: match[2], b: match[3] };
    }
    match = matchers.rgba.exec(color);
    if (match) {
        return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    match = matchers.hsl.exec(color);
    if (match) {
        return { h: match[1], s: match[2], l: match[3] };
    }
    match = matchers.hsla.exec(color);
    if (match) {
        return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    match = matchers.hsv.exec(color);
    if (match) {
        return { h: match[1], s: match[2], v: match[3] };
    }
    match = matchers.hsva.exec(color);
    if (match) {
        return { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    match = matchers.cmyk.exec(color);
    if (match) {
        return {
            c: match[1],
            m: match[2],
            y: match[3],
            k: match[4],
        };
    }
    match = matchers.hex8.exec(color);
    if (match) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? 'name' : 'hex8',
        };
    }
    match = matchers.hex6.exec(color);
    if (match) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? 'name' : 'hex',
        };
    }
    match = matchers.hex4.exec(color);
    if (match) {
        return {
            r: parseIntFromHex(match[1] + match[1]),
            g: parseIntFromHex(match[2] + match[2]),
            b: parseIntFromHex(match[3] + match[3]),
            a: convertHexToDecimal(match[4] + match[4]),
            format: named ? 'name' : 'hex8',
        };
    }
    match = matchers.hex3.exec(color);
    if (match) {
        return {
            r: parseIntFromHex(match[1] + match[1]),
            g: parseIntFromHex(match[2] + match[2]),
            b: parseIntFromHex(match[3] + match[3]),
            format: named ? 'name' : 'hex',
        };
    }
    return false;
}
/**
 * Check to see if it looks like a CSS unit
 * (see `matchers` above for definition).
 */
function isValidCSSUnit(color) {
    if (typeof color === 'number') {
        return !Number.isNaN(color);
    }
    return matchers.CSS_UNIT.test(color);
}

class TinyColor {
    constructor(color = '', opts = {}) {
        // If input is already a tinycolor, return itself
        if (color instanceof TinyColor) {
            // eslint-disable-next-line no-constructor-return
            return color;
        }
        if (typeof color === 'number') {
            color = numberInputToObject(color);
        }
        this.originalInput = color;
        const rgb = inputToRGB(color);
        this.originalInput = color;
        this.r = rgb.r;
        this.g = rgb.g;
        this.b = rgb.b;
        this.a = rgb.a;
        this.roundA = Math.round(100 * this.a) / 100;
        this.format = opts.format ?? rgb.format;
        this.gradientType = opts.gradientType;
        // Don't let the range of [0,255] come back in [0,1].
        // Potentially lose a little bit of precision here, but will fix issues where
        // .5 gets interpreted as half of the total, instead of half of 1
        // If it was supposed to be 128, this was already taken care of by `inputToRgb`
        if (this.r < 1) {
            this.r = Math.round(this.r);
        }
        if (this.g < 1) {
            this.g = Math.round(this.g);
        }
        if (this.b < 1) {
            this.b = Math.round(this.b);
        }
        this.isValid = rgb.ok;
    }
    isDark() {
        return this.getBrightness() < 128;
    }
    isLight() {
        return !this.isDark();
    }
    /**
     * Returns the perceived brightness of the color, from 0-255.
     */
    getBrightness() {
        // http://www.w3.org/TR/AERT#color-contrast
        const rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    }
    /**
     * Returns the perceived luminance of a color, from 0-1.
     */
    getLuminance() {
        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        const rgb = this.toRgb();
        let R;
        let G;
        let B;
        const RsRGB = rgb.r / 255;
        const GsRGB = rgb.g / 255;
        const BsRGB = rgb.b / 255;
        if (RsRGB <= 0.03928) {
            R = RsRGB / 12.92;
        }
        else {
            // eslint-disable-next-line prefer-exponentiation-operator
            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
        }
        if (GsRGB <= 0.03928) {
            G = GsRGB / 12.92;
        }
        else {
            // eslint-disable-next-line prefer-exponentiation-operator
            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
        }
        if (BsRGB <= 0.03928) {
            B = BsRGB / 12.92;
        }
        else {
            // eslint-disable-next-line prefer-exponentiation-operator
            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    }
    /**
     * Returns the alpha value of a color, from 0-1.
     */
    getAlpha() {
        return this.a;
    }
    /**
     * Sets the alpha value on the current color.
     *
     * @param alpha - The new alpha value. The accepted range is 0-1.
     */
    setAlpha(alpha) {
        this.a = boundAlpha(alpha);
        this.roundA = Math.round(100 * this.a) / 100;
        return this;
    }
    /**
     * Returns whether the color is monochrome.
     */
    isMonochrome() {
        const { s } = this.toHsl();
        return s === 0;
    }
    /**
     * Returns the object as a HSVA object.
     */
    toHsv() {
        const hsv = rgbToHsv(this.r, this.g, this.b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
    }
    /**
     * Returns the hsva values interpolated into a string with the following format:
     * "hsva(xxx, xxx, xxx, xx)".
     */
    toHsvString() {
        const hsv = rgbToHsv(this.r, this.g, this.b);
        const h = Math.round(hsv.h * 360);
        const s = Math.round(hsv.s * 100);
        const v = Math.round(hsv.v * 100);
        return this.a === 1 ? `hsv(${h}, ${s}%, ${v}%)` : `hsva(${h}, ${s}%, ${v}%, ${this.roundA})`;
    }
    /**
     * Returns the object as a HSLA object.
     */
    toHsl() {
        const hsl = rgbToHsl(this.r, this.g, this.b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
    }
    /**
     * Returns the hsla values interpolated into a string with the following format:
     * "hsla(xxx, xxx, xxx, xx)".
     */
    toHslString() {
        const hsl = rgbToHsl(this.r, this.g, this.b);
        const h = Math.round(hsl.h * 360);
        const s = Math.round(hsl.s * 100);
        const l = Math.round(hsl.l * 100);
        return this.a === 1 ? `hsl(${h}, ${s}%, ${l}%)` : `hsla(${h}, ${s}%, ${l}%, ${this.roundA})`;
    }
    /**
     * Returns the hex value of the color.
     * @param allow3Char will shorten hex value to 3 char if possible
     */
    toHex(allow3Char = false) {
        return rgbToHex(this.r, this.g, this.b, allow3Char);
    }
    /**
     * Returns the hex value of the color -with a # prefixed.
     * @param allow3Char will shorten hex value to 3 char if possible
     */
    toHexString(allow3Char = false) {
        return '#' + this.toHex(allow3Char);
    }
    /**
     * Returns the hex 8 value of the color.
     * @param allow4Char will shorten hex value to 4 char if possible
     */
    toHex8(allow4Char = false) {
        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
    }
    /**
     * Returns the hex 8 value of the color -with a # prefixed.
     * @param allow4Char will shorten hex value to 4 char if possible
     */
    toHex8String(allow4Char = false) {
        return '#' + this.toHex8(allow4Char);
    }
    /**
     * Returns the shorter hex value of the color depends on its alpha -with a # prefixed.
     * @param allowShortChar will shorten hex value to 3 or 4 char if possible
     */
    toHexShortString(allowShortChar = false) {
        return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);
    }
    /**
     * Returns the object as a RGBA object.
     */
    toRgb() {
        return {
            r: Math.round(this.r),
            g: Math.round(this.g),
            b: Math.round(this.b),
            a: this.a,
        };
    }
    /**
     * Returns the RGBA values interpolated into a string with the following format:
     * "RGBA(xxx, xxx, xxx, xx)".
     */
    toRgbString() {
        const r = Math.round(this.r);
        const g = Math.round(this.g);
        const b = Math.round(this.b);
        return this.a === 1 ? `rgb(${r}, ${g}, ${b})` : `rgba(${r}, ${g}, ${b}, ${this.roundA})`;
    }
    /**
     * Returns the object as a RGBA object.
     */
    toPercentageRgb() {
        const fmt = (x) => `${Math.round(bound01(x, 255) * 100)}%`;
        return {
            r: fmt(this.r),
            g: fmt(this.g),
            b: fmt(this.b),
            a: this.a,
        };
    }
    /**
     * Returns the RGBA relative values interpolated into a string
     */
    toPercentageRgbString() {
        const rnd = (x) => Math.round(bound01(x, 255) * 100);
        return this.a === 1
            ? `rgb(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%)`
            : `rgba(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%, ${this.roundA})`;
    }
    toCmyk() {
        return {
            ...rgbToCmyk(this.r, this.g, this.b),
        };
    }
    toCmykString() {
        const { c, m, y, k } = rgbToCmyk(this.r, this.g, this.b);
        return `cmyk(${c}, ${m}, ${y}, ${k})`;
    }
    /**
     * The 'real' name of the color -if there is one.
     */
    toName() {
        if (this.a === 0) {
            return 'transparent';
        }
        if (this.a < 1) {
            return false;
        }
        const hex = '#' + rgbToHex(this.r, this.g, this.b, false);
        for (const [key, value] of Object.entries(names)) {
            if (hex === value) {
                return key;
            }
        }
        return false;
    }
    toString(format) {
        const formatSet = Boolean(format);
        format = format ?? this.format;
        let formattedString = false;
        const hasAlpha = this.a < 1 && this.a >= 0;
        const needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');
        if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === 'name' && this.a === 0) {
                return this.toName();
            }
            return this.toRgbString();
        }
        if (format === 'rgb') {
            formattedString = this.toRgbString();
        }
        if (format === 'prgb') {
            formattedString = this.toPercentageRgbString();
        }
        if (format === 'hex' || format === 'hex6') {
            formattedString = this.toHexString();
        }
        if (format === 'hex3') {
            formattedString = this.toHexString(true);
        }
        if (format === 'hex4') {
            formattedString = this.toHex8String(true);
        }
        if (format === 'hex8') {
            formattedString = this.toHex8String();
        }
        if (format === 'name') {
            formattedString = this.toName();
        }
        if (format === 'hsl') {
            formattedString = this.toHslString();
        }
        if (format === 'hsv') {
            formattedString = this.toHsvString();
        }
        if (format === 'cmyk') {
            formattedString = this.toCmykString();
        }
        return formattedString || this.toHexString();
    }
    toNumber() {
        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
    }
    clone() {
        return new TinyColor(this.toString());
    }
    /**
     * Lighten the color a given amount. Providing 100 will always return white.
     * @param amount - valid between 1-100
     */
    lighten(amount = 10) {
        const hsl = this.toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor(hsl);
    }
    /**
     * Brighten the color a given amount, from 0 to 100.
     * @param amount - valid between 1-100
     */
    brighten(amount = 10) {
        const rgb = this.toRgb();
        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
        return new TinyColor(rgb);
    }
    /**
     * Darken the color a given amount, from 0 to 100.
     * Providing 100 will always return black.
     * @param amount - valid between 1-100
     */
    darken(amount = 10) {
        const hsl = this.toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor(hsl);
    }
    /**
     * Mix the color with pure white, from 0 to 100.
     * Providing 0 will do nothing, providing 100 will always return white.
     * @param amount - valid between 1-100
     */
    tint(amount = 10) {
        return this.mix('white', amount);
    }
    /**
     * Mix the color with pure black, from 0 to 100.
     * Providing 0 will do nothing, providing 100 will always return black.
     * @param amount - valid between 1-100
     */
    shade(amount = 10) {
        return this.mix('black', amount);
    }
    /**
     * Desaturate the color a given amount, from 0 to 100.
     * Providing 100 will is the same as calling greyscale
     * @param amount - valid between 1-100
     */
    desaturate(amount = 10) {
        const hsl = this.toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor(hsl);
    }
    /**
     * Saturate the color a given amount, from 0 to 100.
     * @param amount - valid between 1-100
     */
    saturate(amount = 10) {
        const hsl = this.toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor(hsl);
    }
    /**
     * Completely desaturates a color into greyscale.
     * Same as calling `desaturate(100)`
     */
    greyscale() {
        return this.desaturate(100);
    }
    /**
     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
     * Values outside of this range will be wrapped into this range.
     */
    spin(amount) {
        const hsl = this.toHsl();
        const hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return new TinyColor(hsl);
    }
    /**
     * Mix the current color a given amount with another color, from 0 to 100.
     * 0 means no mixing (return current color).
     */
    mix(color, amount = 50) {
        const rgb1 = this.toRgb();
        const rgb2 = new TinyColor(color).toRgb();
        const p = amount / 100;
        const rgba = {
            r: (rgb2.r - rgb1.r) * p + rgb1.r,
            g: (rgb2.g - rgb1.g) * p + rgb1.g,
            b: (rgb2.b - rgb1.b) * p + rgb1.b,
            a: (rgb2.a - rgb1.a) * p + rgb1.a,
        };
        return new TinyColor(rgba);
    }
    analogous(results = 6, slices = 30) {
        const hsl = this.toHsl();
        const part = 360 / slices;
        const ret = [this];
        for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {
            hsl.h = (hsl.h + part) % 360;
            ret.push(new TinyColor(hsl));
        }
        return ret;
    }
    /**
     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js
     */
    complement() {
        const hsl = this.toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return new TinyColor(hsl);
    }
    monochromatic(results = 6) {
        const hsv = this.toHsv();
        const { h } = hsv;
        const { s } = hsv;
        let { v } = hsv;
        const res = [];
        const modification = 1 / results;
        while (results--) {
            res.push(new TinyColor({ h, s, v }));
            v = (v + modification) % 1;
        }
        return res;
    }
    splitcomplement() {
        const hsl = this.toHsl();
        const { h } = hsl;
        return [
            this,
            new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
            new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),
        ];
    }
    /**
     * Compute how the color would appear on a background
     */
    onBackground(background) {
        const fg = this.toRgb();
        const bg = new TinyColor(background).toRgb();
        const alpha = fg.a + bg.a * (1 - fg.a);
        return new TinyColor({
            r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,
            g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,
            b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,
            a: alpha,
        });
    }
    /**
     * Alias for `polyad(3)`
     */
    triad() {
        return this.polyad(3);
    }
    /**
     * Alias for `polyad(4)`
     */
    tetrad() {
        return this.polyad(4);
    }
    /**
     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)
     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...
     */
    polyad(n) {
        const hsl = this.toHsl();
        const { h } = hsl;
        const result = [this];
        const increment = 360 / n;
        for (let i = 1; i < n; i++) {
            result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));
        }
        return result;
    }
    /**
     * compare color vs current color
     */
    equals(color) {
        const comparedColor = new TinyColor(color);
        /**
         * RGB and CMYK do not have the same color gamut, so a CMYK conversion will never be 100%.
         * This means we need to compare CMYK to CMYK to ensure accuracy of the equals function.
         */
        if (this.format === 'cmyk' || comparedColor.format === 'cmyk') {
            return this.toCmykString() === comparedColor.toCmykString();
        }
        return this.toRgbString() === comparedColor.toRgbString();
    }
}

var hasEyeDropper = "EyeDropper" in window;
var SlColorPicker = class extends ShoelaceElement {
  constructor() {
    super();
    this.formControlController = new FormControlController(this);
    this.isSafeValue = false;
    this.localize = new LocalizeController(this);
    this.hasFocus = false;
    this.isDraggingGridHandle = false;
    this.isEmpty = false;
    this.inputValue = "";
    this.hue = 0;
    this.saturation = 100;
    this.brightness = 100;
    this.alpha = 100;
    this.value = "";
    this.defaultValue = "";
    this.label = "";
    this.format = "hex";
    this.inline = false;
    this.size = "medium";
    this.noFormatToggle = false;
    this.name = "";
    this.disabled = false;
    this.hoist = false;
    this.opacity = false;
    this.uppercase = false;
    this.swatches = "";
    this.form = "";
    this.required = false;
    this.handleFocusIn = () => {
      this.hasFocus = true;
      this.emit("sl-focus");
    };
    this.handleFocusOut = () => {
      this.hasFocus = false;
      this.emit("sl-blur");
    };
    this.addEventListener("focusin", this.handleFocusIn);
    this.addEventListener("focusout", this.handleFocusOut);
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  firstUpdated() {
    this.input.updateComplete.then(() => {
      this.formControlController.updateValidity();
    });
  }
  handleCopy() {
    this.input.select();
    document.execCommand("copy");
    this.previewButton.focus();
    this.previewButton.classList.add("color-picker__preview-color--copied");
    this.previewButton.addEventListener("animationend", () => {
      this.previewButton.classList.remove("color-picker__preview-color--copied");
    });
  }
  handleFormatToggle() {
    const formats = ["hex", "rgb", "hsl", "hsv"];
    const nextIndex = (formats.indexOf(this.format) + 1) % formats.length;
    this.format = formats[nextIndex];
    this.setColor(this.value);
    this.emit("sl-change");
    this.emit("sl-input");
  }
  handleAlphaDrag(event) {
    const container = this.shadowRoot.querySelector(".color-picker__slider.color-picker__alpha");
    const handle = container.querySelector(".color-picker__slider-handle");
    const { width } = container.getBoundingClientRect();
    let initialValue = this.value;
    let currentValue = this.value;
    handle.focus();
    event.preventDefault();
    drag(container, {
      onMove: (x) => {
        this.alpha = clamp(x / width * 100, 0, 100);
        this.syncValues();
        if (this.value !== currentValue) {
          currentValue = this.value;
          this.emit("sl-input");
        }
      },
      onStop: () => {
        if (this.value !== initialValue) {
          initialValue = this.value;
          this.emit("sl-change");
        }
      },
      initialEvent: event
    });
  }
  handleHueDrag(event) {
    const container = this.shadowRoot.querySelector(".color-picker__slider.color-picker__hue");
    const handle = container.querySelector(".color-picker__slider-handle");
    const { width } = container.getBoundingClientRect();
    let initialValue = this.value;
    let currentValue = this.value;
    handle.focus();
    event.preventDefault();
    drag(container, {
      onMove: (x) => {
        this.hue = clamp(x / width * 360, 0, 360);
        this.syncValues();
        if (this.value !== currentValue) {
          currentValue = this.value;
          this.emit("sl-input");
        }
      },
      onStop: () => {
        if (this.value !== initialValue) {
          initialValue = this.value;
          this.emit("sl-change");
        }
      },
      initialEvent: event
    });
  }
  handleGridDrag(event) {
    const grid = this.shadowRoot.querySelector(".color-picker__grid");
    const handle = grid.querySelector(".color-picker__grid-handle");
    const { width, height } = grid.getBoundingClientRect();
    let initialValue = this.value;
    let currentValue = this.value;
    handle.focus();
    event.preventDefault();
    this.isDraggingGridHandle = true;
    drag(grid, {
      onMove: (x, y) => {
        this.saturation = clamp(x / width * 100, 0, 100);
        this.brightness = clamp(100 - y / height * 100, 0, 100);
        this.syncValues();
        if (this.value !== currentValue) {
          currentValue = this.value;
          this.emit("sl-input");
        }
      },
      onStop: () => {
        this.isDraggingGridHandle = false;
        if (this.value !== initialValue) {
          initialValue = this.value;
          this.emit("sl-change");
        }
      },
      initialEvent: event
    });
  }
  handleAlphaKeyDown(event) {
    const increment = event.shiftKey ? 10 : 1;
    const oldValue = this.value;
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      this.alpha = clamp(this.alpha - increment, 0, 100);
      this.syncValues();
    }
    if (event.key === "ArrowRight") {
      event.preventDefault();
      this.alpha = clamp(this.alpha + increment, 0, 100);
      this.syncValues();
    }
    if (event.key === "Home") {
      event.preventDefault();
      this.alpha = 0;
      this.syncValues();
    }
    if (event.key === "End") {
      event.preventDefault();
      this.alpha = 100;
      this.syncValues();
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleHueKeyDown(event) {
    const increment = event.shiftKey ? 10 : 1;
    const oldValue = this.value;
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      this.hue = clamp(this.hue - increment, 0, 360);
      this.syncValues();
    }
    if (event.key === "ArrowRight") {
      event.preventDefault();
      this.hue = clamp(this.hue + increment, 0, 360);
      this.syncValues();
    }
    if (event.key === "Home") {
      event.preventDefault();
      this.hue = 0;
      this.syncValues();
    }
    if (event.key === "End") {
      event.preventDefault();
      this.hue = 360;
      this.syncValues();
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleGridKeyDown(event) {
    const increment = event.shiftKey ? 10 : 1;
    const oldValue = this.value;
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      this.saturation = clamp(this.saturation - increment, 0, 100);
      this.syncValues();
    }
    if (event.key === "ArrowRight") {
      event.preventDefault();
      this.saturation = clamp(this.saturation + increment, 0, 100);
      this.syncValues();
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      this.brightness = clamp(this.brightness + increment, 0, 100);
      this.syncValues();
    }
    if (event.key === "ArrowDown") {
      event.preventDefault();
      this.brightness = clamp(this.brightness - increment, 0, 100);
      this.syncValues();
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleInputChange(event) {
    const target = event.target;
    const oldValue = this.value;
    event.stopPropagation();
    if (this.input.value) {
      this.setColor(target.value);
      target.value = this.value;
    } else {
      this.value = "";
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleInputInput(event) {
    this.formControlController.updateValidity();
    event.stopPropagation();
  }
  handleInputKeyDown(event) {
    if (event.key === "Enter") {
      const oldValue = this.value;
      if (this.input.value) {
        this.setColor(this.input.value);
        this.input.value = this.value;
        if (this.value !== oldValue) {
          this.emit("sl-change");
          this.emit("sl-input");
        }
        setTimeout(() => this.input.select());
      } else {
        this.hue = 0;
      }
    }
  }
  handleInputInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  handleTouchMove(event) {
    event.preventDefault();
  }
  parseColor(colorString) {
    const color = new TinyColor(colorString);
    if (!color.isValid) {
      return null;
    }
    const hslColor = color.toHsl();
    const hsl = {
      h: hslColor.h,
      s: hslColor.s * 100,
      l: hslColor.l * 100,
      a: hslColor.a
    };
    const rgb = color.toRgb();
    const hex = color.toHexString();
    const hexa = color.toHex8String();
    const hsvColor = color.toHsv();
    const hsv = {
      h: hsvColor.h,
      s: hsvColor.s * 100,
      v: hsvColor.v * 100,
      a: hsvColor.a
    };
    return {
      hsl: {
        h: hsl.h,
        s: hsl.s,
        l: hsl.l,
        string: this.setLetterCase(`hsl(${Math.round(hsl.h)}, ${Math.round(hsl.s)}%, ${Math.round(hsl.l)}%)`)
      },
      hsla: {
        h: hsl.h,
        s: hsl.s,
        l: hsl.l,
        a: hsl.a,
        string: this.setLetterCase(
          `hsla(${Math.round(hsl.h)}, ${Math.round(hsl.s)}%, ${Math.round(hsl.l)}%, ${hsl.a.toFixed(2).toString()})`
        )
      },
      hsv: {
        h: hsv.h,
        s: hsv.s,
        v: hsv.v,
        string: this.setLetterCase(`hsv(${Math.round(hsv.h)}, ${Math.round(hsv.s)}%, ${Math.round(hsv.v)}%)`)
      },
      hsva: {
        h: hsv.h,
        s: hsv.s,
        v: hsv.v,
        a: hsv.a,
        string: this.setLetterCase(
          `hsva(${Math.round(hsv.h)}, ${Math.round(hsv.s)}%, ${Math.round(hsv.v)}%, ${hsv.a.toFixed(2).toString()})`
        )
      },
      rgb: {
        r: rgb.r,
        g: rgb.g,
        b: rgb.b,
        string: this.setLetterCase(`rgb(${Math.round(rgb.r)}, ${Math.round(rgb.g)}, ${Math.round(rgb.b)})`)
      },
      rgba: {
        r: rgb.r,
        g: rgb.g,
        b: rgb.b,
        a: rgb.a,
        string: this.setLetterCase(
          `rgba(${Math.round(rgb.r)}, ${Math.round(rgb.g)}, ${Math.round(rgb.b)}, ${rgb.a.toFixed(2).toString()})`
        )
      },
      hex: this.setLetterCase(hex),
      hexa: this.setLetterCase(hexa)
    };
  }
  setColor(colorString) {
    const newColor = this.parseColor(colorString);
    if (newColor === null) {
      return false;
    }
    this.hue = newColor.hsva.h;
    this.saturation = newColor.hsva.s;
    this.brightness = newColor.hsva.v;
    this.alpha = this.opacity ? newColor.hsva.a * 100 : 100;
    this.syncValues();
    return true;
  }
  setLetterCase(string) {
    if (typeof string !== "string") {
      return "";
    }
    return this.uppercase ? string.toUpperCase() : string.toLowerCase();
  }
  async syncValues() {
    const currentColor = this.parseColor(
      `hsva(${this.hue}, ${this.saturation}%, ${this.brightness}%, ${this.alpha / 100})`
    );
    if (currentColor === null) {
      return;
    }
    if (this.format === "hsl") {
      this.inputValue = this.opacity ? currentColor.hsla.string : currentColor.hsl.string;
    } else if (this.format === "rgb") {
      this.inputValue = this.opacity ? currentColor.rgba.string : currentColor.rgb.string;
    } else if (this.format === "hsv") {
      this.inputValue = this.opacity ? currentColor.hsva.string : currentColor.hsv.string;
    } else {
      this.inputValue = this.opacity ? currentColor.hexa : currentColor.hex;
    }
    this.isSafeValue = true;
    this.value = this.inputValue;
    await this.updateComplete;
    this.isSafeValue = false;
  }
  handleAfterHide() {
    this.previewButton.classList.remove("color-picker__preview-color--copied");
  }
  handleEyeDropper() {
    if (!hasEyeDropper) {
      return;
    }
    const eyeDropper = new EyeDropper();
    eyeDropper.open().then((colorSelectionResult) => {
      const oldValue = this.value;
      this.setColor(colorSelectionResult.sRGBHex);
      if (this.value !== oldValue) {
        this.emit("sl-change");
        this.emit("sl-input");
      }
    }).catch(() => {
    });
  }
  selectSwatch(color) {
    const oldValue = this.value;
    if (!this.disabled) {
      this.setColor(color);
      if (this.value !== oldValue) {
        this.emit("sl-change");
        this.emit("sl-input");
      }
    }
  }
  /** Generates a hex string from HSV values. Hue must be 0-360. All other arguments must be 0-100. */
  getHexString(hue, saturation, brightness, alpha = 100) {
    const color = new TinyColor(`hsva(${hue}, ${saturation}%, ${brightness}%, ${alpha / 100})`);
    if (!color.isValid) {
      return "";
    }
    return color.toHex8String();
  }
  // Prevents nested components from leaking events
  stopNestedEventPropagation(event) {
    event.stopImmediatePropagation();
  }
  handleFormatChange() {
    this.syncValues();
  }
  handleOpacityChange() {
    this.alpha = 100;
  }
  handleValueChange(oldValue, newValue) {
    this.isEmpty = !newValue;
    if (!newValue) {
      this.hue = 0;
      this.saturation = 0;
      this.brightness = 100;
      this.alpha = 100;
    }
    if (!this.isSafeValue) {
      const newColor = this.parseColor(newValue);
      if (newColor !== null) {
        this.inputValue = this.value;
        this.hue = newColor.hsva.h;
        this.saturation = newColor.hsva.s;
        this.brightness = newColor.hsva.v;
        this.alpha = newColor.hsva.a * 100;
        this.syncValues();
      } else {
        this.inputValue = oldValue != null ? oldValue : "";
      }
    }
  }
  /** Sets focus on the color picker. */
  focus(options) {
    if (this.inline) {
      this.base.focus(options);
    } else {
      this.trigger.focus(options);
    }
  }
  /** Removes focus from the color picker. */
  blur() {
    var _a;
    const elementToBlur = this.inline ? this.base : this.trigger;
    if (this.hasFocus) {
      elementToBlur.focus({ preventScroll: true });
      elementToBlur.blur();
    }
    if ((_a = this.dropdown) == null ? void 0 : _a.open) {
      this.dropdown.hide();
    }
  }
  /** Returns the current value as a string in the specified format. */
  getFormattedValue(format = "hex") {
    const currentColor = this.parseColor(
      `hsva(${this.hue}, ${this.saturation}%, ${this.brightness}%, ${this.alpha / 100})`
    );
    if (currentColor === null) {
      return "";
    }
    switch (format) {
      case "hex":
        return currentColor.hex;
      case "hexa":
        return currentColor.hexa;
      case "rgb":
        return currentColor.rgb.string;
      case "rgba":
        return currentColor.rgba.string;
      case "hsl":
        return currentColor.hsl.string;
      case "hsla":
        return currentColor.hsla.string;
      case "hsv":
        return currentColor.hsv.string;
      case "hsva":
        return currentColor.hsva.string;
      default:
        return "";
    }
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    if (!this.inline && !this.validity.valid) {
      this.dropdown.show();
      this.addEventListener("sl-after-show", () => this.input.reportValidity(), { once: true });
      if (!this.disabled) {
        this.formControlController.emitInvalidEvent();
      }
      return false;
    }
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message) {
    this.input.setCustomValidity(message);
    this.formControlController.updateValidity();
  }
  render() {
    const gridHandleX = this.saturation;
    const gridHandleY = 100 - this.brightness;
    const swatches = Array.isArray(this.swatches) ? this.swatches : this.swatches.split(";").filter((color) => color.trim() !== "");
    const colorPicker = x`
      <div
        part="base"
        class=${e$3({
      "color-picker": true,
      "color-picker--inline": this.inline,
      "color-picker--disabled": this.disabled,
      "color-picker--focused": this.hasFocus
    })}
        aria-disabled=${this.disabled ? "true" : "false"}
        aria-labelledby="label"
        tabindex=${this.inline ? "0" : "-1"}
      >
        ${this.inline ? x`
              <sl-visually-hidden id="label">
                <slot name="label">${this.label}</slot>
              </sl-visually-hidden>
            ` : null}

        <div
          part="grid"
          class="color-picker__grid"
          style=${o$5({ backgroundColor: this.getHexString(this.hue, 100, 100) })}
          @pointerdown=${this.handleGridDrag}
          @touchmove=${this.handleTouchMove}
        >
          <span
            part="grid-handle"
            class=${e$3({
      "color-picker__grid-handle": true,
      "color-picker__grid-handle--dragging": this.isDraggingGridHandle
    })}
            style=${o$5({
      top: `${gridHandleY}%`,
      left: `${gridHandleX}%`,
      backgroundColor: this.getHexString(this.hue, this.saturation, this.brightness, this.alpha)
    })}
            role="application"
            aria-label="HSV"
            tabindex=${o$6(this.disabled ? void 0 : "0")}
            @keydown=${this.handleGridKeyDown}
          ></span>
        </div>

        <div class="color-picker__controls">
          <div class="color-picker__sliders">
            <div
              part="slider hue-slider"
              class="color-picker__hue color-picker__slider"
              @pointerdown=${this.handleHueDrag}
              @touchmove=${this.handleTouchMove}
            >
              <span
                part="slider-handle hue-slider-handle"
                class="color-picker__slider-handle"
                style=${o$5({
      left: `${this.hue === 0 ? 0 : 100 / (360 / this.hue)}%`
    })}
                role="slider"
                aria-label="hue"
                aria-orientation="horizontal"
                aria-valuemin="0"
                aria-valuemax="360"
                aria-valuenow=${`${Math.round(this.hue)}`}
                tabindex=${o$6(this.disabled ? void 0 : "0")}
                @keydown=${this.handleHueKeyDown}
              ></span>
            </div>

            ${this.opacity ? x`
                  <div
                    part="slider opacity-slider"
                    class="color-picker__alpha color-picker__slider color-picker__transparent-bg"
                    @pointerdown="${this.handleAlphaDrag}"
                    @touchmove=${this.handleTouchMove}
                  >
                    <div
                      class="color-picker__alpha-gradient"
                      style=${o$5({
      backgroundImage: `linear-gradient(
                          to right,
                          ${this.getHexString(this.hue, this.saturation, this.brightness, 0)} 0%,
                          ${this.getHexString(this.hue, this.saturation, this.brightness, 100)} 100%
                        )`
    })}
                    ></div>
                    <span
                      part="slider-handle opacity-slider-handle"
                      class="color-picker__slider-handle"
                      style=${o$5({
      left: `${this.alpha}%`
    })}
                      role="slider"
                      aria-label="alpha"
                      aria-orientation="horizontal"
                      aria-valuemin="0"
                      aria-valuemax="100"
                      aria-valuenow=${Math.round(this.alpha)}
                      tabindex=${o$6(this.disabled ? void 0 : "0")}
                      @keydown=${this.handleAlphaKeyDown}
                    ></span>
                  </div>
                ` : ""}
          </div>

          <button
            type="button"
            part="preview"
            class="color-picker__preview color-picker__transparent-bg"
            aria-label=${this.localize.term("copy")}
            style=${o$5({
      "--preview-color": this.getHexString(this.hue, this.saturation, this.brightness, this.alpha)
    })}
            @click=${this.handleCopy}
          ></button>
        </div>

        <div class="color-picker__user-input" aria-live="polite">
          <sl-input
            part="input"
            type="text"
            name=${this.name}
            autocomplete="off"
            autocorrect="off"
            autocapitalize="off"
            spellcheck="false"
            value=${this.isEmpty ? "" : this.inputValue}
            ?required=${this.required}
            ?disabled=${this.disabled}
            aria-label=${this.localize.term("currentValue")}
            @keydown=${this.handleInputKeyDown}
            @sl-change=${this.handleInputChange}
            @sl-input=${this.handleInputInput}
            @sl-invalid=${this.handleInputInvalid}
            @sl-blur=${this.stopNestedEventPropagation}
            @sl-focus=${this.stopNestedEventPropagation}
          ></sl-input>

          <sl-button-group>
            ${!this.noFormatToggle ? x`
                  <sl-button
                    part="format-button"
                    aria-label=${this.localize.term("toggleColorFormat")}
                    exportparts="
                      base:format-button__base,
                      prefix:format-button__prefix,
                      label:format-button__label,
                      suffix:format-button__suffix,
                      caret:format-button__caret
                    "
                    @click=${this.handleFormatToggle}
                    @sl-blur=${this.stopNestedEventPropagation}
                    @sl-focus=${this.stopNestedEventPropagation}
                  >
                    ${this.setLetterCase(this.format)}
                  </sl-button>
                ` : ""}
            ${hasEyeDropper ? x`
                  <sl-button
                    part="eye-dropper-button"
                    exportparts="
                      base:eye-dropper-button__base,
                      prefix:eye-dropper-button__prefix,
                      label:eye-dropper-button__label,
                      suffix:eye-dropper-button__suffix,
                      caret:eye-dropper-button__caret
                    "
                    @click=${this.handleEyeDropper}
                    @sl-blur=${this.stopNestedEventPropagation}
                    @sl-focus=${this.stopNestedEventPropagation}
                  >
                    <sl-icon
                      library="system"
                      name="eyedropper"
                      label=${this.localize.term("selectAColorFromTheScreen")}
                    ></sl-icon>
                  </sl-button>
                ` : ""}
          </sl-button-group>
        </div>

        ${swatches.length > 0 ? x`
              <div part="swatches" class="color-picker__swatches">
                ${swatches.map((swatch) => {
      const parsedColor = this.parseColor(swatch);
      if (!parsedColor) {
        console.error(`Unable to parse swatch color: "${swatch}"`, this);
        return "";
      }
      return x`
                    <div
                      part="swatch"
                      class="color-picker__swatch color-picker__transparent-bg"
                      tabindex=${o$6(this.disabled ? void 0 : "0")}
                      role="button"
                      aria-label=${swatch}
                      @click=${() => this.selectSwatch(swatch)}
                      @keydown=${(event) => !this.disabled && event.key === "Enter" && this.setColor(parsedColor.hexa)}
                    >
                      <div
                        class="color-picker__swatch-color"
                        style=${o$5({ backgroundColor: parsedColor.hexa })}
                      ></div>
                    </div>
                  `;
    })}
              </div>
            ` : ""}
      </div>
    `;
    if (this.inline) {
      return colorPicker;
    }
    return x`
      <sl-dropdown
        class="color-dropdown"
        aria-disabled=${this.disabled ? "true" : "false"}
        .containingElement=${this}
        ?disabled=${this.disabled}
        ?hoist=${this.hoist}
        @sl-after-hide=${this.handleAfterHide}
      >
        <button
          part="trigger"
          slot="trigger"
          class=${e$3({
      "color-dropdown__trigger": true,
      "color-dropdown__trigger--disabled": this.disabled,
      "color-dropdown__trigger--small": this.size === "small",
      "color-dropdown__trigger--medium": this.size === "medium",
      "color-dropdown__trigger--large": this.size === "large",
      "color-dropdown__trigger--empty": this.isEmpty,
      "color-dropdown__trigger--focused": this.hasFocus,
      "color-picker__transparent-bg": true
    })}
          style=${o$5({
      color: this.getHexString(this.hue, this.saturation, this.brightness, this.alpha)
    })}
          type="button"
        >
          <sl-visually-hidden>
            <slot name="label">${this.label}</slot>
          </sl-visually-hidden>
        </button>
        ${colorPicker}
      </sl-dropdown>
    `;
  }
};
SlColorPicker.styles = [component_styles_default, color_picker_styles_default];
SlColorPicker.dependencies = {
  "sl-button-group": SlButtonGroup,
  "sl-button": SlButton,
  "sl-dropdown": SlDropdown,
  "sl-icon": SlIcon,
  "sl-input": SlInput,
  "sl-visually-hidden": SlVisuallyHidden
};
__decorateClass([
  e$7('[part~="base"]')
], SlColorPicker.prototype, "base", 2);
__decorateClass([
  e$7('[part~="input"]')
], SlColorPicker.prototype, "input", 2);
__decorateClass([
  e$7(".color-dropdown")
], SlColorPicker.prototype, "dropdown", 2);
__decorateClass([
  e$7('[part~="preview"]')
], SlColorPicker.prototype, "previewButton", 2);
__decorateClass([
  e$7('[part~="trigger"]')
], SlColorPicker.prototype, "trigger", 2);
__decorateClass([
  r$3()
], SlColorPicker.prototype, "hasFocus", 2);
__decorateClass([
  r$3()
], SlColorPicker.prototype, "isDraggingGridHandle", 2);
__decorateClass([
  r$3()
], SlColorPicker.prototype, "isEmpty", 2);
__decorateClass([
  r$3()
], SlColorPicker.prototype, "inputValue", 2);
__decorateClass([
  r$3()
], SlColorPicker.prototype, "hue", 2);
__decorateClass([
  r$3()
], SlColorPicker.prototype, "saturation", 2);
__decorateClass([
  r$3()
], SlColorPicker.prototype, "brightness", 2);
__decorateClass([
  r$3()
], SlColorPicker.prototype, "alpha", 2);
__decorateClass([
  n$6()
], SlColorPicker.prototype, "value", 2);
__decorateClass([
  defaultValue()
], SlColorPicker.prototype, "defaultValue", 2);
__decorateClass([
  n$6()
], SlColorPicker.prototype, "label", 2);
__decorateClass([
  n$6()
], SlColorPicker.prototype, "format", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlColorPicker.prototype, "inline", 2);
__decorateClass([
  n$6({ reflect: true })
], SlColorPicker.prototype, "size", 2);
__decorateClass([
  n$6({ attribute: "no-format-toggle", type: Boolean })
], SlColorPicker.prototype, "noFormatToggle", 2);
__decorateClass([
  n$6()
], SlColorPicker.prototype, "name", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlColorPicker.prototype, "disabled", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlColorPicker.prototype, "hoist", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlColorPicker.prototype, "opacity", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlColorPicker.prototype, "uppercase", 2);
__decorateClass([
  n$6()
], SlColorPicker.prototype, "swatches", 2);
__decorateClass([
  n$6({ reflect: true })
], SlColorPicker.prototype, "form", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlColorPicker.prototype, "required", 2);
__decorateClass([
  t$2({ passive: false })
], SlColorPicker.prototype, "handleTouchMove", 1);
__decorateClass([
  watch("format", { waitUntilFirstUpdate: true })
], SlColorPicker.prototype, "handleFormatChange", 1);
__decorateClass([
  watch("opacity", { waitUntilFirstUpdate: true })
], SlColorPicker.prototype, "handleOpacityChange", 1);
__decorateClass([
  watch("value")
], SlColorPicker.prototype, "handleValueChange", 1);

var tagName$c = "sl-color-picker";
SlColorPicker.define("sl-color-picker");
o$8({
  tagName: tagName$c,
  elementClass: SlColorPicker,
  react: React$1,
  events: {
    onSlBlur: "sl-blur",
    onSlChange: "sl-change",
    onSlFocus: "sl-focus",
    onSlInput: "sl-input",
    onSlInvalid: "sl-invalid"
  },
  displayName: "SlColorPicker"
});

// src/components/copy-button/copy-button.styles.ts
var copy_button_styles_default = i$7`
  :host {
    --error-color: var(--sl-color-danger-600);
    --success-color: var(--sl-color-success-600);

    display: inline-block;
  }

  .copy-button__button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    background: none;
    border: none;
    border-radius: var(--sl-border-radius-medium);
    font-size: inherit;
    color: inherit;
    padding: var(--sl-spacing-x-small);
    cursor: pointer;
    transition: var(--sl-transition-x-fast) color;
  }

  .copy-button--success .copy-button__button {
    color: var(--success-color);
  }

  .copy-button--error .copy-button__button {
    color: var(--error-color);
  }

  .copy-button__button:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .copy-button__button[disabled] {
    opacity: 0.5;
    cursor: not-allowed !important;
  }

  slot {
    display: inline-flex;
  }
`;

var SlCopyButton = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.isCopying = false;
    this.status = "rest";
    this.value = "";
    this.from = "";
    this.disabled = false;
    this.copyLabel = "";
    this.successLabel = "";
    this.errorLabel = "";
    this.feedbackDuration = 1e3;
    this.tooltipPlacement = "top";
    this.hoist = false;
  }
  async handleCopy() {
    if (this.disabled || this.isCopying) {
      return;
    }
    this.isCopying = true;
    let valueToCopy = this.value;
    if (this.from) {
      const root = this.getRootNode();
      const isProperty = this.from.includes(".");
      const isAttribute = this.from.includes("[") && this.from.includes("]");
      let id = this.from;
      let field = "";
      if (isProperty) {
        [id, field] = this.from.trim().split(".");
      } else if (isAttribute) {
        [id, field] = this.from.trim().replace(/\]$/, "").split("[");
      }
      const target = "getElementById" in root ? root.getElementById(id) : null;
      if (target) {
        if (isAttribute) {
          valueToCopy = target.getAttribute(field) || "";
        } else if (isProperty) {
          valueToCopy = target[field] || "";
        } else {
          valueToCopy = target.textContent || "";
        }
      } else {
        this.showStatus("error");
        this.emit("sl-error");
      }
    }
    if (!valueToCopy) {
      this.showStatus("error");
      this.emit("sl-error");
    } else {
      try {
        await navigator.clipboard.writeText(valueToCopy);
        this.showStatus("success");
        this.emit("sl-copy", {
          detail: {
            value: valueToCopy
          }
        });
      } catch (error) {
        this.showStatus("error");
        this.emit("sl-error");
      }
    }
  }
  async showStatus(status) {
    const copyLabel = this.copyLabel || this.localize.term("copy");
    const successLabel = this.successLabel || this.localize.term("copied");
    const errorLabel = this.errorLabel || this.localize.term("error");
    const iconToShow = status === "success" ? this.successIcon : this.errorIcon;
    const showAnimation = getAnimation(this, "copy.in", { dir: "ltr" });
    const hideAnimation = getAnimation(this, "copy.out", { dir: "ltr" });
    this.tooltip.content = status === "success" ? successLabel : errorLabel;
    await this.copyIcon.animate(hideAnimation.keyframes, hideAnimation.options).finished;
    this.copyIcon.hidden = true;
    this.status = status;
    iconToShow.hidden = false;
    await iconToShow.animate(showAnimation.keyframes, showAnimation.options).finished;
    setTimeout(async () => {
      await iconToShow.animate(hideAnimation.keyframes, hideAnimation.options).finished;
      iconToShow.hidden = true;
      this.status = "rest";
      this.copyIcon.hidden = false;
      await this.copyIcon.animate(showAnimation.keyframes, showAnimation.options).finished;
      this.tooltip.content = copyLabel;
      this.isCopying = false;
    }, this.feedbackDuration);
  }
  render() {
    const copyLabel = this.copyLabel || this.localize.term("copy");
    return x`
      <sl-tooltip
        class=${e$3({
      "copy-button": true,
      "copy-button--success": this.status === "success",
      "copy-button--error": this.status === "error"
    })}
        content=${copyLabel}
        placement=${this.tooltipPlacement}
        ?disabled=${this.disabled}
        ?hoist=${this.hoist}
        exportparts="
          base:tooltip__base,
          base__popup:tooltip__base__popup,
          base__arrow:tooltip__base__arrow,
          body:tooltip__body
        "
      >
        <button
          class="copy-button__button"
          part="button"
          type="button"
          ?disabled=${this.disabled}
          @click=${this.handleCopy}
        >
          <slot part="copy-icon" name="copy-icon">
            <sl-icon library="system" name="copy"></sl-icon>
          </slot>
          <slot part="success-icon" name="success-icon" hidden>
            <sl-icon library="system" name="check"></sl-icon>
          </slot>
          <slot part="error-icon" name="error-icon" hidden>
            <sl-icon library="system" name="x-lg"></sl-icon>
          </slot>
        </button>
      </sl-tooltip>
    `;
  }
};
SlCopyButton.styles = [component_styles_default, copy_button_styles_default];
SlCopyButton.dependencies = {
  "sl-icon": SlIcon,
  "sl-tooltip": SlTooltip
};
__decorateClass([
  e$7('slot[name="copy-icon"]')
], SlCopyButton.prototype, "copyIcon", 2);
__decorateClass([
  e$7('slot[name="success-icon"]')
], SlCopyButton.prototype, "successIcon", 2);
__decorateClass([
  e$7('slot[name="error-icon"]')
], SlCopyButton.prototype, "errorIcon", 2);
__decorateClass([
  e$7("sl-tooltip")
], SlCopyButton.prototype, "tooltip", 2);
__decorateClass([
  r$3()
], SlCopyButton.prototype, "isCopying", 2);
__decorateClass([
  r$3()
], SlCopyButton.prototype, "status", 2);
__decorateClass([
  n$6()
], SlCopyButton.prototype, "value", 2);
__decorateClass([
  n$6()
], SlCopyButton.prototype, "from", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlCopyButton.prototype, "disabled", 2);
__decorateClass([
  n$6({ attribute: "copy-label" })
], SlCopyButton.prototype, "copyLabel", 2);
__decorateClass([
  n$6({ attribute: "success-label" })
], SlCopyButton.prototype, "successLabel", 2);
__decorateClass([
  n$6({ attribute: "error-label" })
], SlCopyButton.prototype, "errorLabel", 2);
__decorateClass([
  n$6({ attribute: "feedback-duration", type: Number })
], SlCopyButton.prototype, "feedbackDuration", 2);
__decorateClass([
  n$6({ attribute: "tooltip-placement" })
], SlCopyButton.prototype, "tooltipPlacement", 2);
__decorateClass([
  n$6({ type: Boolean })
], SlCopyButton.prototype, "hoist", 2);
setDefaultAnimation("copy.in", {
  keyframes: [
    { scale: ".25", opacity: ".25" },
    { scale: "1", opacity: "1" }
  ],
  options: { duration: 100 }
});
setDefaultAnimation("copy.out", {
  keyframes: [
    { scale: "1", opacity: "1" },
    { scale: ".25", opacity: "0" }
  ],
  options: { duration: 100 }
});

var tagName$b = "sl-copy-button";
SlCopyButton.define("sl-copy-button");
o$8({
  tagName: tagName$b,
  elementClass: SlCopyButton,
  react: React$1,
  events: {
    onSlCopy: "sl-copy",
    onSlError: "sl-error"
  },
  displayName: "SlCopyButton"
});

// src/components/details/details.styles.ts
var details_styles_default = i$7`
  :host {
    display: block;
  }

  .details {
    border: solid 1px var(--sl-color-neutral-200);
    border-radius: var(--sl-border-radius-medium);
    background-color: var(--sl-color-neutral-0);
    overflow-anchor: none;
  }

  .details--disabled {
    opacity: 0.5;
  }

  .details__header {
    display: flex;
    align-items: center;
    border-radius: inherit;
    padding: var(--sl-spacing-medium);
    user-select: none;
    -webkit-user-select: none;
    cursor: pointer;
  }

  .details__header::-webkit-details-marker {
    display: none;
  }

  .details__header:focus {
    outline: none;
  }

  .details__header:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: calc(1px + var(--sl-focus-ring-offset));
  }

  .details--disabled .details__header {
    cursor: not-allowed;
  }

  .details--disabled .details__header:focus-visible {
    outline: none;
    box-shadow: none;
  }

  .details__summary {
    flex: 1 1 auto;
    display: flex;
    align-items: center;
  }

  .details__summary-icon {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    transition: var(--sl-transition-medium) rotate ease;
  }

  .details--open .details__summary-icon {
    rotate: 90deg;
  }

  .details--open.details--rtl .details__summary-icon {
    rotate: -90deg;
  }

  .details--open slot[name='expand-icon'],
  .details:not(.details--open) slot[name='collapse-icon'] {
    display: none;
  }

  .details__body {
    overflow: hidden;
  }

  .details__content {
    display: block;
    padding: var(--sl-spacing-medium);
  }
`;

var SlDetails = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.open = false;
    this.disabled = false;
  }
  firstUpdated() {
    this.body.style.height = this.open ? "auto" : "0";
    if (this.open) {
      this.details.open = true;
    }
    this.detailsObserver = new MutationObserver((changes) => {
      for (const change of changes) {
        if (change.type === "attributes" && change.attributeName === "open") {
          if (this.details.open) {
            this.show();
          } else {
            this.hide();
          }
        }
      }
    });
    this.detailsObserver.observe(this.details, { attributes: true });
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.detailsObserver) == null ? void 0 : _a.disconnect();
  }
  handleSummaryClick(event) {
    event.preventDefault();
    if (!this.disabled) {
      if (this.open) {
        this.hide();
      } else {
        this.show();
      }
      this.header.focus();
    }
  }
  handleSummaryKeyDown(event) {
    if (event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      if (this.open) {
        this.hide();
      } else {
        this.show();
      }
    }
    if (event.key === "ArrowUp" || event.key === "ArrowLeft") {
      event.preventDefault();
      this.hide();
    }
    if (event.key === "ArrowDown" || event.key === "ArrowRight") {
      event.preventDefault();
      this.show();
    }
  }
  async handleOpenChange() {
    if (this.open) {
      this.details.open = true;
      const slShow = this.emit("sl-show", { cancelable: true });
      if (slShow.defaultPrevented) {
        this.open = false;
        this.details.open = false;
        return;
      }
      await stopAnimations(this.body);
      const { keyframes, options } = getAnimation(this, "details.show", { dir: this.localize.dir() });
      await animateTo(this.body, shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
      this.body.style.height = "auto";
      this.emit("sl-after-show");
    } else {
      const slHide = this.emit("sl-hide", { cancelable: true });
      if (slHide.defaultPrevented) {
        this.details.open = true;
        this.open = true;
        return;
      }
      await stopAnimations(this.body);
      const { keyframes, options } = getAnimation(this, "details.hide", { dir: this.localize.dir() });
      await animateTo(this.body, shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
      this.body.style.height = "auto";
      this.details.open = false;
      this.emit("sl-after-hide");
    }
  }
  /** Shows the details. */
  async show() {
    if (this.open || this.disabled) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the details */
  async hide() {
    if (!this.open || this.disabled) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    return x`
      <details
        part="base"
        class=${e$3({
      details: true,
      "details--open": this.open,
      "details--disabled": this.disabled,
      "details--rtl": isRtl
    })}
      >
        <summary
          part="header"
          id="header"
          class="details__header"
          role="button"
          aria-expanded=${this.open ? "true" : "false"}
          aria-controls="content"
          aria-disabled=${this.disabled ? "true" : "false"}
          tabindex=${this.disabled ? "-1" : "0"}
          @click=${this.handleSummaryClick}
          @keydown=${this.handleSummaryKeyDown}
        >
          <slot name="summary" part="summary" class="details__summary">${this.summary}</slot>

          <span part="summary-icon" class="details__summary-icon">
            <slot name="expand-icon">
              <sl-icon library="system" name=${isRtl ? "chevron-left" : "chevron-right"}></sl-icon>
            </slot>
            <slot name="collapse-icon">
              <sl-icon library="system" name=${isRtl ? "chevron-left" : "chevron-right"}></sl-icon>
            </slot>
          </span>
        </summary>

        <div class="details__body" role="region" aria-labelledby="header">
          <slot part="content" id="content" class="details__content"></slot>
        </div>
      </details>
    `;
  }
};
SlDetails.styles = [component_styles_default, details_styles_default];
SlDetails.dependencies = {
  "sl-icon": SlIcon
};
__decorateClass([
  e$7(".details")
], SlDetails.prototype, "details", 2);
__decorateClass([
  e$7(".details__header")
], SlDetails.prototype, "header", 2);
__decorateClass([
  e$7(".details__body")
], SlDetails.prototype, "body", 2);
__decorateClass([
  e$7(".details__expand-icon-slot")
], SlDetails.prototype, "expandIconSlot", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlDetails.prototype, "open", 2);
__decorateClass([
  n$6()
], SlDetails.prototype, "summary", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlDetails.prototype, "disabled", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlDetails.prototype, "handleOpenChange", 1);
setDefaultAnimation("details.show", {
  keyframes: [
    { height: "0", opacity: "0" },
    { height: "auto", opacity: "1" }
  ],
  options: { duration: 250, easing: "linear" }
});
setDefaultAnimation("details.hide", {
  keyframes: [
    { height: "auto", opacity: "1" },
    { height: "0", opacity: "0" }
  ],
  options: { duration: 250, easing: "linear" }
});

var tagName$a = "sl-details";
SlDetails.define("sl-details");
var reactWrapper$3 = o$8({
  tagName: tagName$a,
  elementClass: SlDetails,
  react: React$1,
  events: {
    onSlShow: "sl-show",
    onSlAfterShow: "sl-after-show",
    onSlHide: "sl-hide",
    onSlAfterHide: "sl-after-hide"
  },
  displayName: "SlDetails"
});
var details_default = reactWrapper$3;

// src/components/dialog/dialog.styles.ts
var dialog_styles_default = i$7`
  :host {
    --width: 31rem;
    --header-spacing: var(--sl-spacing-large);
    --body-spacing: var(--sl-spacing-large);
    --footer-spacing: var(--sl-spacing-large);

    display: contents;
  }

  .dialog {
    display: flex;
    align-items: center;
    justify-content: center;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: var(--sl-z-index-dialog);
  }

  .dialog__panel {
    display: flex;
    flex-direction: column;
    z-index: 2;
    width: var(--width);
    max-width: calc(100% - var(--sl-spacing-2x-large));
    max-height: calc(100% - var(--sl-spacing-2x-large));
    background-color: var(--sl-panel-background-color);
    border-radius: var(--sl-border-radius-medium);
    box-shadow: var(--sl-shadow-x-large);
  }

  .dialog__panel:focus {
    outline: none;
  }

  /* Ensure there's enough vertical padding for phones that don't update vh when chrome appears (e.g. iPhone) */
  @media screen and (max-width: 420px) {
    .dialog__panel {
      max-height: 80vh;
    }
  }

  .dialog--open .dialog__panel {
    display: flex;
    opacity: 1;
  }

  .dialog__header {
    flex: 0 0 auto;
    display: flex;
  }

  .dialog__title {
    flex: 1 1 auto;
    font: inherit;
    font-size: var(--sl-font-size-large);
    line-height: var(--sl-line-height-dense);
    padding: var(--header-spacing);
    margin: 0;
  }

  .dialog__header-actions {
    flex-shrink: 0;
    display: flex;
    flex-wrap: wrap;
    justify-content: end;
    gap: var(--sl-spacing-2x-small);
    padding: 0 var(--header-spacing);
  }

  .dialog__header-actions sl-icon-button,
  .dialog__header-actions ::slotted(sl-icon-button) {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-medium);
  }

  .dialog__body {
    flex: 1 1 auto;
    display: block;
    padding: var(--body-spacing);
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  .dialog__footer {
    flex: 0 0 auto;
    text-align: right;
    padding: var(--footer-spacing);
  }

  .dialog__footer ::slotted(sl-button:not(:first-of-type)) {
    margin-inline-start: var(--sl-spacing-x-small);
  }

  .dialog:not(.dialog--has-footer) .dialog__footer {
    display: none;
  }

  .dialog__overlay {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: var(--sl-overlay-background-color);
  }

  @media (forced-colors: active) {
    .dialog__panel {
      border: solid 1px var(--sl-color-neutral-0);
    }
  }
`;

var SlDialog = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "footer");
    this.localize = new LocalizeController(this);
    this.modal = new Modal(this);
    this.open = false;
    this.label = "";
    this.noHeader = false;
    this.handleDocumentKeyDown = (event) => {
      if (event.key === "Escape" && this.modal.isActive() && this.open) {
        event.stopPropagation();
        this.requestClose("keyboard");
      }
    };
  }
  firstUpdated() {
    this.dialog.hidden = !this.open;
    if (this.open) {
      this.addOpenListeners();
      this.modal.activate();
      lockBodyScrolling(this);
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.modal.deactivate();
    unlockBodyScrolling(this);
    this.removeOpenListeners();
  }
  requestClose(source) {
    const slRequestClose = this.emit("sl-request-close", {
      cancelable: true,
      detail: { source }
    });
    if (slRequestClose.defaultPrevented) {
      const animation = getAnimation(this, "dialog.denyClose", { dir: this.localize.dir() });
      animateTo(this.panel, animation.keyframes, animation.options);
      return;
    }
    this.hide();
  }
  addOpenListeners() {
    var _a;
    if ("CloseWatcher" in window) {
      (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
      this.closeWatcher = new CloseWatcher();
      this.closeWatcher.onclose = () => this.requestClose("keyboard");
    } else {
      document.addEventListener("keydown", this.handleDocumentKeyDown);
    }
  }
  removeOpenListeners() {
    var _a;
    (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
  }
  async handleOpenChange() {
    if (this.open) {
      this.emit("sl-show");
      this.addOpenListeners();
      this.originalTrigger = document.activeElement;
      this.modal.activate();
      lockBodyScrolling(this);
      const autoFocusTarget = this.querySelector("[autofocus]");
      if (autoFocusTarget) {
        autoFocusTarget.removeAttribute("autofocus");
      }
      await Promise.all([stopAnimations(this.dialog), stopAnimations(this.overlay)]);
      this.dialog.hidden = false;
      requestAnimationFrame(() => {
        const slInitialFocus = this.emit("sl-initial-focus", { cancelable: true });
        if (!slInitialFocus.defaultPrevented) {
          if (autoFocusTarget) {
            autoFocusTarget.focus({ preventScroll: true });
          } else {
            this.panel.focus({ preventScroll: true });
          }
        }
        if (autoFocusTarget) {
          autoFocusTarget.setAttribute("autofocus", "");
        }
      });
      const panelAnimation = getAnimation(this, "dialog.show", { dir: this.localize.dir() });
      const overlayAnimation = getAnimation(this, "dialog.overlay.show", { dir: this.localize.dir() });
      await Promise.all([
        animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options),
        animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)
      ]);
      this.emit("sl-after-show");
    } else {
      blurActiveElement(this);
      this.emit("sl-hide");
      this.removeOpenListeners();
      this.modal.deactivate();
      await Promise.all([stopAnimations(this.dialog), stopAnimations(this.overlay)]);
      const panelAnimation = getAnimation(this, "dialog.hide", { dir: this.localize.dir() });
      const overlayAnimation = getAnimation(this, "dialog.overlay.hide", { dir: this.localize.dir() });
      await Promise.all([
        animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options).then(() => {
          this.overlay.hidden = true;
        }),
        animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options).then(() => {
          this.panel.hidden = true;
        })
      ]);
      this.dialog.hidden = true;
      this.overlay.hidden = false;
      this.panel.hidden = false;
      unlockBodyScrolling(this);
      const trigger = this.originalTrigger;
      if (typeof (trigger == null ? void 0 : trigger.focus) === "function") {
        setTimeout(() => trigger.focus());
      }
      this.emit("sl-after-hide");
    }
  }
  /** Shows the dialog. */
  async show() {
    if (this.open) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the dialog */
  async hide() {
    if (!this.open) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  render() {
    return x`
      <div
        part="base"
        class=${e$3({
      dialog: true,
      "dialog--open": this.open,
      "dialog--has-footer": this.hasSlotController.test("footer")
    })}
      >
        <div part="overlay" class="dialog__overlay" @click=${() => this.requestClose("overlay")} tabindex="-1"></div>

        <div
          part="panel"
          class="dialog__panel"
          role="dialog"
          aria-modal="true"
          aria-hidden=${this.open ? "false" : "true"}
          aria-label=${o$6(this.noHeader ? this.label : void 0)}
          aria-labelledby=${o$6(!this.noHeader ? "title" : void 0)}
          tabindex="-1"
        >
          ${!this.noHeader ? x`
                <header part="header" class="dialog__header">
                  <h2 part="title" class="dialog__title" id="title">
                    <slot name="label"> ${this.label.length > 0 ? this.label : String.fromCharCode(65279)} </slot>
                  </h2>
                  <div part="header-actions" class="dialog__header-actions">
                    <slot name="header-actions"></slot>
                    <sl-icon-button
                      part="close-button"
                      exportparts="base:close-button__base"
                      class="dialog__close"
                      name="x-lg"
                      label=${this.localize.term("close")}
                      library="system"
                      @click="${() => this.requestClose("close-button")}"
                    ></sl-icon-button>
                  </div>
                </header>
              ` : ""}
          ${""}
          <div part="body" class="dialog__body" tabindex="-1"><slot></slot></div>

          <footer part="footer" class="dialog__footer">
            <slot name="footer"></slot>
          </footer>
        </div>
      </div>
    `;
  }
};
SlDialog.styles = [component_styles_default, dialog_styles_default];
SlDialog.dependencies = {
  "sl-icon-button": SlIconButton
};
__decorateClass([
  e$7(".dialog")
], SlDialog.prototype, "dialog", 2);
__decorateClass([
  e$7(".dialog__panel")
], SlDialog.prototype, "panel", 2);
__decorateClass([
  e$7(".dialog__overlay")
], SlDialog.prototype, "overlay", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlDialog.prototype, "open", 2);
__decorateClass([
  n$6({ reflect: true })
], SlDialog.prototype, "label", 2);
__decorateClass([
  n$6({ attribute: "no-header", type: Boolean, reflect: true })
], SlDialog.prototype, "noHeader", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlDialog.prototype, "handleOpenChange", 1);
setDefaultAnimation("dialog.show", {
  keyframes: [
    { opacity: 0, scale: 0.8 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("dialog.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.8 }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("dialog.denyClose", {
  keyframes: [{ scale: 1 }, { scale: 1.02 }, { scale: 1 }],
  options: { duration: 250 }
});
setDefaultAnimation("dialog.overlay.show", {
  keyframes: [{ opacity: 0 }, { opacity: 1 }],
  options: { duration: 250 }
});
setDefaultAnimation("dialog.overlay.hide", {
  keyframes: [{ opacity: 1 }, { opacity: 0 }],
  options: { duration: 250 }
});

var tagName$9 = "sl-dialog";
SlDialog.define("sl-dialog");
o$8({
  tagName: tagName$9,
  elementClass: SlDialog,
  react: React$1,
  events: {
    onSlShow: "sl-show",
    onSlAfterShow: "sl-after-show",
    onSlHide: "sl-hide",
    onSlAfterHide: "sl-after-hide",
    onSlInitialFocus: "sl-initial-focus",
    onSlRequestClose: "sl-request-close"
  },
  displayName: "SlDialog"
});

// src/components/animated-image/animated-image.styles.ts
var animated_image_styles_default = i$7`
  :host {
    --control-box-size: 3rem;
    --icon-size: calc(var(--control-box-size) * 0.625);

    display: inline-flex;
    position: relative;
    cursor: pointer;
  }

  img {
    display: block;
    width: 100%;
    height: 100%;
  }

  img[aria-hidden='true'] {
    display: none;
  }

  .animated-image__control-box {
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    top: calc(50% - var(--control-box-size) / 2);
    right: calc(50% - var(--control-box-size) / 2);
    width: var(--control-box-size);
    height: var(--control-box-size);
    font-size: var(--icon-size);
    background: none;
    border: solid 2px currentColor;
    background-color: rgb(0 0 0 /50%);
    border-radius: var(--sl-border-radius-circle);
    color: white;
    pointer-events: none;
    transition: var(--sl-transition-fast) opacity;
  }

  :host([play]:hover) .animated-image__control-box {
    opacity: 1;
  }

  :host([play]:not(:hover)) .animated-image__control-box {
    opacity: 0;
  }

  :host([play]) slot[name='play-icon'],
  :host(:not([play])) slot[name='pause-icon'] {
    display: none;
  }
`;

var SlAnimatedImage = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.isLoaded = false;
  }
  handleClick() {
    this.play = !this.play;
  }
  handleLoad() {
    const canvas = document.createElement("canvas");
    const { width, height } = this.animatedImage;
    canvas.width = width;
    canvas.height = height;
    canvas.getContext("2d").drawImage(this.animatedImage, 0, 0, width, height);
    this.frozenFrame = canvas.toDataURL("image/gif");
    if (!this.isLoaded) {
      this.emit("sl-load");
      this.isLoaded = true;
    }
  }
  handleError() {
    this.emit("sl-error");
  }
  handlePlayChange() {
    if (this.play) {
      this.animatedImage.src = "";
      this.animatedImage.src = this.src;
    }
  }
  handleSrcChange() {
    this.isLoaded = false;
  }
  render() {
    return x`
      <div class="animated-image">
        <img
          class="animated-image__animated"
          src=${this.src}
          alt=${this.alt}
          crossorigin="anonymous"
          aria-hidden=${this.play ? "false" : "true"}
          @click=${this.handleClick}
          @load=${this.handleLoad}
          @error=${this.handleError}
        />

        ${this.isLoaded ? x`
              <img
                class="animated-image__frozen"
                src=${this.frozenFrame}
                alt=${this.alt}
                aria-hidden=${this.play ? "true" : "false"}
                @click=${this.handleClick}
              />

              <div part="control-box" class="animated-image__control-box">
                <slot name="play-icon"><sl-icon name="play-fill" library="system"></sl-icon></slot>
                <slot name="pause-icon"><sl-icon name="pause-fill" library="system"></sl-icon></slot>
              </div>
            ` : ""}
      </div>
    `;
  }
};
SlAnimatedImage.styles = [component_styles_default, animated_image_styles_default];
SlAnimatedImage.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e$7(".animated-image__animated")
], SlAnimatedImage.prototype, "animatedImage", 2);
__decorateClass([
  r$3()
], SlAnimatedImage.prototype, "frozenFrame", 2);
__decorateClass([
  r$3()
], SlAnimatedImage.prototype, "isLoaded", 2);
__decorateClass([
  n$6()
], SlAnimatedImage.prototype, "src", 2);
__decorateClass([
  n$6()
], SlAnimatedImage.prototype, "alt", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlAnimatedImage.prototype, "play", 2);
__decorateClass([
  watch("play", { waitUntilFirstUpdate: true })
], SlAnimatedImage.prototype, "handlePlayChange", 1);
__decorateClass([
  watch("src")
], SlAnimatedImage.prototype, "handleSrcChange", 1);

var tagName$8 = "sl-animated-image";
SlAnimatedImage.define("sl-animated-image");
o$8({
  tagName: tagName$8,
  elementClass: SlAnimatedImage,
  react: React$1,
  events: {
    onSlLoad: "sl-load",
    onSlError: "sl-error"
  },
  displayName: "SlAnimatedImage"
});

const bounce = [
  { offset: 0, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', transform: 'translate3d(0, 0, 0)' },
  { offset: 0.2, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', transform: 'translate3d(0, 0, 0)' },
  { offset: 0.4, easing: 'cubic-bezier(0.755, 0.05, 0.855, 0.06)', transform: 'translate3d(0, -30px, 0) scaleY(1.1)' },
  { offset: 0.43, easing: 'cubic-bezier(0.755, 0.05, 0.855, 0.06)', transform: 'translate3d(0, -30px, 0) scaleY(1.1)' },
  { offset: 0.53, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', transform: 'translate3d(0, 0, 0)' },
  { offset: 0.7, easing: 'cubic-bezier(0.755, 0.05, 0.855, 0.06)', transform: 'translate3d(0, -15px, 0) scaleY(1.05)' },
  {
    offset: 0.8,
    'transition-timing-function': 'cubic-bezier(0.215, 0.61, 0.355, 1)',
    transform: 'translate3d(0, 0, 0) scaleY(0.95)'
  },
  { offset: 0.9, transform: 'translate3d(0, -4px, 0) scaleY(1.02)' },
  { offset: 1, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)', transform: 'translate3d(0, 0, 0)' }
];

const flash = [
  { offset: 0, opacity: '1' },
  { offset: 0.25, opacity: '0' },
  { offset: 0.5, opacity: '1' },
  { offset: 0.75, opacity: '0' },
  { offset: 1, opacity: '1' }
];

const headShake = [
  { offset: 0, transform: 'translateX(0)' },
  { offset: 0.065, transform: 'translateX(-6px) rotateY(-9deg)' },
  { offset: 0.185, transform: 'translateX(5px) rotateY(7deg)' },
  { offset: 0.315, transform: 'translateX(-3px) rotateY(-5deg)' },
  { offset: 0.435, transform: 'translateX(2px) rotateY(3deg)' },
  { offset: 0.5, transform: 'translateX(0)' }
];

const heartBeat = [
  { offset: 0, transform: 'scale(1)' },
  { offset: 0.14, transform: 'scale(1.3)' },
  { offset: 0.28, transform: 'scale(1)' },
  { offset: 0.42, transform: 'scale(1.3)' },
  { offset: 0.7, transform: 'scale(1)' }
];

const jello = [
  { offset: 0, transform: 'translate3d(0, 0, 0)' },
  { offset: 0.111, transform: 'translate3d(0, 0, 0)' },
  { offset: 0.222, transform: 'skewX(-12.5deg) skewY(-12.5deg)' },
  { offset: 0.33299999999999996, transform: 'skewX(6.25deg) skewY(6.25deg)' },
  { offset: 0.444, transform: 'skewX(-3.125deg) skewY(-3.125deg)' },
  { offset: 0.555, transform: 'skewX(1.5625deg) skewY(1.5625deg)' },
  { offset: 0.6659999999999999, transform: 'skewX(-0.78125deg) skewY(-0.78125deg)' },
  { offset: 0.777, transform: 'skewX(0.390625deg) skewY(0.390625deg)' },
  { offset: 0.888, transform: 'skewX(-0.1953125deg) skewY(-0.1953125deg)' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' }
];

const pulse = [
  { offset: 0, transform: 'scale3d(1, 1, 1)' },
  { offset: 0.5, transform: 'scale3d(1.05, 1.05, 1.05)' },
  { offset: 1, transform: 'scale3d(1, 1, 1)' }
];

const rubberBand = [
  { offset: 0, transform: 'scale3d(1, 1, 1)' },
  { offset: 0.3, transform: 'scale3d(1.25, 0.75, 1)' },
  { offset: 0.4, transform: 'scale3d(0.75, 1.25, 1)' },
  { offset: 0.5, transform: 'scale3d(1.15, 0.85, 1)' },
  { offset: 0.65, transform: 'scale3d(0.95, 1.05, 1)' },
  { offset: 0.75, transform: 'scale3d(1.05, 0.95, 1)' },
  { offset: 1, transform: 'scale3d(1, 1, 1)' }
];

const shake = [
  { offset: 0, transform: 'translate3d(0, 0, 0)' },
  { offset: 0.1, transform: 'translate3d(-10px, 0, 0)' },
  { offset: 0.2, transform: 'translate3d(10px, 0, 0)' },
  { offset: 0.3, transform: 'translate3d(-10px, 0, 0)' },
  { offset: 0.4, transform: 'translate3d(10px, 0, 0)' },
  { offset: 0.5, transform: 'translate3d(-10px, 0, 0)' },
  { offset: 0.6, transform: 'translate3d(10px, 0, 0)' },
  { offset: 0.7, transform: 'translate3d(-10px, 0, 0)' },
  { offset: 0.8, transform: 'translate3d(10px, 0, 0)' },
  { offset: 0.9, transform: 'translate3d(-10px, 0, 0)' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' }
];

const shakeX = [
  { offset: 0, transform: 'translate3d(0, 0, 0)' },
  { offset: 0.1, transform: 'translate3d(-10px, 0, 0)' },
  { offset: 0.2, transform: 'translate3d(10px, 0, 0)' },
  { offset: 0.3, transform: 'translate3d(-10px, 0, 0)' },
  { offset: 0.4, transform: 'translate3d(10px, 0, 0)' },
  { offset: 0.5, transform: 'translate3d(-10px, 0, 0)' },
  { offset: 0.6, transform: 'translate3d(10px, 0, 0)' },
  { offset: 0.7, transform: 'translate3d(-10px, 0, 0)' },
  { offset: 0.8, transform: 'translate3d(10px, 0, 0)' },
  { offset: 0.9, transform: 'translate3d(-10px, 0, 0)' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' }
];

const shakeY = [
  { offset: 0, transform: 'translate3d(0, 0, 0)' },
  { offset: 0.1, transform: 'translate3d(0, -10px, 0)' },
  { offset: 0.2, transform: 'translate3d(0, 10px, 0)' },
  { offset: 0.3, transform: 'translate3d(0, -10px, 0)' },
  { offset: 0.4, transform: 'translate3d(0, 10px, 0)' },
  { offset: 0.5, transform: 'translate3d(0, -10px, 0)' },
  { offset: 0.6, transform: 'translate3d(0, 10px, 0)' },
  { offset: 0.7, transform: 'translate3d(0, -10px, 0)' },
  { offset: 0.8, transform: 'translate3d(0, 10px, 0)' },
  { offset: 0.9, transform: 'translate3d(0, -10px, 0)' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' }
];

const swing = [
  { offset: 0.2, transform: 'rotate3d(0, 0, 1, 15deg)' },
  { offset: 0.4, transform: 'rotate3d(0, 0, 1, -10deg)' },
  { offset: 0.6, transform: 'rotate3d(0, 0, 1, 5deg)' },
  { offset: 0.8, transform: 'rotate3d(0, 0, 1, -5deg)' },
  { offset: 1, transform: 'rotate3d(0, 0, 1, 0deg)' }
];

const tada = [
  { offset: 0, transform: 'scale3d(1, 1, 1)' },
  { offset: 0.1, transform: 'scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg)' },
  { offset: 0.2, transform: 'scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg)' },
  { offset: 0.3, transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)' },
  { offset: 0.4, transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)' },
  { offset: 0.5, transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)' },
  { offset: 0.6, transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)' },
  { offset: 0.7, transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)' },
  { offset: 0.8, transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)' },
  { offset: 0.9, transform: 'scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)' },
  { offset: 1, transform: 'scale3d(1, 1, 1)' }
];

const wobble = [
  { offset: 0, transform: 'translate3d(0, 0, 0)' },
  { offset: 0.15, transform: 'translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg)' },
  { offset: 0.3, transform: 'translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg)' },
  { offset: 0.45, transform: 'translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg)' },
  { offset: 0.6, transform: 'translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg)' },
  { offset: 0.75, transform: 'translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg)' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' }
];

const backInDown = [
  { offset: 0, transform: 'translateY(-1200px) scale(0.7)', opacity: '0.7' },
  { offset: 0.8, transform: 'translateY(0px) scale(0.7)', opacity: '0.7' },
  { offset: 1, transform: 'scale(1)', opacity: '1' }
];

const backInLeft = [
  { offset: 0, transform: 'translateX(-2000px) scale(0.7)', opacity: '0.7' },
  { offset: 0.8, transform: 'translateX(0px) scale(0.7)', opacity: '0.7' },
  { offset: 1, transform: 'scale(1)', opacity: '1' }
];

const backInRight = [
  { offset: 0, transform: 'translateX(2000px) scale(0.7)', opacity: '0.7' },
  { offset: 0.8, transform: 'translateX(0px) scale(0.7)', opacity: '0.7' },
  { offset: 1, transform: 'scale(1)', opacity: '1' }
];

const backInUp = [
  { offset: 0, transform: 'translateY(1200px) scale(0.7)', opacity: '0.7' },
  { offset: 0.8, transform: 'translateY(0px) scale(0.7)', opacity: '0.7' },
  { offset: 1, transform: 'scale(1)', opacity: '1' }
];

const backOutDown = [
  { offset: 0, transform: 'scale(1)', opacity: '1' },
  { offset: 0.2, transform: 'translateY(0px) scale(0.7)', opacity: '0.7' },
  { offset: 1, transform: 'translateY(700px) scale(0.7)', opacity: '0.7' }
];

const backOutLeft = [
  { offset: 0, transform: 'scale(1)', opacity: '1' },
  { offset: 0.2, transform: 'translateX(0px) scale(0.7)', opacity: '0.7' },
  { offset: 1, transform: 'translateX(-2000px) scale(0.7)', opacity: '0.7' }
];

const backOutRight = [
  { offset: 0, transform: 'scale(1)', opacity: '1' },
  { offset: 0.2, transform: 'translateX(0px) scale(0.7)', opacity: '0.7' },
  { offset: 1, transform: 'translateX(2000px) scale(0.7)', opacity: '0.7' }
];

const backOutUp = [
  { offset: 0, transform: 'scale(1)', opacity: '1' },
  { offset: 0.2, transform: 'translateY(0px) scale(0.7)', opacity: '0.7' },
  { offset: 1, transform: 'translateY(-700px) scale(0.7)', opacity: '0.7' }
];

const bounceIn = [
  { offset: 0, opacity: '0', transform: 'scale3d(0.3, 0.3, 0.3)' },
  { offset: 0, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.2, transform: 'scale3d(1.1, 1.1, 1.1)' },
  { offset: 0.2, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.4, transform: 'scale3d(0.9, 0.9, 0.9)' },
  { offset: 0.4, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.6, opacity: '1', transform: 'scale3d(1.03, 1.03, 1.03)' },
  { offset: 0.6, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.8, transform: 'scale3d(0.97, 0.97, 0.97)' },
  { offset: 0.8, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 1, opacity: '1', transform: 'scale3d(1, 1, 1)' },
  { offset: 1, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' }
];

const bounceInDown = [
  { offset: 0, opacity: '0', transform: 'translate3d(0, -3000px, 0) scaleY(3)' },
  { offset: 0, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.6, opacity: '1', transform: 'translate3d(0, 25px, 0) scaleY(0.9)' },
  { offset: 0.6, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.75, transform: 'translate3d(0, -10px, 0) scaleY(0.95)' },
  { offset: 0.75, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.9, transform: 'translate3d(0, 5px, 0) scaleY(0.985)' },
  { offset: 0.9, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' },
  { offset: 1, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' }
];

const bounceInLeft = [
  { offset: 0, opacity: '0', transform: 'translate3d(-3000px, 0, 0) scaleX(3)' },
  { offset: 0, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.6, opacity: '1', transform: 'translate3d(25px, 0, 0) scaleX(1)' },
  { offset: 0.6, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.75, transform: 'translate3d(-10px, 0, 0) scaleX(0.98)' },
  { offset: 0.75, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.9, transform: 'translate3d(5px, 0, 0) scaleX(0.995)' },
  { offset: 0.9, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' },
  { offset: 1, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' }
];

const bounceInRight = [
  { offset: 0, opacity: '0', transform: 'translate3d(3000px, 0, 0) scaleX(3)' },
  { offset: 0, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.6, opacity: '1', transform: 'translate3d(-25px, 0, 0) scaleX(1)' },
  { offset: 0.6, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.75, transform: 'translate3d(10px, 0, 0) scaleX(0.98)' },
  { offset: 0.75, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.9, transform: 'translate3d(-5px, 0, 0) scaleX(0.995)' },
  { offset: 0.9, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' },
  { offset: 1, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' }
];

const bounceInUp = [
  { offset: 0, opacity: '0', transform: 'translate3d(0, 3000px, 0) scaleY(5)' },
  { offset: 0, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.6, opacity: '1', transform: 'translate3d(0, -20px, 0) scaleY(0.9)' },
  { offset: 0.6, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.75, transform: 'translate3d(0, 10px, 0) scaleY(0.95)' },
  { offset: 0.75, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 0.9, transform: 'translate3d(0, -5px, 0) scaleY(0.985)' },
  { offset: 0.9, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' },
  { offset: 1, easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)' }
];

const bounceOut = [
  { offset: 0.2, transform: 'scale3d(0.9, 0.9, 0.9)' },
  { offset: 0.5, opacity: '1', transform: 'scale3d(1.1, 1.1, 1.1)' },
  { offset: 0.55, opacity: '1', transform: 'scale3d(1.1, 1.1, 1.1)' },
  { offset: 1, opacity: '0', transform: 'scale3d(0.3, 0.3, 0.3)' }
];

const bounceOutDown = [
  { offset: 0.2, transform: 'translate3d(0, 10px, 0) scaleY(0.985)' },
  { offset: 0.4, opacity: '1', transform: 'translate3d(0, -20px, 0) scaleY(0.9)' },
  { offset: 0.45, opacity: '1', transform: 'translate3d(0, -20px, 0) scaleY(0.9)' },
  { offset: 1, opacity: '0', transform: 'translate3d(0, 2000px, 0) scaleY(3)' }
];

const bounceOutLeft = [
  { offset: 0.2, opacity: '1', transform: 'translate3d(20px, 0, 0) scaleX(0.9)' },
  { offset: 1, opacity: '0', transform: 'translate3d(-2000px, 0, 0) scaleX(2)' }
];

const bounceOutRight = [
  { offset: 0.2, opacity: '1', transform: 'translate3d(-20px, 0, 0) scaleX(0.9)' },
  { offset: 1, opacity: '0', transform: 'translate3d(2000px, 0, 0) scaleX(2)' }
];

const bounceOutUp = [
  { offset: 0.2, transform: 'translate3d(0, -10px, 0) scaleY(0.985)' },
  { offset: 0.4, opacity: '1', transform: 'translate3d(0, 20px, 0) scaleY(0.9)' },
  { offset: 0.45, opacity: '1', transform: 'translate3d(0, 20px, 0) scaleY(0.9)' },
  { offset: 1, opacity: '0', transform: 'translate3d(0, -2000px, 0) scaleY(3)' }
];

const fadeIn = [
  { offset: 0, opacity: '0' },
  { offset: 1, opacity: '1' }
];

const fadeInBottomLeft = [
  { offset: 0, opacity: '0', transform: 'translate3d(-100%, 100%, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeInBottomRight = [
  { offset: 0, opacity: '0', transform: 'translate3d(100%, 100%, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeInDown = [
  { offset: 0, opacity: '0', transform: 'translate3d(0, -100%, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeInDownBig = [
  { offset: 0, opacity: '0', transform: 'translate3d(0, -2000px, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeInLeft = [
  { offset: 0, opacity: '0', transform: 'translate3d(-100%, 0, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeInLeftBig = [
  { offset: 0, opacity: '0', transform: 'translate3d(-2000px, 0, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeInRight = [
  { offset: 0, opacity: '0', transform: 'translate3d(100%, 0, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeInRightBig = [
  { offset: 0, opacity: '0', transform: 'translate3d(2000px, 0, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeInTopLeft = [
  { offset: 0, opacity: '0', transform: 'translate3d(-100%, -100%, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeInTopRight = [
  { offset: 0, opacity: '0', transform: 'translate3d(100%, -100%, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeInUp = [
  { offset: 0, opacity: '0', transform: 'translate3d(0, 100%, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeInUpBig = [
  { offset: 0, opacity: '0', transform: 'translate3d(0, 2000px, 0)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const fadeOut = [
  { offset: 0, opacity: '1' },
  { offset: 1, opacity: '0' }
];

const fadeOutBottomLeft = [
  { offset: 0, opacity: '1', transform: 'translate3d(0, 0, 0)' },
  { offset: 1, opacity: '0', transform: 'translate3d(-100%, 100%, 0)' }
];

const fadeOutBottomRight = [
  { offset: 0, opacity: '1', transform: 'translate3d(0, 0, 0)' },
  { offset: 1, opacity: '0', transform: 'translate3d(100%, 100%, 0)' }
];

const fadeOutDown = [
  { offset: 0, opacity: '1' },
  { offset: 1, opacity: '0', transform: 'translate3d(0, 100%, 0)' }
];

const fadeOutDownBig = [
  { offset: 0, opacity: '1' },
  { offset: 1, opacity: '0', transform: 'translate3d(0, 2000px, 0)' }
];

const fadeOutLeft = [
  { offset: 0, opacity: '1' },
  { offset: 1, opacity: '0', transform: 'translate3d(-100%, 0, 0)' }
];

const fadeOutLeftBig = [
  { offset: 0, opacity: '1' },
  { offset: 1, opacity: '0', transform: 'translate3d(-2000px, 0, 0)' }
];

const fadeOutRight = [
  { offset: 0, opacity: '1' },
  { offset: 1, opacity: '0', transform: 'translate3d(100%, 0, 0)' }
];

const fadeOutRightBig = [
  { offset: 0, opacity: '1' },
  { offset: 1, opacity: '0', transform: 'translate3d(2000px, 0, 0)' }
];

const fadeOutTopLeft = [
  { offset: 0, opacity: '1', transform: 'translate3d(0, 0, 0)' },
  { offset: 1, opacity: '0', transform: 'translate3d(-100%, -100%, 0)' }
];

const fadeOutTopRight = [
  { offset: 0, opacity: '1', transform: 'translate3d(0, 0, 0)' },
  { offset: 1, opacity: '0', transform: 'translate3d(100%, -100%, 0)' }
];

const fadeOutUp = [
  { offset: 0, opacity: '1' },
  { offset: 1, opacity: '0', transform: 'translate3d(0, -100%, 0)' }
];

const fadeOutUpBig = [
  { offset: 0, opacity: '1' },
  { offset: 1, opacity: '0', transform: 'translate3d(0, -2000px, 0)' }
];

const flip = [
  {
    offset: 0,
    transform: 'perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, -360deg)',
    easing: 'ease-out'
  },
  {
    offset: 0.4,
    transform: 'perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)\n      rotate3d(0, 1, 0, -190deg)',
    easing: 'ease-out'
  },
  {
    offset: 0.5,
    transform: 'perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)\n      rotate3d(0, 1, 0, -170deg)',
    easing: 'ease-in'
  },
  {
    offset: 0.8,
    transform: 'perspective(400px) scale3d(0.95, 0.95, 0.95) translate3d(0, 0, 0)\n      rotate3d(0, 1, 0, 0deg)',
    easing: 'ease-in'
  },
  {
    offset: 1,
    transform: 'perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, 0deg)',
    easing: 'ease-in'
  }
];

const flipInX = [
  { offset: 0, transform: 'perspective(400px) rotate3d(1, 0, 0, 90deg)', easing: 'ease-in', opacity: '0' },
  { offset: 0.4, transform: 'perspective(400px) rotate3d(1, 0, 0, -20deg)', easing: 'ease-in' },
  { offset: 0.6, transform: 'perspective(400px) rotate3d(1, 0, 0, 10deg)', opacity: '1' },
  { offset: 0.8, transform: 'perspective(400px) rotate3d(1, 0, 0, -5deg)' },
  { offset: 1, transform: 'perspective(400px)' }
];

const flipInY = [
  { offset: 0, transform: 'perspective(400px) rotate3d(0, 1, 0, 90deg)', easing: 'ease-in', opacity: '0' },
  { offset: 0.4, transform: 'perspective(400px) rotate3d(0, 1, 0, -20deg)', easing: 'ease-in' },
  { offset: 0.6, transform: 'perspective(400px) rotate3d(0, 1, 0, 10deg)', opacity: '1' },
  { offset: 0.8, transform: 'perspective(400px) rotate3d(0, 1, 0, -5deg)' },
  { offset: 1, transform: 'perspective(400px)' }
];

const flipOutX = [
  { offset: 0, transform: 'perspective(400px)' },
  { offset: 0.3, transform: 'perspective(400px) rotate3d(1, 0, 0, -20deg)', opacity: '1' },
  { offset: 1, transform: 'perspective(400px) rotate3d(1, 0, 0, 90deg)', opacity: '0' }
];

const flipOutY = [
  { offset: 0, transform: 'perspective(400px)' },
  { offset: 0.3, transform: 'perspective(400px) rotate3d(0, 1, 0, -15deg)', opacity: '1' },
  { offset: 1, transform: 'perspective(400px) rotate3d(0, 1, 0, 90deg)', opacity: '0' }
];

const lightSpeedInLeft = [
  { offset: 0, transform: 'translate3d(-100%, 0, 0) skewX(30deg)', opacity: '0' },
  { offset: 0.6, transform: 'skewX(-20deg)', opacity: '1' },
  { offset: 0.8, transform: 'skewX(5deg)' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' }
];

const lightSpeedInRight = [
  { offset: 0, transform: 'translate3d(100%, 0, 0) skewX(-30deg)', opacity: '0' },
  { offset: 0.6, transform: 'skewX(20deg)', opacity: '1' },
  { offset: 0.8, transform: 'skewX(-5deg)' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' }
];

const lightSpeedOutLeft = [
  { offset: 0, opacity: '1' },
  { offset: 1, transform: 'translate3d(-100%, 0, 0) skewX(-30deg)', opacity: '0' }
];

const lightSpeedOutRight = [
  { offset: 0, opacity: '1' },
  { offset: 1, transform: 'translate3d(100%, 0, 0) skewX(30deg)', opacity: '0' }
];

const rotateIn = [
  { offset: 0, transform: 'rotate3d(0, 0, 1, -200deg)', opacity: '0' },
  { offset: 1, transform: 'translate3d(0, 0, 0)', opacity: '1' }
];

const rotateInDownLeft = [
  { offset: 0, transform: 'rotate3d(0, 0, 1, -45deg)', opacity: '0' },
  { offset: 1, transform: 'translate3d(0, 0, 0)', opacity: '1' }
];

const rotateInDownRight = [
  { offset: 0, transform: 'rotate3d(0, 0, 1, 45deg)', opacity: '0' },
  { offset: 1, transform: 'translate3d(0, 0, 0)', opacity: '1' }
];

const rotateInUpLeft = [
  { offset: 0, transform: 'rotate3d(0, 0, 1, 45deg)', opacity: '0' },
  { offset: 1, transform: 'translate3d(0, 0, 0)', opacity: '1' }
];

const rotateInUpRight = [
  { offset: 0, transform: 'rotate3d(0, 0, 1, -90deg)', opacity: '0' },
  { offset: 1, transform: 'translate3d(0, 0, 0)', opacity: '1' }
];

const rotateOut = [
  { offset: 0, opacity: '1' },
  { offset: 1, transform: 'rotate3d(0, 0, 1, 200deg)', opacity: '0' }
];

const rotateOutDownLeft = [
  { offset: 0, opacity: '1' },
  { offset: 1, transform: 'rotate3d(0, 0, 1, 45deg)', opacity: '0' }
];

const rotateOutDownRight = [
  { offset: 0, opacity: '1' },
  { offset: 1, transform: 'rotate3d(0, 0, 1, -45deg)', opacity: '0' }
];

const rotateOutUpLeft = [
  { offset: 0, opacity: '1' },
  { offset: 1, transform: 'rotate3d(0, 0, 1, -45deg)', opacity: '0' }
];

const rotateOutUpRight = [
  { offset: 0, opacity: '1' },
  { offset: 1, transform: 'rotate3d(0, 0, 1, 90deg)', opacity: '0' }
];

const slideInDown = [
  { offset: 0, transform: 'translate3d(0, -100%, 0)', visibility: 'visible' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' }
];

const slideInLeft = [
  { offset: 0, transform: 'translate3d(-100%, 0, 0)', visibility: 'visible' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' }
];

const slideInRight = [
  { offset: 0, transform: 'translate3d(100%, 0, 0)', visibility: 'visible' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' }
];

const slideInUp = [
  { offset: 0, transform: 'translate3d(0, 100%, 0)', visibility: 'visible' },
  { offset: 1, transform: 'translate3d(0, 0, 0)' }
];

const slideOutDown = [
  { offset: 0, transform: 'translate3d(0, 0, 0)' },
  { offset: 1, visibility: 'hidden', transform: 'translate3d(0, 100%, 0)' }
];

const slideOutLeft = [
  { offset: 0, transform: 'translate3d(0, 0, 0)' },
  { offset: 1, visibility: 'hidden', transform: 'translate3d(-100%, 0, 0)' }
];

const slideOutRight = [
  { offset: 0, transform: 'translate3d(0, 0, 0)' },
  { offset: 1, visibility: 'hidden', transform: 'translate3d(100%, 0, 0)' }
];

const slideOutUp = [
  { offset: 0, transform: 'translate3d(0, 0, 0)' },
  { offset: 1, visibility: 'hidden', transform: 'translate3d(0, -100%, 0)' }
];

const hinge = [
  { offset: 0, easing: 'ease-in-out' },
  { offset: 0.2, transform: 'rotate3d(0, 0, 1, 80deg)', easing: 'ease-in-out' },
  { offset: 0.4, transform: 'rotate3d(0, 0, 1, 60deg)', easing: 'ease-in-out', opacity: '1' },
  { offset: 0.6, transform: 'rotate3d(0, 0, 1, 80deg)', easing: 'ease-in-out' },
  { offset: 0.8, transform: 'rotate3d(0, 0, 1, 60deg)', easing: 'ease-in-out', opacity: '1' },
  { offset: 1, transform: 'translate3d(0, 700px, 0)', opacity: '0' }
];

const jackInTheBox = [
  { offset: 0, opacity: '0', transform: 'scale(0.1) rotate(30deg)', 'transform-origin': 'center bottom' },
  { offset: 0.5, transform: 'rotate(-10deg)' },
  { offset: 0.7, transform: 'rotate(3deg)' },
  { offset: 1, opacity: '1', transform: 'scale(1)' }
];

const rollIn = [
  { offset: 0, opacity: '0', transform: 'translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg)' },
  { offset: 1, opacity: '1', transform: 'translate3d(0, 0, 0)' }
];

const rollOut = [
  { offset: 0, opacity: '1' },
  { offset: 1, opacity: '0', transform: 'translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg)' }
];

const zoomIn = [
  { offset: 0, opacity: '0', transform: 'scale3d(0.3, 0.3, 0.3)' },
  { offset: 0.5, opacity: '1' }
];

const zoomInDown = [
  {
    offset: 0,
    opacity: '0',
    transform: 'scale3d(0.1, 0.1, 0.1) translate3d(0, -1000px, 0)',
    easing: 'cubic-bezier(0.55, 0.055, 0.675, 0.19)'
  },
  {
    offset: 0.6,
    opacity: '1',
    transform: 'scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0)',
    easing: 'cubic-bezier(0.175, 0.885, 0.32, 1)'
  }
];

const zoomInLeft = [
  {
    offset: 0,
    opacity: '0',
    transform: 'scale3d(0.1, 0.1, 0.1) translate3d(-1000px, 0, 0)',
    easing: 'cubic-bezier(0.55, 0.055, 0.675, 0.19)'
  },
  {
    offset: 0.6,
    opacity: '1',
    transform: 'scale3d(0.475, 0.475, 0.475) translate3d(10px, 0, 0)',
    easing: 'cubic-bezier(0.175, 0.885, 0.32, 1)'
  }
];

const zoomInRight = [
  {
    offset: 0,
    opacity: '0',
    transform: 'scale3d(0.1, 0.1, 0.1) translate3d(1000px, 0, 0)',
    easing: 'cubic-bezier(0.55, 0.055, 0.675, 0.19)'
  },
  {
    offset: 0.6,
    opacity: '1',
    transform: 'scale3d(0.475, 0.475, 0.475) translate3d(-10px, 0, 0)',
    easing: 'cubic-bezier(0.175, 0.885, 0.32, 1)'
  }
];

const zoomInUp = [
  {
    offset: 0,
    opacity: '0',
    transform: 'scale3d(0.1, 0.1, 0.1) translate3d(0, 1000px, 0)',
    easing: 'cubic-bezier(0.55, 0.055, 0.675, 0.19)'
  },
  {
    offset: 0.6,
    opacity: '1',
    transform: 'scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0)',
    easing: 'cubic-bezier(0.175, 0.885, 0.32, 1)'
  }
];

const zoomOut = [
  { offset: 0, opacity: '1' },
  { offset: 0.5, opacity: '0', transform: 'scale3d(0.3, 0.3, 0.3)' },
  { offset: 1, opacity: '0' }
];

const zoomOutDown = [
  {
    offset: 0.4,
    opacity: '1',
    transform: 'scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0)',
    easing: 'cubic-bezier(0.55, 0.055, 0.675, 0.19)'
  },
  {
    offset: 1,
    opacity: '0',
    transform: 'scale3d(0.1, 0.1, 0.1) translate3d(0, 2000px, 0)',
    easing: 'cubic-bezier(0.175, 0.885, 0.32, 1)'
  }
];

const zoomOutLeft = [
  { offset: 0.4, opacity: '1', transform: 'scale3d(0.475, 0.475, 0.475) translate3d(42px, 0, 0)' },
  { offset: 1, opacity: '0', transform: 'scale(0.1) translate3d(-2000px, 0, 0)' }
];

const zoomOutRight = [
  { offset: 0.4, opacity: '1', transform: 'scale3d(0.475, 0.475, 0.475) translate3d(-42px, 0, 0)' },
  { offset: 1, opacity: '0', transform: 'scale(0.1) translate3d(2000px, 0, 0)' }
];

const zoomOutUp = [
  {
    offset: 0.4,
    opacity: '1',
    transform: 'scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0)',
    easing: 'cubic-bezier(0.55, 0.055, 0.675, 0.19)'
  },
  {
    offset: 1,
    opacity: '0',
    transform: 'scale3d(0.1, 0.1, 0.1) translate3d(0, -2000px, 0)',
    easing: 'cubic-bezier(0.175, 0.885, 0.32, 1)'
  }
];

const easings = {
  linear: 'linear',
  ease: 'ease',
  easeIn: 'ease-in',
  easeOut: 'ease-out',
  easeInOut: 'ease-in-out',
  easeInSine: 'cubic-bezier(0.47, 0, 0.745, 0.715)',
  easeOutSine: 'cubic-bezier(0.39, 0.575, 0.565, 1)',
  easeInOutSine: 'cubic-bezier(0.445, 0.05, 0.55, 0.95)',
  easeInQuad: 'cubic-bezier(0.55, 0.085, 0.68, 0.53)',
  easeOutQuad: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
  easeInOutQuad: 'cubic-bezier(0.455, 0.03, 0.515, 0.955)',
  easeInCubic: 'cubic-bezier(0.55, 0.055, 0.675, 0.19)',
  easeOutCubic: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
  easeInOutCubic: 'cubic-bezier(0.645, 0.045, 0.355, 1)',
  easeInQuart: 'cubic-bezier(0.895, 0.03, 0.685, 0.22)',
  easeOutQuart: 'cubic-bezier(0.165, 0.84, 0.44, 1)',
  easeInOutQuart: 'cubic-bezier(0.77, 0, 0.175, 1)',
  easeInQuint: 'cubic-bezier(0.755, 0.05, 0.855, 0.06)',
  easeOutQuint: 'cubic-bezier(0.23, 1, 0.32, 1)',
  easeInOutQuint: 'cubic-bezier(0.86, 0, 0.07, 1)',
  easeInExpo: 'cubic-bezier(0.95, 0.05, 0.795, 0.035)',
  easeOutExpo: 'cubic-bezier(0.19, 1, 0.22, 1)',
  easeInOutExpo: 'cubic-bezier(1, 0, 0, 1)',
  easeInCirc: 'cubic-bezier(0.6, 0.04, 0.98, 0.335)',
  easeOutCirc: 'cubic-bezier(0.075, 0.82, 0.165, 1)',
  easeInOutCirc: 'cubic-bezier(0.785, 0.135, 0.15, 0.86)',
  easeInBack: 'cubic-bezier(0.6, -0.28, 0.735, 0.045)',
  easeOutBack: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
  easeInOutBack: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)'
};

const animations = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	backInDown,
	backInLeft,
	backInRight,
	backInUp,
	backOutDown,
	backOutLeft,
	backOutRight,
	backOutUp,
	bounce,
	bounceIn,
	bounceInDown,
	bounceInLeft,
	bounceInRight,
	bounceInUp,
	bounceOut,
	bounceOutDown,
	bounceOutLeft,
	bounceOutRight,
	bounceOutUp,
	easings,
	fadeIn,
	fadeInBottomLeft,
	fadeInBottomRight,
	fadeInDown,
	fadeInDownBig,
	fadeInLeft,
	fadeInLeftBig,
	fadeInRight,
	fadeInRightBig,
	fadeInTopLeft,
	fadeInTopRight,
	fadeInUp,
	fadeInUpBig,
	fadeOut,
	fadeOutBottomLeft,
	fadeOutBottomRight,
	fadeOutDown,
	fadeOutDownBig,
	fadeOutLeft,
	fadeOutLeftBig,
	fadeOutRight,
	fadeOutRightBig,
	fadeOutTopLeft,
	fadeOutTopRight,
	fadeOutUp,
	fadeOutUpBig,
	flash,
	flip,
	flipInX,
	flipInY,
	flipOutX,
	flipOutY,
	headShake,
	heartBeat,
	hinge,
	jackInTheBox,
	jello,
	lightSpeedInLeft,
	lightSpeedInRight,
	lightSpeedOutLeft,
	lightSpeedOutRight,
	pulse,
	rollIn,
	rollOut,
	rotateIn,
	rotateInDownLeft,
	rotateInDownRight,
	rotateInUpLeft,
	rotateInUpRight,
	rotateOut,
	rotateOutDownLeft,
	rotateOutDownRight,
	rotateOutUpLeft,
	rotateOutUpRight,
	rubberBand,
	shake,
	shakeX,
	shakeY,
	slideInDown,
	slideInLeft,
	slideInRight,
	slideInUp,
	slideOutDown,
	slideOutLeft,
	slideOutRight,
	slideOutUp,
	swing,
	tada,
	wobble,
	zoomIn,
	zoomInDown,
	zoomInLeft,
	zoomInRight,
	zoomInUp,
	zoomOut,
	zoomOutDown,
	zoomOutLeft,
	zoomOutRight,
	zoomOutUp
}, Symbol.toStringTag, { value: 'Module' }));

// src/components/animation/animation.styles.ts
var animation_styles_default = i$7`
  :host {
    display: contents;
  }
`;

var SlAnimation = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasStarted = false;
    this.name = "none";
    this.play = false;
    this.delay = 0;
    this.direction = "normal";
    this.duration = 1e3;
    this.easing = "linear";
    this.endDelay = 0;
    this.fill = "auto";
    this.iterations = Infinity;
    this.iterationStart = 0;
    this.playbackRate = 1;
    this.handleAnimationFinish = () => {
      this.play = false;
      this.hasStarted = false;
      this.emit("sl-finish");
    };
    this.handleAnimationCancel = () => {
      this.play = false;
      this.hasStarted = false;
      this.emit("sl-cancel");
    };
  }
  /** Gets and sets the current animation time. */
  get currentTime() {
    var _a, _b;
    return (_b = (_a = this.animation) == null ? void 0 : _a.currentTime) != null ? _b : 0;
  }
  set currentTime(time) {
    if (this.animation) {
      this.animation.currentTime = time;
    }
  }
  connectedCallback() {
    super.connectedCallback();
    this.createAnimation();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.destroyAnimation();
  }
  handleSlotChange() {
    this.destroyAnimation();
    this.createAnimation();
  }
  async createAnimation() {
    var _a, _b;
    const easing = (_a = easings[this.easing]) != null ? _a : this.easing;
    const keyframes = (_b = this.keyframes) != null ? _b : animations[this.name];
    const slot = await this.defaultSlot;
    const element = slot.assignedElements()[0];
    if (!element || !keyframes) {
      return false;
    }
    this.destroyAnimation();
    this.animation = element.animate(keyframes, {
      delay: this.delay,
      direction: this.direction,
      duration: this.duration,
      easing,
      endDelay: this.endDelay,
      fill: this.fill,
      iterationStart: this.iterationStart,
      iterations: this.iterations
    });
    this.animation.playbackRate = this.playbackRate;
    this.animation.addEventListener("cancel", this.handleAnimationCancel);
    this.animation.addEventListener("finish", this.handleAnimationFinish);
    if (this.play) {
      this.hasStarted = true;
      this.emit("sl-start");
    } else {
      this.animation.pause();
    }
    return true;
  }
  destroyAnimation() {
    if (this.animation) {
      this.animation.cancel();
      this.animation.removeEventListener("cancel", this.handleAnimationCancel);
      this.animation.removeEventListener("finish", this.handleAnimationFinish);
      this.hasStarted = false;
    }
  }
  handleAnimationChange() {
    if (!this.hasUpdated) {
      return;
    }
    this.createAnimation();
  }
  handlePlayChange() {
    if (this.animation) {
      if (this.play && !this.hasStarted) {
        this.hasStarted = true;
        this.emit("sl-start");
      }
      if (this.play) {
        this.animation.play();
      } else {
        this.animation.pause();
      }
      return true;
    }
    return false;
  }
  handlePlaybackRateChange() {
    if (this.animation) {
      this.animation.playbackRate = this.playbackRate;
    }
  }
  /** Clears all keyframe effects caused by this animation and aborts its playback. */
  cancel() {
    var _a;
    (_a = this.animation) == null ? void 0 : _a.cancel();
  }
  /** Sets the playback time to the end of the animation corresponding to the current playback direction. */
  finish() {
    var _a;
    (_a = this.animation) == null ? void 0 : _a.finish();
  }
  render() {
    return x` <slot @slotchange=${this.handleSlotChange}></slot> `;
  }
};
SlAnimation.styles = [component_styles_default, animation_styles_default];
__decorateClass([
  r$2("slot")
], SlAnimation.prototype, "defaultSlot", 2);
__decorateClass([
  n$6()
], SlAnimation.prototype, "name", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlAnimation.prototype, "play", 2);
__decorateClass([
  n$6({ type: Number })
], SlAnimation.prototype, "delay", 2);
__decorateClass([
  n$6()
], SlAnimation.prototype, "direction", 2);
__decorateClass([
  n$6({ type: Number })
], SlAnimation.prototype, "duration", 2);
__decorateClass([
  n$6()
], SlAnimation.prototype, "easing", 2);
__decorateClass([
  n$6({ attribute: "end-delay", type: Number })
], SlAnimation.prototype, "endDelay", 2);
__decorateClass([
  n$6()
], SlAnimation.prototype, "fill", 2);
__decorateClass([
  n$6({ type: Number })
], SlAnimation.prototype, "iterations", 2);
__decorateClass([
  n$6({ attribute: "iteration-start", type: Number })
], SlAnimation.prototype, "iterationStart", 2);
__decorateClass([
  n$6({ attribute: false })
], SlAnimation.prototype, "keyframes", 2);
__decorateClass([
  n$6({ attribute: "playback-rate", type: Number })
], SlAnimation.prototype, "playbackRate", 2);
__decorateClass([
  watch([
    "name",
    "delay",
    "direction",
    "duration",
    "easing",
    "endDelay",
    "fill",
    "iterations",
    "iterationsStart",
    "keyframes"
  ])
], SlAnimation.prototype, "handleAnimationChange", 1);
__decorateClass([
  watch("play")
], SlAnimation.prototype, "handlePlayChange", 1);
__decorateClass([
  watch("playbackRate")
], SlAnimation.prototype, "handlePlaybackRateChange", 1);

var tagName$7 = "sl-animation";
SlAnimation.define("sl-animation");
o$8({
  tagName: tagName$7,
  elementClass: SlAnimation,
  react: React$1,
  events: {
    onSlCancel: "sl-cancel",
    onSlFinish: "sl-finish",
    onSlStart: "sl-start"
  },
  displayName: "SlAnimation"
});

// src/components/avatar/avatar.styles.ts
var avatar_styles_default = i$7`
  :host {
    display: inline-block;

    --size: 3rem;
  }

  .avatar {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
    width: var(--size);
    height: var(--size);
    background-color: var(--sl-color-neutral-400);
    font-family: var(--sl-font-sans);
    font-size: calc(var(--size) * 0.5);
    font-weight: var(--sl-font-weight-normal);
    color: var(--sl-color-neutral-0);
    user-select: none;
    -webkit-user-select: none;
    vertical-align: middle;
  }

  .avatar--circle,
  .avatar--circle .avatar__image {
    border-radius: var(--sl-border-radius-circle);
  }

  .avatar--rounded,
  .avatar--rounded .avatar__image {
    border-radius: var(--sl-border-radius-medium);
  }

  .avatar--square {
    border-radius: 0;
  }

  .avatar__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .avatar__initials {
    line-height: 1;
    text-transform: uppercase;
  }

  .avatar__image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    overflow: hidden;
  }
`;

var SlAvatar = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasError = false;
    this.image = "";
    this.label = "";
    this.initials = "";
    this.loading = "eager";
    this.shape = "circle";
  }
  handleImageChange() {
    this.hasError = false;
  }
  handleImageLoadError() {
    this.hasError = true;
    this.emit("sl-error");
  }
  render() {
    const avatarWithImage = x`
      <img
        part="image"
        class="avatar__image"
        src="${this.image}"
        loading="${this.loading}"
        alt=""
        @error="${this.handleImageLoadError}"
      />
    `;
    let avatarWithoutImage = x``;
    if (this.initials) {
      avatarWithoutImage = x`<div part="initials" class="avatar__initials">${this.initials}</div>`;
    } else {
      avatarWithoutImage = x`
        <div part="icon" class="avatar__icon" aria-hidden="true">
          <slot name="icon">
            <sl-icon name="person-fill" library="system"></sl-icon>
          </slot>
        </div>
      `;
    }
    return x`
      <div
        part="base"
        class=${e$3({
      avatar: true,
      "avatar--circle": this.shape === "circle",
      "avatar--rounded": this.shape === "rounded",
      "avatar--square": this.shape === "square"
    })}
        role="img"
        aria-label=${this.label}
      >
        ${this.image && !this.hasError ? avatarWithImage : avatarWithoutImage}
      </div>
    `;
  }
};
SlAvatar.styles = [component_styles_default, avatar_styles_default];
SlAvatar.dependencies = {
  "sl-icon": SlIcon
};
__decorateClass([
  r$3()
], SlAvatar.prototype, "hasError", 2);
__decorateClass([
  n$6()
], SlAvatar.prototype, "image", 2);
__decorateClass([
  n$6()
], SlAvatar.prototype, "label", 2);
__decorateClass([
  n$6()
], SlAvatar.prototype, "initials", 2);
__decorateClass([
  n$6()
], SlAvatar.prototype, "loading", 2);
__decorateClass([
  n$6({ reflect: true })
], SlAvatar.prototype, "shape", 2);
__decorateClass([
  watch("image")
], SlAvatar.prototype, "handleImageChange", 1);

var tagName$6 = "sl-avatar";
SlAvatar.define("sl-avatar");
o$8({
  tagName: tagName$6,
  elementClass: SlAvatar,
  react: React$1,
  events: {
    onSlError: "sl-error"
  },
  displayName: "SlAvatar"
});

// src/components/breadcrumb/breadcrumb.styles.ts
var breadcrumb_styles_default = i$7`
  .breadcrumb {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
  }
`;

var SlBreadcrumb = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.separatorDir = this.localize.dir();
    this.label = "";
  }
  // Generates a clone of the separator element to use for each breadcrumb item
  getSeparator() {
    const separator = this.separatorSlot.assignedElements({ flatten: true })[0];
    const clone = separator.cloneNode(true);
    [clone, ...clone.querySelectorAll("[id]")].forEach((el) => el.removeAttribute("id"));
    clone.setAttribute("data-default", "");
    clone.slot = "separator";
    return clone;
  }
  handleSlotChange() {
    const items = [...this.defaultSlot.assignedElements({ flatten: true })].filter(
      (item) => item.tagName.toLowerCase() === "sl-breadcrumb-item"
    );
    items.forEach((item, index) => {
      const separator = item.querySelector('[slot="separator"]');
      if (separator === null) {
        item.append(this.getSeparator());
      } else if (separator.hasAttribute("data-default")) {
        separator.replaceWith(this.getSeparator());
      } else ;
      if (index === items.length - 1) {
        item.setAttribute("aria-current", "page");
      } else {
        item.removeAttribute("aria-current");
      }
    });
  }
  render() {
    if (this.separatorDir !== this.localize.dir()) {
      this.separatorDir = this.localize.dir();
      this.updateComplete.then(() => this.handleSlotChange());
    }
    return x`
      <nav part="base" class="breadcrumb" aria-label=${this.label}>
        <slot @slotchange=${this.handleSlotChange}></slot>
      </nav>

      <span hidden aria-hidden="true">
        <slot name="separator">
          <sl-icon name=${this.localize.dir() === "rtl" ? "chevron-left" : "chevron-right"} library="system"></sl-icon>
        </slot>
      </span>
    `;
  }
};
SlBreadcrumb.styles = [component_styles_default, breadcrumb_styles_default];
SlBreadcrumb.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e$7("slot")
], SlBreadcrumb.prototype, "defaultSlot", 2);
__decorateClass([
  e$7('slot[name="separator"]')
], SlBreadcrumb.prototype, "separatorSlot", 2);
__decorateClass([
  n$6()
], SlBreadcrumb.prototype, "label", 2);

var tagName$5 = "sl-breadcrumb";
SlBreadcrumb.define("sl-breadcrumb");
o$8({
  tagName: tagName$5,
  elementClass: SlBreadcrumb,
  react: React$1,
  events: {},
  displayName: "SlBreadcrumb"
});

var tagName$4 = "sl-button";
SlButton.define("sl-button");
var reactWrapper$2 = o$8({
  tagName: tagName$4,
  elementClass: SlButton,
  react: React$1,
  events: {
    onSlBlur: "sl-blur",
    onSlFocus: "sl-focus",
    onSlInvalid: "sl-invalid"
  },
  displayName: "SlButton"
});
var button_default = reactWrapper$2;

// src/components/breadcrumb-item/breadcrumb-item.styles.ts
var breadcrumb_item_styles_default = i$7`
  :host {
    display: inline-flex;
  }

  .breadcrumb-item {
    display: inline-flex;
    align-items: center;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    color: var(--sl-color-neutral-600);
    line-height: var(--sl-line-height-normal);
    white-space: nowrap;
  }

  .breadcrumb-item__label {
    display: inline-block;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
    text-decoration: none;
    color: inherit;
    background: none;
    border: none;
    border-radius: var(--sl-border-radius-medium);
    padding: 0;
    margin: 0;
    cursor: pointer;
    transition: var(--sl-transition-fast) --color;
  }

  :host(:not(:last-of-type)) .breadcrumb-item__label {
    color: var(--sl-color-primary-600);
  }

  :host(:not(:last-of-type)) .breadcrumb-item__label:hover {
    color: var(--sl-color-primary-500);
  }

  :host(:not(:last-of-type)) .breadcrumb-item__label:active {
    color: var(--sl-color-primary-600);
  }

  .breadcrumb-item__label:focus {
    outline: none;
  }

  .breadcrumb-item__label:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .breadcrumb-item__prefix,
  .breadcrumb-item__suffix {
    display: none;
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .breadcrumb-item--has-prefix .breadcrumb-item__prefix {
    display: inline-flex;
    margin-inline-end: var(--sl-spacing-x-small);
  }

  .breadcrumb-item--has-suffix .breadcrumb-item__suffix {
    display: inline-flex;
    margin-inline-start: var(--sl-spacing-x-small);
  }

  :host(:last-of-type) .breadcrumb-item__separator {
    display: none;
  }

  .breadcrumb-item__separator {
    display: inline-flex;
    align-items: center;
    margin: 0 var(--sl-spacing-x-small);
    user-select: none;
    -webkit-user-select: none;
  }
`;

var SlBreadcrumbItem = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "prefix", "suffix");
    this.renderType = "button";
    this.rel = "noreferrer noopener";
  }
  setRenderType() {
    const hasDropdown = this.defaultSlot.assignedElements({ flatten: true }).filter((i) => i.tagName.toLowerCase() === "sl-dropdown").length > 0;
    if (this.href) {
      this.renderType = "link";
      return;
    }
    if (hasDropdown) {
      this.renderType = "dropdown";
      return;
    }
    this.renderType = "button";
  }
  hrefChanged() {
    this.setRenderType();
  }
  handleSlotChange() {
    this.setRenderType();
  }
  render() {
    return x`
      <div
        part="base"
        class=${e$3({
      "breadcrumb-item": true,
      "breadcrumb-item--has-prefix": this.hasSlotController.test("prefix"),
      "breadcrumb-item--has-suffix": this.hasSlotController.test("suffix")
    })}
      >
        <span part="prefix" class="breadcrumb-item__prefix">
          <slot name="prefix"></slot>
        </span>

        ${this.renderType === "link" ? x`
              <a
                part="label"
                class="breadcrumb-item__label breadcrumb-item__label--link"
                href="${this.href}"
                target="${o$6(this.target ? this.target : void 0)}"
                rel=${o$6(this.target ? this.rel : void 0)}
              >
                <slot @slotchange=${this.handleSlotChange}></slot>
              </a>
            ` : ""}
        ${this.renderType === "button" ? x`
              <button part="label" type="button" class="breadcrumb-item__label breadcrumb-item__label--button">
                <slot @slotchange=${this.handleSlotChange}></slot>
              </button>
            ` : ""}
        ${this.renderType === "dropdown" ? x`
              <div part="label" class="breadcrumb-item__label breadcrumb-item__label--drop-down">
                <slot @slotchange=${this.handleSlotChange}></slot>
              </div>
            ` : ""}

        <span part="suffix" class="breadcrumb-item__suffix">
          <slot name="suffix"></slot>
        </span>

        <span part="separator" class="breadcrumb-item__separator" aria-hidden="true">
          <slot name="separator"></slot>
        </span>
      </div>
    `;
  }
};
SlBreadcrumbItem.styles = [component_styles_default, breadcrumb_item_styles_default];
__decorateClass([
  e$7("slot:not([name])")
], SlBreadcrumbItem.prototype, "defaultSlot", 2);
__decorateClass([
  r$3()
], SlBreadcrumbItem.prototype, "renderType", 2);
__decorateClass([
  n$6()
], SlBreadcrumbItem.prototype, "href", 2);
__decorateClass([
  n$6()
], SlBreadcrumbItem.prototype, "target", 2);
__decorateClass([
  n$6()
], SlBreadcrumbItem.prototype, "rel", 2);
__decorateClass([
  watch("href", { waitUntilFirstUpdate: true })
], SlBreadcrumbItem.prototype, "hrefChanged", 1);

var tagName$3 = "sl-breadcrumb-item";
SlBreadcrumbItem.define("sl-breadcrumb-item");
o$8({
  tagName: tagName$3,
  elementClass: SlBreadcrumbItem,
  react: React$1,
  events: {},
  displayName: "SlBreadcrumbItem"
});

// src/components/badge/badge.styles.ts
var badge_styles_default = i$7`
  :host {
    display: inline-flex;
  }

  .badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: max(12px, 0.75em);
    font-weight: var(--sl-font-weight-semibold);
    letter-spacing: var(--sl-letter-spacing-normal);
    line-height: 1;
    border-radius: var(--sl-border-radius-small);
    border: solid 1px var(--sl-color-neutral-0);
    white-space: nowrap;
    padding: 0.35em 0.6em;
    user-select: none;
    -webkit-user-select: none;
    cursor: inherit;
  }

  /* Variant modifiers */
  .badge--primary {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--success {
    background-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--neutral {
    background-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--warning {
    background-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--danger {
    background-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  /* Pill modifier */
  .badge--pill {
    border-radius: var(--sl-border-radius-pill);
  }

  /* Pulse modifier */
  .badge--pulse {
    animation: pulse 1.5s infinite;
  }

  .badge--pulse.badge--primary {
    --pulse-color: var(--sl-color-primary-600);
  }

  .badge--pulse.badge--success {
    --pulse-color: var(--sl-color-success-600);
  }

  .badge--pulse.badge--neutral {
    --pulse-color: var(--sl-color-neutral-600);
  }

  .badge--pulse.badge--warning {
    --pulse-color: var(--sl-color-warning-600);
  }

  .badge--pulse.badge--danger {
    --pulse-color: var(--sl-color-danger-600);
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 var(--pulse-color);
    }
    70% {
      box-shadow: 0 0 0 0.5rem transparent;
    }
    100% {
      box-shadow: 0 0 0 0 transparent;
    }
  }
`;

var SlBadge = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.variant = "primary";
    this.pill = false;
    this.pulse = false;
  }
  render() {
    return x`
      <span
        part="base"
        class=${e$3({
      badge: true,
      "badge--primary": this.variant === "primary",
      "badge--success": this.variant === "success",
      "badge--neutral": this.variant === "neutral",
      "badge--warning": this.variant === "warning",
      "badge--danger": this.variant === "danger",
      "badge--pill": this.pill,
      "badge--pulse": this.pulse
    })}
        role="status"
      >
        <slot></slot>
      </span>
    `;
  }
};
SlBadge.styles = [component_styles_default, badge_styles_default];
__decorateClass([
  n$6({ reflect: true })
], SlBadge.prototype, "variant", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlBadge.prototype, "pill", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], SlBadge.prototype, "pulse", 2);

var tagName$2 = "sl-badge";
SlBadge.define("sl-badge");
var reactWrapper$1 = o$8({
  tagName: tagName$2,
  elementClass: SlBadge,
  react: React$1,
  events: {},
  displayName: "SlBadge"
});
var badge_default = reactWrapper$1;

// src/components/card/card.styles.ts
var card_styles_default = i$7`
  :host {
    --border-color: var(--sl-color-neutral-200);
    --border-radius: var(--sl-border-radius-medium);
    --border-width: 1px;
    --padding: var(--sl-spacing-large);

    display: inline-block;
  }

  .card {
    display: flex;
    flex-direction: column;
    background-color: var(--sl-panel-background-color);
    box-shadow: var(--sl-shadow-x-small);
    border: solid var(--border-width) var(--border-color);
    border-radius: var(--border-radius);
  }

  .card__image {
    display: flex;
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
    margin: calc(-1 * var(--border-width));
    overflow: hidden;
  }

  .card__image::slotted(img) {
    display: block;
    width: 100%;
  }

  .card:not(.card--has-image) .card__image {
    display: none;
  }

  .card__header {
    display: block;
    border-bottom: solid var(--border-width) var(--border-color);
    padding: calc(var(--padding) / 2) var(--padding);
  }

  .card:not(.card--has-header) .card__header {
    display: none;
  }

  .card:not(.card--has-image) .card__header {
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
  }

  .card__body {
    display: block;
    padding: var(--padding);
  }

  .card--has-footer .card__footer {
    display: block;
    border-top: solid var(--border-width) var(--border-color);
    padding: var(--padding);
  }

  .card:not(.card--has-footer) .card__footer {
    display: none;
  }
`;

var SlCard = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "footer", "header", "image");
  }
  render() {
    return x`
      <div
        part="base"
        class=${e$3({
      card: true,
      "card--has-footer": this.hasSlotController.test("footer"),
      "card--has-image": this.hasSlotController.test("image"),
      "card--has-header": this.hasSlotController.test("header")
    })}
      >
        <slot name="image" part="image" class="card__image"></slot>
        <slot name="header" part="header" class="card__header"></slot>
        <slot part="body" class="card__body"></slot>
        <slot name="footer" part="footer" class="card__footer"></slot>
      </div>
    `;
  }
};
SlCard.styles = [component_styles_default, card_styles_default];

var tagName$1 = "sl-card";
SlCard.define("sl-card");
var reactWrapper = o$8({
  tagName: tagName$1,
  elementClass: SlCard,
  react: React$1,
  events: {},
  displayName: "SlCard"
});
var card_default = reactWrapper;

// src/components/alert/alert.styles.ts
var alert_styles_default = i$7`
  :host {
    display: contents;

    /* For better DX, we'll reset the margin here so the base part can inherit it */
    margin: 0;
  }

  .alert {
    position: relative;
    display: flex;
    align-items: stretch;
    background-color: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-top-width: calc(var(--sl-panel-border-width) * 3);
    border-radius: var(--sl-border-radius-medium);
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-normal);
    line-height: 1.6;
    color: var(--sl-color-neutral-700);
    margin: inherit;
    overflow: hidden;
  }

  .alert:not(.alert--has-icon) .alert__icon,
  .alert:not(.alert--closable) .alert__close-button {
    display: none;
  }

  .alert__icon {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-large);
    padding-inline-start: var(--sl-spacing-large);
  }

  .alert--has-countdown {
    border-bottom: none;
  }

  .alert--primary {
    border-top-color: var(--sl-color-primary-600);
  }

  .alert--primary .alert__icon {
    color: var(--sl-color-primary-600);
  }

  .alert--success {
    border-top-color: var(--sl-color-success-600);
  }

  .alert--success .alert__icon {
    color: var(--sl-color-success-600);
  }

  .alert--neutral {
    border-top-color: var(--sl-color-neutral-600);
  }

  .alert--neutral .alert__icon {
    color: var(--sl-color-neutral-600);
  }

  .alert--warning {
    border-top-color: var(--sl-color-warning-600);
  }

  .alert--warning .alert__icon {
    color: var(--sl-color-warning-600);
  }

  .alert--danger {
    border-top-color: var(--sl-color-danger-600);
  }

  .alert--danger .alert__icon {
    color: var(--sl-color-danger-600);
  }

  .alert__message {
    flex: 1 1 auto;
    display: block;
    padding: var(--sl-spacing-large);
    overflow: hidden;
  }

  .alert__close-button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-medium);
    margin-inline-end: var(--sl-spacing-medium);
    align-self: center;
  }

  .alert__countdown {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: calc(var(--sl-panel-border-width) * 3);
    background-color: var(--sl-panel-border-color);
    display: flex;
  }

  .alert__countdown--ltr {
    justify-content: flex-end;
  }

  .alert__countdown .alert__countdown-elapsed {
    height: 100%;
    width: 0;
  }

  .alert--primary .alert__countdown-elapsed {
    background-color: var(--sl-color-primary-600);
  }

  .alert--success .alert__countdown-elapsed {
    background-color: var(--sl-color-success-600);
  }

  .alert--neutral .alert__countdown-elapsed {
    background-color: var(--sl-color-neutral-600);
  }

  .alert--warning .alert__countdown-elapsed {
    background-color: var(--sl-color-warning-600);
  }

  .alert--danger .alert__countdown-elapsed {
    background-color: var(--sl-color-danger-600);
  }

  .alert__timer {
    display: none;
  }
`;

var _SlAlert = class _SlAlert extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "icon", "suffix");
    this.localize = new LocalizeController(this);
    this.open = false;
    this.closable = false;
    this.variant = "primary";
    this.duration = Infinity;
    this.remainingTime = this.duration;
  }
  static get toastStack() {
    if (!this.currentToastStack) {
      this.currentToastStack = Object.assign(document.createElement("div"), {
        className: "sl-toast-stack"
      });
    }
    return this.currentToastStack;
  }
  firstUpdated() {
    this.base.hidden = !this.open;
  }
  restartAutoHide() {
    this.handleCountdownChange();
    clearTimeout(this.autoHideTimeout);
    clearInterval(this.remainingTimeInterval);
    if (this.open && this.duration < Infinity) {
      this.autoHideTimeout = window.setTimeout(() => this.hide(), this.duration);
      this.remainingTime = this.duration;
      this.remainingTimeInterval = window.setInterval(() => {
        this.remainingTime -= 100;
      }, 100);
    }
  }
  pauseAutoHide() {
    var _a;
    (_a = this.countdownAnimation) == null ? void 0 : _a.pause();
    clearTimeout(this.autoHideTimeout);
    clearInterval(this.remainingTimeInterval);
  }
  resumeAutoHide() {
    var _a;
    if (this.duration < Infinity) {
      this.autoHideTimeout = window.setTimeout(() => this.hide(), this.remainingTime);
      this.remainingTimeInterval = window.setInterval(() => {
        this.remainingTime -= 100;
      }, 100);
      (_a = this.countdownAnimation) == null ? void 0 : _a.play();
    }
  }
  handleCountdownChange() {
    if (this.open && this.duration < Infinity && this.countdown) {
      const { countdownElement } = this;
      const start = "100%";
      const end = "0";
      this.countdownAnimation = countdownElement.animate([{ width: start }, { width: end }], {
        duration: this.duration,
        easing: "linear"
      });
    }
  }
  handleCloseClick() {
    this.hide();
  }
  async handleOpenChange() {
    if (this.open) {
      this.emit("sl-show");
      if (this.duration < Infinity) {
        this.restartAutoHide();
      }
      await stopAnimations(this.base);
      this.base.hidden = false;
      const { keyframes, options } = getAnimation(this, "alert.show", { dir: this.localize.dir() });
      await animateTo(this.base, keyframes, options);
      this.emit("sl-after-show");
    } else {
      blurActiveElement(this);
      this.emit("sl-hide");
      clearTimeout(this.autoHideTimeout);
      clearInterval(this.remainingTimeInterval);
      await stopAnimations(this.base);
      const { keyframes, options } = getAnimation(this, "alert.hide", { dir: this.localize.dir() });
      await animateTo(this.base, keyframes, options);
      this.base.hidden = true;
      this.emit("sl-after-hide");
    }
  }
  handleDurationChange() {
    this.restartAutoHide();
  }
  /** Shows the alert. */
  async show() {
    if (this.open) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the alert */
  async hide() {
    if (!this.open) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  /**
   * Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when
   * dismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by
   * calling this method again. The returned promise will resolve after the alert is hidden.
   */
  async toast() {
    return new Promise((resolve) => {
      this.handleCountdownChange();
      if (_SlAlert.toastStack.parentElement === null) {
        document.body.append(_SlAlert.toastStack);
      }
      _SlAlert.toastStack.appendChild(this);
      requestAnimationFrame(() => {
        this.show();
      });
      this.addEventListener(
        "sl-after-hide",
        () => {
          _SlAlert.toastStack.removeChild(this);
          resolve();
          if (_SlAlert.toastStack.querySelector("sl-alert") === null) {
            _SlAlert.toastStack.remove();
          }
        },
        { once: true }
      );
    });
  }
  render() {
    return x`
      <div
        part="base"
        class=${e$3({
      alert: true,
      "alert--open": this.open,
      "alert--closable": this.closable,
      "alert--has-countdown": !!this.countdown,
      "alert--has-icon": this.hasSlotController.test("icon"),
      "alert--primary": this.variant === "primary",
      "alert--success": this.variant === "success",
      "alert--neutral": this.variant === "neutral",
      "alert--warning": this.variant === "warning",
      "alert--danger": this.variant === "danger"
    })}
        role="alert"
        aria-hidden=${this.open ? "false" : "true"}
        @mouseenter=${this.pauseAutoHide}
        @mouseleave=${this.resumeAutoHide}
      >
        <div part="icon" class="alert__icon">
          <slot name="icon"></slot>
        </div>

        <div part="message" class="alert__message" aria-live="polite">
          <slot></slot>
        </div>

        ${this.closable ? x`
              <sl-icon-button
                part="close-button"
                exportparts="base:close-button__base"
                class="alert__close-button"
                name="x-lg"
                library="system"
                label=${this.localize.term("close")}
                @click=${this.handleCloseClick}
              ></sl-icon-button>
            ` : ""}

        <div role="timer" class="alert__timer">${this.remainingTime}</div>

        ${this.countdown ? x`
              <div
                class=${e$3({
      alert__countdown: true,
      "alert__countdown--ltr": this.countdown === "ltr"
    })}
              >
                <div class="alert__countdown-elapsed"></div>
              </div>
            ` : ""}
      </div>
    `;
  }
};
_SlAlert.styles = [component_styles_default, alert_styles_default];
_SlAlert.dependencies = { "sl-icon-button": SlIconButton };
__decorateClass([
  e$7('[part~="base"]')
], _SlAlert.prototype, "base", 2);
__decorateClass([
  e$7(".alert__countdown-elapsed")
], _SlAlert.prototype, "countdownElement", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], _SlAlert.prototype, "open", 2);
__decorateClass([
  n$6({ type: Boolean, reflect: true })
], _SlAlert.prototype, "closable", 2);
__decorateClass([
  n$6({ reflect: true })
], _SlAlert.prototype, "variant", 2);
__decorateClass([
  n$6({ type: Number })
], _SlAlert.prototype, "duration", 2);
__decorateClass([
  n$6({ type: String, reflect: true })
], _SlAlert.prototype, "countdown", 2);
__decorateClass([
  r$3()
], _SlAlert.prototype, "remainingTime", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], _SlAlert.prototype, "handleOpenChange", 1);
__decorateClass([
  watch("duration")
], _SlAlert.prototype, "handleDurationChange", 1);
var SlAlert = _SlAlert;
setDefaultAnimation("alert.show", {
  keyframes: [
    { opacity: 0, scale: 0.8 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("alert.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.8 }
  ],
  options: { duration: 250, easing: "ease" }
});

var tagName = "sl-alert";
SlAlert.define("sl-alert");
o$8({
  tagName,
  elementClass: SlAlert,
  react: React$1,
  events: {
    onSlShow: "sl-show",
    onSlAfterShow: "sl-after-show",
    onSlHide: "sl-hide",
    onSlAfterHide: "sl-after-hide"
  },
  displayName: "SlAlert"
});

// src/internal/scrollend-polyfill.ts
var debounce = (fn, delay) => {
  let timerId = 0;
  return function(...args) {
    window.clearTimeout(timerId);
    timerId = window.setTimeout(() => {
      fn.call(this, ...args);
    }, delay);
  };
};
var decorate = (proto, method, decorateFn) => {
  const superFn = proto[method];
  proto[method] = function(...args) {
    superFn.call(this, ...args);
    decorateFn.call(this, superFn, ...args);
  };
};
(() => {
  if (typeof window === "undefined") {
    return;
  }
  const isSupported = "onscrollend" in window;
  if (!isSupported) {
    const pointers = /* @__PURE__ */ new Set();
    const scrollHandlers = /* @__PURE__ */ new WeakMap();
    const handlePointerDown = (event) => {
      for (const touch of event.changedTouches) {
        pointers.add(touch.identifier);
      }
    };
    const handlePointerUp = (event) => {
      for (const touch of event.changedTouches) {
        pointers.delete(touch.identifier);
      }
    };
    document.addEventListener("touchstart", handlePointerDown, true);
    document.addEventListener("touchend", handlePointerUp, true);
    document.addEventListener("touchcancel", handlePointerUp, true);
    decorate(EventTarget.prototype, "addEventListener", function(addEventListener, type) {
      if (type !== "scrollend") return;
      const handleScrollEnd = debounce(() => {
        if (!pointers.size) {
          this.dispatchEvent(new Event("scrollend"));
        } else {
          handleScrollEnd();
        }
      }, 100);
      addEventListener.call(this, "scroll", handleScrollEnd, { passive: true });
      scrollHandlers.set(this, handleScrollEnd);
    });
    decorate(EventTarget.prototype, "removeEventListener", function(removeEventListener, type) {
      if (type !== "scrollend") return;
      const scrollHandler = scrollHandlers.get(this);
      if (scrollHandler) {
        removeEventListener.call(this, "scroll", scrollHandler, { passive: true });
      }
    });
  }
})();

/**
 * @typedef Options
 *   Configuration for `stringify`.
 * @property {boolean} [padLeft=true]
 *   Whether to pad a space before a token.
 * @property {boolean} [padRight=false]
 *   Whether to pad a space after a token.
 */


/**
 * Serialize an array of strings or numbers to comma-separated tokens.
 *
 * @param {Array<string|number>} values
 *   List of tokens.
 * @param {Options} [options]
 *   Configuration for `stringify` (optional).
 * @returns {string}
 *   Comma-separated tokens.
 */
function stringify$1(values, options) {
  const settings = {};

  // Ensure the last empty entry is seen.
  const input = values[values.length - 1] === '' ? [...values, ''] : values;

  return input
    .join(
      (settings.padRight ? ' ' : '') +
        ',' +
        (settings.padLeft === false ? '' : ' ')
    )
    .trim()
}

/**
 * @typedef Options
 *   Configuration.
 * @property {boolean | null | undefined} [jsx=false]
 *   Support JSX identifiers (default: `false`).
 */

const nameRe = /^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
const nameReJsx = /^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;

/** @type {Options} */
const emptyOptions$2 = {};

/**
 * Checks if the given value is a valid identifier name.
 *
 * @param {string} name
 *   Identifier to check.
 * @param {Options | null | undefined} [options]
 *   Configuration (optional).
 * @returns {boolean}
 *   Whether `name` can be an identifier.
 */
function name(name, options) {
  const settings = emptyOptions$2;
  const re = settings.jsx ? nameReJsx : nameRe;
  return re.test(name)
}

/**
 * @typedef {import('hast').Nodes} Nodes
 */

// HTML whitespace expression.
// See <https://infra.spec.whatwg.org/#ascii-whitespace>.
const re = /[ \t\n\f\r]/g;

/**
 * Check if the given value is *inter-element whitespace*.
 *
 * @param {Nodes | string} thing
 *   Thing to check (`Node` or `string`).
 * @returns {boolean}
 *   Whether the `value` is inter-element whitespace (`boolean`): consisting of
 *   zero or more of space, tab (`\t`), line feed (`\n`), carriage return
 *   (`\r`), or form feed (`\f`); if a node is passed it must be a `Text` node,
 *   whose `value` field is checked.
 */
function whitespace(thing) {
  return typeof thing === 'object'
    ? thing.type === 'text'
      ? empty$1(thing.value)
      : false
    : empty$1(thing)
}

/**
 * @param {string} value
 * @returns {boolean}
 */
function empty$1(value) {
  return value.replace(re, '') === ''
}

/**
 * @import {Schema as SchemaType, Space} from 'property-information'
 */

/** @type {SchemaType} */
class Schema {
  /**
   * @param {SchemaType['property']} property
   *   Property.
   * @param {SchemaType['normal']} normal
   *   Normal.
   * @param {Space | undefined} [space]
   *   Space.
   * @returns
   *   Schema.
   */
  constructor(property, normal, space) {
    this.normal = normal;
    this.property = property;

    if (space) {
      this.space = space;
    }
  }
}

Schema.prototype.normal = {};
Schema.prototype.property = {};
Schema.prototype.space = undefined;

/**
 * @import {Info, Space} from 'property-information'
 */


/**
 * @param {ReadonlyArray<Schema>} definitions
 *   Definitions.
 * @param {Space | undefined} [space]
 *   Space.
 * @returns {Schema}
 *   Schema.
 */
function merge(definitions, space) {
  /** @type {Record<string, Info>} */
  const property = {};
  /** @type {Record<string, string>} */
  const normal = {};

  for (const definition of definitions) {
    Object.assign(property, definition.property);
    Object.assign(normal, definition.normal);
  }

  return new Schema(property, normal, space)
}

/**
 * Get the cleaned case insensitive form of an attribute or property.
 *
 * @param {string} value
 *   An attribute-like or property-like name.
 * @returns {string}
 *   Value that can be used to look up the properly cased property on a
 *   `Schema`.
 */
function normalize$1(value) {
  return value.toLowerCase()
}

/**
 * @import {Info as InfoType} from 'property-information'
 */

/** @type {InfoType} */
class Info {
  /**
   * @param {string} property
   *   Property.
   * @param {string} attribute
   *   Attribute.
   * @returns
   *   Info.
   */
  constructor(property, attribute) {
    this.attribute = attribute;
    this.property = property;
  }
}

Info.prototype.attribute = '';
Info.prototype.booleanish = false;
Info.prototype.boolean = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.commaSeparated = false;
Info.prototype.defined = false;
Info.prototype.mustUseProperty = false;
Info.prototype.number = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.property = '';
Info.prototype.spaceSeparated = false;
Info.prototype.space = undefined;

let powers = 0;

const boolean = increment();
const booleanish = increment();
const overloadedBoolean = increment();
const number = increment();
const spaceSeparated = increment();
const commaSeparated = increment();
const commaOrSpaceSeparated = increment();

function increment() {
  return 2 ** ++powers
}

const types = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	boolean,
	booleanish,
	commaOrSpaceSeparated,
	commaSeparated,
	number,
	overloadedBoolean,
	spaceSeparated
}, Symbol.toStringTag, { value: 'Module' }));

/**
 * @import {Space} from 'property-information'
 */


const checks = /** @type {ReadonlyArray<keyof typeof types>} */ (
  Object.keys(types)
);

class DefinedInfo extends Info {
  /**
   * @constructor
   * @param {string} property
   *   Property.
   * @param {string} attribute
   *   Attribute.
   * @param {number | null | undefined} [mask]
   *   Mask.
   * @param {Space | undefined} [space]
   *   Space.
   * @returns
   *   Info.
   */
  constructor(property, attribute, mask, space) {
    let index = -1;

    super(property, attribute);

    mark(this, 'space', space);

    if (typeof mask === 'number') {
      while (++index < checks.length) {
        const check = checks[index];
        mark(this, checks[index], (mask & types[check]) === types[check]);
      }
    }
  }
}

DefinedInfo.prototype.defined = true;

/**
 * @template {keyof DefinedInfo} Key
 *   Key type.
 * @param {DefinedInfo} values
 *   Info.
 * @param {Key} key
 *   Key.
 * @param {DefinedInfo[Key]} value
 *   Value.
 * @returns {undefined}
 *   Nothing.
 */
function mark(values, key, value) {
  if (value) {
    values[key] = value;
  }
}

/**
 * @import {Info, Space} from 'property-information'
 */


/**
 * @param {Definition} definition
 *   Definition.
 * @returns {Schema}
 *   Schema.
 */
function create(definition) {
  /** @type {Record<string, Info>} */
  const properties = {};
  /** @type {Record<string, string>} */
  const normals = {};

  for (const [property, value] of Object.entries(definition.properties)) {
    const info = new DefinedInfo(
      property,
      definition.transform(definition.attributes || {}, property),
      value,
      definition.space
    );

    if (
      definition.mustUseProperty &&
      definition.mustUseProperty.includes(property)
    ) {
      info.mustUseProperty = true;
    }

    properties[property] = info;

    normals[normalize$1(property)] = property;
    normals[normalize$1(info.attribute)] = property;
  }

  return new Schema(properties, normals, definition.space)
}

const aria = create({
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: booleanish,
    ariaAutoComplete: null,
    ariaBusy: booleanish,
    ariaChecked: booleanish,
    ariaColCount: number,
    ariaColIndex: number,
    ariaColSpan: number,
    ariaControls: spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: spaceSeparated,
    ariaDetails: null,
    ariaDisabled: booleanish,
    ariaDropEffect: spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: booleanish,
    ariaFlowTo: spaceSeparated,
    ariaGrabbed: booleanish,
    ariaHasPopup: null,
    ariaHidden: booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: spaceSeparated,
    ariaLevel: number,
    ariaLive: null,
    ariaModal: booleanish,
    ariaMultiLine: booleanish,
    ariaMultiSelectable: booleanish,
    ariaOrientation: null,
    ariaOwns: spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: number,
    ariaPressed: booleanish,
    ariaReadOnly: booleanish,
    ariaRelevant: null,
    ariaRequired: booleanish,
    ariaRoleDescription: spaceSeparated,
    ariaRowCount: number,
    ariaRowIndex: number,
    ariaRowSpan: number,
    ariaSelected: booleanish,
    ariaSetSize: number,
    ariaSort: null,
    ariaValueMax: number,
    ariaValueMin: number,
    ariaValueNow: number,
    ariaValueText: null,
    role: null
  },
  transform(_, property) {
    return property === 'role'
      ? property
      : 'aria-' + property.slice(4).toLowerCase()
  }
});

/**
 * @param {Record<string, string>} attributes
 *   Attributes.
 * @param {string} attribute
 *   Attribute.
 * @returns {string}
 *   Transformed attribute.
 */
function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute
}

/**
 * @param {Record<string, string>} attributes
 *   Attributes.
 * @param {string} property
 *   Property.
 * @returns {string}
 *   Transformed property.
 */
function caseInsensitiveTransform(attributes, property) {
  return caseSensitiveTransform(attributes, property.toLowerCase())
}

const html$2 = create({
  attributes: {
    acceptcharset: 'accept-charset',
    classname: 'class',
    htmlfor: 'for',
    httpequiv: 'http-equiv'
  },
  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: commaSeparated,
    acceptCharset: spaceSeparated,
    accessKey: spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: boolean,
    allowPaymentRequest: boolean,
    allowUserMedia: boolean,
    alt: null,
    as: null,
    async: boolean,
    autoCapitalize: null,
    autoComplete: spaceSeparated,
    autoFocus: boolean,
    autoPlay: boolean,
    blocking: spaceSeparated,
    capture: null,
    charSet: null,
    checked: boolean,
    cite: null,
    className: spaceSeparated,
    cols: number,
    colSpan: null,
    content: null,
    contentEditable: booleanish,
    controls: boolean,
    controlsList: spaceSeparated,
    coords: number | commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: boolean,
    defer: boolean,
    dir: null,
    dirName: null,
    disabled: boolean,
    download: overloadedBoolean,
    draggable: booleanish,
    encType: null,
    enterKeyHint: null,
    fetchPriority: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: boolean,
    formTarget: null,
    headers: spaceSeparated,
    height: number,
    hidden: overloadedBoolean,
    high: number,
    href: null,
    hrefLang: null,
    htmlFor: spaceSeparated,
    httpEquiv: spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inert: boolean,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: boolean,
    itemId: null,
    itemProp: spaceSeparated,
    itemRef: spaceSeparated,
    itemScope: boolean,
    itemType: spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: boolean,
    low: number,
    manifest: null,
    max: null,
    maxLength: number,
    media: null,
    method: null,
    min: null,
    minLength: number,
    multiple: boolean,
    muted: boolean,
    name: null,
    nonce: null,
    noModule: boolean,
    noValidate: boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeToggle: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: boolean,
    optimum: number,
    pattern: null,
    ping: spaceSeparated,
    placeholder: null,
    playsInline: boolean,
    popover: null,
    popoverTarget: null,
    popoverTargetAction: null,
    poster: null,
    preload: null,
    readOnly: boolean,
    referrerPolicy: null,
    rel: spaceSeparated,
    required: boolean,
    reversed: boolean,
    rows: number,
    rowSpan: number,
    sandbox: spaceSeparated,
    scope: null,
    scoped: boolean,
    seamless: boolean,
    selected: boolean,
    shadowRootClonable: boolean,
    shadowRootDelegatesFocus: boolean,
    shadowRootMode: null,
    shape: null,
    size: number,
    sizes: null,
    slot: null,
    span: number,
    spellCheck: booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: number,
    step: null,
    style: null,
    tabIndex: number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: boolean,
    useMap: null,
    value: booleanish,
    width: number,
    wrap: null,
    writingSuggestions: null,

    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null, // Several. Use CSS `text-align` instead,
    aLink: null, // `<body>`. Use CSS `a:active {color}` instead
    archive: spaceSeparated, // `<object>`. List of URIs to archives
    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null, // `<body>`. Use CSS `background-image` instead
    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead
    border: number, // `<table>`. Use CSS `border-width` instead,
    borderColor: null, // `<table>`. Use CSS `border-color` instead,
    bottomMargin: number, // `<body>`
    cellPadding: null, // `<table>`
    cellSpacing: null, // `<table>`
    char: null, // Several table elements. When `align=char`, sets the character to align on
    charOff: null, // Several table elements. When `char`, offsets the alignment
    classId: null, // `<object>`
    clear: null, // `<br>`. Use CSS `clear` instead
    code: null, // `<object>`
    codeBase: null, // `<object>`
    codeType: null, // `<object>`
    color: null, // `<font>` and `<hr>`. Use CSS instead
    compact: boolean, // Lists. Use CSS to reduce space between items instead
    declare: boolean, // `<object>`
    event: null, // `<script>`
    face: null, // `<font>`. Use CSS instead
    frame: null, // `<table>`
    frameBorder: null, // `<iframe>`. Use CSS `border` instead
    hSpace: number, // `<img>` and `<object>`
    leftMargin: number, // `<body>`
    link: null, // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null, // `<img>`. Use a `<picture>`
    marginHeight: number, // `<body>`
    marginWidth: number, // `<body>`
    noResize: boolean, // `<frame>`
    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`
    noShade: boolean, // `<hr>`. Use background-color and height instead of borders
    noWrap: boolean, // `<td>` and `<th>`
    object: null, // `<applet>`
    profile: null, // `<head>`
    prompt: null, // `<isindex>`
    rev: null, // `<link>`
    rightMargin: number, // `<body>`
    rules: null, // `<table>`
    scheme: null, // `<meta>`
    scrolling: booleanish, // `<frame>`. Use overflow in the child context
    standby: null, // `<object>`
    summary: null, // `<table>`
    text: null, // `<body>`. Use CSS `color` instead
    topMargin: number, // `<body>`
    valueType: null, // `<param>`
    version: null, // `<html>`. Use a doctype.
    vAlign: null, // Several. Use CSS `vertical-align` instead
    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: number, // `<img>` and `<object>`

    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: boolean,
    disableRemotePlayback: boolean,
    prefix: null,
    property: null,
    results: number,
    security: null,
    unselectable: null
  },
  space: 'html',
  transform: caseInsensitiveTransform
});

const svg$1 = create({
  attributes: {
    accentHeight: 'accent-height',
    alignmentBaseline: 'alignment-baseline',
    arabicForm: 'arabic-form',
    baselineShift: 'baseline-shift',
    capHeight: 'cap-height',
    className: 'class',
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    crossOrigin: 'crossorigin',
    dataType: 'datatype',
    dominantBaseline: 'dominant-baseline',
    enableBackground: 'enable-background',
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    hrefLang: 'hreflang',
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    imageRendering: 'image-rendering',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    navDown: 'nav-down',
    navDownLeft: 'nav-down-left',
    navDownRight: 'nav-down-right',
    navLeft: 'nav-left',
    navNext: 'nav-next',
    navPrev: 'nav-prev',
    navRight: 'nav-right',
    navUp: 'nav-up',
    navUpLeft: 'nav-up-left',
    navUpRight: 'nav-up-right',
    onAbort: 'onabort',
    onActivate: 'onactivate',
    onAfterPrint: 'onafterprint',
    onBeforePrint: 'onbeforeprint',
    onBegin: 'onbegin',
    onCancel: 'oncancel',
    onCanPlay: 'oncanplay',
    onCanPlayThrough: 'oncanplaythrough',
    onChange: 'onchange',
    onClick: 'onclick',
    onClose: 'onclose',
    onCopy: 'oncopy',
    onCueChange: 'oncuechange',
    onCut: 'oncut',
    onDblClick: 'ondblclick',
    onDrag: 'ondrag',
    onDragEnd: 'ondragend',
    onDragEnter: 'ondragenter',
    onDragExit: 'ondragexit',
    onDragLeave: 'ondragleave',
    onDragOver: 'ondragover',
    onDragStart: 'ondragstart',
    onDrop: 'ondrop',
    onDurationChange: 'ondurationchange',
    onEmptied: 'onemptied',
    onEnd: 'onend',
    onEnded: 'onended',
    onError: 'onerror',
    onFocus: 'onfocus',
    onFocusIn: 'onfocusin',
    onFocusOut: 'onfocusout',
    onHashChange: 'onhashchange',
    onInput: 'oninput',
    onInvalid: 'oninvalid',
    onKeyDown: 'onkeydown',
    onKeyPress: 'onkeypress',
    onKeyUp: 'onkeyup',
    onLoad: 'onload',
    onLoadedData: 'onloadeddata',
    onLoadedMetadata: 'onloadedmetadata',
    onLoadStart: 'onloadstart',
    onMessage: 'onmessage',
    onMouseDown: 'onmousedown',
    onMouseEnter: 'onmouseenter',
    onMouseLeave: 'onmouseleave',
    onMouseMove: 'onmousemove',
    onMouseOut: 'onmouseout',
    onMouseOver: 'onmouseover',
    onMouseUp: 'onmouseup',
    onMouseWheel: 'onmousewheel',
    onOffline: 'onoffline',
    onOnline: 'ononline',
    onPageHide: 'onpagehide',
    onPageShow: 'onpageshow',
    onPaste: 'onpaste',
    onPause: 'onpause',
    onPlay: 'onplay',
    onPlaying: 'onplaying',
    onPopState: 'onpopstate',
    onProgress: 'onprogress',
    onRateChange: 'onratechange',
    onRepeat: 'onrepeat',
    onReset: 'onreset',
    onResize: 'onresize',
    onScroll: 'onscroll',
    onSeeked: 'onseeked',
    onSeeking: 'onseeking',
    onSelect: 'onselect',
    onShow: 'onshow',
    onStalled: 'onstalled',
    onStorage: 'onstorage',
    onSubmit: 'onsubmit',
    onSuspend: 'onsuspend',
    onTimeUpdate: 'ontimeupdate',
    onToggle: 'ontoggle',
    onUnload: 'onunload',
    onVolumeChange: 'onvolumechange',
    onWaiting: 'onwaiting',
    onZoom: 'onzoom',
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pointerEvents: 'pointer-events',
    referrerPolicy: 'referrerpolicy',
    renderingIntent: 'rendering-intent',
    shapeRendering: 'shape-rendering',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    strokeDashArray: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeLineCap: 'stroke-linecap',
    strokeLineJoin: 'stroke-linejoin',
    strokeMiterLimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    tabIndex: 'tabindex',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    transformOrigin: 'transform-origin',
    typeOf: 'typeof',
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    vectorEffect: 'vector-effect',
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    xHeight: 'x-height',
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: 'playbackorder',
    timelineBegin: 'timelinebegin'
  },
  properties: {
    about: commaOrSpaceSeparated,
    accentHeight: number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: number,
    amplitude: number,
    arabicForm: null,
    ascent: number,
    attributeName: null,
    attributeType: null,
    azimuth: number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: number,
    by: null,
    calcMode: null,
    capHeight: number,
    className: spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: number,
    diffuseConstant: number,
    direction: null,
    display: null,
    dur: null,
    divisor: number,
    dominantBaseline: null,
    download: boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: commaSeparated,
    g2: commaSeparated,
    glyphName: commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: number,
    horizOriginX: number,
    horizOriginY: number,
    id: null,
    ideographic: number,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: number,
    k: number,
    k1: number,
    k2: number,
    k3: number,
    k4: number,
    kernelMatrix: commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null, // SEMI_COLON_SEPARATED
    keySplines: null, // SEMI_COLON_SEPARATED
    keyTimes: null, // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: number,
    overlineThickness: number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: number,
    pointsAtY: number,
    pointsAtZ: number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: commaOrSpaceSeparated,
    rev: commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: commaOrSpaceSeparated,
    requiredFeatures: commaOrSpaceSeparated,
    requiredFonts: commaOrSpaceSeparated,
    requiredFormats: commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: number,
    specularExponent: number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: number,
    strikethroughThickness: number,
    string: null,
    stroke: null,
    strokeDashArray: commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: number,
    strokeOpacity: number,
    strokeWidth: null,
    style: null,
    surfaceScale: number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: commaOrSpaceSeparated,
    tabIndex: number,
    tableValues: null,
    target: null,
    targetX: number,
    targetY: number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: commaOrSpaceSeparated,
    to: null,
    transform: null,
    transformOrigin: null,
    u1: null,
    u2: null,
    underlinePosition: number,
    underlineThickness: number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: number,
    values: null,
    vAlphabetic: number,
    vMathematical: number,
    vectorEffect: null,
    vHanging: number,
    vIdeographic: number,
    version: null,
    vertAdvY: number,
    vertOriginX: number,
    vertOriginY: number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  },
  space: 'svg',
  transform: caseSensitiveTransform
});

const xlink = create({
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  },
  space: 'xlink',
  transform(_, property) {
    return 'xlink:' + property.slice(5).toLowerCase()
  }
});

const xmlns = create({
  attributes: {xmlnsxlink: 'xmlns:xlink'},
  properties: {xmlnsXLink: null, xmlns: null},
  space: 'xmlns',
  transform: caseInsensitiveTransform
});

const xml = create({
  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},
  space: 'xml',
  transform(_, property) {
    return 'xml:' + property.slice(3).toLowerCase()
  }
});

/**
 * Special cases for React (`Record<string, string>`).
 *
 * `hast` is close to `React` but differs in a couple of cases.
 * To get a React property from a hast property,
 * check if it is in `hastToReact`.
 * If it is, use the corresponding value;
 * otherwise, use the hast property.
 *
 * @type {Record<string, string>}
 */
const hastToReact = {
  classId: 'classID',
  dataType: 'datatype',
  itemId: 'itemID',
  strokeDashArray: 'strokeDasharray',
  strokeDashOffset: 'strokeDashoffset',
  strokeLineCap: 'strokeLinecap',
  strokeLineJoin: 'strokeLinejoin',
  strokeMiterLimit: 'strokeMiterlimit',
  typeOf: 'typeof',
  xLinkActuate: 'xlinkActuate',
  xLinkArcRole: 'xlinkArcrole',
  xLinkHref: 'xlinkHref',
  xLinkRole: 'xlinkRole',
  xLinkShow: 'xlinkShow',
  xLinkTitle: 'xlinkTitle',
  xLinkType: 'xlinkType',
  xmlnsXLink: 'xmlnsXlink'
};

/**
 * @import {Schema} from 'property-information'
 */


const cap$1 = /[A-Z]/g;
const dash = /-[a-z]/g;
const valid = /^data[-\w.:]+$/i;

/**
 * Look up info on a property.
 *
 * In most cases the given `schema` contains info on the property.
 * All standard,
 * most legacy,
 * and some non-standard properties are supported.
 * For these cases,
 * the returned `Info` has hints about the value of the property.
 *
 * `name` can also be a valid data attribute or property,
 * in which case an `Info` object with the correctly cased `attribute` and
 * `property` is returned.
 *
 * `name` can be an unknown attribute,
 * in which case an `Info` object with `attribute` and `property` set to the
 * given name is returned.
 * It is not recommended to provide unsupported legacy or recently specced
 * properties.
 *
 *
 * @param {Schema} schema
 *   Schema;
 *   either the `html` or `svg` export.
 * @param {string} value
 *   An attribute-like or property-like name;
 *   it will be passed through `normalize` to hopefully find the correct info.
 * @returns {Info}
 *   Info.
 */
function find(schema, value) {
  const normal = normalize$1(value);
  let property = value;
  let Type = Info;

  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]]
  }

  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
    // Attribute or property.
    if (value.charAt(4) === '-') {
      // Turn it into a property.
      const rest = value.slice(5).replace(dash, camelcase);
      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      // Turn it into an attribute.
      const rest = value.slice(4);

      if (!dash.test(rest)) {
        let dashes = rest.replace(cap$1, kebab);

        if (dashes.charAt(0) !== '-') {
          dashes = '-' + dashes;
        }

        value = 'data' + dashes;
      }
    }

    Type = DefinedInfo;
  }

  return new Type(property, value)
}

/**
 * @param {string} $0
 *   Value.
 * @returns {string}
 *   Kebab.
 */
function kebab($0) {
  return '-' + $0.toLowerCase()
}

/**
 * @param {string} $0
 *   Value.
 * @returns {string}
 *   Camel.
 */
function camelcase($0) {
  return $0.charAt(1).toUpperCase()
}

// Note: types exposed from `index.d.ts`.

const html$1 = merge([aria, html$2, xlink, xmlns, xml], 'html');

const svg = merge([aria, svg$1, xlink, xmlns, xml], 'svg');

/**
 * Parse space-separated tokens to an array of strings.
 *
 * @param {string} value
 *   Space-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */

/**
 * Serialize an array of strings as space separated-tokens.
 *
 * @param {Array<string|number>} values
 *   List of tokens.
 * @returns {string}
 *   Space-separated tokens.
 */
function stringify(values) {
  return values.join(' ').trim()
}

var cjs$1 = {};

var inlineStyleParser;
var hasRequiredInlineStyleParser;

function requireInlineStyleParser () {
	if (hasRequiredInlineStyleParser) return inlineStyleParser;
	hasRequiredInlineStyleParser = 1;
	// http://www.w3.org/TR/CSS21/grammar.html
	// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
	var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;

	var NEWLINE_REGEX = /\n/g;
	var WHITESPACE_REGEX = /^\s*/;

	// declaration
	var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
	var COLON_REGEX = /^:\s*/;
	var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
	var SEMICOLON_REGEX = /^[;\s]*/;

	// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill
	var TRIM_REGEX = /^\s+|\s+$/g;

	// strings
	var NEWLINE = '\n';
	var FORWARD_SLASH = '/';
	var ASTERISK = '*';
	var EMPTY_STRING = '';

	// types
	var TYPE_COMMENT = 'comment';
	var TYPE_DECLARATION = 'declaration';

	/**
	 * @param {String} style
	 * @param {Object} [options]
	 * @return {Object[]}
	 * @throws {TypeError}
	 * @throws {Error}
	 */
	inlineStyleParser = function (style, options) {
	  if (typeof style !== 'string') {
	    throw new TypeError('First argument must be a string');
	  }

	  if (!style) return [];

	  options = options || {};

	  /**
	   * Positional.
	   */
	  var lineno = 1;
	  var column = 1;

	  /**
	   * Update lineno and column based on `str`.
	   *
	   * @param {String} str
	   */
	  function updatePosition(str) {
	    var lines = str.match(NEWLINE_REGEX);
	    if (lines) lineno += lines.length;
	    var i = str.lastIndexOf(NEWLINE);
	    column = ~i ? str.length - i : column + str.length;
	  }

	  /**
	   * Mark position and patch `node.position`.
	   *
	   * @return {Function}
	   */
	  function position() {
	    var start = { line: lineno, column: column };
	    return function (node) {
	      node.position = new Position(start);
	      whitespace();
	      return node;
	    };
	  }

	  /**
	   * Store position information for a node.
	   *
	   * @constructor
	   * @property {Object} start
	   * @property {Object} end
	   * @property {undefined|String} source
	   */
	  function Position(start) {
	    this.start = start;
	    this.end = { line: lineno, column: column };
	    this.source = options.source;
	  }

	  /**
	   * Non-enumerable source string.
	   */
	  Position.prototype.content = style;

	  /**
	   * Error `msg`.
	   *
	   * @param {String} msg
	   * @throws {Error}
	   */
	  function error(msg) {
	    var err = new Error(
	      options.source + ':' + lineno + ':' + column + ': ' + msg
	    );
	    err.reason = msg;
	    err.filename = options.source;
	    err.line = lineno;
	    err.column = column;
	    err.source = style;

	    if (options.silent) ; else {
	      throw err;
	    }
	  }

	  /**
	   * Match `re` and return captures.
	   *
	   * @param {RegExp} re
	   * @return {undefined|Array}
	   */
	  function match(re) {
	    var m = re.exec(style);
	    if (!m) return;
	    var str = m[0];
	    updatePosition(str);
	    style = style.slice(str.length);
	    return m;
	  }

	  /**
	   * Parse whitespace.
	   */
	  function whitespace() {
	    match(WHITESPACE_REGEX);
	  }

	  /**
	   * Parse comments.
	   *
	   * @param {Object[]} [rules]
	   * @return {Object[]}
	   */
	  function comments(rules) {
	    var c;
	    rules = rules || [];
	    while ((c = comment())) {
	      if (c !== false) {
	        rules.push(c);
	      }
	    }
	    return rules;
	  }

	  /**
	   * Parse comment.
	   *
	   * @return {Object}
	   * @throws {Error}
	   */
	  function comment() {
	    var pos = position();
	    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;

	    var i = 2;
	    while (
	      EMPTY_STRING != style.charAt(i) &&
	      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))
	    ) {
	      ++i;
	    }
	    i += 2;

	    if (EMPTY_STRING === style.charAt(i - 1)) {
	      return error('End of comment missing');
	    }

	    var str = style.slice(2, i - 2);
	    column += 2;
	    updatePosition(str);
	    style = style.slice(i);
	    column += 2;

	    return pos({
	      type: TYPE_COMMENT,
	      comment: str
	    });
	  }

	  /**
	   * Parse declaration.
	   *
	   * @return {Object}
	   * @throws {Error}
	   */
	  function declaration() {
	    var pos = position();

	    // prop
	    var prop = match(PROPERTY_REGEX);
	    if (!prop) return;
	    comment();

	    // :
	    if (!match(COLON_REGEX)) return error("property missing ':'");

	    // val
	    var val = match(VALUE_REGEX);

	    var ret = pos({
	      type: TYPE_DECLARATION,
	      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
	      value: val
	        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))
	        : EMPTY_STRING
	    });

	    // ;
	    match(SEMICOLON_REGEX);

	    return ret;
	  }

	  /**
	   * Parse declarations.
	   *
	   * @return {Object[]}
	   */
	  function declarations() {
	    var decls = [];

	    comments(decls);

	    // declarations
	    var decl;
	    while ((decl = declaration())) {
	      if (decl !== false) {
	        decls.push(decl);
	        comments(decls);
	      }
	    }

	    return decls;
	  }

	  whitespace();
	  return declarations();
	};

	/**
	 * Trim `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 */
	function trim(str) {
	  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
	}
	return inlineStyleParser;
}

var hasRequiredCjs$1;

function requireCjs$1 () {
	if (hasRequiredCjs$1) return cjs$1;
	hasRequiredCjs$1 = 1;
	var __importDefault = (cjs$1 && cjs$1.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(cjs$1, "__esModule", { value: true });
	cjs$1.default = StyleToObject;
	var inline_style_parser_1 = __importDefault(requireInlineStyleParser());
	/**
	 * Parses inline style to object.
	 *
	 * @param style - Inline style.
	 * @param iterator - Iterator.
	 * @returns - Style object or null.
	 *
	 * @example Parsing inline style to object:
	 *
	 * ```js
	 * import parse from 'style-to-object';
	 * parse('line-height: 42;'); // { 'line-height': '42' }
	 * ```
	 */
	function StyleToObject(style, iterator) {
	    var styleObject = null;
	    if (!style || typeof style !== 'string') {
	        return styleObject;
	    }
	    var declarations = (0, inline_style_parser_1.default)(style);
	    var hasIterator = typeof iterator === 'function';
	    declarations.forEach(function (declaration) {
	        if (declaration.type !== 'declaration') {
	            return;
	        }
	        var property = declaration.property, value = declaration.value;
	        if (hasIterator) {
	            iterator(property, value, declaration);
	        }
	        else if (value) {
	            styleObject = styleObject || {};
	            styleObject[property] = value;
	        }
	    });
	    return styleObject;
	}
	
	return cjs$1;
}

var cjsExports$1 = requireCjs$1();
const StyleToObject = /*@__PURE__*/getDefaultExportFromCjs(cjsExports$1);

// ensure compatibility with rollup umd build
const index$1 = StyleToObject.default || StyleToObject;

const esm = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: index$1
}, Symbol.toStringTag, { value: 'Module' }));

const require$$0 = /*@__PURE__*/getAugmentedNamespace(esm);

var utilities = {};

var hasRequiredUtilities;

function requireUtilities () {
	if (hasRequiredUtilities) return utilities;
	hasRequiredUtilities = 1;
	Object.defineProperty(utilities, "__esModule", { value: true });
	utilities.camelCase = void 0;
	var CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;
	var HYPHEN_REGEX = /-([a-z])/g;
	var NO_HYPHEN_REGEX = /^[^-]+$/;
	var VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;
	var MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;
	/**
	 * Checks whether to skip camelCase.
	 */
	var skipCamelCase = function (property) {
	    return !property ||
	        NO_HYPHEN_REGEX.test(property) ||
	        CUSTOM_PROPERTY_REGEX.test(property);
	};
	/**
	 * Replacer that capitalizes first character.
	 */
	var capitalize = function (match, character) {
	    return character.toUpperCase();
	};
	/**
	 * Replacer that removes beginning hyphen of vendor prefix property.
	 */
	var trimHyphen = function (match, prefix) { return "".concat(prefix, "-"); };
	/**
	 * CamelCases a CSS property.
	 */
	var camelCase = function (property, options) {
	    if (options === void 0) { options = {}; }
	    if (skipCamelCase(property)) {
	        return property;
	    }
	    property = property.toLowerCase();
	    if (options.reactCompat) {
	        // `-ms` vendor prefix should not be capitalized
	        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);
	    }
	    else {
	        // for non-React, remove first hyphen so vendor prefix is not capitalized
	        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);
	    }
	    return property.replace(HYPHEN_REGEX, capitalize);
	};
	utilities.camelCase = camelCase;
	
	return utilities;
}

var cjs;
var hasRequiredCjs;

function requireCjs () {
	if (hasRequiredCjs) return cjs;
	hasRequiredCjs = 1;
	var __importDefault = (cjs && cjs.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var style_to_object_1 = __importDefault(require$$0);
	var utilities_1 = requireUtilities();
	/**
	 * Parses CSS inline style to JavaScript object (camelCased).
	 */
	function StyleToJS(style, options) {
	    var output = {};
	    if (!style || typeof style !== 'string') {
	        return output;
	    }
	    (0, style_to_object_1.default)(style, function (property, value) {
	        // skip CSS comment
	        if (property && value) {
	            output[(0, utilities_1.camelCase)(property, options)] = value;
	        }
	    });
	    return output;
	}
	StyleToJS.default = StyleToJS;
	cjs = StyleToJS;
	
	return cjs;
}

var cjsExports = requireCjs();
const styleToJs = /*@__PURE__*/getDefaultExportFromCjs(cjsExports);

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */

/**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 */

/**
 * Get the ending point of `node`.
 *
 * @param node
 *   Node.
 * @returns
 *   Point.
 */
const pointEnd = point$2('end');

/**
 * Get the starting point of `node`.
 *
 * @param node
 *   Node.
 * @returns
 *   Point.
 */
const pointStart = point$2('start');

/**
 * Get the positional info of `node`.
 *
 * @param {'end' | 'start'} type
 *   Side.
 * @returns
 *   Getter.
 */
function point$2(type) {
  return point

  /**
   * Get the point info of `node` at a bound side.
   *
   * @param {Node | NodeLike | null | undefined} [node]
   * @returns {Point | undefined}
   */
  function point(node) {
    const point = (node && node.position && node.position[type]) || {};

    if (
      typeof point.line === 'number' &&
      point.line > 0 &&
      typeof point.column === 'number' &&
      point.column > 0
    ) {
      return {
        line: point.line,
        column: point.column,
        offset:
          typeof point.offset === 'number' && point.offset > -1
            ? point.offset
            : undefined
      }
    }
  }
}

/**
 * Get the positional info of `node`.
 *
 * @param {Node | NodeLike | null | undefined} [node]
 *   Node.
 * @returns {Position | undefined}
 *   Position.
 */
function position$1(node) {
  const start = pointStart(node);
  const end = pointEnd(node);

  if (start && end) {
    return {start, end}
  }
}

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */

/**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 */

/**
 * Serialize the positional info of a point, position (start and end points),
 * or node.
 *
 * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]
 *   Node, position, or point.
 * @returns {string}
 *   Pretty printed positional info of a node (`string`).
 *
 *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)
 *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for
 *   column, `s` for `start`, and `e` for end.
 *   An empty string (`''`) is returned if the given value is neither `node`,
 *   `position`, nor `point`.
 */
function stringifyPosition(value) {
  // Nothing.
  if (!value || typeof value !== 'object') {
    return ''
  }

  // Node.
  if ('position' in value || 'type' in value) {
    return position(value.position)
  }

  // Position.
  if ('start' in value || 'end' in value) {
    return position(value)
  }

  // Point.
  if ('line' in value || 'column' in value) {
    return point$1(value)
  }

  // ?
  return ''
}

/**
 * @param {Point | PointLike | null | undefined} point
 * @returns {string}
 */
function point$1(point) {
  return index(point && point.line) + ':' + index(point && point.column)
}

/**
 * @param {Position | PositionLike | null | undefined} pos
 * @returns {string}
 */
function position(pos) {
  return point$1(pos && pos.start) + '-' + point$1(pos && pos.end)
}

/**
 * @param {number | null | undefined} value
 * @returns {number}
 */
function index(value) {
  return value && typeof value === 'number' ? value : 1
}

/**
 * @import {Node, Point, Position} from 'unist'
 */


/**
 * Message.
 */
class VFileMessage extends Error {
  /**
   * Create a message for `reason`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {Options | null | undefined} [options]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // eslint-disable-next-line complexity
  constructor(causeOrReason, optionsOrParentOrPlace, origin) {
    super();

    if (typeof optionsOrParentOrPlace === 'string') {
      origin = optionsOrParentOrPlace;
      optionsOrParentOrPlace = undefined;
    }

    /** @type {string} */
    let reason = '';
    /** @type {Options} */
    let options = {};
    let legacyCause = false;

    if (optionsOrParentOrPlace) {
      // Point.
      if (
        'line' in optionsOrParentOrPlace &&
        'column' in optionsOrParentOrPlace
      ) {
        options = {place: optionsOrParentOrPlace};
      }
      // Position.
      else if (
        'start' in optionsOrParentOrPlace &&
        'end' in optionsOrParentOrPlace
      ) {
        options = {place: optionsOrParentOrPlace};
      }
      // Node.
      else if ('type' in optionsOrParentOrPlace) {
        options = {
          ancestors: [optionsOrParentOrPlace],
          place: optionsOrParentOrPlace.position
        };
      }
      // Options.
      else {
        options = {...optionsOrParentOrPlace};
      }
    }

    if (typeof causeOrReason === 'string') {
      reason = causeOrReason;
    }
    // Error.
    else if (!options.cause && causeOrReason) {
      legacyCause = true;
      reason = causeOrReason.message;
      options.cause = causeOrReason;
    }

    if (!options.ruleId && !options.source && typeof origin === 'string') {
      const index = origin.indexOf(':');

      if (index === -1) {
        options.ruleId = origin;
      } else {
        options.source = origin.slice(0, index);
        options.ruleId = origin.slice(index + 1);
      }
    }

    if (!options.place && options.ancestors && options.ancestors) {
      const parent = options.ancestors[options.ancestors.length - 1];

      if (parent) {
        options.place = parent.position;
      }
    }

    const start =
      options.place && 'start' in options.place
        ? options.place.start
        : options.place;

    /**
     * Stack of ancestor nodes surrounding the message.
     *
     * @type {Array<Node> | undefined}
     */
    this.ancestors = options.ancestors || undefined;

    /**
     * Original error cause of the message.
     *
     * @type {Error | undefined}
     */
    this.cause = options.cause || undefined;

    /**
     * Starting column of message.
     *
     * @type {number | undefined}
     */
    this.column = start ? start.column : undefined;

    /**
     * State of problem.
     *
     * * `true` — error, file not usable
     * * `false` — warning, change may be needed
     * * `undefined` — change likely not needed
     *
     * @type {boolean | null | undefined}
     */
    this.fatal = undefined;

    /**
     * Path of a file (used throughout the `VFile` ecosystem).
     *
     * @type {string | undefined}
     */
    this.file = '';

    // Field from `Error`.
    /**
     * Reason for message.
     *
     * @type {string}
     */
    this.message = reason;

    /**
     * Starting line of error.
     *
     * @type {number | undefined}
     */
    this.line = start ? start.line : undefined;

    // Field from `Error`.
    /**
     * Serialized positional info of message.
     *
     * On normal errors, this would be something like `ParseError`, buit in
     * `VFile` messages we use this space to show where an error happened.
     */
    this.name = stringifyPosition(options.place) || '1:1';

    /**
     * Place of message.
     *
     * @type {Point | Position | undefined}
     */
    this.place = options.place || undefined;

    /**
     * Reason for message, should use markdown.
     *
     * @type {string}
     */
    this.reason = this.message;

    /**
     * Category of message (example: `'my-rule'`).
     *
     * @type {string | undefined}
     */
    this.ruleId = options.ruleId || undefined;

    /**
     * Namespace of message (example: `'my-package'`).
     *
     * @type {string | undefined}
     */
    this.source = options.source || undefined;

    // Field from `Error`.
    /**
     * Stack of message.
     *
     * This is used by normal errors to show where something happened in
     * programming code, irrelevant for `VFile` messages,
     *
     * @type {string}
     */
    this.stack =
      legacyCause && options.cause && typeof options.cause.stack === 'string'
        ? options.cause.stack
        : '';

    // The following fields are “well known”.
    // Not standard.
    // Feel free to add other non-standard fields to your messages.

    /**
     * Specify the source value that’s being reported, which is deemed
     * incorrect.
     *
     * @type {string | undefined}
     */
    this.actual = undefined;

    /**
     * Suggest acceptable values that can be used instead of `actual`.
     *
     * @type {Array<string> | undefined}
     */
    this.expected = undefined;

    /**
     * Long form description of the message (you should use markdown).
     *
     * @type {string | undefined}
     */
    this.note = undefined;

    /**
     * Link to docs for the message.
     *
     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`
     * > to `new URL(x)`.
     *
     * @type {string | undefined}
     */
    this.url = undefined;
  }
}

VFileMessage.prototype.file = '';
VFileMessage.prototype.name = '';
VFileMessage.prototype.reason = '';
VFileMessage.prototype.message = '';
VFileMessage.prototype.stack = '';
VFileMessage.prototype.column = undefined;
VFileMessage.prototype.line = undefined;
VFileMessage.prototype.ancestors = undefined;
VFileMessage.prototype.cause = undefined;
VFileMessage.prototype.fatal = undefined;
VFileMessage.prototype.place = undefined;
VFileMessage.prototype.ruleId = undefined;
VFileMessage.prototype.source = undefined;

/**
 * @import {Identifier, Literal, MemberExpression} from 'estree'
 * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'
 * @import {Element, Nodes, Parents, Root, Text} from 'hast'
 * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'
 * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'
 * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'
 * @import {Position} from 'unist'
 * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'
 */


// To do: next major: `Object.hasOwn`.
const own$3 = {}.hasOwnProperty;

/** @type {Map<string, number>} */
const emptyMap = new Map();

const cap = /[A-Z]/g;

// `react-dom` triggers a warning for *any* white space in tables.
// To follow GFM, `mdast-util-to-hast` injects line endings between elements.
// Other tools might do so too, but they don’t do here, so we remove all of
// that.

// See: <https://github.com/facebook/react/pull/7081>.
// See: <https://github.com/facebook/react/pull/7515>.
// See: <https://github.com/remarkjs/remark-react/issues/64>.
// See: <https://github.com/rehypejs/rehype-react/pull/29>.
// See: <https://github.com/rehypejs/rehype-react/pull/32>.
// See: <https://github.com/rehypejs/rehype-react/pull/45>.
const tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr']);

const tableCellElement = new Set(['td', 'th']);

const docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime';

/**
 * Transform a hast tree to preact, react, solid, svelte, vue, etc.,
 * with an automatic JSX runtime.
 *
 * @param {Nodes} tree
 *   Tree to transform.
 * @param {Options} options
 *   Configuration (required).
 * @returns {JsxElement}
 *   JSX element.
 */

function toJsxRuntime(tree, options) {
  if (!options || options.Fragment === undefined) {
    throw new TypeError('Expected `Fragment` in options')
  }

  const filePath = options.filePath || undefined;
  /** @type {Create} */
  let create;

  if (options.development) {
    if (typeof options.jsxDEV !== 'function') {
      throw new TypeError(
        'Expected `jsxDEV` in options when `development: true`'
      )
    }

    create = developmentCreate(filePath, options.jsxDEV);
  } else {
    if (typeof options.jsx !== 'function') {
      throw new TypeError('Expected `jsx` in production options')
    }

    if (typeof options.jsxs !== 'function') {
      throw new TypeError('Expected `jsxs` in production options')
    }

    create = productionCreate(filePath, options.jsx, options.jsxs);
  }

  /** @type {State} */
  const state = {
    Fragment: options.Fragment,
    ancestors: [],
    components: options.components || {},
    create,
    elementAttributeNameCase: options.elementAttributeNameCase || 'react',
    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,
    filePath,
    ignoreInvalidStyle: options.ignoreInvalidStyle || false,
    passKeys: options.passKeys !== false,
    passNode: options.passNode || false,
    schema: options.space === 'svg' ? svg : html$1,
    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',
    tableCellAlignToStyle: options.tableCellAlignToStyle !== false
  };

  const result = one$1(state, tree, undefined);

  // JSX element.
  if (result && typeof result !== 'string') {
    return result
  }

  // Text node or something that turned into nothing.
  return state.create(
    tree,
    state.Fragment,
    {children: result || undefined},
    undefined
  )
}

/**
 * Transform a node.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Nodes} node
 *   Current node.
 * @param {string | undefined} key
 *   Key.
 * @returns {Child | undefined}
 *   Child, optional.
 */
function one$1(state, node, key) {
  if (node.type === 'element') {
    return element$1(state, node, key)
  }

  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {
    return mdxExpression(state, node)
  }

  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {
    return mdxJsxElement(state, node, key)
  }

  if (node.type === 'mdxjsEsm') {
    return mdxEsm(state, node)
  }

  if (node.type === 'root') {
    return root$1(state, node, key)
  }

  if (node.type === 'text') {
    return text$3(state, node)
  }
}

/**
 * Handle element.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Element} node
 *   Current node.
 * @param {string | undefined} key
 *   Key.
 * @returns {Child | undefined}
 *   Child, optional.
 */
function element$1(state, node, key) {
  const parentSchema = state.schema;
  let schema = parentSchema;

  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {
    schema = svg;
    state.schema = schema;
  }

  state.ancestors.push(node);

  const type = findComponentFromName(state, node.tagName, false);
  const props = createElementProps(state, node);
  let children = createChildren(state, node);

  if (tableElements.has(node.tagName)) {
    children = children.filter(function (child) {
      return typeof child === 'string' ? !whitespace(child) : true
    });
  }

  addNode(state, props, type, node);
  addChildren(props, children);

  // Restore.
  state.ancestors.pop();
  state.schema = parentSchema;

  return state.create(node, type, props, key)
}

/**
 * Handle MDX expression.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node
 *   Current node.
 * @returns {Child | undefined}
 *   Child, optional.
 */
function mdxExpression(state, node) {
  if (node.data && node.data.estree && state.evaluater) {
    const program = node.data.estree;
    const expression = program.body[0];

    // Assume result is a child.
    return /** @type {Child | undefined} */ (
      state.evaluater.evaluateExpression(expression.expression)
    )
  }

  crashEstree(state, node.position);
}

/**
 * Handle MDX ESM.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdxjsEsmHast} node
 *   Current node.
 * @returns {Child | undefined}
 *   Child, optional.
 */
function mdxEsm(state, node) {
  if (node.data && node.data.estree && state.evaluater) {
    // Assume result is a child.
    return /** @type {Child | undefined} */ (
      state.evaluater.evaluateProgram(node.data.estree)
    )
  }

  crashEstree(state, node.position);
}

/**
 * Handle MDX JSX.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node
 *   Current node.
 * @param {string | undefined} key
 *   Key.
 * @returns {Child | undefined}
 *   Child, optional.
 */
function mdxJsxElement(state, node, key) {
  const parentSchema = state.schema;
  let schema = parentSchema;

  if (node.name === 'svg' && parentSchema.space === 'html') {
    schema = svg;
    state.schema = schema;
  }

  state.ancestors.push(node);

  const type =
    node.name === null
      ? state.Fragment
      : findComponentFromName(state, node.name, true);
  const props = createJsxElementProps(state, node);
  const children = createChildren(state, node);

  addNode(state, props, type, node);
  addChildren(props, children);

  // Restore.
  state.ancestors.pop();
  state.schema = parentSchema;

  return state.create(node, type, props, key)
}

/**
 * Handle root.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Root} node
 *   Current node.
 * @param {string | undefined} key
 *   Key.
 * @returns {Child | undefined}
 *   Child, optional.
 */
function root$1(state, node, key) {
  /** @type {Props} */
  const props = {};

  addChildren(props, createChildren(state, node));

  return state.create(node, state.Fragment, props, key)
}

/**
 * Handle text.
 *
 * @param {State} _
 *   Info passed around.
 * @param {Text} node
 *   Current node.
 * @returns {Child | undefined}
 *   Child, optional.
 */
function text$3(_, node) {
  return node.value
}

/**
 * Add `node` to props.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Props} props
 *   Props.
 * @param {unknown} type
 *   Type.
 * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node
 *   Node.
 * @returns {undefined}
 *   Nothing.
 */
function addNode(state, props, type, node) {
  // If this is swapped out for a component:
  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {
    props.node = node;
  }
}

/**
 * Add children to props.
 *
 * @param {Props} props
 *   Props.
 * @param {Array<Child>} children
 *   Children.
 * @returns {undefined}
 *   Nothing.
 */
function addChildren(props, children) {
  if (children.length > 0) {
    const value = children.length > 1 ? children : children[0];

    if (value) {
      props.children = value;
    }
  }
}

/**
 * @param {string | undefined} _
 *   Path to file.
 * @param {Jsx} jsx
 *   Dynamic.
 * @param {Jsx} jsxs
 *   Static.
 * @returns {Create}
 *   Create a production element.
 */
function productionCreate(_, jsx, jsxs) {
  return create
  /** @type {Create} */
  function create(_, type, props, key) {
    // Only an array when there are 2 or more children.
    const isStaticChildren = Array.isArray(props.children);
    const fn = isStaticChildren ? jsxs : jsx;
    return key ? fn(type, props, key) : fn(type, props)
  }
}

/**
 * @param {string | undefined} filePath
 *   Path to file.
 * @param {JsxDev} jsxDEV
 *   Development.
 * @returns {Create}
 *   Create a development element.
 */
function developmentCreate(filePath, jsxDEV) {
  return create
  /** @type {Create} */
  function create(node, type, props, key) {
    // Only an array when there are 2 or more children.
    const isStaticChildren = Array.isArray(props.children);
    const point = pointStart(node);
    return jsxDEV(
      type,
      props,
      key,
      isStaticChildren,
      {
        columnNumber: point ? point.column - 1 : undefined,
        fileName: filePath,
        lineNumber: point ? point.line : undefined
      },
      undefined
    )
  }
}

/**
 * Create props from an element.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Element} node
 *   Current element.
 * @returns {Props}
 *   Props.
 */
function createElementProps(state, node) {
  /** @type {Props} */
  const props = {};
  /** @type {string | undefined} */
  let alignValue;
  /** @type {string} */
  let prop;

  for (prop in node.properties) {
    if (prop !== 'children' && own$3.call(node.properties, prop)) {
      const result = createProperty(state, prop, node.properties[prop]);

      if (result) {
        const [key, value] = result;

        if (
          state.tableCellAlignToStyle &&
          key === 'align' &&
          typeof value === 'string' &&
          tableCellElement.has(node.tagName)
        ) {
          alignValue = value;
        } else {
          props[key] = value;
        }
      }
    }
  }

  if (alignValue) {
    // Assume style is an object.
    const style = /** @type {Style} */ (props.style || (props.style = {}));
    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =
      alignValue;
  }

  return props
}

/**
 * Create props from a JSX element.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node
 *   Current JSX element.
 * @returns {Props}
 *   Props.
 */
function createJsxElementProps(state, node) {
  /** @type {Props} */
  const props = {};

  for (const attribute of node.attributes) {
    if (attribute.type === 'mdxJsxExpressionAttribute') {
      if (attribute.data && attribute.data.estree && state.evaluater) {
        const program = attribute.data.estree;
        const expression = program.body[0];
        const objectExpression = expression.expression;
        const property = objectExpression.properties[0];

        Object.assign(
          props,
          state.evaluater.evaluateExpression(property.argument)
        );
      } else {
        crashEstree(state, node.position);
      }
    } else {
      // For JSX, the author is responsible of passing in the correct values.
      const name = attribute.name;
      /** @type {unknown} */
      let value;

      if (attribute.value && typeof attribute.value === 'object') {
        if (
          attribute.value.data &&
          attribute.value.data.estree &&
          state.evaluater
        ) {
          const program = attribute.value.data.estree;
          const expression = program.body[0];
          value = state.evaluater.evaluateExpression(expression.expression);
        } else {
          crashEstree(state, node.position);
        }
      } else {
        value = attribute.value === null ? true : attribute.value;
      }

      // Assume a prop.
      props[name] = /** @type {Props[keyof Props]} */ (value);
    }
  }

  return props
}

/**
 * Create children.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Parents} node
 *   Current element.
 * @returns {Array<Child>}
 *   Children.
 */
function createChildren(state, node) {
  /** @type {Array<Child>} */
  const children = [];
  let index = -1;
  /** @type {Map<string, number>} */
  // Note: test this when Solid doesn’t want to merge my upcoming PR.
  /* c8 ignore next */
  const countsByName = state.passKeys ? new Map() : emptyMap;

  while (++index < node.children.length) {
    const child = node.children[index];
    /** @type {string | undefined} */
    let key;

    if (state.passKeys) {
      const name =
        child.type === 'element'
          ? child.tagName
          : child.type === 'mdxJsxFlowElement' ||
              child.type === 'mdxJsxTextElement'
            ? child.name
            : undefined;

      if (name) {
        const count = countsByName.get(name) || 0;
        key = name + '-' + count;
        countsByName.set(name, count + 1);
      }
    }

    const result = one$1(state, child, key);
    if (result !== undefined) children.push(result);
  }

  return children
}

/**
 * Handle a property.
 *
 * @param {State} state
 *   Info passed around.
 * @param {string} prop
 *   Key.
 * @param {Array<number | string> | boolean | number | string | null | undefined} value
 *   hast property value.
 * @returns {Field | undefined}
 *   Field for runtime, optional.
 */
function createProperty(state, prop, value) {
  const info = find(state.schema, prop);

  // Ignore nullish and `NaN` values.
  if (
    value === null ||
    value === undefined ||
    (typeof value === 'number' && Number.isNaN(value))
  ) {
    return
  }

  if (Array.isArray(value)) {
    // Accept `array`.
    // Most props are space-separated.
    value = info.commaSeparated ? stringify$1(value) : stringify(value);
  }

  // React only accepts `style` as object.
  if (info.property === 'style') {
    let styleObject =
      typeof value === 'object' ? value : parseStyle(state, String(value));

    if (state.stylePropertyNameCase === 'css') {
      styleObject = transformStylesToCssCasing(styleObject);
    }

    return ['style', styleObject]
  }

  return [
    state.elementAttributeNameCase === 'react' && info.space
      ? hastToReact[info.property] || info.property
      : info.attribute,
    value
  ]
}

/**
 * Parse a CSS declaration to an object.
 *
 * @param {State} state
 *   Info passed around.
 * @param {string} value
 *   CSS declarations.
 * @returns {Style}
 *   Properties.
 * @throws
 *   Throws `VFileMessage` when CSS cannot be parsed.
 */
function parseStyle(state, value) {
  try {
    return styleToJs(value, {reactCompat: true})
  } catch (error) {
    if (state.ignoreInvalidStyle) {
      return {}
    }

    const cause = /** @type {Error} */ (error);
    const message = new VFileMessage('Cannot parse `style` attribute', {
      ancestors: state.ancestors,
      cause,
      ruleId: 'style',
      source: 'hast-util-to-jsx-runtime'
    });
    message.file = state.filePath || undefined;
    message.url = docs + '#cannot-parse-style-attribute';

    throw message
  }
}

/**
 * Create a JSX name from a string.
 *
 * @param {State} state
 *   To do.
 * @param {string} name
 *   Name.
 * @param {boolean} allowExpression
 *   Allow member expressions and identifiers.
 * @returns {unknown}
 *   To do.
 */
function findComponentFromName(state, name$1, allowExpression) {
  /** @type {Identifier | Literal | MemberExpression} */
  let result;

  if (!allowExpression) {
    result = {type: 'Literal', value: name$1};
  } else if (name$1.includes('.')) {
    const identifiers = name$1.split('.');
    let index = -1;
    /** @type {Identifier | Literal | MemberExpression | undefined} */
    let node;

    while (++index < identifiers.length) {
      /** @type {Identifier | Literal} */
      const prop = name(identifiers[index])
        ? {type: 'Identifier', name: identifiers[index]}
        : {type: 'Literal', value: identifiers[index]};
      node = node
        ? {
            type: 'MemberExpression',
            object: node,
            property: prop,
            computed: Boolean(index && prop.type === 'Literal'),
            optional: false
          }
        : prop;
    }
    result = node;
  } else {
    result =
      name(name$1) && !/^[a-z]/.test(name$1)
        ? {type: 'Identifier', name: name$1}
        : {type: 'Literal', value: name$1};
  }

  // Only literals can be passed in `components` currently.
  // No identifiers / member expressions.
  if (result.type === 'Literal') {
    const name = /** @type {string | number} */ (result.value);
    return own$3.call(state.components, name) ? state.components[name] : name
  }

  // Assume component.
  if (state.evaluater) {
    return state.evaluater.evaluateExpression(result)
  }

  crashEstree(state);
}

/**
 * @param {State} state
 * @param {Position | undefined} [place]
 * @returns {never}
 */
function crashEstree(state, place) {
  const message = new VFileMessage(
    'Cannot handle MDX estrees without `createEvaluater`',
    {
      ancestors: state.ancestors,
      place,
      ruleId: 'mdx-estree',
      source: 'hast-util-to-jsx-runtime'
    }
  );
  message.file = state.filePath || undefined;
  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater';

  throw message
}

/**
 * Transform a DOM casing style object to a CSS casing style object.
 *
 * @param {Style} domCasing
 * @returns {Style}
 */
function transformStylesToCssCasing(domCasing) {
  /** @type {Style} */
  const cssCasing = {};
  /** @type {string} */
  let from;

  for (from in domCasing) {
    if (own$3.call(domCasing, from)) {
      cssCasing[transformStyleToCssCasing(from)] = domCasing[from];
    }
  }

  return cssCasing
}

/**
 * Transform a DOM casing style field to a CSS casing style field.
 *
 * @param {string} from
 * @returns {string}
 */
function transformStyleToCssCasing(from) {
  let to = from.replace(cap, toDash);
  // Handle `ms-xxx` -> `-ms-xxx`.
  if (to.slice(0, 3) === 'ms-') to = '-' + to;
  return to
}

/**
 * Make `$0` dash cased.
 *
 * @param {string} $0
 *   Capitalized ASCII leter.
 * @returns {string}
 *   Dash and lower letter.
 */
function toDash($0) {
  return '-' + $0.toLowerCase()
}

/**
 * HTML URL properties.
 *
 * Each key is a property name and each value is a list of tag names it applies
 * to or `null` if it applies to all elements.
 *
 * @type {Record<string, Array<string> | null>}
 */
const urlAttributes = {
  action: ['form'],
  cite: ['blockquote', 'del', 'ins', 'q'],
  data: ['object'],
  formAction: ['button', 'input'],
  href: ['a', 'area', 'base', 'link'],
  icon: ['menuitem'],
  itemId: null,
  manifest: ['html'],
  ping: ['a', 'area'],
  poster: ['video'],
  src: [
    'audio',
    'embed',
    'iframe',
    'img',
    'input',
    'script',
    'source',
    'track',
    'video'
  ]
};

var jsxRuntime = {exports: {}};

var reactJsxRuntime_development = {};

/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_development;

function requireReactJsxRuntime_development () {
	if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
	hasRequiredReactJsxRuntime_development = 1;
	((function () {
	    function getComponentNameFromType(type) {
	      if (null == type) return null;
	      if ("function" === typeof type)
	        return type.$$typeof === REACT_CLIENT_REFERENCE
	          ? null
	          : type.displayName || type.name || null;
	      if ("string" === typeof type) return type;
	      switch (type) {
	        case REACT_FRAGMENT_TYPE:
	          return "Fragment";
	        case REACT_PROFILER_TYPE:
	          return "Profiler";
	        case REACT_STRICT_MODE_TYPE:
	          return "StrictMode";
	        case REACT_SUSPENSE_TYPE:
	          return "Suspense";
	        case REACT_SUSPENSE_LIST_TYPE:
	          return "SuspenseList";
	        case REACT_ACTIVITY_TYPE:
	          return "Activity";
	      }
	      if ("object" === typeof type)
	        switch (
	          ("number" === typeof type.tag &&
	            console.error(
	              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
	            ),
	          type.$$typeof)
	        ) {
	          case REACT_PORTAL_TYPE:
	            return "Portal";
	          case REACT_CONTEXT_TYPE:
	            return (type.displayName || "Context") + ".Provider";
	          case REACT_CONSUMER_TYPE:
	            return (type._context.displayName || "Context") + ".Consumer";
	          case REACT_FORWARD_REF_TYPE:
	            var innerType = type.render;
	            type = type.displayName;
	            type ||
	              ((type = innerType.displayName || innerType.name || ""),
	              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
	            return type;
	          case REACT_MEMO_TYPE:
	            return (
	              (innerType = type.displayName || null),
	              null !== innerType
	                ? innerType
	                : getComponentNameFromType(type.type) || "Memo"
	            );
	          case REACT_LAZY_TYPE:
	            innerType = type._payload;
	            type = type._init;
	            try {
	              return getComponentNameFromType(type(innerType));
	            } catch (x) {}
	        }
	      return null;
	    }
	    function testStringCoercion(value) {
	      return "" + value;
	    }
	    function checkKeyStringCoercion(value) {
	      try {
	        var JSCompiler_inline_result = false;
	      } catch (e) {
	        JSCompiler_inline_result = true;
	      }
	      if (JSCompiler_inline_result) {
	        JSCompiler_inline_result = console;
	        var JSCompiler_temp_const = JSCompiler_inline_result.error;
	        var JSCompiler_inline_result$jscomp$0 =
	          ("function" === typeof Symbol &&
	            Symbol.toStringTag &&
	            value[Symbol.toStringTag]) ||
	          value.constructor.name ||
	          "Object";
	        JSCompiler_temp_const.call(
	          JSCompiler_inline_result,
	          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
	          JSCompiler_inline_result$jscomp$0
	        );
	        return testStringCoercion(value);
	      }
	    }
	    function getTaskName(type) {
	      if (type === REACT_FRAGMENT_TYPE) return "<>";
	      if (
	        "object" === typeof type &&
	        null !== type &&
	        type.$$typeof === REACT_LAZY_TYPE
	      )
	        return "<...>";
	      try {
	        var name = getComponentNameFromType(type);
	        return name ? "<" + name + ">" : "<...>";
	      } catch (x) {
	        return "<...>";
	      }
	    }
	    function getOwner() {
	      var dispatcher = ReactSharedInternals.A;
	      return null === dispatcher ? null : dispatcher.getOwner();
	    }
	    function UnknownOwner() {
	      return Error("react-stack-top-frame");
	    }
	    function hasValidKey(config) {
	      if (hasOwnProperty.call(config, "key")) {
	        var getter = Object.getOwnPropertyDescriptor(config, "key").get;
	        if (getter && getter.isReactWarning) return false;
	      }
	      return void 0 !== config.key;
	    }
	    function defineKeyPropWarningGetter(props, displayName) {
	      function warnAboutAccessingKey() {
	        specialPropKeyWarningShown ||
	          ((specialPropKeyWarningShown = true),
	          console.error(
	            "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
	            displayName
	          ));
	      }
	      warnAboutAccessingKey.isReactWarning = true;
	      Object.defineProperty(props, "key", {
	        get: warnAboutAccessingKey,
	        configurable: true
	      });
	    }
	    function elementRefGetterWithDeprecationWarning() {
	      var componentName = getComponentNameFromType(this.type);
	      didWarnAboutElementRef[componentName] ||
	        ((didWarnAboutElementRef[componentName] = true),
	        console.error(
	          "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
	        ));
	      componentName = this.props.ref;
	      return void 0 !== componentName ? componentName : null;
	    }
	    function ReactElement(
	      type,
	      key,
	      self,
	      source,
	      owner,
	      props,
	      debugStack,
	      debugTask
	    ) {
	      self = props.ref;
	      type = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type: type,
	        key: key,
	        props: props,
	        _owner: owner
	      };
	      null !== (void 0 !== self ? self : null)
	        ? Object.defineProperty(type, "ref", {
	            enumerable: false,
	            get: elementRefGetterWithDeprecationWarning
	          })
	        : Object.defineProperty(type, "ref", { enumerable: false, value: null });
	      type._store = {};
	      Object.defineProperty(type._store, "validated", {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: 0
	      });
	      Object.defineProperty(type, "_debugInfo", {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: null
	      });
	      Object.defineProperty(type, "_debugStack", {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: debugStack
	      });
	      Object.defineProperty(type, "_debugTask", {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: debugTask
	      });
	      Object.freeze && (Object.freeze(type.props), Object.freeze(type));
	      return type;
	    }
	    function jsxDEVImpl(
	      type,
	      config,
	      maybeKey,
	      isStaticChildren,
	      source,
	      self,
	      debugStack,
	      debugTask
	    ) {
	      var children = config.children;
	      if (void 0 !== children)
	        if (isStaticChildren)
	          if (isArrayImpl(children)) {
	            for (
	              isStaticChildren = 0;
	              isStaticChildren < children.length;
	              isStaticChildren++
	            )
	              validateChildKeys(children[isStaticChildren]);
	            Object.freeze && Object.freeze(children);
	          } else
	            console.error(
	              "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
	            );
	        else validateChildKeys(children);
	      if (hasOwnProperty.call(config, "key")) {
	        children = getComponentNameFromType(type);
	        var keys = Object.keys(config).filter(function (k) {
	          return "key" !== k;
	        });
	        isStaticChildren =
	          0 < keys.length
	            ? "{key: someKey, " + keys.join(": ..., ") + ": ...}"
	            : "{key: someKey}";
	        didWarnAboutKeySpread[children + isStaticChildren] ||
	          ((keys =
	            0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}"),
	          console.error(
	            'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
	            isStaticChildren,
	            children,
	            keys,
	            children
	          ),
	          (didWarnAboutKeySpread[children + isStaticChildren] = true));
	      }
	      children = null;
	      void 0 !== maybeKey &&
	        (checkKeyStringCoercion(maybeKey), (children = "" + maybeKey));
	      hasValidKey(config) &&
	        (checkKeyStringCoercion(config.key), (children = "" + config.key));
	      if ("key" in config) {
	        maybeKey = {};
	        for (var propName in config)
	          "key" !== propName && (maybeKey[propName] = config[propName]);
	      } else maybeKey = config;
	      children &&
	        defineKeyPropWarningGetter(
	          maybeKey,
	          "function" === typeof type
	            ? type.displayName || type.name || "Unknown"
	            : type
	        );
	      return ReactElement(
	        type,
	        children,
	        self,
	        source,
	        getOwner(),
	        maybeKey,
	        debugStack,
	        debugTask
	      );
	    }
	    function validateChildKeys(node) {
	      "object" === typeof node &&
	        null !== node &&
	        node.$$typeof === REACT_ELEMENT_TYPE &&
	        node._store &&
	        (node._store.validated = 1);
	    }
	    var React = requireReact(),
	      REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
	      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
	      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
	      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
	      REACT_PROFILER_TYPE = Symbol.for("react.profiler");
	    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
	      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
	      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
	      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
	      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
	      REACT_MEMO_TYPE = Symbol.for("react.memo"),
	      REACT_LAZY_TYPE = Symbol.for("react.lazy"),
	      REACT_ACTIVITY_TYPE = Symbol.for("react.activity"),
	      REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
	      ReactSharedInternals =
	        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
	      hasOwnProperty = Object.prototype.hasOwnProperty,
	      isArrayImpl = Array.isArray,
	      createTask = console.createTask
	        ? console.createTask
	        : function () {
	            return null;
	          };
	    React = {
	      react_stack_bottom_frame: function (callStackForError) {
	        return callStackForError();
	      }
	    };
	    var specialPropKeyWarningShown;
	    var didWarnAboutElementRef = {};
	    var unknownOwnerDebugStack = React.react_stack_bottom_frame.bind(
	      React,
	      UnknownOwner
	    )();
	    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
	    var didWarnAboutKeySpread = {};
	    reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
	    reactJsxRuntime_development.jsx = function (type, config, maybeKey, source, self) {
	      var trackActualOwner =
	        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
	      return jsxDEVImpl(
	        type,
	        config,
	        maybeKey,
	        false,
	        source,
	        self,
	        trackActualOwner
	          ? Error("react-stack-top-frame")
	          : unknownOwnerDebugStack,
	        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
	      );
	    };
	    reactJsxRuntime_development.jsxs = function (type, config, maybeKey, source, self) {
	      var trackActualOwner =
	        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
	      return jsxDEVImpl(
	        type,
	        config,
	        maybeKey,
	        true,
	        source,
	        self,
	        trackActualOwner
	          ? Error("react-stack-top-frame")
	          : unknownOwnerDebugStack,
	        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask
	      );
	    };
	  }))();
	return reactJsxRuntime_development;
}

var hasRequiredJsxRuntime;

function requireJsxRuntime () {
	if (hasRequiredJsxRuntime) return jsxRuntime.exports;
	hasRequiredJsxRuntime = 1;

	{
	  jsxRuntime.exports = requireReactJsxRuntime_development();
	}
	return jsxRuntime.exports;
}

var jsxRuntimeExports = requireJsxRuntime();

/**
 * @typedef {import('mdast').Nodes} Nodes
 *
 * @typedef Options
 *   Configuration (optional).
 * @property {boolean | null | undefined} [includeImageAlt=true]
 *   Whether to use `alt` for `image`s (default: `true`).
 * @property {boolean | null | undefined} [includeHtml=true]
 *   Whether to use `value` of HTML (default: `true`).
 */

/** @type {Options} */
const emptyOptions$1 = {};

/**
 * Get the text content of a node or list of nodes.
 *
 * Prefers the node’s plain-text fields, otherwise serializes its children,
 * and if the given value is an array, serialize the nodes in it.
 *
 * @param {unknown} [value]
 *   Thing to serialize, typically `Node`.
 * @param {Options | null | undefined} [options]
 *   Configuration (optional).
 * @returns {string}
 *   Serialized `value`.
 */
function toString$1(value, options) {
  const settings = emptyOptions$1;
  const includeImageAlt =
    typeof settings.includeImageAlt === 'boolean'
      ? settings.includeImageAlt
      : true;
  const includeHtml =
    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true;

  return one(value, includeImageAlt, includeHtml)
}

/**
 * One node or several nodes.
 *
 * @param {unknown} value
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @param {boolean} includeHtml
 *   Include HTML.
 * @returns {string}
 *   Serialized node.
 */
function one(value, includeImageAlt, includeHtml) {
  if (node(value)) {
    if ('value' in value) {
      return value.type === 'html' && !includeHtml ? '' : value.value
    }

    if (includeImageAlt && 'alt' in value && value.alt) {
      return value.alt
    }

    if ('children' in value) {
      return all(value.children, includeImageAlt, includeHtml)
    }
  }

  if (Array.isArray(value)) {
    return all(value, includeImageAlt, includeHtml)
  }

  return ''
}

/**
 * Serialize a list of nodes.
 *
 * @param {Array<unknown>} values
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @param {boolean} includeHtml
 *   Include HTML.
 * @returns {string}
 *   Serialized nodes.
 */
function all(values, includeImageAlt, includeHtml) {
  /** @type {Array<string>} */
  const result = [];
  let index = -1;

  while (++index < values.length) {
    result[index] = one(values[index], includeImageAlt, includeHtml);
  }

  return result.join('')
}

/**
 * Check if `value` looks like a node.
 *
 * @param {unknown} value
 *   Thing.
 * @returns {value is Nodes}
 *   Whether `value` is a node.
 */
function node(value) {
  return Boolean(value && typeof value === 'object')
}

/// <reference lib="dom" />

/* global document */

const element = document.createElement('i');

/**
 * @param {string} value
 * @returns {string | false}
 */
function decodeNamedCharacterReference(value) {
  const characterReference = '&' + value + ';';
  element.innerHTML = characterReference;
  const character = element.textContent;

  // Some named character references do not require the closing semicolon
  // (`&not`, for instance), which leads to situations where parsing the assumed
  // named reference of `&notit;` will result in the string `¬it;`.
  // When we encounter a trailing semicolon after parsing, and the character
  // reference to decode was not a semicolon (`&semi;`), we can assume that the
  // matching was not complete.
  if (
    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
    // yield `null`.
    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&
    value !== 'semi'
  ) {
    return false
  }

  // If the decoded string is equal to the input, the character reference was
  // not valid.
  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
  // yield `null`.
  return character === characterReference ? false : character
}

/**
 * Like `Array#splice`, but smarter for giant arrays.
 *
 * `Array#splice` takes all items to be inserted as individual argument which
 * causes a stack overflow in V8 when trying to insert 100k items for instance.
 *
 * Otherwise, this does not return the removed items, and takes `items` as an
 * array instead of rest parameters.
 *
 * @template {unknown} T
 *   Item type.
 * @param {Array<T>} list
 *   List to operate on.
 * @param {number} start
 *   Index to remove/insert at (can be negative).
 * @param {number} remove
 *   Number of items to remove.
 * @param {Array<T>} items
 *   Items to inject into `list`.
 * @returns {undefined}
 *   Nothing.
 */
function splice(list, start, remove, items) {
  const end = list.length;
  let chunkStart = 0;
  /** @type {Array<unknown>} */
  let parameters;

  // Make start between zero and `end` (included).
  if (start < 0) {
    start = -start > end ? 0 : end + start;
  } else {
    start = start > end ? end : start;
  }
  remove = remove > 0 ? remove : 0;

  // No need to chunk the items if there’s only a couple (10k) items.
  if (items.length < 10000) {
    parameters = Array.from(items);
    parameters.unshift(start, remove);
    // @ts-expect-error Hush, it’s fine.
    list.splice(...parameters);
  } else {
    // Delete `remove` items starting from `start`
    if (remove) list.splice(start, remove);

    // Insert the items in chunks to not cause stack overflows.
    while (chunkStart < items.length) {
      parameters = items.slice(chunkStart, chunkStart + 10000);
      parameters.unshift(start, 0);
      // @ts-expect-error Hush, it’s fine.
      list.splice(...parameters);
      chunkStart += 10000;
      start += 10000;
    }
  }
}

/**
 * Append `items` (an array) at the end of `list` (another array).
 * When `list` was empty, returns `items` instead.
 *
 * This prevents a potentially expensive operation when `list` is empty,
 * and adds items in batches to prevent V8 from hanging.
 *
 * @template {unknown} T
 *   Item type.
 * @param {Array<T>} list
 *   List to operate on.
 * @param {Array<T>} items
 *   Items to add to `list`.
 * @returns {Array<T>}
 *   Either `list` or `items`.
 */
function push(list, items) {
  if (list.length > 0) {
    splice(list, list.length, 0, items);
    return list;
  }
  return items;
}

/**
 * @import {
 *   Extension,
 *   Handles,
 *   HtmlExtension,
 *   NormalizedExtension
 * } from 'micromark-util-types'
 */


const hasOwnProperty = {}.hasOwnProperty;

/**
 * Combine multiple syntax extensions into one.
 *
 * @param {ReadonlyArray<Extension>} extensions
 *   List of syntax extensions.
 * @returns {NormalizedExtension}
 *   A single combined extension.
 */
function combineExtensions(extensions) {
  /** @type {NormalizedExtension} */
  const all = {};
  let index = -1;

  while (++index < extensions.length) {
    syntaxExtension(all, extensions[index]);
  }

  return all
}

/**
 * Merge `extension` into `all`.
 *
 * @param {NormalizedExtension} all
 *   Extension to merge into.
 * @param {Extension} extension
 *   Extension to merge.
 * @returns {undefined}
 *   Nothing.
 */
function syntaxExtension(all, extension) {
  /** @type {keyof Extension} */
  let hook;

  for (hook in extension) {
    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;
    /** @type {Record<string, unknown>} */
    const left = maybe || (all[hook] = {});
    /** @type {Record<string, unknown> | undefined} */
    const right = extension[hook];
    /** @type {string} */
    let code;

    if (right) {
      for (code in right) {
        if (!hasOwnProperty.call(left, code)) left[code] = [];
        const value = right[code];
        constructs(
          // @ts-expect-error Looks like a list.
          left[code],
          Array.isArray(value) ? value : value ? [value] : []
        );
      }
    }
  }
}

/**
 * Merge `list` into `existing` (both lists of constructs).
 * Mutates `existing`.
 *
 * @param {Array<unknown>} existing
 *   List of constructs to merge into.
 * @param {Array<unknown>} list
 *   List of constructs to merge.
 * @returns {undefined}
 *   Nothing.
 */
function constructs(existing, list) {
  let index = -1;
  /** @type {Array<unknown>} */
  const before = [];

  while (++index < list.length) {
(list[index].add === 'after' ? existing : before).push(list[index]);
  }

  splice(existing, 0, 0, before);
}

/**
 * Turn the number (in string form as either hexa- or plain decimal) coming from
 * a numeric character reference into a character.
 *
 * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes
 * non-characters and control characters safe.
 *
 * @param {string} value
 *   Value to decode.
 * @param {number} base
 *   Numeric base.
 * @returns {string}
 *   Character.
 */
function decodeNumericCharacterReference(value, base) {
  const code = Number.parseInt(value, base);
  if (
  // C0 except for HT, LF, FF, CR, space.
  code < 9 || code === 11 || code > 13 && code < 32 ||
  // Control character (DEL) of C0, and C1 controls.
  code > 126 && code < 160 ||
  // Lone high surrogates and low surrogates.
  code > 55_295 && code < 57_344 ||
  // Noncharacters.
  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */
  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */
  // Out of range
  code > 1_114_111) {
    return "\uFFFD";
  }
  return String.fromCodePoint(code);
}

/**
 * Normalize an identifier (as found in references, definitions).
 *
 * Collapses markdown whitespace, trim, and then lower- and uppercase.
 *
 * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their
 * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different
 * uppercase character (U+0398 (`Θ`)).
 * So, to get a canonical form, we perform both lower- and uppercase.
 *
 * Using uppercase last makes sure keys will never interact with default
 * prototypal values (such as `constructor`): nothing in the prototype of
 * `Object` is uppercase.
 *
 * @param {string} value
 *   Identifier to normalize.
 * @returns {string}
 *   Normalized identifier.
 */
function normalizeIdentifier(value) {
  return value
  // Collapse markdown whitespace.
  .replace(/[\t\n\r ]+/g, " ")
  // Trim.
  .replace(/^ | $/g, '')
  // Some characters are considered “uppercase”, but if their lowercase
  // counterpart is uppercased will result in a different uppercase
  // character.
  // Hence, to get that form, we perform both lower- and uppercase.
  // Upper case makes sure keys will not interact with default prototypal
  // methods: no method is uppercase.
  .toLowerCase().toUpperCase();
}

/**
 * @import {Code} from 'micromark-util-types'
 */

/**
 * Check whether the character code represents an ASCII alpha (`a` through `z`,
 * case insensitive).
 *
 * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.
 *
 * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)
 * to U+005A (`Z`).
 *
 * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)
 * to U+007A (`z`).
 *
 * @param code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */
const asciiAlpha = regexCheck(/[A-Za-z]/);

/**
 * Check whether the character code represents an ASCII alphanumeric (`a`
 * through `z`, case insensitive, or `0` through `9`).
 *
 * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha
 * (see `asciiAlpha`).
 *
 * @param code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */
const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);

/**
 * Check whether the character code represents an ASCII atext.
 *
 * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in
 * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),
 * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F
 * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E
 * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE
 * (`{`) to U+007E TILDE (`~`).
 *
 * See:
 * **\[RFC5322]**:
 * [Internet Message Format](https://tools.ietf.org/html/rfc5322).
 * P. Resnick.
 * IETF.
 *
 * @param code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */
const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);

/**
 * Check whether a character code is an ASCII control character.
 *
 * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)
 * to U+001F (US), or U+007F (DEL).
 *
 * @param {Code} code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */
function asciiControl(code) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code !== null && (code < 32 || code === 127)
  );
}

/**
 * Check whether the character code represents an ASCII digit (`0` through `9`).
 *
 * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to
 * U+0039 (`9`).
 *
 * @param code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */
const asciiDigit = regexCheck(/\d/);

/**
 * Check whether the character code represents an ASCII hex digit (`a` through
 * `f`, case insensitive, or `0` through `9`).
 *
 * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex
 * digit, or an ASCII lower hex digit.
 *
 * An **ASCII upper hex digit** is a character in the inclusive range U+0041
 * (`A`) to U+0046 (`F`).
 *
 * An **ASCII lower hex digit** is a character in the inclusive range U+0061
 * (`a`) to U+0066 (`f`).
 *
 * @param code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */
const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);

/**
 * Check whether the character code represents ASCII punctuation.
 *
 * An **ASCII punctuation** is a character in the inclusive ranges U+0021
 * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT
 * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT
 * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).
 *
 * @param code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */
const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);

/**
 * Check whether a character code is a markdown line ending.
 *
 * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN
 * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).
 *
 * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE
 * RETURN (CR) are replaced by these virtual characters depending on whether
 * they occurred together.
 *
 * @param {Code} code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */
function markdownLineEnding(code) {
  return code !== null && code < -2;
}

/**
 * Check whether a character code is a markdown line ending (see
 * `markdownLineEnding`) or markdown space (see `markdownSpace`).
 *
 * @param {Code} code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */
function markdownLineEndingOrSpace(code) {
  return code !== null && (code < 0 || code === 32);
}

/**
 * Check whether a character code is a markdown space.
 *
 * A **markdown space** is the concrete character U+0020 SPACE (SP) and the
 * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).
 *
 * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is
 * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL
 * SPACE (VS) characters, depending on the column at which the tab occurred.
 *
 * @param {Code} code
 *   Code.
 * @returns {boolean}
 *   Whether it matches.
 */
function markdownSpace(code) {
  return code === -2 || code === -1 || code === 32;
}

// Size note: removing ASCII from the regex and using `asciiPunctuation` here
// In fact adds to the bundle size.
/**
 * Check whether the character code represents Unicode punctuation.
 *
 * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,
 * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`
 * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`
 * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII
 * punctuation (see `asciiPunctuation`).
 *
 * See:
 * **\[UNICODE]**:
 * [The Unicode Standard](https://www.unicode.org/versions/).
 * Unicode Consortium.
 *
 * @param code
 *   Code.
 * @returns
 *   Whether it matches.
 */
const unicodePunctuation = regexCheck(/\p{P}|\p{S}/u);

/**
 * Check whether the character code represents Unicode whitespace.
 *
 * Note that this does handle micromark specific markdown whitespace characters.
 * See `markdownLineEndingOrSpace` to check that.
 *
 * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,
 * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),
 * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\[UNICODE]**).
 *
 * See:
 * **\[UNICODE]**:
 * [The Unicode Standard](https://www.unicode.org/versions/).
 * Unicode Consortium.
 *
 * @param code
 *   Code.
 * @returns
 *   Whether it matches.
 */
const unicodeWhitespace = regexCheck(/\s/);

/**
 * Create a code check from a regex.
 *
 * @param {RegExp} regex
 *   Expression.
 * @returns {(code: Code) => boolean}
 *   Check.
 */
function regexCheck(regex) {
  return check;

  /**
   * Check whether a code matches the bound regex.
   *
   * @param {Code} code
   *   Character code.
   * @returns {boolean}
   *   Whether the character code matches the bound regex.
   */
  function check(code) {
    return code !== null && code > -1 && regex.test(String.fromCharCode(code));
  }
}

/**
 * Normalize a URL.
 *
 * Encode unsafe characters with percent-encoding, skipping already encoded
 * sequences.
 *
 * @param {string} value
 *   URI to normalize.
 * @returns {string}
 *   Normalized URI.
 */
function normalizeUri(value) {
  /** @type {Array<string>} */
  const result = [];
  let index = -1;
  let start = 0;
  let skip = 0;
  while (++index < value.length) {
    const code = value.charCodeAt(index);
    /** @type {string} */
    let replace = '';

    // A correct percent encoded value.
    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {
      skip = 2;
    }
    // ASCII.
    else if (code < 128) {
      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
        replace = String.fromCharCode(code);
      }
    }
    // Astral.
    else if (code > 55_295 && code < 57_344) {
      const next = value.charCodeAt(index + 1);

      // A correct surrogate pair.
      if (code < 56_320 && next > 56_319 && next < 57_344) {
        replace = String.fromCharCode(code, next);
        skip = 1;
      }
      // Lone surrogate.
      else {
        replace = "\uFFFD";
      }
    }
    // Unicode.
    else {
      replace = String.fromCharCode(code);
    }
    if (replace) {
      result.push(value.slice(start, index), encodeURIComponent(replace));
      start = index + skip + 1;
      replace = '';
    }
    if (skip) {
      index += skip;
      skip = 0;
    }
  }
  return result.join('') + value.slice(start);
}

/**
 * @import {Effects, State, TokenType} from 'micromark-util-types'
 */


// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.

/**
 * Parse spaces and tabs.
 *
 * There is no `nok` parameter:
 *
 * *   spaces in markdown are often optional, in which case this factory can be
 *     used and `ok` will be switched to whether spaces were found or not
 * *   one line ending or space can be detected with `markdownSpace(code)` right
 *     before using `factorySpace`
 *
 * ###### Examples
 *
 * Where `␉` represents a tab (plus how much it expands) and `␠` represents a
 * single space.
 *
 * ```markdown
 * ␉
 * ␠␠␠␠
 * ␉␠
 * ```
 *
 * @param {Effects} effects
 *   Context.
 * @param {State} ok
 *   State switched to when successful.
 * @param {TokenType} type
 *   Type (`' \t'`).
 * @param {number | undefined} [max=Infinity]
 *   Max (exclusive).
 * @returns {State}
 *   Start state.
 */
function factorySpace(effects, ok, type, max) {
  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
  let size = 0;
  return start;

  /** @type {State} */
  function start(code) {
    if (markdownSpace(code)) {
      effects.enter(type);
      return prefix(code);
    }
    return ok(code);
  }

  /** @type {State} */
  function prefix(code) {
    if (markdownSpace(code) && size++ < limit) {
      effects.consume(code);
      return prefix;
    }
    effects.exit(type);
    return ok(code);
  }
}

/**
 * @import {
 *   InitialConstruct,
 *   Initializer,
 *   State,
 *   TokenizeContext,
 *   Token
 * } from 'micromark-util-types'
 */

/** @type {InitialConstruct} */
const content$1 = {
  tokenize: initializeContent
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Initializer}
 *   Content.
 */
function initializeContent(effects) {
  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
  /** @type {Token} */
  let previous;
  return contentStart;

  /** @type {State} */
  function afterContentStartConstruct(code) {
    if (code === null) {
      effects.consume(code);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return factorySpace(effects, contentStart, "linePrefix");
  }

  /** @type {State} */
  function paragraphInitial(code) {
    effects.enter("paragraph");
    return lineStart(code);
  }

  /** @type {State} */
  function lineStart(code) {
    const token = effects.enter("chunkText", {
      contentType: "text",
      previous
    });
    if (previous) {
      previous.next = token;
    }
    previous = token;
    return data(code);
  }

  /** @type {State} */
  function data(code) {
    if (code === null) {
      effects.exit("chunkText");
      effects.exit("paragraph");
      effects.consume(code);
      return;
    }
    if (markdownLineEnding(code)) {
      effects.consume(code);
      effects.exit("chunkText");
      return lineStart;
    }

    // Data.
    effects.consume(code);
    return data;
  }
}

/**
 * @import {
 *   Construct,
 *   ContainerState,
 *   InitialConstruct,
 *   Initializer,
 *   Point,
 *   State,
 *   TokenizeContext,
 *   Tokenizer,
 *   Token
 * } from 'micromark-util-types'
 */

/** @type {InitialConstruct} */
const document$2 = {
  tokenize: initializeDocument
};

/** @type {Construct} */
const containerConstruct = {
  tokenize: tokenizeContainer
};

/**
 * @this {TokenizeContext}
 *   Self.
 * @type {Initializer}
 *   Initializer.
 */
function initializeDocument(effects) {
  const self = this;
  /** @type {Array<StackItem>} */
  const stack = [];
  let continued = 0;
  /** @type {TokenizeContext | undefined} */
  let childFlow;
  /** @type {Token | undefined} */
  let childToken;
  /** @type {number} */
  let lineStartOffset;
  return start;

  /** @type {State} */
  function start(code) {
    // First we iterate through the open blocks, starting with the root
    // document, and descending through last children down to the last open
    // block.
    // Each block imposes a condition that the line must satisfy if the block is
    // to remain open.
    // For example, a block quote requires a `>` character.
    // A paragraph requires a non-blank line.
    // In this phase we may match all or just some of the open blocks.
    // But we cannot close unmatched blocks yet, because we may have a lazy
    // continuation line.
    if (continued < stack.length) {
      const item = stack[continued];
      self.containerState = item[1];
      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);
    }

    // Done.
    return checkNewContainers(code);
  }

  /** @type {State} */
  function documentContinue(code) {
    continued++;

    // Note: this field is called `_closeFlow` but it also closes containers.
    // Perhaps a good idea to rename it but it’s already used in the wild by
    // extensions.
    if (self.containerState._closeFlow) {
      self.containerState._closeFlow = undefined;
      if (childFlow) {
        closeFlow();
      }

      // Note: this algorithm for moving events around is similar to the
      // algorithm when dealing with lazy lines in `writeToChild`.
      const indexBeforeExits = self.events.length;
      let indexBeforeFlow = indexBeforeExits;
      /** @type {Point | undefined} */
      let point;

      // Find the flow chunk.
      while (indexBeforeFlow--) {
        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === "chunkFlow") {
          point = self.events[indexBeforeFlow][1].end;
          break;
        }
      }
      exitContainers(continued);

      // Fix positions.
      let index = indexBeforeExits;
      while (index < self.events.length) {
        self.events[index][1].end = {
          ...point
        };
        index++;
      }

      // Inject the exits earlier (they’re still also at the end).
      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));

      // Discard the duplicate exits.
      self.events.length = index;
      return checkNewContainers(code);
    }
    return start(code);
  }

  /** @type {State} */
  function checkNewContainers(code) {
    // Next, after consuming the continuation markers for existing blocks, we
    // look for new block starts (e.g. `>` for a block quote).
    // If we encounter a new block start, we close any blocks unmatched in
    // step 1 before creating the new block as a child of the last matched
    // block.
    if (continued === stack.length) {
      // No need to `check` whether there’s a container, of `exitContainers`
      // would be moot.
      // We can instead immediately `attempt` to parse one.
      if (!childFlow) {
        return documentContinued(code);
      }

      // If we have concrete content, such as block HTML or fenced code,
      // we can’t have containers “pierce” into them, so we can immediately
      // start.
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        return flowStart(code);
      }

      // If we do have flow, it could still be a blank line,
      // but we’d be interrupting it w/ a new container if there’s a current
      // construct.
      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer
      // needed in micromark-extension-gfm-table@1.0.6).
      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);
    }

    // Check if there is a new container.
    self.containerState = {};
    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);
  }

  /** @type {State} */
  function thereIsANewContainer(code) {
    if (childFlow) closeFlow();
    exitContainers(continued);
    return documentContinued(code);
  }

  /** @type {State} */
  function thereIsNoNewContainer(code) {
    self.parser.lazy[self.now().line] = continued !== stack.length;
    lineStartOffset = self.now().offset;
    return flowStart(code);
  }

  /** @type {State} */
  function documentContinued(code) {
    // Try new containers.
    self.containerState = {};
    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);
  }

  /** @type {State} */
  function containerContinue(code) {
    continued++;
    stack.push([self.currentConstruct, self.containerState]);
    // Try another.
    return documentContinued(code);
  }

  /** @type {State} */
  function flowStart(code) {
    if (code === null) {
      if (childFlow) closeFlow();
      exitContainers(0);
      effects.consume(code);
      return;
    }
    childFlow = childFlow || self.parser.flow(self.now());
    effects.enter("chunkFlow", {
      _tokenizer: childFlow,
      contentType: "flow",
      previous: childToken
    });
    return flowContinue(code);
  }

  /** @type {State} */
  function flowContinue(code) {
    if (code === null) {
      writeToChild(effects.exit("chunkFlow"), true);
      exitContainers(0);
      effects.consume(code);
      return;
    }
    if (markdownLineEnding(code)) {
      effects.consume(code);
      writeToChild(effects.exit("chunkFlow"));
      // Get ready for the next line.
      continued = 0;
      self.interrupt = undefined;
      return start;
    }
    effects.consume(code);
    return flowContinue;
  }

  /**
   * @param {Token} token
   *   Token.
   * @param {boolean | undefined} [endOfFile]
   *   Whether the token is at the end of the file (default: `false`).
   * @returns {undefined}
   *   Nothing.
   */
  function writeToChild(token, endOfFile) {
    const stream = self.sliceStream(token);
    if (endOfFile) stream.push(null);
    token.previous = childToken;
    if (childToken) childToken.next = token;
    childToken = token;
    childFlow.defineSkip(token.start);
    childFlow.write(stream);

    // Alright, so we just added a lazy line:
    //
    // ```markdown
    // > a
    // b.
    //
    // Or:
    //
    // > ~~~c
    // d
    //
    // Or:
    //
    // > | e |
    // f
    // ```
    //
    // The construct in the second example (fenced code) does not accept lazy
    // lines, so it marked itself as done at the end of its first line, and
    // then the content construct parses `d`.
    // Most constructs in markdown match on the first line: if the first line
    // forms a construct, a non-lazy line can’t “unmake” it.
    //
    // The construct in the third example is potentially a GFM table, and
    // those are *weird*.
    // It *could* be a table, from the first line, if the following line
    // matches a condition.
    // In this case, that second line is lazy, which “unmakes” the first line
    // and turns the whole into one content block.
    //
    // We’ve now parsed the non-lazy and the lazy line, and can figure out
    // whether the lazy line started a new flow block.
    // If it did, we exit the current containers between the two flow blocks.
    if (self.parser.lazy[token.start.line]) {
      let index = childFlow.events.length;
      while (index--) {
        if (
        // The token starts before the line ending…
        childFlow.events[index][1].start.offset < lineStartOffset && (
        // …and either is not ended yet…
        !childFlow.events[index][1].end ||
        // …or ends after it.
        childFlow.events[index][1].end.offset > lineStartOffset)) {
          // Exit: there’s still something open, which means it’s a lazy line
          // part of something.
          return;
        }
      }

      // Note: this algorithm for moving events around is similar to the
      // algorithm when closing flow in `documentContinue`.
      const indexBeforeExits = self.events.length;
      let indexBeforeFlow = indexBeforeExits;
      /** @type {boolean | undefined} */
      let seen;
      /** @type {Point | undefined} */
      let point;

      // Find the previous chunk (the one before the lazy line).
      while (indexBeforeFlow--) {
        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === "chunkFlow") {
          if (seen) {
            point = self.events[indexBeforeFlow][1].end;
            break;
          }
          seen = true;
        }
      }
      exitContainers(continued);

      // Fix positions.
      index = indexBeforeExits;
      while (index < self.events.length) {
        self.events[index][1].end = {
          ...point
        };
        index++;
      }

      // Inject the exits earlier (they’re still also at the end).
      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));

      // Discard the duplicate exits.
      self.events.length = index;
    }
  }

  /**
   * @param {number} size
   *   Size.
   * @returns {undefined}
   *   Nothing.
   */
  function exitContainers(size) {
    let index = stack.length;

    // Exit open containers.
    while (index-- > size) {
      const entry = stack[index];
      self.containerState = entry[1];
      entry[0].exit.call(self, effects);
    }
    stack.length = size;
  }
  function closeFlow() {
    childFlow.write([null]);
    childToken = undefined;
    childFlow = undefined;
    self.containerState._closeFlow = undefined;
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 *   Tokenizer.
 */
function tokenizeContainer(effects, ok, nok) {
  // Always populated by defaults.

  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), "linePrefix", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);
}

/**
 * @import {Code} from 'micromark-util-types'
 */

/**
 * Classify whether a code represents whitespace, punctuation, or something
 * else.
 *
 * Used for attention (emphasis, strong), whose sequences can open or close
 * based on the class of surrounding characters.
 *
 * > 👉 **Note**: eof (`null`) is seen as whitespace.
 *
 * @param {Code} code
 *   Code.
 * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}
 *   Group.
 */
function classifyCharacter(code) {
  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {
    return 1;
  }
  if (unicodePunctuation(code)) {
    return 2;
  }
}

/**
 * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'
 */

/**
 * Call all `resolveAll`s.
 *
 * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs
 *   List of constructs, optionally with `resolveAll`s.
 * @param {Array<Event>} events
 *   List of events.
 * @param {TokenizeContext} context
 *   Context used by `tokenize`.
 * @returns {Array<Event>}
 *   Changed events.
 */
function resolveAll(constructs, events, context) {
  /** @type {Array<Resolver>} */
  const called = [];
  let index = -1;

  while (++index < constructs.length) {
    const resolve = constructs[index].resolveAll;

    if (resolve && !called.includes(resolve)) {
      events = resolve(events, context);
      called.push(resolve);
    }
  }

  return events
}

/**
 * @import {
 *   Code,
 *   Construct,
 *   Event,
 *   Point,
 *   Resolver,
 *   State,
 *   TokenizeContext,
 *   Tokenizer,
 *   Token
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const attention = {
  name: 'attention',
  resolveAll: resolveAllAttention,
  tokenize: tokenizeAttention
};

/**
 * Take all events and resolve attention to emphasis or strong.
 *
 * @type {Resolver}
 */
// eslint-disable-next-line complexity
function resolveAllAttention(events, context) {
  let index = -1;
  /** @type {number} */
  let open;
  /** @type {Token} */
  let group;
  /** @type {Token} */
  let text;
  /** @type {Token} */
  let openingSequence;
  /** @type {Token} */
  let closingSequence;
  /** @type {number} */
  let use;
  /** @type {Array<Event>} */
  let nextEvents;
  /** @type {number} */
  let offset;

  // Walk through all events.
  //
  // Note: performance of this is fine on an mb of normal markdown, but it’s
  // a bottleneck for malicious stuff.
  while (++index < events.length) {
    // Find a token that can close.
    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {
      open = index;

      // Now walk back to find an opener.
      while (open--) {
        // Find a token that can open the closer.
        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&
        // If the markers are the same:
        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {
          // If the opening can close or the closing can open,
          // and the close size *is not* a multiple of three,
          // but the sum of the opening and closing size *is* multiple of three,
          // then don’t match.
          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {
            continue;
          }

          // Number of markers to use from the sequence.
          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;
          const start = {
            ...events[open][1].end
          };
          const end = {
            ...events[index][1].start
          };
          movePoint(start, -use);
          movePoint(end, use);
          openingSequence = {
            type: use > 1 ? "strongSequence" : "emphasisSequence",
            start,
            end: {
              ...events[open][1].end
            }
          };
          closingSequence = {
            type: use > 1 ? "strongSequence" : "emphasisSequence",
            start: {
              ...events[index][1].start
            },
            end
          };
          text = {
            type: use > 1 ? "strongText" : "emphasisText",
            start: {
              ...events[open][1].end
            },
            end: {
              ...events[index][1].start
            }
          };
          group = {
            type: use > 1 ? "strong" : "emphasis",
            start: {
              ...openingSequence.start
            },
            end: {
              ...closingSequence.end
            }
          };
          events[open][1].end = {
            ...openingSequence.start
          };
          events[index][1].start = {
            ...closingSequence.end
          };
          nextEvents = [];

          // If there are more markers in the opening, add them before.
          if (events[open][1].end.offset - events[open][1].start.offset) {
            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);
          }

          // Opening.
          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);

          // Always populated by defaults.

          // Between.
          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));

          // Closing.
          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);

          // If there are more markers in the closing, add them after.
          if (events[index][1].end.offset - events[index][1].start.offset) {
            offset = 2;
            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);
          } else {
            offset = 0;
          }
          splice(events, open - 1, index - open + 3, nextEvents);
          index = open + nextEvents.length - offset - 2;
          break;
        }
      }
    }
  }

  // Remove remaining sequences.
  index = -1;
  while (++index < events.length) {
    if (events[index][1].type === 'attentionSequence') {
      events[index][1].type = 'data';
    }
  }
  return events;
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeAttention(effects, ok) {
  const attentionMarkers = this.parser.constructs.attentionMarkers.null;
  const previous = this.previous;
  const before = classifyCharacter(previous);

  /** @type {NonNullable<Code>} */
  let marker;
  return start;

  /**
   * Before a sequence.
   *
   * ```markdown
   * > | **
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    marker = code;
    effects.enter('attentionSequence');
    return inside(code);
  }

  /**
   * In a sequence.
   *
   * ```markdown
   * > | **
   *     ^^
   * ```
   *
   * @type {State}
   */
  function inside(code) {
    if (code === marker) {
      effects.consume(code);
      return inside;
    }
    const token = effects.exit('attentionSequence');

    // To do: next major: move this to resolver, just like `markdown-rs`.
    const after = classifyCharacter(code);

    // Always populated by defaults.

    const open = !after || after === 2 && before || attentionMarkers.includes(code);
    const close = !before || before === 2 && after || attentionMarkers.includes(previous);
    token._open = Boolean(marker === 42 ? open : open && (before || !close));
    token._close = Boolean(marker === 42 ? close : close && (after || !open));
    return ok(code);
  }
}

/**
 * Move a point a bit.
 *
 * Note: `move` only works inside lines! It’s not possible to move past other
 * chunks (replacement characters, tabs, or line endings).
 *
 * @param {Point} point
 *   Point.
 * @param {number} offset
 *   Amount to move.
 * @returns {undefined}
 *   Nothing.
 */
function movePoint(point, offset) {
  point.column += offset;
  point.offset += offset;
  point._bufferIndex += offset;
}

/**
 * @import {
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const autolink = {
  name: 'autolink',
  tokenize: tokenizeAutolink
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeAutolink(effects, ok, nok) {
  let size = 0;
  return start;

  /**
   * Start of an autolink.
   *
   * ```markdown
   * > | a<https://example.com>b
   *      ^
   * > | a<user@example.com>b
   *      ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    effects.enter("autolink");
    effects.enter("autolinkMarker");
    effects.consume(code);
    effects.exit("autolinkMarker");
    effects.enter("autolinkProtocol");
    return open;
  }

  /**
   * After `<`, at protocol or atext.
   *
   * ```markdown
   * > | a<https://example.com>b
   *       ^
   * > | a<user@example.com>b
   *       ^
   * ```
   *
   * @type {State}
   */
  function open(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      return schemeOrEmailAtext;
    }
    if (code === 64) {
      return nok(code);
    }
    return emailAtext(code);
  }

  /**
   * At second byte of protocol or atext.
   *
   * ```markdown
   * > | a<https://example.com>b
   *        ^
   * > | a<user@example.com>b
   *        ^
   * ```
   *
   * @type {State}
   */
  function schemeOrEmailAtext(code) {
    // ASCII alphanumeric and `+`, `-`, and `.`.
    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {
      // Count the previous alphabetical from `open` too.
      size = 1;
      return schemeInsideOrEmailAtext(code);
    }
    return emailAtext(code);
  }

  /**
   * In ambiguous protocol or atext.
   *
   * ```markdown
   * > | a<https://example.com>b
   *        ^
   * > | a<user@example.com>b
   *        ^
   * ```
   *
   * @type {State}
   */
  function schemeInsideOrEmailAtext(code) {
    if (code === 58) {
      effects.consume(code);
      size = 0;
      return urlInside;
    }

    // ASCII alphanumeric and `+`, `-`, and `.`.
    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {
      effects.consume(code);
      return schemeInsideOrEmailAtext;
    }
    size = 0;
    return emailAtext(code);
  }

  /**
   * After protocol, in URL.
   *
   * ```markdown
   * > | a<https://example.com>b
   *             ^
   * ```
   *
   * @type {State}
   */
  function urlInside(code) {
    if (code === 62) {
      effects.exit("autolinkProtocol");
      effects.enter("autolinkMarker");
      effects.consume(code);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok;
    }

    // ASCII control, space, or `<`.
    if (code === null || code === 32 || code === 60 || asciiControl(code)) {
      return nok(code);
    }
    effects.consume(code);
    return urlInside;
  }

  /**
   * In email atext.
   *
   * ```markdown
   * > | a<user.name@example.com>b
   *              ^
   * ```
   *
   * @type {State}
   */
  function emailAtext(code) {
    if (code === 64) {
      effects.consume(code);
      return emailAtSignOrDot;
    }
    if (asciiAtext(code)) {
      effects.consume(code);
      return emailAtext;
    }
    return nok(code);
  }

  /**
   * In label, after at-sign or dot.
   *
   * ```markdown
   * > | a<user.name@example.com>b
   *                 ^       ^
   * ```
   *
   * @type {State}
   */
  function emailAtSignOrDot(code) {
    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);
  }

  /**
   * In label, where `.` and `>` are allowed.
   *
   * ```markdown
   * > | a<user.name@example.com>b
   *                   ^
   * ```
   *
   * @type {State}
   */
  function emailLabel(code) {
    if (code === 46) {
      effects.consume(code);
      size = 0;
      return emailAtSignOrDot;
    }
    if (code === 62) {
      // Exit, then change the token type.
      effects.exit("autolinkProtocol").type = "autolinkEmail";
      effects.enter("autolinkMarker");
      effects.consume(code);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok;
    }
    return emailValue(code);
  }

  /**
   * In label, where `.` and `>` are *not* allowed.
   *
   * Though, this is also used in `emailLabel` to parse other values.
   *
   * ```markdown
   * > | a<user.name@ex-ample.com>b
   *                    ^
   * ```
   *
   * @type {State}
   */
  function emailValue(code) {
    // ASCII alphanumeric or `-`.
    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {
      const next = code === 45 ? emailValue : emailLabel;
      effects.consume(code);
      return next;
    }
    return nok(code);
  }
}

/**
 * @import {
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const blankLine = {
  partial: true,
  tokenize: tokenizeBlankLine
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeBlankLine(effects, ok, nok) {
  return start;

  /**
   * Start of blank line.
   *
   * > 👉 **Note**: `␠` represents a space character.
   *
   * ```markdown
   * > | ␠␠␊
   *     ^
   * > | ␊
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    return markdownSpace(code) ? factorySpace(effects, after, "linePrefix")(code) : after(code);
  }

  /**
   * At eof/eol, after optional whitespace.
   *
   * > 👉 **Note**: `␠` represents a space character.
   *
   * ```markdown
   * > | ␠␠␊
   *       ^
   * > | ␊
   *     ^
   * ```
   *
   * @type {State}
   */
  function after(code) {
    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);
  }
}

/**
 * @import {
 *   Construct,
 *   Exiter,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const blockQuote = {
  continuation: {
    tokenize: tokenizeBlockQuoteContinuation
  },
  exit,
  name: 'blockQuote',
  tokenize: tokenizeBlockQuoteStart
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeBlockQuoteStart(effects, ok, nok) {
  const self = this;
  return start;

  /**
   * Start of block quote.
   *
   * ```markdown
   * > | > a
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    if (code === 62) {
      const state = self.containerState;
      if (!state.open) {
        effects.enter("blockQuote", {
          _container: true
        });
        state.open = true;
      }
      effects.enter("blockQuotePrefix");
      effects.enter("blockQuoteMarker");
      effects.consume(code);
      effects.exit("blockQuoteMarker");
      return after;
    }
    return nok(code);
  }

  /**
   * After `>`, before optional whitespace.
   *
   * ```markdown
   * > | > a
   *      ^
   * ```
   *
   * @type {State}
   */
  function after(code) {
    if (markdownSpace(code)) {
      effects.enter("blockQuotePrefixWhitespace");
      effects.consume(code);
      effects.exit("blockQuotePrefixWhitespace");
      effects.exit("blockQuotePrefix");
      return ok;
    }
    effects.exit("blockQuotePrefix");
    return ok(code);
  }
}

/**
 * Start of block quote continuation.
 *
 * ```markdown
 *   | > a
 * > | > b
 *     ^
 * ```
 *
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeBlockQuoteContinuation(effects, ok, nok) {
  const self = this;
  return contStart;

  /**
   * Start of block quote continuation.
   *
   * Also used to parse the first block quote opening.
   *
   * ```markdown
   *   | > a
   * > | > b
   *     ^
   * ```
   *
   * @type {State}
   */
  function contStart(code) {
    if (markdownSpace(code)) {
      // Always populated by defaults.

      return factorySpace(effects, contBefore, "linePrefix", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);
    }
    return contBefore(code);
  }

  /**
   * At `>`, after optional whitespace.
   *
   * Also used to parse the first block quote opening.
   *
   * ```markdown
   *   | > a
   * > | > b
   *     ^
   * ```
   *
   * @type {State}
   */
  function contBefore(code) {
    return effects.attempt(blockQuote, ok, nok)(code);
  }
}

/** @type {Exiter} */
function exit(effects) {
  effects.exit("blockQuote");
}

/**
 * @import {
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const characterEscape = {
  name: 'characterEscape',
  tokenize: tokenizeCharacterEscape
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeCharacterEscape(effects, ok, nok) {
  return start;

  /**
   * Start of character escape.
   *
   * ```markdown
   * > | a\*b
   *      ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    effects.enter("characterEscape");
    effects.enter("escapeMarker");
    effects.consume(code);
    effects.exit("escapeMarker");
    return inside;
  }

  /**
   * After `\`, at punctuation.
   *
   * ```markdown
   * > | a\*b
   *       ^
   * ```
   *
   * @type {State}
   */
  function inside(code) {
    // ASCII punctuation.
    if (asciiPunctuation(code)) {
      effects.enter("characterEscapeValue");
      effects.consume(code);
      effects.exit("characterEscapeValue");
      effects.exit("characterEscape");
      return ok;
    }
    return nok(code);
  }
}

/**
 * @import {
 *   Code,
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const characterReference = {
  name: 'characterReference',
  tokenize: tokenizeCharacterReference
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeCharacterReference(effects, ok, nok) {
  const self = this;
  let size = 0;
  /** @type {number} */
  let max;
  /** @type {(code: Code) => boolean} */
  let test;
  return start;

  /**
   * Start of character reference.
   *
   * ```markdown
   * > | a&amp;b
   *      ^
   * > | a&#123;b
   *      ^
   * > | a&#x9;b
   *      ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    effects.enter("characterReference");
    effects.enter("characterReferenceMarker");
    effects.consume(code);
    effects.exit("characterReferenceMarker");
    return open;
  }

  /**
   * After `&`, at `#` for numeric references or alphanumeric for named
   * references.
   *
   * ```markdown
   * > | a&amp;b
   *       ^
   * > | a&#123;b
   *       ^
   * > | a&#x9;b
   *       ^
   * ```
   *
   * @type {State}
   */
  function open(code) {
    if (code === 35) {
      effects.enter("characterReferenceMarkerNumeric");
      effects.consume(code);
      effects.exit("characterReferenceMarkerNumeric");
      return numeric;
    }
    effects.enter("characterReferenceValue");
    max = 31;
    test = asciiAlphanumeric;
    return value(code);
  }

  /**
   * After `#`, at `x` for hexadecimals or digit for decimals.
   *
   * ```markdown
   * > | a&#123;b
   *        ^
   * > | a&#x9;b
   *        ^
   * ```
   *
   * @type {State}
   */
  function numeric(code) {
    if (code === 88 || code === 120) {
      effects.enter("characterReferenceMarkerHexadecimal");
      effects.consume(code);
      effects.exit("characterReferenceMarkerHexadecimal");
      effects.enter("characterReferenceValue");
      max = 6;
      test = asciiHexDigit;
      return value;
    }
    effects.enter("characterReferenceValue");
    max = 7;
    test = asciiDigit;
    return value(code);
  }

  /**
   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.
   *
   * The character reference kind defines what and how many characters are
   * allowed.
   *
   * ```markdown
   * > | a&amp;b
   *       ^^^
   * > | a&#123;b
   *        ^^^
   * > | a&#x9;b
   *         ^
   * ```
   *
   * @type {State}
   */
  function value(code) {
    if (code === 59 && size) {
      const token = effects.exit("characterReferenceValue");
      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {
        return nok(code);
      }

      // To do: `markdown-rs` uses a different name:
      // `CharacterReferenceMarkerSemi`.
      effects.enter("characterReferenceMarker");
      effects.consume(code);
      effects.exit("characterReferenceMarker");
      effects.exit("characterReference");
      return ok;
    }
    if (test(code) && size++ < max) {
      effects.consume(code);
      return value;
    }
    return nok(code);
  }
}

/**
 * @import {
 *   Code,
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const nonLazyContinuation = {
  partial: true,
  tokenize: tokenizeNonLazyContinuation
};

/** @type {Construct} */
const codeFenced = {
  concrete: true,
  name: 'codeFenced',
  tokenize: tokenizeCodeFenced
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeCodeFenced(effects, ok, nok) {
  const self = this;
  /** @type {Construct} */
  const closeStart = {
    partial: true,
    tokenize: tokenizeCloseStart
  };
  let initialPrefix = 0;
  let sizeOpen = 0;
  /** @type {NonNullable<Code>} */
  let marker;
  return start;

  /**
   * Start of code.
   *
   * ```markdown
   * > | ~~~js
   *     ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function start(code) {
    // To do: parse whitespace like `markdown-rs`.
    return beforeSequenceOpen(code);
  }

  /**
   * In opening fence, after prefix, at sequence.
   *
   * ```markdown
   * > | ~~~js
   *     ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function beforeSequenceOpen(code) {
    const tail = self.events[self.events.length - 1];
    initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    marker = code;
    effects.enter("codeFenced");
    effects.enter("codeFencedFence");
    effects.enter("codeFencedFenceSequence");
    return sequenceOpen(code);
  }

  /**
   * In opening fence sequence.
   *
   * ```markdown
   * > | ~~~js
   *      ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function sequenceOpen(code) {
    if (code === marker) {
      sizeOpen++;
      effects.consume(code);
      return sequenceOpen;
    }
    if (sizeOpen < 3) {
      return nok(code);
    }
    effects.exit("codeFencedFenceSequence");
    return markdownSpace(code) ? factorySpace(effects, infoBefore, "whitespace")(code) : infoBefore(code);
  }

  /**
   * In opening fence, after the sequence (and optional whitespace), before info.
   *
   * ```markdown
   * > | ~~~js
   *        ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function infoBefore(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("codeFencedFence");
      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);
    }
    effects.enter("codeFencedFenceInfo");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return info(code);
  }

  /**
   * In info.
   *
   * ```markdown
   * > | ~~~js
   *        ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function info(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return infoBefore(code);
    }
    if (markdownSpace(code)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return factorySpace(effects, metaBefore, "whitespace")(code);
    }
    if (code === 96 && code === marker) {
      return nok(code);
    }
    effects.consume(code);
    return info;
  }

  /**
   * In opening fence, after info and whitespace, before meta.
   *
   * ```markdown
   * > | ~~~js eval
   *           ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function metaBefore(code) {
    if (code === null || markdownLineEnding(code)) {
      return infoBefore(code);
    }
    effects.enter("codeFencedFenceMeta");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return meta(code);
  }

  /**
   * In meta.
   *
   * ```markdown
   * > | ~~~js eval
   *           ^
   *   | alert(1)
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function meta(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceMeta");
      return infoBefore(code);
    }
    if (code === 96 && code === marker) {
      return nok(code);
    }
    effects.consume(code);
    return meta;
  }

  /**
   * At eol/eof in code, before a non-lazy closing fence or content.
   *
   * ```markdown
   * > | ~~~js
   *          ^
   * > | alert(1)
   *             ^
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function atNonLazyBreak(code) {
    return effects.attempt(closeStart, after, contentBefore)(code);
  }

  /**
   * Before code content, not a closing fence, at eol.
   *
   * ```markdown
   *   | ~~~js
   * > | alert(1)
   *             ^
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function contentBefore(code) {
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return contentStart;
  }

  /**
   * Before code content, not a closing fence.
   *
   * ```markdown
   *   | ~~~js
   * > | alert(1)
   *     ^
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function contentStart(code) {
    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, "linePrefix", initialPrefix + 1)(code) : beforeContentChunk(code);
  }

  /**
   * Before code content, after optional prefix.
   *
   * ```markdown
   *   | ~~~js
   * > | alert(1)
   *     ^
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function beforeContentChunk(code) {
    if (code === null || markdownLineEnding(code)) {
      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);
    }
    effects.enter("codeFlowValue");
    return contentChunk(code);
  }

  /**
   * In code content.
   *
   * ```markdown
   *   | ~~~js
   * > | alert(1)
   *     ^^^^^^^^
   *   | ~~~
   * ```
   *
   * @type {State}
   */
  function contentChunk(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("codeFlowValue");
      return beforeContentChunk(code);
    }
    effects.consume(code);
    return contentChunk;
  }

  /**
   * After code.
   *
   * ```markdown
   *   | ~~~js
   *   | alert(1)
   * > | ~~~
   *        ^
   * ```
   *
   * @type {State}
   */
  function after(code) {
    effects.exit("codeFenced");
    return ok(code);
  }

  /**
   * @this {TokenizeContext}
   *   Context.
   * @type {Tokenizer}
   */
  function tokenizeCloseStart(effects, ok, nok) {
    let size = 0;
    return startBefore;

    /**
     *
     *
     * @type {State}
     */
    function startBefore(code) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      return start;
    }

    /**
     * Before closing fence, at optional whitespace.
     *
     * ```markdown
     *   | ~~~js
     *   | alert(1)
     * > | ~~~
     *     ^
     * ```
     *
     * @type {State}
     */
    function start(code) {
      // Always populated by defaults.

      // To do: `enter` here or in next state?
      effects.enter("codeFencedFence");
      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, "linePrefix", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);
    }

    /**
     * In closing fence, after optional whitespace, at sequence.
     *
     * ```markdown
     *   | ~~~js
     *   | alert(1)
     * > | ~~~
     *     ^
     * ```
     *
     * @type {State}
     */
    function beforeSequenceClose(code) {
      if (code === marker) {
        effects.enter("codeFencedFenceSequence");
        return sequenceClose(code);
      }
      return nok(code);
    }

    /**
     * In closing fence sequence.
     *
     * ```markdown
     *   | ~~~js
     *   | alert(1)
     * > | ~~~
     *     ^
     * ```
     *
     * @type {State}
     */
    function sequenceClose(code) {
      if (code === marker) {
        size++;
        effects.consume(code);
        return sequenceClose;
      }
      if (size >= sizeOpen) {
        effects.exit("codeFencedFenceSequence");
        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, "whitespace")(code) : sequenceCloseAfter(code);
      }
      return nok(code);
    }

    /**
     * After closing fence sequence, after optional whitespace.
     *
     * ```markdown
     *   | ~~~js
     *   | alert(1)
     * > | ~~~
     *        ^
     * ```
     *
     * @type {State}
     */
    function sequenceCloseAfter(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit("codeFencedFence");
        return ok(code);
      }
      return nok(code);
    }
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeNonLazyContinuation(effects, ok, nok) {
  const self = this;
  return start;

  /**
   *
   *
   * @type {State}
   */
  function start(code) {
    if (code === null) {
      return nok(code);
    }
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return lineStart;
  }

  /**
   *
   *
   * @type {State}
   */
  function lineStart(code) {
    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);
  }
}

/**
 * @import {
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const codeIndented = {
  name: 'codeIndented',
  tokenize: tokenizeCodeIndented
};

/** @type {Construct} */
const furtherStart = {
  partial: true,
  tokenize: tokenizeFurtherStart
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeCodeIndented(effects, ok, nok) {
  const self = this;
  return start;

  /**
   * Start of code (indented).
   *
   * > **Parsing note**: it is not needed to check if this first line is a
   * > filled line (that it has a non-whitespace character), because blank lines
   * > are parsed already, so we never run into that.
   *
   * ```markdown
   * > |     aaa
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    // To do: manually check if interrupting like `markdown-rs`.

    effects.enter("codeIndented");
    // To do: use an improved `space_or_tab` function like `markdown-rs`,
    // so that we can drop the next state.
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code);
  }

  /**
   * At start, after 1 or 4 spaces.
   *
   * ```markdown
   * > |     aaa
   *         ^
   * ```
   *
   * @type {State}
   */
  function afterPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);
  }

  /**
   * At a break.
   *
   * ```markdown
   * > |     aaa
   *         ^  ^
   * ```
   *
   * @type {State}
   */
  function atBreak(code) {
    if (code === null) {
      return after(code);
    }
    if (markdownLineEnding(code)) {
      return effects.attempt(furtherStart, atBreak, after)(code);
    }
    effects.enter("codeFlowValue");
    return inside(code);
  }

  /**
   * In code content.
   *
   * ```markdown
   * > |     aaa
   *         ^^^^
   * ```
   *
   * @type {State}
   */
  function inside(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("codeFlowValue");
      return atBreak(code);
    }
    effects.consume(code);
    return inside;
  }

  /** @type {State} */
  function after(code) {
    effects.exit("codeIndented");
    // To do: allow interrupting like `markdown-rs`.
    // Feel free to interrupt.
    // tokenizer.interrupt = false
    return ok(code);
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeFurtherStart(effects, ok, nok) {
  const self = this;
  return furtherStart;

  /**
   * At eol, trying to parse another indent.
   *
   * ```markdown
   * > |     aaa
   *            ^
   *   |     bbb
   * ```
   *
   * @type {State}
   */
  function furtherStart(code) {
    // To do: improve `lazy` / `pierce` handling.
    // If this is a lazy line, it can’t be code.
    if (self.parser.lazy[self.now().line]) {
      return nok(code);
    }
    if (markdownLineEnding(code)) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      return furtherStart;
    }

    // To do: the code here in `micromark-js` is a bit different from
    // `markdown-rs` because there it can attempt spaces.
    // We can’t yet.
    //
    // To do: use an improved `space_or_tab` function like `markdown-rs`,
    // so that we can drop the next state.
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code);
  }

  /**
   * At start, after 1 or 4 spaces.
   *
   * ```markdown
   * > |     aaa
   *         ^
   * ```
   *
   * @type {State}
   */
  function afterPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);
  }
}

/**
 * @import {
 *   Construct,
 *   Previous,
 *   Resolver,
 *   State,
 *   TokenizeContext,
 *   Tokenizer,
 *   Token
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const codeText = {
  name: 'codeText',
  previous,
  resolve: resolveCodeText,
  tokenize: tokenizeCodeText
};

// To do: next major: don’t resolve, like `markdown-rs`.
/** @type {Resolver} */
function resolveCodeText(events) {
  let tailExitIndex = events.length - 4;
  let headEnterIndex = 3;
  /** @type {number} */
  let index;
  /** @type {number | undefined} */
  let enter;

  // If we start and end with an EOL or a space.
  if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === 'space')) {
    index = headEnterIndex;

    // And we have data.
    while (++index < tailExitIndex) {
      if (events[index][1].type === "codeTextData") {
        // Then we have padding.
        events[headEnterIndex][1].type = "codeTextPadding";
        events[tailExitIndex][1].type = "codeTextPadding";
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break;
      }
    }
  }

  // Merge adjacent spaces and data.
  index = headEnterIndex - 1;
  tailExitIndex++;
  while (++index <= tailExitIndex) {
    if (enter === undefined) {
      if (index !== tailExitIndex && events[index][1].type !== "lineEnding") {
        enter = index;
      }
    } else if (index === tailExitIndex || events[index][1].type === "lineEnding") {
      events[enter][1].type = "codeTextData";
      if (index !== enter + 2) {
        events[enter][1].end = events[index - 1][1].end;
        events.splice(enter + 2, index - enter - 2);
        tailExitIndex -= index - enter - 2;
        index = enter + 2;
      }
      enter = undefined;
    }
  }
  return events;
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Previous}
 */
function previous(code) {
  // If there is a previous code, there will always be a tail.
  return code !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeCodeText(effects, ok, nok) {
  let sizeOpen = 0;
  /** @type {number} */
  let size;
  /** @type {Token} */
  let token;
  return start;

  /**
   * Start of code (text).
   *
   * ```markdown
   * > | `a`
   *     ^
   * > | \`a`
   *      ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    effects.enter("codeText");
    effects.enter("codeTextSequence");
    return sequenceOpen(code);
  }

  /**
   * In opening sequence.
   *
   * ```markdown
   * > | `a`
   *     ^
   * ```
   *
   * @type {State}
   */
  function sequenceOpen(code) {
    if (code === 96) {
      effects.consume(code);
      sizeOpen++;
      return sequenceOpen;
    }
    effects.exit("codeTextSequence");
    return between(code);
  }

  /**
   * Between something and something else.
   *
   * ```markdown
   * > | `a`
   *      ^^
   * ```
   *
   * @type {State}
   */
  function between(code) {
    // EOF.
    if (code === null) {
      return nok(code);
    }

    // To do: next major: don’t do spaces in resolve, but when compiling,
    // like `markdown-rs`.
    // Tabs don’t work, and virtual spaces don’t make sense.
    if (code === 32) {
      effects.enter('space');
      effects.consume(code);
      effects.exit('space');
      return between;
    }

    // Closing fence? Could also be data.
    if (code === 96) {
      token = effects.enter("codeTextSequence");
      size = 0;
      return sequenceClose(code);
    }
    if (markdownLineEnding(code)) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      return between;
    }

    // Data.
    effects.enter("codeTextData");
    return data(code);
  }

  /**
   * In data.
   *
   * ```markdown
   * > | `a`
   *      ^
   * ```
   *
   * @type {State}
   */
  function data(code) {
    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {
      effects.exit("codeTextData");
      return between(code);
    }
    effects.consume(code);
    return data;
  }

  /**
   * In closing sequence.
   *
   * ```markdown
   * > | `a`
   *       ^
   * ```
   *
   * @type {State}
   */
  function sequenceClose(code) {
    // More.
    if (code === 96) {
      effects.consume(code);
      size++;
      return sequenceClose;
    }

    // Done!
    if (size === sizeOpen) {
      effects.exit("codeTextSequence");
      effects.exit("codeText");
      return ok(code);
    }

    // More or less accents: mark as data.
    token.type = "codeTextData";
    return data(code);
  }
}

/**
 * Some of the internal operations of micromark do lots of editing
 * operations on very large arrays. This runs into problems with two
 * properties of most circa-2020 JavaScript interpreters:
 *
 *  - Array-length modifications at the high end of an array (push/pop) are
 *    expected to be common and are implemented in (amortized) time
 *    proportional to the number of elements added or removed, whereas
 *    other operations (shift/unshift and splice) are much less efficient.
 *  - Function arguments are passed on the stack, so adding tens of thousands
 *    of elements to an array with `arr.push(...newElements)` will frequently
 *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)
 *
 * SpliceBuffers are an implementation of gap buffers, which are a
 * generalization of the "queue made of two stacks" idea. The splice buffer
 * maintains a cursor, and moving the cursor has cost proportional to the
 * distance the cursor moves, but inserting, deleting, or splicing in
 * new information at the cursor is as efficient as the push/pop operation.
 * This allows for an efficient sequence of splices (or pushes, pops, shifts,
 * or unshifts) as long such edits happen at the same part of the array or
 * generally sweep through the array from the beginning to the end.
 *
 * The interface for splice buffers also supports large numbers of inputs by
 * passing a single array argument rather passing multiple arguments on the
 * function call stack.
 *
 * @template T
 *   Item type.
 */
class SpliceBuffer {
  /**
   * @param {ReadonlyArray<T> | null | undefined} [initial]
   *   Initial items (optional).
   * @returns
   *   Splice buffer.
   */
  constructor(initial) {
    /** @type {Array<T>} */
    this.left = initial ? [...initial] : [];
    /** @type {Array<T>} */
    this.right = [];
  }

  /**
   * Array access;
   * does not move the cursor.
   *
   * @param {number} index
   *   Index.
   * @return {T}
   *   Item.
   */
  get(index) {
    if (index < 0 || index >= this.left.length + this.right.length) {
      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');
    }
    if (index < this.left.length) return this.left[index];
    return this.right[this.right.length - index + this.left.length - 1];
  }

  /**
   * The length of the splice buffer, one greater than the largest index in the
   * array.
   */
  get length() {
    return this.left.length + this.right.length;
  }

  /**
   * Remove and return `list[0]`;
   * moves the cursor to `0`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  shift() {
    this.setCursor(0);
    return this.right.pop();
  }

  /**
   * Slice the buffer to get an array;
   * does not move the cursor.
   *
   * @param {number} start
   *   Start.
   * @param {number | null | undefined} [end]
   *   End (optional).
   * @returns {Array<T>}
   *   Array of items.
   */
  slice(start, end) {
    /** @type {number} */
    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;
    if (stop < this.left.length) {
      return this.left.slice(start, stop);
    }
    if (start > this.left.length) {
      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();
    }
    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());
  }

  /**
   * Mimics the behavior of Array.prototype.splice() except for the change of
   * interface necessary to avoid segfaults when patching in very large arrays.
   *
   * This operation moves cursor is moved to `start` and results in the cursor
   * placed after any inserted items.
   *
   * @param {number} start
   *   Start;
   *   zero-based index at which to start changing the array;
   *   negative numbers count backwards from the end of the array and values
   *   that are out-of bounds are clamped to the appropriate end of the array.
   * @param {number | null | undefined} [deleteCount=0]
   *   Delete count (default: `0`);
   *   maximum number of elements to delete, starting from start.
   * @param {Array<T> | null | undefined} [items=[]]
   *   Items to include in place of the deleted items (default: `[]`).
   * @return {Array<T>}
   *   Any removed items.
   */
  splice(start, deleteCount, items) {
    /** @type {number} */
    const count = deleteCount || 0;
    this.setCursor(Math.trunc(start));
    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);
    if (items) chunkedPush(this.left, items);
    return removed.reverse();
  }

  /**
   * Remove and return the highest-numbered item in the array, so
   * `list[list.length - 1]`;
   * Moves the cursor to `length`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  pop() {
    this.setCursor(Number.POSITIVE_INFINITY);
    return this.left.pop();
  }

  /**
   * Inserts a single item to the high-numbered side of the array;
   * moves the cursor to `length`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  push(item) {
    this.setCursor(Number.POSITIVE_INFINITY);
    this.left.push(item);
  }

  /**
   * Inserts many items to the high-numbered side of the array.
   * Moves the cursor to `length`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  pushMany(items) {
    this.setCursor(Number.POSITIVE_INFINITY);
    chunkedPush(this.left, items);
  }

  /**
   * Inserts a single item to the low-numbered side of the array;
   * Moves the cursor to `0`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  unshift(item) {
    this.setCursor(0);
    this.right.push(item);
  }

  /**
   * Inserts many items to the low-numbered side of the array;
   * moves the cursor to `0`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  unshiftMany(items) {
    this.setCursor(0);
    chunkedPush(this.right, items.reverse());
  }

  /**
   * Move the cursor to a specific position in the array. Requires
   * time proportional to the distance moved.
   *
   * If `n < 0`, the cursor will end up at the beginning.
   * If `n > length`, the cursor will end up at the end.
   *
   * @param {number} n
   *   Position.
   * @return {undefined}
   *   Nothing.
   */
  setCursor(n) {
    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;
    if (n < this.left.length) {
      // Move cursor to the this.left
      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);
      chunkedPush(this.right, removed.reverse());
    } else {
      // Move cursor to the this.right
      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);
      chunkedPush(this.left, removed.reverse());
    }
  }
}

/**
 * Avoid stack overflow by pushing items onto the stack in segments
 *
 * @template T
 *   Item type.
 * @param {Array<T>} list
 *   List to inject into.
 * @param {ReadonlyArray<T>} right
 *   Items to inject.
 * @return {undefined}
 *   Nothing.
 */
function chunkedPush(list, right) {
  /** @type {number} */
  let chunkStart = 0;
  if (right.length < 10000) {
    list.push(...right);
  } else {
    while (chunkStart < right.length) {
      list.push(...right.slice(chunkStart, chunkStart + 10000));
      chunkStart += 10000;
    }
  }
}

/**
 * @import {Chunk, Event, Token} from 'micromark-util-types'
 */


/**
 * Tokenize subcontent.
 *
 * @param {Array<Event>} eventsArray
 *   List of events.
 * @returns {boolean}
 *   Whether subtokens were found.
 */
// eslint-disable-next-line complexity
function subtokenize(eventsArray) {
  /** @type {Record<string, number>} */
  const jumps = {};
  let index = -1;
  /** @type {Event} */
  let event;
  /** @type {number | undefined} */
  let lineIndex;
  /** @type {number} */
  let otherIndex;
  /** @type {Event} */
  let otherEvent;
  /** @type {Array<Event>} */
  let parameters;
  /** @type {Array<Event>} */
  let subevents;
  /** @type {boolean | undefined} */
  let more;
  const events = new SpliceBuffer(eventsArray);
  while (++index < events.length) {
    while (index in jumps) {
      index = jumps[index];
    }
    event = events.get(index);

    // Add a hook for the GFM tasklist extension, which needs to know if text
    // is in the first content of a list item.
    if (index && event[1].type === "chunkFlow" && events.get(index - 1)[1].type === "listItemPrefix") {
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
        otherIndex += 2;
      }
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === "content") {
            break;
          }
          if (subevents[otherIndex][1].type === "chunkText") {
            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    }

    // Enter.
    if (event[0] === 'enter') {
      if (event[1].contentType) {
        Object.assign(jumps, subcontent(events, index));
        index = jumps[index];
        more = true;
      }
    }
    // Exit.
    else if (event[1]._container) {
      otherIndex = index;
      lineIndex = undefined;
      while (otherIndex--) {
        otherEvent = events.get(otherIndex);
        if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
          if (otherEvent[0] === 'enter') {
            if (lineIndex) {
              events.get(lineIndex)[1].type = "lineEndingBlank";
            }
            otherEvent[1].type = "lineEnding";
            lineIndex = otherIndex;
          }
        } else if (otherEvent[1].type === "linePrefix" || otherEvent[1].type === "listItemIndent") ; else {
          break;
        }
      }
      if (lineIndex) {
        // Fix position.
        event[1].end = {
          ...events.get(lineIndex)[1].start
        };

        // Switch container exit w/ line endings.
        parameters = events.slice(lineIndex, index);
        parameters.unshift(event);
        events.splice(lineIndex, index - lineIndex + 1, parameters);
      }
    }
  }

  // The changes to the `events` buffer must be copied back into the eventsArray
  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));
  return !more;
}

/**
 * Tokenize embedded tokens.
 *
 * @param {SpliceBuffer<Event>} events
 *   Events.
 * @param {number} eventIndex
 *   Index.
 * @returns {Record<string, number>}
 *   Gaps.
 */
function subcontent(events, eventIndex) {
  const token = events.get(eventIndex)[1];
  const context = events.get(eventIndex)[2];
  let startPosition = eventIndex - 1;
  /** @type {Array<number>} */
  const startPositions = [];
  let tokenizer = token._tokenizer;
  if (!tokenizer) {
    tokenizer = context.parser[token.contentType](token.start);
    if (token._contentTypeTextTrailing) {
      tokenizer._contentTypeTextTrailing = true;
    }
  }
  const childEvents = tokenizer.events;
  /** @type {Array<[number, number]>} */
  const jumps = [];
  /** @type {Record<string, number>} */
  const gaps = {};
  /** @type {Array<Chunk>} */
  let stream;
  /** @type {Token | undefined} */
  let previous;
  let index = -1;
  /** @type {Token | undefined} */
  let current = token;
  let adjust = 0;
  let start = 0;
  const breaks = [start];

  // Loop forward through the linked tokens to pass them in order to the
  // subtokenizer.
  while (current) {
    // Find the position of the event for this token.
    while (events.get(++startPosition)[1] !== current) {
      // Empty.
    }
    startPositions.push(startPosition);
    if (!current._tokenizer) {
      stream = context.sliceStream(current);
      if (!current.next) {
        stream.push(null);
      }
      if (previous) {
        tokenizer.defineSkip(current.start);
      }
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = true;
      }
      tokenizer.write(stream);
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = undefined;
      }
    }

    // Unravel the next token.
    previous = current;
    current = current.next;
  }

  // Now, loop back through all events (and linked tokens), to figure out which
  // parts belong where.
  current = token;
  while (++index < childEvents.length) {
    if (
    // Find a void token that includes a break.
    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {
      start = index + 1;
      breaks.push(start);
      // Help GC.
      current._tokenizer = undefined;
      current.previous = undefined;
      current = current.next;
    }
  }

  // Help GC.
  tokenizer.events = [];

  // If there’s one more token (which is the cases for lines that end in an
  // EOF), that’s perfect: the last point we found starts it.
  // If there isn’t then make sure any remaining content is added to it.
  if (current) {
    // Help GC.
    current._tokenizer = undefined;
    current.previous = undefined;
  } else {
    breaks.pop();
  }

  // Now splice the events from the subtokenizer into the current events,
  // moving back to front so that splice indices aren’t affected.
  index = breaks.length;
  while (index--) {
    const slice = childEvents.slice(breaks[index], breaks[index + 1]);
    const start = startPositions.pop();
    jumps.push([start, start + slice.length - 1]);
    events.splice(start, 2, slice);
  }
  jumps.reverse();
  index = -1;
  while (++index < jumps.length) {
    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
    adjust += jumps[index][1] - jumps[index][0] - 1;
  }
  return gaps;
}

/**
 * @import {
 *   Construct,
 *   Resolver,
 *   State,
 *   TokenizeContext,
 *   Tokenizer,
 *   Token
 * } from 'micromark-util-types'
 */

/**
 * No name because it must not be turned off.
 * @type {Construct}
 */
const content = {
  resolve: resolveContent,
  tokenize: tokenizeContent
};

/** @type {Construct} */
const continuationConstruct = {
  partial: true,
  tokenize: tokenizeContinuation
};

/**
 * Content is transparent: it’s parsed right now. That way, definitions are also
 * parsed right now: before text in paragraphs (specifically, media) are parsed.
 *
 * @type {Resolver}
 */
function resolveContent(events) {
  subtokenize(events);
  return events;
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeContent(effects, ok) {
  /** @type {Token | undefined} */
  let previous;
  return chunkStart;

  /**
   * Before a content chunk.
   *
   * ```markdown
   * > | abc
   *     ^
   * ```
   *
   * @type {State}
   */
  function chunkStart(code) {
    effects.enter("content");
    previous = effects.enter("chunkContent", {
      contentType: "content"
    });
    return chunkInside(code);
  }

  /**
   * In a content chunk.
   *
   * ```markdown
   * > | abc
   *     ^^^
   * ```
   *
   * @type {State}
   */
  function chunkInside(code) {
    if (code === null) {
      return contentEnd(code);
    }

    // To do: in `markdown-rs`, each line is parsed on its own, and everything
    // is stitched together resolving.
    if (markdownLineEnding(code)) {
      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);
    }

    // Data.
    effects.consume(code);
    return chunkInside;
  }

  /**
   *
   *
   * @type {State}
   */
  function contentEnd(code) {
    effects.exit("chunkContent");
    effects.exit("content");
    return ok(code);
  }

  /**
   *
   *
   * @type {State}
   */
  function contentContinue(code) {
    effects.consume(code);
    effects.exit("chunkContent");
    previous.next = effects.enter("chunkContent", {
      contentType: "content",
      previous
    });
    previous = previous.next;
    return chunkInside;
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeContinuation(effects, ok, nok) {
  const self = this;
  return startLookahead;

  /**
   *
   *
   * @type {State}
   */
  function startLookahead(code) {
    effects.exit("chunkContent");
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return factorySpace(effects, prefixed, "linePrefix");
  }

  /**
   *
   *
   * @type {State}
   */
  function prefixed(code) {
    if (code === null || markdownLineEnding(code)) {
      return nok(code);
    }

    // Always populated by defaults.

    const tail = self.events[self.events.length - 1];
    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
      return ok(code);
    }
    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);
  }
}

/**
 * @import {Effects, State, TokenType} from 'micromark-util-types'
 */

/**
 * Parse destinations.
 *
 * ###### Examples
 *
 * ```markdown
 * <a>
 * <a\>b>
 * <a b>
 * <a)>
 * a
 * a\)b
 * a(b)c
 * a(b)
 * ```
 *
 * @param {Effects} effects
 *   Context.
 * @param {State} ok
 *   State switched to when successful.
 * @param {State} nok
 *   State switched to when unsuccessful.
 * @param {TokenType} type
 *   Type for whole (`<a>` or `b`).
 * @param {TokenType} literalType
 *   Type when enclosed (`<a>`).
 * @param {TokenType} literalMarkerType
 *   Type for enclosing (`<` and `>`).
 * @param {TokenType} rawType
 *   Type when not enclosed (`b`).
 * @param {TokenType} stringType
 *   Type for the value (`a` or `b`).
 * @param {number | undefined} [max=Infinity]
 *   Depth of nested parens (inclusive).
 * @returns {State}
 *   Start state.
 */
function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
  const limit = max || Number.POSITIVE_INFINITY;
  let balance = 0;
  return start;

  /**
   * Start of destination.
   *
   * ```markdown
   * > | <aa>
   *     ^
   * > | aa
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    if (code === 60) {
      effects.enter(type);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code);
      effects.exit(literalMarkerType);
      return enclosedBefore;
    }

    // ASCII control, space, closing paren.
    if (code === null || code === 32 || code === 41 || asciiControl(code)) {
      return nok(code);
    }
    effects.enter(type);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return raw(code);
  }

  /**
   * After `<`, at an enclosed destination.
   *
   * ```markdown
   * > | <aa>
   *      ^
   * ```
   *
   * @type {State}
   */
  function enclosedBefore(code) {
    if (code === 62) {
      effects.enter(literalMarkerType);
      effects.consume(code);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type);
      return ok;
    }
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return enclosed(code);
  }

  /**
   * In enclosed destination.
   *
   * ```markdown
   * > | <aa>
   *      ^
   * ```
   *
   * @type {State}
   */
  function enclosed(code) {
    if (code === 62) {
      effects.exit("chunkString");
      effects.exit(stringType);
      return enclosedBefore(code);
    }
    if (code === null || code === 60 || markdownLineEnding(code)) {
      return nok(code);
    }
    effects.consume(code);
    return code === 92 ? enclosedEscape : enclosed;
  }

  /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | <a\*a>
   *        ^
   * ```
   *
   * @type {State}
   */
  function enclosedEscape(code) {
    if (code === 60 || code === 62 || code === 92) {
      effects.consume(code);
      return enclosed;
    }
    return enclosed(code);
  }

  /**
   * In raw destination.
   *
   * ```markdown
   * > | aa
   *     ^
   * ```
   *
   * @type {State}
   */
  function raw(code) {
    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {
      effects.exit("chunkString");
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type);
      return ok(code);
    }
    if (balance < limit && code === 40) {
      effects.consume(code);
      balance++;
      return raw;
    }
    if (code === 41) {
      effects.consume(code);
      balance--;
      return raw;
    }

    // ASCII control (but *not* `\0`) and space and `(`.
    // Note: in `markdown-rs`, `\0` exists in codes, in `micromark-js` it
    // doesn’t.
    if (code === null || code === 32 || code === 40 || asciiControl(code)) {
      return nok(code);
    }
    effects.consume(code);
    return code === 92 ? rawEscape : raw;
  }

  /**
   * After `\`, at special character.
   *
   * ```markdown
   * > | a\*a
   *       ^
   * ```
   *
   * @type {State}
   */
  function rawEscape(code) {
    if (code === 40 || code === 41 || code === 92) {
      effects.consume(code);
      return raw;
    }
    return raw(code);
  }
}

/**
 * @import {
 *   Effects,
 *   State,
 *   TokenizeContext,
 *   TokenType
 * } from 'micromark-util-types'
 */

/**
 * Parse labels.
 *
 * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.
 *
 * ###### Examples
 *
 * ```markdown
 * [a]
 * [a
 * b]
 * [a\]b]
 * ```
 *
 * @this {TokenizeContext}
 *   Tokenize context.
 * @param {Effects} effects
 *   Context.
 * @param {State} ok
 *   State switched to when successful.
 * @param {State} nok
 *   State switched to when unsuccessful.
 * @param {TokenType} type
 *   Type of the whole label (`[a]`).
 * @param {TokenType} markerType
 *   Type for the markers (`[` and `]`).
 * @param {TokenType} stringType
 *   Type for the identifier (`a`).
 * @returns {State}
 *   Start state.
 */
function factoryLabel(effects, ok, nok, type, markerType, stringType) {
  const self = this;
  let size = 0;
  /** @type {boolean} */
  let seen;
  return start;

  /**
   * Start of label.
   *
   * ```markdown
   * > | [a]
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak;
  }

  /**
   * In label, at something, before something else.
   *
   * ```markdown
   * > | [a]
   *      ^
   * ```
   *
   * @type {State}
   */
  function atBreak(code) {
    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||
    // To do: remove in the future once we’ve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesn’t need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {
      return nok(code);
    }
    if (code === 93) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok;
    }

    // To do: indent? Link chunks and EOLs together?
    if (markdownLineEnding(code)) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      return atBreak;
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return labelInside(code);
  }

  /**
   * In label, in text.
   *
   * ```markdown
   * > | [a]
   *      ^
   * ```
   *
   * @type {State}
   */
  function labelInside(code) {
    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {
      effects.exit("chunkString");
      return atBreak(code);
    }
    effects.consume(code);
    if (!seen) seen = !markdownSpace(code);
    return code === 92 ? labelEscape : labelInside;
  }

  /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | [a\*a]
   *        ^
   * ```
   *
   * @type {State}
   */
  function labelEscape(code) {
    if (code === 91 || code === 92 || code === 93) {
      effects.consume(code);
      size++;
      return labelInside;
    }
    return labelInside(code);
  }
}

/**
 * @import {
 *   Code,
 *   Effects,
 *   State,
 *   TokenType
 * } from 'micromark-util-types'
 */

/**
 * Parse titles.
 *
 * ###### Examples
 *
 * ```markdown
 * "a"
 * 'b'
 * (c)
 * "a
 * b"
 * 'a
 *     b'
 * (a\)b)
 * ```
 *
 * @param {Effects} effects
 *   Context.
 * @param {State} ok
 *   State switched to when successful.
 * @param {State} nok
 *   State switched to when unsuccessful.
 * @param {TokenType} type
 *   Type of the whole title (`"a"`, `'b'`, `(c)`).
 * @param {TokenType} markerType
 *   Type for the markers (`"`, `'`, `(`, and `)`).
 * @param {TokenType} stringType
 *   Type for the value (`a`).
 * @returns {State}
 *   Start state.
 */
function factoryTitle(effects, ok, nok, type, markerType, stringType) {
  /** @type {NonNullable<Code>} */
  let marker;
  return start;

  /**
   * Start of title.
   *
   * ```markdown
   * > | "a"
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    if (code === 34 || code === 39 || code === 40) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      marker = code === 40 ? 41 : code;
      return begin;
    }
    return nok(code);
  }

  /**
   * After opening marker.
   *
   * This is also used at the closing marker.
   *
   * ```markdown
   * > | "a"
   *      ^
   * ```
   *
   * @type {State}
   */
  function begin(code) {
    if (code === marker) {
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok;
    }
    effects.enter(stringType);
    return atBreak(code);
  }

  /**
   * At something, before something else.
   *
   * ```markdown
   * > | "a"
   *      ^
   * ```
   *
   * @type {State}
   */
  function atBreak(code) {
    if (code === marker) {
      effects.exit(stringType);
      return begin(marker);
    }
    if (code === null) {
      return nok(code);
    }

    // Note: blank lines can’t exist in content.
    if (markdownLineEnding(code)) {
      // To do: use `space_or_tab_eol_with_options`, connect.
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      return factorySpace(effects, atBreak, "linePrefix");
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return inside(code);
  }

  /**
   *
   *
   * @type {State}
   */
  function inside(code) {
    if (code === marker || code === null || markdownLineEnding(code)) {
      effects.exit("chunkString");
      return atBreak(code);
    }
    effects.consume(code);
    return code === 92 ? escape : inside;
  }

  /**
   * After `\`, at a special character.
   *
   * ```markdown
   * > | "a\*b"
   *      ^
   * ```
   *
   * @type {State}
   */
  function escape(code) {
    if (code === marker || code === 92) {
      effects.consume(code);
      return inside;
    }
    return inside(code);
  }
}

/**
 * @import {Effects, State} from 'micromark-util-types'
 */

/**
 * Parse spaces and tabs.
 *
 * There is no `nok` parameter:
 *
 * *   line endings or spaces in markdown are often optional, in which case this
 *     factory can be used and `ok` will be switched to whether spaces were found
 *     or not
 * *   one line ending or space can be detected with
 *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`
 *
 * @param {Effects} effects
 *   Context.
 * @param {State} ok
 *   State switched to when successful.
 * @returns {State}
 *   Start state.
 */
function factoryWhitespace(effects, ok) {
  /** @type {boolean} */
  let seen;
  return start;

  /** @type {State} */
  function start(code) {
    if (markdownLineEnding(code)) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      seen = true;
      return start;
    }
    if (markdownSpace(code)) {
      return factorySpace(effects, start, seen ? "linePrefix" : "lineSuffix")(code);
    }
    return ok(code);
  }
}

/**
 * @import {
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const definition = {
  name: 'definition',
  tokenize: tokenizeDefinition
};

/** @type {Construct} */
const titleBefore = {
  partial: true,
  tokenize: tokenizeTitleBefore
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeDefinition(effects, ok, nok) {
  const self = this;
  /** @type {string} */
  let identifier;
  return start;

  /**
   * At start of a definition.
   *
   * ```markdown
   * > | [a]: b "c"
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    // Do not interrupt paragraphs (but do follow definitions).
    // To do: do `interrupt` the way `markdown-rs` does.
    // To do: parse whitespace the way `markdown-rs` does.
    effects.enter("definition");
    return before(code);
  }

  /**
   * After optional whitespace, at `[`.
   *
   * ```markdown
   * > | [a]: b "c"
   *     ^
   * ```
   *
   * @type {State}
   */
  function before(code) {
    // To do: parse whitespace the way `markdown-rs` does.

    return factoryLabel.call(self, effects, labelAfter,
    // Note: we don’t need to reset the way `markdown-rs` does.
    nok, "definitionLabel", "definitionLabelMarker", "definitionLabelString")(code);
  }

  /**
   * After label.
   *
   * ```markdown
   * > | [a]: b "c"
   *        ^
   * ```
   *
   * @type {State}
   */
  function labelAfter(code) {
    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));
    if (code === 58) {
      effects.enter("definitionMarker");
      effects.consume(code);
      effects.exit("definitionMarker");
      return markerAfter;
    }
    return nok(code);
  }

  /**
   * After marker.
   *
   * ```markdown
   * > | [a]: b "c"
   *         ^
   * ```
   *
   * @type {State}
   */
  function markerAfter(code) {
    // Note: whitespace is optional.
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);
  }

  /**
   * Before destination.
   *
   * ```markdown
   * > | [a]: b "c"
   *          ^
   * ```
   *
   * @type {State}
   */
  function destinationBefore(code) {
    return factoryDestination(effects, destinationAfter,
    // Note: we don’t need to reset the way `markdown-rs` does.
    nok, "definitionDestination", "definitionDestinationLiteral", "definitionDestinationLiteralMarker", "definitionDestinationRaw", "definitionDestinationString")(code);
  }

  /**
   * After destination.
   *
   * ```markdown
   * > | [a]: b "c"
   *           ^
   * ```
   *
   * @type {State}
   */
  function destinationAfter(code) {
    return effects.attempt(titleBefore, after, after)(code);
  }

  /**
   * After definition.
   *
   * ```markdown
   * > | [a]: b
   *           ^
   * > | [a]: b "c"
   *               ^
   * ```
   *
   * @type {State}
   */
  function after(code) {
    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, "whitespace")(code) : afterWhitespace(code);
  }

  /**
   * After definition, after optional whitespace.
   *
   * ```markdown
   * > | [a]: b
   *           ^
   * > | [a]: b "c"
   *               ^
   * ```
   *
   * @type {State}
   */
  function afterWhitespace(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("definition");

      // Note: we don’t care about uniqueness.
      // It’s likely that that doesn’t happen very frequently.
      // It is more likely that it wastes precious time.
      self.parser.defined.push(identifier);

      // To do: `markdown-rs` interrupt.
      // // You’d be interrupting.
      // tokenizer.interrupt = true
      return ok(code);
    }
    return nok(code);
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeTitleBefore(effects, ok, nok) {
  return titleBefore;

  /**
   * After destination, at whitespace.
   *
   * ```markdown
   * > | [a]: b
   *           ^
   * > | [a]: b "c"
   *           ^
   * ```
   *
   * @type {State}
   */
  function titleBefore(code) {
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);
  }

  /**
   * At title.
   *
   * ```markdown
   *   | [a]: b
   * > | "c"
   *     ^
   * ```
   *
   * @type {State}
   */
  function beforeMarker(code) {
    return factoryTitle(effects, titleAfter, nok, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(code);
  }

  /**
   * After title.
   *
   * ```markdown
   * > | [a]: b "c"
   *               ^
   * ```
   *
   * @type {State}
   */
  function titleAfter(code) {
    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code) : titleAfterOptionalWhitespace(code);
  }

  /**
   * After title, after optional whitespace.
   *
   * ```markdown
   * > | [a]: b "c"
   *               ^
   * ```
   *
   * @type {State}
   */
  function titleAfterOptionalWhitespace(code) {
    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);
  }
}

/**
 * @import {
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const hardBreakEscape = {
  name: 'hardBreakEscape',
  tokenize: tokenizeHardBreakEscape
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeHardBreakEscape(effects, ok, nok) {
  return start;

  /**
   * Start of a hard break (escape).
   *
   * ```markdown
   * > | a\
   *      ^
   *   | b
   * ```
   *
   * @type {State}
   */
  function start(code) {
    effects.enter("hardBreakEscape");
    effects.consume(code);
    return after;
  }

  /**
   * After `\`, at eol.
   *
   * ```markdown
   * > | a\
   *       ^
   *   | b
   * ```
   *
   *  @type {State}
   */
  function after(code) {
    if (markdownLineEnding(code)) {
      effects.exit("hardBreakEscape");
      return ok(code);
    }
    return nok(code);
  }
}

/**
 * @import {
 *   Construct,
 *   Resolver,
 *   State,
 *   TokenizeContext,
 *   Tokenizer,
 *   Token
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const headingAtx = {
  name: 'headingAtx',
  resolve: resolveHeadingAtx,
  tokenize: tokenizeHeadingAtx
};

/** @type {Resolver} */
function resolveHeadingAtx(events, context) {
  let contentEnd = events.length - 2;
  let contentStart = 3;
  /** @type {Token} */
  let content;
  /** @type {Token} */
  let text;

  // Prefix whitespace, part of the opening.
  if (events[contentStart][1].type === "whitespace") {
    contentStart += 2;
  }

  // Suffix whitespace, part of the closing.
  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") {
    contentEnd -= 2;
  }
  if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }
  if (contentEnd > contentStart) {
    content = {
      type: "atxHeadingText",
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end
    };
    text = {
      type: "chunkText",
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end,
      contentType: "text"
    };
    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);
  }
  return events;
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeHeadingAtx(effects, ok, nok) {
  let size = 0;
  return start;

  /**
   * Start of a heading (atx).
   *
   * ```markdown
   * > | ## aa
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    // To do: parse indent like `markdown-rs`.
    effects.enter("atxHeading");
    return before(code);
  }

  /**
   * After optional whitespace, at `#`.
   *
   * ```markdown
   * > | ## aa
   *     ^
   * ```
   *
   * @type {State}
   */
  function before(code) {
    effects.enter("atxHeadingSequence");
    return sequenceOpen(code);
  }

  /**
   * In opening sequence.
   *
   * ```markdown
   * > | ## aa
   *     ^
   * ```
   *
   * @type {State}
   */
  function sequenceOpen(code) {
    if (code === 35 && size++ < 6) {
      effects.consume(code);
      return sequenceOpen;
    }

    // Always at least one `#`.
    if (code === null || markdownLineEndingOrSpace(code)) {
      effects.exit("atxHeadingSequence");
      return atBreak(code);
    }
    return nok(code);
  }

  /**
   * After something, before something else.
   *
   * ```markdown
   * > | ## aa
   *       ^
   * ```
   *
   * @type {State}
   */
  function atBreak(code) {
    if (code === 35) {
      effects.enter("atxHeadingSequence");
      return sequenceFurther(code);
    }
    if (code === null || markdownLineEnding(code)) {
      effects.exit("atxHeading");
      // To do: interrupt like `markdown-rs`.
      // // Feel free to interrupt.
      // tokenizer.interrupt = false
      return ok(code);
    }
    if (markdownSpace(code)) {
      return factorySpace(effects, atBreak, "whitespace")(code);
    }

    // To do: generate `data` tokens, add the `text` token later.
    // Needs edit map, see: `markdown.rs`.
    effects.enter("atxHeadingText");
    return data(code);
  }

  /**
   * In further sequence (after whitespace).
   *
   * Could be normal “visible” hashes in the heading or a final sequence.
   *
   * ```markdown
   * > | ## aa ##
   *           ^
   * ```
   *
   * @type {State}
   */
  function sequenceFurther(code) {
    if (code === 35) {
      effects.consume(code);
      return sequenceFurther;
    }
    effects.exit("atxHeadingSequence");
    return atBreak(code);
  }

  /**
   * In text.
   *
   * ```markdown
   * > | ## aa
   *        ^
   * ```
   *
   * @type {State}
   */
  function data(code) {
    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {
      effects.exit("atxHeadingText");
      return atBreak(code);
    }
    effects.consume(code);
    return data;
  }
}

/**
 * List of lowercase HTML “block” tag names.
 *
 * The list, when parsing HTML (flow), results in more relaxed rules (condition
 * 6).
 * Because they are known blocks, the HTML-like syntax doesn’t have to be
 * strictly parsed.
 * For tag names not in this list, a more strict algorithm (condition 7) is used
 * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
 *
 * This is copied from:
 * <https://spec.commonmark.org/0.30/#html-blocks>.
 *
 * > 👉 **Note**: `search` was added in `CommonMark@0.31`.
 */
const htmlBlockNames = [
  'address',
  'article',
  'aside',
  'base',
  'basefont',
  'blockquote',
  'body',
  'caption',
  'center',
  'col',
  'colgroup',
  'dd',
  'details',
  'dialog',
  'dir',
  'div',
  'dl',
  'dt',
  'fieldset',
  'figcaption',
  'figure',
  'footer',
  'form',
  'frame',
  'frameset',
  'h1',
  'h2',
  'h3',
  'h4',
  'h5',
  'h6',
  'head',
  'header',
  'hr',
  'html',
  'iframe',
  'legend',
  'li',
  'link',
  'main',
  'menu',
  'menuitem',
  'nav',
  'noframes',
  'ol',
  'optgroup',
  'option',
  'p',
  'param',
  'search',
  'section',
  'summary',
  'table',
  'tbody',
  'td',
  'tfoot',
  'th',
  'thead',
  'title',
  'tr',
  'track',
  'ul'
];

/**
 * List of lowercase HTML “raw” tag names.
 *
 * The list, when parsing HTML (flow), results in HTML that can include lines
 * without exiting, until a closing tag also in this list is found (condition
 * 1).
 *
 * This module is copied from:
 * <https://spec.commonmark.org/0.30/#html-blocks>.
 *
 * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.
 */
const htmlRawNames = ['pre', 'script', 'style', 'textarea'];

/**
 * @import {
 *   Code,
 *   Construct,
 *   Resolver,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */


/** @type {Construct} */
const htmlFlow = {
  concrete: true,
  name: 'htmlFlow',
  resolveTo: resolveToHtmlFlow,
  tokenize: tokenizeHtmlFlow
};

/** @type {Construct} */
const blankLineBefore = {
  partial: true,
  tokenize: tokenizeBlankLineBefore
};
const nonLazyContinuationStart = {
  partial: true,
  tokenize: tokenizeNonLazyContinuationStart
};

/** @type {Resolver} */
function resolveToHtmlFlow(events) {
  let index = events.length;
  while (index--) {
    if (events[index][0] === 'enter' && events[index][1].type === "htmlFlow") {
      break;
    }
  }
  if (index > 1 && events[index - 2][1].type === "linePrefix") {
    // Add the prefix start to the HTML token.
    events[index][1].start = events[index - 2][1].start;
    // Add the prefix start to the HTML line token.
    events[index + 1][1].start = events[index - 2][1].start;
    // Remove the line prefix.
    events.splice(index - 2, 2);
  }
  return events;
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeHtmlFlow(effects, ok, nok) {
  const self = this;
  /** @type {number} */
  let marker;
  /** @type {boolean} */
  let closingTag;
  /** @type {string} */
  let buffer;
  /** @type {number} */
  let index;
  /** @type {Code} */
  let markerB;
  return start;

  /**
   * Start of HTML (flow).
   *
   * ```markdown
   * > | <x />
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    // To do: parse indent like `markdown-rs`.
    return before(code);
  }

  /**
   * At `<`, after optional whitespace.
   *
   * ```markdown
   * > | <x />
   *     ^
   * ```
   *
   * @type {State}
   */
  function before(code) {
    effects.enter("htmlFlow");
    effects.enter("htmlFlowData");
    effects.consume(code);
    return open;
  }

  /**
   * After `<`, at tag name or other stuff.
   *
   * ```markdown
   * > | <x />
   *      ^
   * > | <!doctype>
   *      ^
   * > | <!--xxx-->
   *      ^
   * ```
   *
   * @type {State}
   */
  function open(code) {
    if (code === 33) {
      effects.consume(code);
      return declarationOpen;
    }
    if (code === 47) {
      effects.consume(code);
      closingTag = true;
      return tagCloseStart;
    }
    if (code === 63) {
      effects.consume(code);
      marker = 3;
      // To do:
      // tokenizer.concrete = true
      // To do: use `markdown-rs` style interrupt.
      // While we’re in an instruction instead of a declaration, we’re on a `?`
      // right now, so we do need to search for `>`, similar to declarations.
      return self.interrupt ? ok : continuationDeclarationInside;
    }

    // ASCII alphabetical.
    if (asciiAlpha(code)) {
      // Always the case.
      effects.consume(code);
      buffer = String.fromCharCode(code);
      return tagName;
    }
    return nok(code);
  }

  /**
   * After `<!`, at declaration, comment, or CDATA.
   *
   * ```markdown
   * > | <!doctype>
   *       ^
   * > | <!--xxx-->
   *       ^
   * > | <![CDATA[>&<]]>
   *       ^
   * ```
   *
   * @type {State}
   */
  function declarationOpen(code) {
    if (code === 45) {
      effects.consume(code);
      marker = 2;
      return commentOpenInside;
    }
    if (code === 91) {
      effects.consume(code);
      marker = 5;
      index = 0;
      return cdataOpenInside;
    }

    // ASCII alphabetical.
    if (asciiAlpha(code)) {
      effects.consume(code);
      marker = 4;
      // // Do not form containers.
      // tokenizer.concrete = true
      return self.interrupt ? ok : continuationDeclarationInside;
    }
    return nok(code);
  }

  /**
   * After `<!-`, inside a comment, at another `-`.
   *
   * ```markdown
   * > | <!--xxx-->
   *        ^
   * ```
   *
   * @type {State}
   */
  function commentOpenInside(code) {
    if (code === 45) {
      effects.consume(code);
      // // Do not form containers.
      // tokenizer.concrete = true
      return self.interrupt ? ok : continuationDeclarationInside;
    }
    return nok(code);
  }

  /**
   * After `<![`, inside CDATA, expecting `CDATA[`.
   *
   * ```markdown
   * > | <![CDATA[>&<]]>
   *        ^^^^^^
   * ```
   *
   * @type {State}
   */
  function cdataOpenInside(code) {
    const value = "CDATA[";
    if (code === value.charCodeAt(index++)) {
      effects.consume(code);
      if (index === value.length) {
        // // Do not form containers.
        // tokenizer.concrete = true
        return self.interrupt ? ok : continuation;
      }
      return cdataOpenInside;
    }
    return nok(code);
  }

  /**
   * After `</`, in closing tag, at tag name.
   *
   * ```markdown
   * > | </x>
   *       ^
   * ```
   *
   * @type {State}
   */
  function tagCloseStart(code) {
    if (asciiAlpha(code)) {
      // Always the case.
      effects.consume(code);
      buffer = String.fromCharCode(code);
      return tagName;
    }
    return nok(code);
  }

  /**
   * In tag name.
   *
   * ```markdown
   * > | <ab>
   *      ^^
   * > | </ab>
   *       ^^
   * ```
   *
   * @type {State}
   */
  function tagName(code) {
    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
      const slash = code === 47;
      const name = buffer.toLowerCase();
      if (!slash && !closingTag && htmlRawNames.includes(name)) {
        marker = 1;
        // // Do not form containers.
        // tokenizer.concrete = true
        return self.interrupt ? ok(code) : continuation(code);
      }
      if (htmlBlockNames.includes(buffer.toLowerCase())) {
        marker = 6;
        if (slash) {
          effects.consume(code);
          return basicSelfClosing;
        }

        // // Do not form containers.
        // tokenizer.concrete = true
        return self.interrupt ? ok(code) : continuation(code);
      }
      marker = 7;
      // Do not support complete HTML when interrupting.
      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);
    }

    // ASCII alphanumerical and `-`.
    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      buffer += String.fromCharCode(code);
      return tagName;
    }
    return nok(code);
  }

  /**
   * After closing slash of a basic tag name.
   *
   * ```markdown
   * > | <div/>
   *          ^
   * ```
   *
   * @type {State}
   */
  function basicSelfClosing(code) {
    if (code === 62) {
      effects.consume(code);
      // // Do not form containers.
      // tokenizer.concrete = true
      return self.interrupt ? ok : continuation;
    }
    return nok(code);
  }

  /**
   * After closing slash of a complete tag name.
   *
   * ```markdown
   * > | <x/>
   *        ^
   * ```
   *
   * @type {State}
   */
  function completeClosingTagAfter(code) {
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeClosingTagAfter;
    }
    return completeEnd(code);
  }

  /**
   * At an attribute name.
   *
   * At first, this state is used after a complete tag name, after whitespace,
   * where it expects optional attributes or the end of the tag.
   * It is also reused after attributes, when expecting more optional
   * attributes.
   *
   * ```markdown
   * > | <a />
   *        ^
   * > | <a :b>
   *        ^
   * > | <a _b>
   *        ^
   * > | <a b>
   *        ^
   * > | <a >
   *        ^
   * ```
   *
   * @type {State}
   */
  function completeAttributeNameBefore(code) {
    if (code === 47) {
      effects.consume(code);
      return completeEnd;
    }

    // ASCII alphanumerical and `:` and `_`.
    if (code === 58 || code === 95 || asciiAlpha(code)) {
      effects.consume(code);
      return completeAttributeName;
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAttributeNameBefore;
    }
    return completeEnd(code);
  }

  /**
   * In attribute name.
   *
   * ```markdown
   * > | <a :b>
   *         ^
   * > | <a _b>
   *         ^
   * > | <a b>
   *         ^
   * ```
   *
   * @type {State}
   */
  function completeAttributeName(code) {
    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.
    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return completeAttributeName;
    }
    return completeAttributeNameAfter(code);
  }

  /**
   * After attribute name, at an optional initializer, the end of the tag, or
   * whitespace.
   *
   * ```markdown
   * > | <a b>
   *         ^
   * > | <a b=c>
   *         ^
   * ```
   *
   * @type {State}
   */
  function completeAttributeNameAfter(code) {
    if (code === 61) {
      effects.consume(code);
      return completeAttributeValueBefore;
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAttributeNameAfter;
    }
    return completeAttributeNameBefore(code);
  }

  /**
   * Before unquoted, double quoted, or single quoted attribute value, allowing
   * whitespace.
   *
   * ```markdown
   * > | <a b=c>
   *          ^
   * > | <a b="c">
   *          ^
   * ```
   *
   * @type {State}
   */
  function completeAttributeValueBefore(code) {
    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {
      return nok(code);
    }
    if (code === 34 || code === 39) {
      effects.consume(code);
      markerB = code;
      return completeAttributeValueQuoted;
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAttributeValueBefore;
    }
    return completeAttributeValueUnquoted(code);
  }

  /**
   * In double or single quoted attribute value.
   *
   * ```markdown
   * > | <a b="c">
   *           ^
   * > | <a b='c'>
   *           ^
   * ```
   *
   * @type {State}
   */
  function completeAttributeValueQuoted(code) {
    if (code === markerB) {
      effects.consume(code);
      markerB = null;
      return completeAttributeValueQuotedAfter;
    }
    if (code === null || markdownLineEnding(code)) {
      return nok(code);
    }
    effects.consume(code);
    return completeAttributeValueQuoted;
  }

  /**
   * In unquoted attribute value.
   *
   * ```markdown
   * > | <a b=c>
   *          ^
   * ```
   *
   * @type {State}
   */
  function completeAttributeValueUnquoted(code) {
    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {
      return completeAttributeNameAfter(code);
    }
    effects.consume(code);
    return completeAttributeValueUnquoted;
  }

  /**
   * After double or single quoted attribute value, before whitespace or the
   * end of the tag.
   *
   * ```markdown
   * > | <a b="c">
   *            ^
   * ```
   *
   * @type {State}
   */
  function completeAttributeValueQuotedAfter(code) {
    if (code === 47 || code === 62 || markdownSpace(code)) {
      return completeAttributeNameBefore(code);
    }
    return nok(code);
  }

  /**
   * In certain circumstances of a complete tag where only an `>` is allowed.
   *
   * ```markdown
   * > | <a b="c">
   *             ^
   * ```
   *
   * @type {State}
   */
  function completeEnd(code) {
    if (code === 62) {
      effects.consume(code);
      return completeAfter;
    }
    return nok(code);
  }

  /**
   * After `>` in a complete tag.
   *
   * ```markdown
   * > | <x>
   *        ^
   * ```
   *
   * @type {State}
   */
  function completeAfter(code) {
    if (code === null || markdownLineEnding(code)) {
      // // Do not form containers.
      // tokenizer.concrete = true
      return continuation(code);
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return completeAfter;
    }
    return nok(code);
  }

  /**
   * In continuation of any HTML kind.
   *
   * ```markdown
   * > | <!--xxx-->
   *          ^
   * ```
   *
   * @type {State}
   */
  function continuation(code) {
    if (code === 45 && marker === 2) {
      effects.consume(code);
      return continuationCommentInside;
    }
    if (code === 60 && marker === 1) {
      effects.consume(code);
      return continuationRawTagOpen;
    }
    if (code === 62 && marker === 4) {
      effects.consume(code);
      return continuationClose;
    }
    if (code === 63 && marker === 3) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    if (code === 93 && marker === 5) {
      effects.consume(code);
      return continuationCdataInside;
    }
    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {
      effects.exit("htmlFlowData");
      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);
    }
    if (code === null || markdownLineEnding(code)) {
      effects.exit("htmlFlowData");
      return continuationStart(code);
    }
    effects.consume(code);
    return continuation;
  }

  /**
   * In continuation, at eol.
   *
   * ```markdown
   * > | <x>
   *        ^
   *   | asd
   * ```
   *
   * @type {State}
   */
  function continuationStart(code) {
    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);
  }

  /**
   * In continuation, at eol, before non-lazy content.
   *
   * ```markdown
   * > | <x>
   *        ^
   *   | asd
   * ```
   *
   * @type {State}
   */
  function continuationStartNonLazy(code) {
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return continuationBefore;
  }

  /**
   * In continuation, before non-lazy content.
   *
   * ```markdown
   *   | <x>
   * > | asd
   *     ^
   * ```
   *
   * @type {State}
   */
  function continuationBefore(code) {
    if (code === null || markdownLineEnding(code)) {
      return continuationStart(code);
    }
    effects.enter("htmlFlowData");
    return continuation(code);
  }

  /**
   * In comment continuation, after one `-`, expecting another.
   *
   * ```markdown
   * > | <!--xxx-->
   *             ^
   * ```
   *
   * @type {State}
   */
  function continuationCommentInside(code) {
    if (code === 45) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    return continuation(code);
  }

  /**
   * In raw continuation, after `<`, at `/`.
   *
   * ```markdown
   * > | <script>console.log(1)</script>
   *                            ^
   * ```
   *
   * @type {State}
   */
  function continuationRawTagOpen(code) {
    if (code === 47) {
      effects.consume(code);
      buffer = '';
      return continuationRawEndTag;
    }
    return continuation(code);
  }

  /**
   * In raw continuation, after `</`, in a raw tag name.
   *
   * ```markdown
   * > | <script>console.log(1)</script>
   *                             ^^^^^^
   * ```
   *
   * @type {State}
   */
  function continuationRawEndTag(code) {
    if (code === 62) {
      const name = buffer.toLowerCase();
      if (htmlRawNames.includes(name)) {
        effects.consume(code);
        return continuationClose;
      }
      return continuation(code);
    }
    if (asciiAlpha(code) && buffer.length < 8) {
      // Always the case.
      effects.consume(code);
      buffer += String.fromCharCode(code);
      return continuationRawEndTag;
    }
    return continuation(code);
  }

  /**
   * In cdata continuation, after `]`, expecting `]>`.
   *
   * ```markdown
   * > | <![CDATA[>&<]]>
   *                  ^
   * ```
   *
   * @type {State}
   */
  function continuationCdataInside(code) {
    if (code === 93) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    return continuation(code);
  }

  /**
   * In declaration or instruction continuation, at `>`.
   *
   * ```markdown
   * > | <!-->
   *         ^
   * > | <?>
   *       ^
   * > | <!q>
   *        ^
   * > | <!--ab-->
   *             ^
   * > | <![CDATA[>&<]]>
   *                   ^
   * ```
   *
   * @type {State}
   */
  function continuationDeclarationInside(code) {
    if (code === 62) {
      effects.consume(code);
      return continuationClose;
    }

    // More dashes.
    if (code === 45 && marker === 2) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    return continuation(code);
  }

  /**
   * In closed continuation: everything we get until the eol/eof is part of it.
   *
   * ```markdown
   * > | <!doctype>
   *               ^
   * ```
   *
   * @type {State}
   */
  function continuationClose(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("htmlFlowData");
      return continuationAfter(code);
    }
    effects.consume(code);
    return continuationClose;
  }

  /**
   * Done.
   *
   * ```markdown
   * > | <!doctype>
   *               ^
   * ```
   *
   * @type {State}
   */
  function continuationAfter(code) {
    effects.exit("htmlFlow");
    // // Feel free to interrupt.
    // tokenizer.interrupt = false
    // // No longer concrete.
    // tokenizer.concrete = false
    return ok(code);
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeNonLazyContinuationStart(effects, ok, nok) {
  const self = this;
  return start;

  /**
   * At eol, before continuation.
   *
   * ```markdown
   * > | * ```js
   *            ^
   *   | b
   * ```
   *
   * @type {State}
   */
  function start(code) {
    if (markdownLineEnding(code)) {
      effects.enter("lineEnding");
      effects.consume(code);
      effects.exit("lineEnding");
      return after;
    }
    return nok(code);
  }

  /**
   * A continuation.
   *
   * ```markdown
   *   | * ```js
   * > | b
   *     ^
   * ```
   *
   * @type {State}
   */
  function after(code) {
    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeBlankLineBefore(effects, ok, nok) {
  return start;

  /**
   * Before eol, expecting blank line.
   *
   * ```markdown
   * > | <div>
   *          ^
   *   |
   * ```
   *
   * @type {State}
   */
  function start(code) {
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return effects.attempt(blankLine, ok, nok);
  }
}

/**
 * @import {
 *   Code,
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const htmlText = {
  name: 'htmlText',
  tokenize: tokenizeHtmlText
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeHtmlText(effects, ok, nok) {
  const self = this;
  /** @type {NonNullable<Code> | undefined} */
  let marker;
  /** @type {number} */
  let index;
  /** @type {State} */
  let returnState;
  return start;

  /**
   * Start of HTML (text).
   *
   * ```markdown
   * > | a <b> c
   *       ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    effects.enter("htmlText");
    effects.enter("htmlTextData");
    effects.consume(code);
    return open;
  }

  /**
   * After `<`, at tag name or other stuff.
   *
   * ```markdown
   * > | a <b> c
   *        ^
   * > | a <!doctype> c
   *        ^
   * > | a <!--b--> c
   *        ^
   * ```
   *
   * @type {State}
   */
  function open(code) {
    if (code === 33) {
      effects.consume(code);
      return declarationOpen;
    }
    if (code === 47) {
      effects.consume(code);
      return tagCloseStart;
    }
    if (code === 63) {
      effects.consume(code);
      return instruction;
    }

    // ASCII alphabetical.
    if (asciiAlpha(code)) {
      effects.consume(code);
      return tagOpen;
    }
    return nok(code);
  }

  /**
   * After `<!`, at declaration, comment, or CDATA.
   *
   * ```markdown
   * > | a <!doctype> c
   *         ^
   * > | a <!--b--> c
   *         ^
   * > | a <![CDATA[>&<]]> c
   *         ^
   * ```
   *
   * @type {State}
   */
  function declarationOpen(code) {
    if (code === 45) {
      effects.consume(code);
      return commentOpenInside;
    }
    if (code === 91) {
      effects.consume(code);
      index = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code)) {
      effects.consume(code);
      return declaration;
    }
    return nok(code);
  }

  /**
   * In a comment, after `<!-`, at another `-`.
   *
   * ```markdown
   * > | a <!--b--> c
   *          ^
   * ```
   *
   * @type {State}
   */
  function commentOpenInside(code) {
    if (code === 45) {
      effects.consume(code);
      return commentEnd;
    }
    return nok(code);
  }

  /**
   * In comment.
   *
   * ```markdown
   * > | a <!--b--> c
   *           ^
   * ```
   *
   * @type {State}
   */
  function comment(code) {
    if (code === null) {
      return nok(code);
    }
    if (code === 45) {
      effects.consume(code);
      return commentClose;
    }
    if (markdownLineEnding(code)) {
      returnState = comment;
      return lineEndingBefore(code);
    }
    effects.consume(code);
    return comment;
  }

  /**
   * In comment, after `-`.
   *
   * ```markdown
   * > | a <!--b--> c
   *             ^
   * ```
   *
   * @type {State}
   */
  function commentClose(code) {
    if (code === 45) {
      effects.consume(code);
      return commentEnd;
    }
    return comment(code);
  }

  /**
   * In comment, after `--`.
   *
   * ```markdown
   * > | a <!--b--> c
   *              ^
   * ```
   *
   * @type {State}
   */
  function commentEnd(code) {
    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);
  }

  /**
   * After `<![`, in CDATA, expecting `CDATA[`.
   *
   * ```markdown
   * > | a <![CDATA[>&<]]> b
   *          ^^^^^^
   * ```
   *
   * @type {State}
   */
  function cdataOpenInside(code) {
    const value = "CDATA[";
    if (code === value.charCodeAt(index++)) {
      effects.consume(code);
      return index === value.length ? cdata : cdataOpenInside;
    }
    return nok(code);
  }

  /**
   * In CDATA.
   *
   * ```markdown
   * > | a <![CDATA[>&<]]> b
   *                ^^^
   * ```
   *
   * @type {State}
   */
  function cdata(code) {
    if (code === null) {
      return nok(code);
    }
    if (code === 93) {
      effects.consume(code);
      return cdataClose;
    }
    if (markdownLineEnding(code)) {
      returnState = cdata;
      return lineEndingBefore(code);
    }
    effects.consume(code);
    return cdata;
  }

  /**
   * In CDATA, after `]`, at another `]`.
   *
   * ```markdown
   * > | a <![CDATA[>&<]]> b
   *                    ^
   * ```
   *
   * @type {State}
   */
  function cdataClose(code) {
    if (code === 93) {
      effects.consume(code);
      return cdataEnd;
    }
    return cdata(code);
  }

  /**
   * In CDATA, after `]]`, at `>`.
   *
   * ```markdown
   * > | a <![CDATA[>&<]]> b
   *                     ^
   * ```
   *
   * @type {State}
   */
  function cdataEnd(code) {
    if (code === 62) {
      return end(code);
    }
    if (code === 93) {
      effects.consume(code);
      return cdataEnd;
    }
    return cdata(code);
  }

  /**
   * In declaration.
   *
   * ```markdown
   * > | a <!b> c
   *          ^
   * ```
   *
   * @type {State}
   */
  function declaration(code) {
    if (code === null || code === 62) {
      return end(code);
    }
    if (markdownLineEnding(code)) {
      returnState = declaration;
      return lineEndingBefore(code);
    }
    effects.consume(code);
    return declaration;
  }

  /**
   * In instruction.
   *
   * ```markdown
   * > | a <?b?> c
   *         ^
   * ```
   *
   * @type {State}
   */
  function instruction(code) {
    if (code === null) {
      return nok(code);
    }
    if (code === 63) {
      effects.consume(code);
      return instructionClose;
    }
    if (markdownLineEnding(code)) {
      returnState = instruction;
      return lineEndingBefore(code);
    }
    effects.consume(code);
    return instruction;
  }

  /**
   * In instruction, after `?`, at `>`.
   *
   * ```markdown
   * > | a <?b?> c
   *           ^
   * ```
   *
   * @type {State}
   */
  function instructionClose(code) {
    return code === 62 ? end(code) : instruction(code);
  }

  /**
   * After `</`, in closing tag, at tag name.
   *
   * ```markdown
   * > | a </b> c
   *         ^
   * ```
   *
   * @type {State}
   */
  function tagCloseStart(code) {
    // ASCII alphabetical.
    if (asciiAlpha(code)) {
      effects.consume(code);
      return tagClose;
    }
    return nok(code);
  }

  /**
   * After `</x`, in a tag name.
   *
   * ```markdown
   * > | a </b> c
   *          ^
   * ```
   *
   * @type {State}
   */
  function tagClose(code) {
    // ASCII alphanumerical and `-`.
    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return tagClose;
    }
    return tagCloseBetween(code);
  }

  /**
   * In closing tag, after tag name.
   *
   * ```markdown
   * > | a </b> c
   *          ^
   * ```
   *
   * @type {State}
   */
  function tagCloseBetween(code) {
    if (markdownLineEnding(code)) {
      returnState = tagCloseBetween;
      return lineEndingBefore(code);
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return tagCloseBetween;
    }
    return end(code);
  }

  /**
   * After `<x`, in opening tag name.
   *
   * ```markdown
   * > | a <b> c
   *         ^
   * ```
   *
   * @type {State}
   */
  function tagOpen(code) {
    // ASCII alphanumerical and `-`.
    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return tagOpen;
    }
    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
      return tagOpenBetween(code);
    }
    return nok(code);
  }

  /**
   * In opening tag, after tag name.
   *
   * ```markdown
   * > | a <b> c
   *         ^
   * ```
   *
   * @type {State}
   */
  function tagOpenBetween(code) {
    if (code === 47) {
      effects.consume(code);
      return end;
    }

    // ASCII alphabetical and `:` and `_`.
    if (code === 58 || code === 95 || asciiAlpha(code)) {
      effects.consume(code);
      return tagOpenAttributeName;
    }
    if (markdownLineEnding(code)) {
      returnState = tagOpenBetween;
      return lineEndingBefore(code);
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return tagOpenBetween;
    }
    return end(code);
  }

  /**
   * In attribute name.
   *
   * ```markdown
   * > | a <b c> d
   *          ^
   * ```
   *
   * @type {State}
   */
  function tagOpenAttributeName(code) {
    // ASCII alphabetical and `-`, `.`, `:`, and `_`.
    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return tagOpenAttributeName;
    }
    return tagOpenAttributeNameAfter(code);
  }

  /**
   * After attribute name, before initializer, the end of the tag, or
   * whitespace.
   *
   * ```markdown
   * > | a <b c> d
   *           ^
   * ```
   *
   * @type {State}
   */
  function tagOpenAttributeNameAfter(code) {
    if (code === 61) {
      effects.consume(code);
      return tagOpenAttributeValueBefore;
    }
    if (markdownLineEnding(code)) {
      returnState = tagOpenAttributeNameAfter;
      return lineEndingBefore(code);
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return tagOpenAttributeNameAfter;
    }
    return tagOpenBetween(code);
  }

  /**
   * Before unquoted, double quoted, or single quoted attribute value, allowing
   * whitespace.
   *
   * ```markdown
   * > | a <b c=d> e
   *            ^
   * ```
   *
   * @type {State}
   */
  function tagOpenAttributeValueBefore(code) {
    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {
      return nok(code);
    }
    if (code === 34 || code === 39) {
      effects.consume(code);
      marker = code;
      return tagOpenAttributeValueQuoted;
    }
    if (markdownLineEnding(code)) {
      returnState = tagOpenAttributeValueBefore;
      return lineEndingBefore(code);
    }
    if (markdownSpace(code)) {
      effects.consume(code);
      return tagOpenAttributeValueBefore;
    }
    effects.consume(code);
    return tagOpenAttributeValueUnquoted;
  }

  /**
   * In double or single quoted attribute value.
   *
   * ```markdown
   * > | a <b c="d"> e
   *             ^
   * ```
   *
   * @type {State}
   */
  function tagOpenAttributeValueQuoted(code) {
    if (code === marker) {
      effects.consume(code);
      marker = undefined;
      return tagOpenAttributeValueQuotedAfter;
    }
    if (code === null) {
      return nok(code);
    }
    if (markdownLineEnding(code)) {
      returnState = tagOpenAttributeValueQuoted;
      return lineEndingBefore(code);
    }
    effects.consume(code);
    return tagOpenAttributeValueQuoted;
  }

  /**
   * In unquoted attribute value.
   *
   * ```markdown
   * > | a <b c=d> e
   *            ^
   * ```
   *
   * @type {State}
   */
  function tagOpenAttributeValueUnquoted(code) {
    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {
      return nok(code);
    }
    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
      return tagOpenBetween(code);
    }
    effects.consume(code);
    return tagOpenAttributeValueUnquoted;
  }

  /**
   * After double or single quoted attribute value, before whitespace or the end
   * of the tag.
   *
   * ```markdown
   * > | a <b c="d"> e
   *               ^
   * ```
   *
   * @type {State}
   */
  function tagOpenAttributeValueQuotedAfter(code) {
    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
      return tagOpenBetween(code);
    }
    return nok(code);
  }

  /**
   * In certain circumstances of a tag where only an `>` is allowed.
   *
   * ```markdown
   * > | a <b c="d"> e
   *               ^
   * ```
   *
   * @type {State}
   */
  function end(code) {
    if (code === 62) {
      effects.consume(code);
      effects.exit("htmlTextData");
      effects.exit("htmlText");
      return ok;
    }
    return nok(code);
  }

  /**
   * At eol.
   *
   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
   * > empty tokens.
   *
   * ```markdown
   * > | a <!--a
   *            ^
   *   | b-->
   * ```
   *
   * @type {State}
   */
  function lineEndingBefore(code) {
    effects.exit("htmlTextData");
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return lineEndingAfter;
  }

  /**
   * After eol, at optional whitespace.
   *
   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
   * > empty tokens.
   *
   * ```markdown
   *   | a <!--a
   * > | b-->
   *     ^
   * ```
   *
   * @type {State}
   */
  function lineEndingAfter(code) {
    // Always populated by defaults.

    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, "linePrefix", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);
  }

  /**
   * After eol, after optional whitespace.
   *
   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
   * > empty tokens.
   *
   * ```markdown
   *   | a <!--a
   * > | b-->
   *     ^
   * ```
   *
   * @type {State}
   */
  function lineEndingAfterPrefix(code) {
    effects.enter("htmlTextData");
    return returnState(code);
  }
}

/**
 * @import {
 *   Construct,
 *   Event,
 *   Resolver,
 *   State,
 *   TokenizeContext,
 *   Tokenizer,
 *   Token
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const labelEnd = {
  name: 'labelEnd',
  resolveAll: resolveAllLabelEnd,
  resolveTo: resolveToLabelEnd,
  tokenize: tokenizeLabelEnd
};

/** @type {Construct} */
const resourceConstruct = {
  tokenize: tokenizeResource
};
/** @type {Construct} */
const referenceFullConstruct = {
  tokenize: tokenizeReferenceFull
};
/** @type {Construct} */
const referenceCollapsedConstruct = {
  tokenize: tokenizeReferenceCollapsed
};

/** @type {Resolver} */
function resolveAllLabelEnd(events) {
  let index = -1;
  /** @type {Array<Event>} */
  const newEvents = [];
  while (++index < events.length) {
    const token = events[index][1];
    newEvents.push(events[index]);
    if (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd") {
      // Remove the marker.
      const offset = token.type === "labelImage" ? 4 : 2;
      token.type = "data";
      index += offset;
    }
  }

  // If the events are equal, we don't have to copy newEvents to events
  if (events.length !== newEvents.length) {
    splice(events, 0, events.length, newEvents);
  }
  return events;
}

/** @type {Resolver} */
function resolveToLabelEnd(events, context) {
  let index = events.length;
  let offset = 0;
  /** @type {Token} */
  let token;
  /** @type {number | undefined} */
  let open;
  /** @type {number | undefined} */
  let close;
  /** @type {Array<Event>} */
  let media;

  // Find an opening.
  while (index--) {
    token = events[index][1];
    if (open) {
      // If we see another link, or inactive link label, we’ve been here before.
      if (token.type === "link" || token.type === "labelLink" && token._inactive) {
        break;
      }

      // Mark other link openings as inactive, as we can’t have links in
      // links.
      if (events[index][0] === 'enter' && token.type === "labelLink") {
        token._inactive = true;
      }
    } else if (close) {
      if (events[index][0] === 'enter' && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
        open = index;
        if (token.type !== "labelLink") {
          offset = 2;
          break;
        }
      }
    } else if (token.type === "labelEnd") {
      close = index;
    }
  }
  const group = {
    type: events[open][1].type === "labelLink" ? "link" : "image",
    start: {
      ...events[open][1].start
    },
    end: {
      ...events[events.length - 1][1].end
    }
  };
  const label = {
    type: "label",
    start: {
      ...events[open][1].start
    },
    end: {
      ...events[close][1].end
    }
  };
  const text = {
    type: "labelText",
    start: {
      ...events[open + offset + 2][1].end
    },
    end: {
      ...events[close - 2][1].start
    }
  };
  media = [['enter', group, context], ['enter', label, context]];

  // Opening marker.
  media = push(media, events.slice(open + 1, open + offset + 3));

  // Text open.
  media = push(media, [['enter', text, context]]);

  // Always populated by defaults.

  // Between.
  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));

  // Text close, marker close, label close.
  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);

  // Reference, resource, or so.
  media = push(media, events.slice(close + 1));

  // Media close.
  media = push(media, [['exit', group, context]]);
  splice(events, open, events.length, media);
  return events;
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeLabelEnd(effects, ok, nok) {
  const self = this;
  let index = self.events.length;
  /** @type {Token} */
  let labelStart;
  /** @type {boolean} */
  let defined;

  // Find an opening.
  while (index--) {
    if ((self.events[index][1].type === "labelImage" || self.events[index][1].type === "labelLink") && !self.events[index][1]._balanced) {
      labelStart = self.events[index][1];
      break;
    }
  }
  return start;

  /**
   * Start of label end.
   *
   * ```markdown
   * > | [a](b) c
   *       ^
   * > | [a][b] c
   *       ^
   * > | [a][] b
   *       ^
   * > | [a] b
   * ```
   *
   * @type {State}
   */
  function start(code) {
    // If there is not an okay opening.
    if (!labelStart) {
      return nok(code);
    }

    // If the corresponding label (link) start is marked as inactive,
    // it means we’d be wrapping a link, like this:
    //
    // ```markdown
    // > | a [b [c](d) e](f) g.
    //                  ^
    // ```
    //
    // We can’t have that, so it’s just balanced brackets.
    if (labelStart._inactive) {
      return labelEndNok(code);
    }
    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({
      start: labelStart.end,
      end: self.now()
    })));
    effects.enter("labelEnd");
    effects.enter("labelMarker");
    effects.consume(code);
    effects.exit("labelMarker");
    effects.exit("labelEnd");
    return after;
  }

  /**
   * After `]`.
   *
   * ```markdown
   * > | [a](b) c
   *       ^
   * > | [a][b] c
   *       ^
   * > | [a][] b
   *       ^
   * > | [a] b
   *       ^
   * ```
   *
   * @type {State}
   */
  function after(code) {
    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in
    // an extension.

    // Resource (`[asd](fgh)`)?
    if (code === 40) {
      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);
    }

    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?
    if (code === 91) {
      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);
    }

    // Shortcut (`[asd]`) reference?
    return defined ? labelEndOk(code) : labelEndNok(code);
  }

  /**
   * After `]`, at `[`, but not at a full reference.
   *
   * > 👉 **Note**: we only get here if the label is defined.
   *
   * ```markdown
   * > | [a][] b
   *        ^
   * > | [a] b
   *        ^
   * ```
   *
   * @type {State}
   */
  function referenceNotFull(code) {
    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);
  }

  /**
   * Done, we found something.
   *
   * ```markdown
   * > | [a](b) c
   *           ^
   * > | [a][b] c
   *           ^
   * > | [a][] b
   *          ^
   * > | [a] b
   *        ^
   * ```
   *
   * @type {State}
   */
  function labelEndOk(code) {
    // Note: `markdown-rs` does a bunch of stuff here.
    return ok(code);
  }

  /**
   * Done, it’s nothing.
   *
   * There was an okay opening, but we didn’t match anything.
   *
   * ```markdown
   * > | [a](b c
   *        ^
   * > | [a][b c
   *        ^
   * > | [a] b
   *        ^
   * ```
   *
   * @type {State}
   */
  function labelEndNok(code) {
    labelStart._balanced = true;
    return nok(code);
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeResource(effects, ok, nok) {
  return resourceStart;

  /**
   * At a resource.
   *
   * ```markdown
   * > | [a](b) c
   *        ^
   * ```
   *
   * @type {State}
   */
  function resourceStart(code) {
    effects.enter("resource");
    effects.enter("resourceMarker");
    effects.consume(code);
    effects.exit("resourceMarker");
    return resourceBefore;
  }

  /**
   * In resource, after `(`, at optional whitespace.
   *
   * ```markdown
   * > | [a](b) c
   *         ^
   * ```
   *
   * @type {State}
   */
  function resourceBefore(code) {
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);
  }

  /**
   * In resource, after optional whitespace, at `)` or a destination.
   *
   * ```markdown
   * > | [a](b) c
   *         ^
   * ```
   *
   * @type {State}
   */
  function resourceOpen(code) {
    if (code === 41) {
      return resourceEnd(code);
    }
    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 32)(code);
  }

  /**
   * In resource, after destination, at optional whitespace.
   *
   * ```markdown
   * > | [a](b) c
   *          ^
   * ```
   *
   * @type {State}
   */
  function resourceDestinationAfter(code) {
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);
  }

  /**
   * At invalid destination.
   *
   * ```markdown
   * > | [a](<<) b
   *         ^
   * ```
   *
   * @type {State}
   */
  function resourceDestinationMissing(code) {
    return nok(code);
  }

  /**
   * In resource, after destination and whitespace, at `(` or title.
   *
   * ```markdown
   * > | [a](b ) c
   *           ^
   * ```
   *
   * @type {State}
   */
  function resourceBetween(code) {
    if (code === 34 || code === 39 || code === 40) {
      return factoryTitle(effects, resourceTitleAfter, nok, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(code);
    }
    return resourceEnd(code);
  }

  /**
   * In resource, after title, at optional whitespace.
   *
   * ```markdown
   * > | [a](b "c") d
   *              ^
   * ```
   *
   * @type {State}
   */
  function resourceTitleAfter(code) {
    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);
  }

  /**
   * In resource, at `)`.
   *
   * ```markdown
   * > | [a](b) d
   *          ^
   * ```
   *
   * @type {State}
   */
  function resourceEnd(code) {
    if (code === 41) {
      effects.enter("resourceMarker");
      effects.consume(code);
      effects.exit("resourceMarker");
      effects.exit("resource");
      return ok;
    }
    return nok(code);
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeReferenceFull(effects, ok, nok) {
  const self = this;
  return referenceFull;

  /**
   * In a reference (full), at the `[`.
   *
   * ```markdown
   * > | [a][b] d
   *        ^
   * ```
   *
   * @type {State}
   */
  function referenceFull(code) {
    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, "reference", "referenceMarker", "referenceString")(code);
  }

  /**
   * In a reference (full), after `]`.
   *
   * ```markdown
   * > | [a][b] d
   *          ^
   * ```
   *
   * @type {State}
   */
  function referenceFullAfter(code) {
    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);
  }

  /**
   * In reference (full) that was missing.
   *
   * ```markdown
   * > | [a][b d
   *        ^
   * ```
   *
   * @type {State}
   */
  function referenceFullMissing(code) {
    return nok(code);
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeReferenceCollapsed(effects, ok, nok) {
  return referenceCollapsedStart;

  /**
   * In reference (collapsed), at `[`.
   *
   * > 👉 **Note**: we only get here if the label is defined.
   *
   * ```markdown
   * > | [a][] d
   *        ^
   * ```
   *
   * @type {State}
   */
  function referenceCollapsedStart(code) {
    // We only attempt a collapsed label if there’s a `[`.

    effects.enter("reference");
    effects.enter("referenceMarker");
    effects.consume(code);
    effects.exit("referenceMarker");
    return referenceCollapsedOpen;
  }

  /**
   * In reference (collapsed), at `]`.
   *
   * > 👉 **Note**: we only get here if the label is defined.
   *
   * ```markdown
   * > | [a][] d
   *         ^
   * ```
   *
   *  @type {State}
   */
  function referenceCollapsedOpen(code) {
    if (code === 93) {
      effects.enter("referenceMarker");
      effects.consume(code);
      effects.exit("referenceMarker");
      effects.exit("reference");
      return ok;
    }
    return nok(code);
  }
}

/**
 * @import {
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */


/** @type {Construct} */
const labelStartImage = {
  name: 'labelStartImage',
  resolveAll: labelEnd.resolveAll,
  tokenize: tokenizeLabelStartImage
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeLabelStartImage(effects, ok, nok) {
  const self = this;
  return start;

  /**
   * Start of label (image) start.
   *
   * ```markdown
   * > | a ![b] c
   *       ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    effects.enter("labelImage");
    effects.enter("labelImageMarker");
    effects.consume(code);
    effects.exit("labelImageMarker");
    return open;
  }

  /**
   * After `!`, at `[`.
   *
   * ```markdown
   * > | a ![b] c
   *        ^
   * ```
   *
   * @type {State}
   */
  function open(code) {
    if (code === 91) {
      effects.enter("labelMarker");
      effects.consume(code);
      effects.exit("labelMarker");
      effects.exit("labelImage");
      return after;
    }
    return nok(code);
  }

  /**
   * After `![`.
   *
   * ```markdown
   * > | a ![b] c
   *         ^
   * ```
   *
   * This is needed in because, when GFM footnotes are enabled, images never
   * form when started with a `^`.
   * Instead, links form:
   *
   * ```markdown
   * ![^a](b)
   *
   * ![^a][b]
   *
   * [b]: c
   * ```
   *
   * ```html
   * <p>!<a href=\"b\">^a</a></p>
   * <p>!<a href=\"c\">^a</a></p>
   * ```
   *
   * @type {State}
   */
  function after(code) {
    // To do: use a new field to do this, this is still needed for
    // `micromark-extension-gfm-footnote`, but the `label-start-link`
    // behavior isn’t.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);
  }
}

/**
 * @import {
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */


/** @type {Construct} */
const labelStartLink = {
  name: 'labelStartLink',
  resolveAll: labelEnd.resolveAll,
  tokenize: tokenizeLabelStartLink
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeLabelStartLink(effects, ok, nok) {
  const self = this;
  return start;

  /**
   * Start of label (link) start.
   *
   * ```markdown
   * > | a [b] c
   *       ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    effects.enter("labelLink");
    effects.enter("labelMarker");
    effects.consume(code);
    effects.exit("labelMarker");
    effects.exit("labelLink");
    return after;
  }

  /** @type {State} */
  function after(code) {
    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,
    // remove.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);
  }
}

/**
 * @import {
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const lineEnding = {
  name: 'lineEnding',
  tokenize: tokenizeLineEnding
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeLineEnding(effects, ok) {
  return start;

  /** @type {State} */
  function start(code) {
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    return factorySpace(effects, ok, "linePrefix");
  }
}

/**
 * @import {
 *   Code,
 *   Construct,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const thematicBreak$1 = {
  name: 'thematicBreak',
  tokenize: tokenizeThematicBreak
};

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeThematicBreak(effects, ok, nok) {
  let size = 0;
  /** @type {NonNullable<Code>} */
  let marker;
  return start;

  /**
   * Start of thematic break.
   *
   * ```markdown
   * > | ***
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    effects.enter("thematicBreak");
    // To do: parse indent like `markdown-rs`.
    return before(code);
  }

  /**
   * After optional whitespace, at marker.
   *
   * ```markdown
   * > | ***
   *     ^
   * ```
   *
   * @type {State}
   */
  function before(code) {
    marker = code;
    return atBreak(code);
  }

  /**
   * After something, before something else.
   *
   * ```markdown
   * > | ***
   *     ^
   * ```
   *
   * @type {State}
   */
  function atBreak(code) {
    if (code === marker) {
      effects.enter("thematicBreakSequence");
      return sequence(code);
    }
    if (size >= 3 && (code === null || markdownLineEnding(code))) {
      effects.exit("thematicBreak");
      return ok(code);
    }
    return nok(code);
  }

  /**
   * In sequence.
   *
   * ```markdown
   * > | ***
   *     ^
   * ```
   *
   * @type {State}
   */
  function sequence(code) {
    if (code === marker) {
      effects.consume(code);
      size++;
      return sequence;
    }
    effects.exit("thematicBreakSequence");
    return markdownSpace(code) ? factorySpace(effects, atBreak, "whitespace")(code) : atBreak(code);
  }
}

/**
 * @import {
 *   Code,
 *   Construct,
 *   Exiter,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */


/** @type {Construct} */
const list$1 = {
  continuation: {
    tokenize: tokenizeListContinuation
  },
  exit: tokenizeListEnd,
  name: 'list',
  tokenize: tokenizeListStart
};

/** @type {Construct} */
const listItemPrefixWhitespaceConstruct = {
  partial: true,
  tokenize: tokenizeListItemPrefixWhitespace
};

/** @type {Construct} */
const indentConstruct = {
  partial: true,
  tokenize: tokenizeIndent
};

// To do: `markdown-rs` parses list items on their own and later stitches them
// together.

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeListStart(effects, ok, nok) {
  const self = this;
  const tail = self.events[self.events.length - 1];
  let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let size = 0;
  return start;

  /** @type {State} */
  function start(code) {
    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? "listUnordered" : "listOrdered");
    if (kind === "listUnordered" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {
      if (!self.containerState.type) {
        self.containerState.type = kind;
        effects.enter(kind, {
          _container: true
        });
      }
      if (kind === "listUnordered") {
        effects.enter("listItemPrefix");
        return code === 42 || code === 45 ? effects.check(thematicBreak$1, nok, atMarker)(code) : atMarker(code);
      }
      if (!self.interrupt || code === 49) {
        effects.enter("listItemPrefix");
        effects.enter("listItemValue");
        return inside(code);
      }
    }
    return nok(code);
  }

  /** @type {State} */
  function inside(code) {
    if (asciiDigit(code) && ++size < 10) {
      effects.consume(code);
      return inside;
    }
    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {
      effects.exit("listItemValue");
      return atMarker(code);
    }
    return nok(code);
  }

  /**
   * @type {State}
   **/
  function atMarker(code) {
    effects.enter("listItemMarker");
    effects.consume(code);
    effects.exit("listItemMarker");
    self.containerState.marker = self.containerState.marker || code;
    return effects.check(blankLine,
    // Can’t be empty when interrupting.
    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));
  }

  /** @type {State} */
  function onBlank(code) {
    self.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code);
  }

  /** @type {State} */
  function otherPrefix(code) {
    if (markdownSpace(code)) {
      effects.enter("listItemPrefixWhitespace");
      effects.consume(code);
      effects.exit("listItemPrefixWhitespace");
      return endOfPrefix;
    }
    return nok(code);
  }

  /** @type {State} */
  function endOfPrefix(code) {
    self.containerState.size = initialSize + self.sliceSerialize(effects.exit("listItemPrefix"), true).length;
    return ok(code);
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeListContinuation(effects, ok, nok) {
  const self = this;
  self.containerState._closeFlow = undefined;
  return effects.check(blankLine, onBlank, notBlank);

  /** @type {State} */
  function onBlank(code) {
    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;

    // We have a blank line.
    // Still, try to consume at most the items size.
    return factorySpace(effects, ok, "listItemIndent", self.containerState.size + 1)(code);
  }

  /** @type {State} */
  function notBlank(code) {
    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {
      self.containerState.furtherBlankLines = undefined;
      self.containerState.initialBlankLine = undefined;
      return notInCurrentItem(code);
    }
    self.containerState.furtherBlankLines = undefined;
    self.containerState.initialBlankLine = undefined;
    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);
  }

  /** @type {State} */
  function notInCurrentItem(code) {
    // While we do continue, we signal that the flow should be closed.
    self.containerState._closeFlow = true;
    // As we’re closing flow, we’re no longer interrupting.
    self.interrupt = undefined;
    // Always populated by defaults.

    return factorySpace(effects, effects.attempt(list$1, ok, nok), "linePrefix", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeIndent(effects, ok, nok) {
  const self = this;
  return factorySpace(effects, afterPrefix, "listItemIndent", self.containerState.size + 1);

  /** @type {State} */
  function afterPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);
  }
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Exiter}
 */
function tokenizeListEnd(effects) {
  effects.exit(this.containerState.type);
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
  const self = this;

  // Always populated by defaults.

  return factorySpace(effects, afterPrefix, "listItemPrefixWhitespace", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);

  /** @type {State} */
  function afterPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return !markdownSpace(code) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok(code) : nok(code);
  }
}

/**
 * @import {
 *   Code,
 *   Construct,
 *   Resolver,
 *   State,
 *   TokenizeContext,
 *   Tokenizer
 * } from 'micromark-util-types'
 */

/** @type {Construct} */
const setextUnderline = {
  name: 'setextUnderline',
  resolveTo: resolveToSetextUnderline,
  tokenize: tokenizeSetextUnderline
};

/** @type {Resolver} */
function resolveToSetextUnderline(events, context) {
  // To do: resolve like `markdown-rs`.
  let index = events.length;
  /** @type {number | undefined} */
  let content;
  /** @type {number | undefined} */
  let text;
  /** @type {number | undefined} */
  let definition;

  // Find the opening of the content.
  // It’ll always exist: we don’t tokenize if it isn’t there.
  while (index--) {
    if (events[index][0] === 'enter') {
      if (events[index][1].type === "content") {
        content = index;
        break;
      }
      if (events[index][1].type === "paragraph") {
        text = index;
      }
    }
    // Exit
    else {
      if (events[index][1].type === "content") {
        // Remove the content end (if needed we’ll add it later)
        events.splice(index, 1);
      }
      if (!definition && events[index][1].type === "definition") {
        definition = index;
      }
    }
  }
  const heading = {
    type: "setextHeading",
    start: {
      ...events[content][1].start
    },
    end: {
      ...events[events.length - 1][1].end
    }
  };

  // Change the paragraph to setext heading text.
  events[text][1].type = "setextHeadingText";

  // If we have definitions in the content, we’ll keep on having content,
  // but we need move it.
  if (definition) {
    events.splice(text, 0, ['enter', heading, context]);
    events.splice(definition + 1, 0, ['exit', events[content][1], context]);
    events[content][1].end = {
      ...events[definition][1].end
    };
  } else {
    events[content][1] = heading;
  }

  // Add the heading exit at the end.
  events.push(['exit', heading, context]);
  return events;
}

/**
 * @this {TokenizeContext}
 *   Context.
 * @type {Tokenizer}
 */
function tokenizeSetextUnderline(effects, ok, nok) {
  const self = this;
  /** @type {NonNullable<Code>} */
  let marker;
  return start;

  /**
   * At start of heading (setext) underline.
   *
   * ```markdown
   *   | aa
   * > | ==
   *     ^
   * ```
   *
   * @type {State}
   */
  function start(code) {
    let index = self.events.length;
    /** @type {boolean | undefined} */
    let paragraph;
    // Find an opening.
    while (index--) {
      // Skip enter/exit of line ending, line prefix, and content.
      // We can now either have a definition or a paragraph.
      if (self.events[index][1].type !== "lineEnding" && self.events[index][1].type !== "linePrefix" && self.events[index][1].type !== "content") {
        paragraph = self.events[index][1].type === "paragraph";
        break;
      }
    }

    // To do: handle lazy/pierce like `markdown-rs`.
    // To do: parse indent like `markdown-rs`.
    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
      effects.enter("setextHeadingLine");
      marker = code;
      return before(code);
    }
    return nok(code);
  }

  /**
   * After optional whitespace, at `-` or `=`.
   *
   * ```markdown
   *   | aa
   * > | ==
   *     ^
   * ```
   *
   * @type {State}
   */
  function before(code) {
    effects.enter("setextHeadingLineSequence");
    return inside(code);
  }

  /**
   * In sequence.
   *
   * ```markdown
   *   | aa
   * > | ==
   *     ^
   * ```
   *
   * @type {State}
   */
  function inside(code) {
    if (code === marker) {
      effects.consume(code);
      return inside;
    }
    effects.exit("setextHeadingLineSequence");
    return markdownSpace(code) ? factorySpace(effects, after, "lineSuffix")(code) : after(code);
  }

  /**
   * After sequence, after optional whitespace.
   *
   * ```markdown
   *   | aa
   * > | ==
   *       ^
   * ```
   *
   * @type {State}
   */
  function after(code) {
    if (code === null || markdownLineEnding(code)) {
      effects.exit("setextHeadingLine");
      return ok(code);
    }
    return nok(code);
  }
}

/**
 * @import {
 *   InitialConstruct,
 *   Initializer,
 *   State,
 *   TokenizeContext
 * } from 'micromark-util-types'
 */

/** @type {InitialConstruct} */
const flow$1 = {
  tokenize: initializeFlow
};

/**
 * @this {TokenizeContext}
 *   Self.
 * @type {Initializer}
 *   Initializer.
 */
function initializeFlow(effects) {
  const self = this;
  const initial = effects.attempt(
  // Try to parse a blank line.
  blankLine, atBlankEnding,
  // Try to parse initial flow (essentially, only code).
  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), "linePrefix")));
  return initial;

  /** @type {State} */
  function atBlankEnding(code) {
    if (code === null) {
      effects.consume(code);
      return;
    }
    effects.enter("lineEndingBlank");
    effects.consume(code);
    effects.exit("lineEndingBlank");
    self.currentConstruct = undefined;
    return initial;
  }

  /** @type {State} */
  function afterConstruct(code) {
    if (code === null) {
      effects.consume(code);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code);
    effects.exit("lineEnding");
    self.currentConstruct = undefined;
    return initial;
  }
}

/**
 * @import {
 *   Code,
 *   InitialConstruct,
 *   Initializer,
 *   Resolver,
 *   State,
 *   TokenizeContext
 * } from 'micromark-util-types'
 */

const resolver = {
  resolveAll: createResolver()
};
const string$1 = initializeFactory('string');
const text$2 = initializeFactory('text');

/**
 * @param {'string' | 'text'} field
 *   Field.
 * @returns {InitialConstruct}
 *   Construct.
 */
function initializeFactory(field) {
  return {
    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),
    tokenize: initializeText
  };

  /**
   * @this {TokenizeContext}
   *   Context.
   * @type {Initializer}
   */
  function initializeText(effects) {
    const self = this;
    const constructs = this.parser.constructs[field];
    const text = effects.attempt(constructs, start, notText);
    return start;

    /** @type {State} */
    function start(code) {
      return atBreak(code) ? text(code) : notText(code);
    }

    /** @type {State} */
    function notText(code) {
      if (code === null) {
        effects.consume(code);
        return;
      }
      effects.enter("data");
      effects.consume(code);
      return data;
    }

    /** @type {State} */
    function data(code) {
      if (atBreak(code)) {
        effects.exit("data");
        return text(code);
      }

      // Data.
      effects.consume(code);
      return data;
    }

    /**
     * @param {Code} code
     *   Code.
     * @returns {boolean}
     *   Whether the code is a break.
     */
    function atBreak(code) {
      if (code === null) {
        return true;
      }
      const list = constructs[code];
      let index = -1;
      if (list) {
        // Always populated by defaults.

        while (++index < list.length) {
          const item = list[index];
          if (!item.previous || item.previous.call(self, self.previous)) {
            return true;
          }
        }
      }
      return false;
    }
  }
}

/**
 * @param {Resolver | undefined} [extraResolver]
 *   Resolver.
 * @returns {Resolver}
 *   Resolver.
 */
function createResolver(extraResolver) {
  return resolveAllText;

  /** @type {Resolver} */
  function resolveAllText(events, context) {
    let index = -1;
    /** @type {number | undefined} */
    let enter;

    // A rather boring computation (to merge adjacent `data` events) which
    // improves mm performance by 29%.
    while (++index <= events.length) {
      if (enter === undefined) {
        if (events[index] && events[index][1].type === "data") {
          enter = index;
          index++;
        }
      } else if (!events[index] || events[index][1].type !== "data") {
        // Don’t do anything if there is one data token.
        if (index !== enter + 2) {
          events[enter][1].end = events[index - 1][1].end;
          events.splice(enter + 2, index - enter - 2);
          index = enter + 2;
        }
        enter = undefined;
      }
    }
    return extraResolver ? extraResolver(events, context) : events;
  }
}

/**
 * A rather ugly set of instructions which again looks at chunks in the input
 * stream.
 * The reason to do this here is that it is *much* faster to parse in reverse.
 * And that we can’t hook into `null` to split the line suffix before an EOF.
 * To do: figure out if we can make this into a clean utility, or even in core.
 * As it will be useful for GFMs literal autolink extension (and maybe even
 * tables?)
 *
 * @type {Resolver}
 */
function resolveAllLineSuffixes(events, context) {
  let eventIndex = 0; // Skip first.

  while (++eventIndex <= events.length) {
    if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
      const data = events[eventIndex - 1][1];
      const chunks = context.sliceStream(data);
      let index = chunks.length;
      let bufferIndex = -1;
      let size = 0;
      /** @type {boolean | undefined} */
      let tabs;
      while (index--) {
        const chunk = chunks[index];
        if (typeof chunk === 'string') {
          bufferIndex = chunk.length;
          while (chunk.charCodeAt(bufferIndex - 1) === 32) {
            size++;
            bufferIndex--;
          }
          if (bufferIndex) break;
          bufferIndex = -1;
        }
        // Number
        else if (chunk === -2) {
          tabs = true;
          size++;
        } else if (chunk === -1) ; else {
          // Replacement character, exit.
          index++;
          break;
        }
      }

      // Allow final trailing whitespace.
      if (context._contentTypeTextTrailing && eventIndex === events.length) {
        size = 0;
      }
      if (size) {
        const token = {
          type: eventIndex === events.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
          start: {
            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,
            _index: data.start._index + index,
            line: data.end.line,
            column: data.end.column - size,
            offset: data.end.offset - size
          },
          end: {
            ...data.end
          }
        };
        data.end = {
          ...token.start
        };
        if (data.start.offset === data.end.offset) {
          Object.assign(data, token);
        } else {
          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);
          eventIndex += 2;
        }
      }
      eventIndex++;
    }
  }
  return events;
}

/**
 * @import {Extension} from 'micromark-util-types'
 */


/** @satisfies {Extension['document']} */
const document$1 = {
  [42]: list$1,
  [43]: list$1,
  [45]: list$1,
  [48]: list$1,
  [49]: list$1,
  [50]: list$1,
  [51]: list$1,
  [52]: list$1,
  [53]: list$1,
  [54]: list$1,
  [55]: list$1,
  [56]: list$1,
  [57]: list$1,
  [62]: blockQuote
};

/** @satisfies {Extension['contentInitial']} */
const contentInitial = {
  [91]: definition
};

/** @satisfies {Extension['flowInitial']} */
const flowInitial = {
  [-2]: codeIndented,
  [-1]: codeIndented,
  [32]: codeIndented
};

/** @satisfies {Extension['flow']} */
const flow = {
  [35]: headingAtx,
  [42]: thematicBreak$1,
  [45]: [setextUnderline, thematicBreak$1],
  [60]: htmlFlow,
  [61]: setextUnderline,
  [95]: thematicBreak$1,
  [96]: codeFenced,
  [126]: codeFenced
};

/** @satisfies {Extension['string']} */
const string = {
  [38]: characterReference,
  [92]: characterEscape
};

/** @satisfies {Extension['text']} */
const text$1 = {
  [-5]: lineEnding,
  [-4]: lineEnding,
  [-3]: lineEnding,
  [33]: labelStartImage,
  [38]: characterReference,
  [42]: attention,
  [60]: [autolink, htmlText],
  [91]: labelStartLink,
  [92]: [hardBreakEscape, characterEscape],
  [93]: labelEnd,
  [95]: attention,
  [96]: codeText
};

/** @satisfies {Extension['insideSpan']} */
const insideSpan = {
  null: [attention, resolver]
};

/** @satisfies {Extension['attentionMarkers']} */
const attentionMarkers = {
  null: [42, 95]
};

/** @satisfies {Extension['disable']} */
const disable = {
  null: []
};

const defaultConstructs = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	attentionMarkers,
	contentInitial,
	disable,
	document: document$1,
	flow,
	flowInitial,
	insideSpan,
	string,
	text: text$1
}, Symbol.toStringTag, { value: 'Module' }));

/**
 * @import {
 *   Chunk,
 *   Code,
 *   ConstructRecord,
 *   Construct,
 *   Effects,
 *   InitialConstruct,
 *   ParseContext,
 *   Point,
 *   State,
 *   TokenizeContext,
 *   Token
 * } from 'micromark-util-types'
 */

/**
 * Create a tokenizer.
 * Tokenizers deal with one type of data (e.g., containers, flow, text).
 * The parser is the object dealing with it all.
 * `initialize` works like other constructs, except that only its `tokenize`
 * function is used, in which case it doesn’t receive an `ok` or `nok`.
 * `from` can be given to set the point before the first character, although
 * when further lines are indented, they must be set with `defineSkip`.
 *
 * @param {ParseContext} parser
 *   Parser.
 * @param {InitialConstruct} initialize
 *   Construct.
 * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]
 *   Point (optional).
 * @returns {TokenizeContext}
 *   Context.
 */
function createTokenizer(parser, initialize, from) {
  /** @type {Point} */
  let point = {
    _bufferIndex: -1,
    _index: 0,
    line: from && from.line || 1,
    column: from && from.column || 1,
    offset: from && from.offset || 0
  };
  /** @type {Record<string, number>} */
  const columnStart = {};
  /** @type {Array<Construct>} */
  const resolveAllConstructs = [];
  /** @type {Array<Chunk>} */
  let chunks = [];
  /** @type {Array<Token>} */
  let stack = [];

  /**
   * Tools used for tokenizing.
   *
   * @type {Effects}
   */
  const effects = {
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    consume,
    enter,
    exit,
    interrupt: constructFactory(onsuccessfulcheck, {
      interrupt: true
    })
  };

  /**
   * State and tools for resolving and serializing.
   *
   * @type {TokenizeContext}
   */
  const context = {
    code: null,
    containerState: {},
    defineSkip,
    events: [],
    now,
    parser,
    previous: null,
    sliceSerialize,
    sliceStream,
    write
  };

  /**
   * The state function.
   *
   * @type {State | undefined}
   */
  let state = initialize.tokenize.call(context, effects);
  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }
  return context;

  /** @type {TokenizeContext['write']} */
  function write(slice) {
    chunks = push(chunks, slice);
    main();

    // Exit if we’re not done, resolve might change stuff.
    if (chunks[chunks.length - 1] !== null) {
      return [];
    }
    addResult(initialize, 0);

    // Otherwise, resolve, and exit.
    context.events = resolveAll(resolveAllConstructs, context.events, context);
    return context.events;
  }

  //
  // Tools.
  //

  /** @type {TokenizeContext['sliceSerialize']} */
  function sliceSerialize(token, expandTabs) {
    return serializeChunks(sliceStream(token), expandTabs);
  }

  /** @type {TokenizeContext['sliceStream']} */
  function sliceStream(token) {
    return sliceChunks(chunks, token);
  }

  /** @type {TokenizeContext['now']} */
  function now() {
    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`
    const {
      _bufferIndex,
      _index,
      line,
      column,
      offset
    } = point;
    return {
      _bufferIndex,
      _index,
      line,
      column,
      offset
    };
  }

  /** @type {TokenizeContext['defineSkip']} */
  function defineSkip(value) {
    columnStart[value.line] = value.column;
    accountForPotentialSkip();
  }

  //
  // State management.
  //

  /**
   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
   * `consume`).
   * Here is where we walk through the chunks, which either include strings of
   * several characters, or numerical character codes.
   * The reason to do this in a loop instead of a call is so the stack can
   * drain.
   *
   * @returns {undefined}
   *   Nothing.
   */
  function main() {
    /** @type {number} */
    let chunkIndex;
    while (point._index < chunks.length) {
      const chunk = chunks[point._index];

      // If we’re in a buffer chunk, loop through it.
      if (typeof chunk === 'string') {
        chunkIndex = point._index;
        if (point._bufferIndex < 0) {
          point._bufferIndex = 0;
        }
        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {
          go(chunk.charCodeAt(point._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }

  /**
   * Deal with one code.
   *
   * @param {Code} code
   *   Code.
   * @returns {undefined}
   *   Nothing.
   */
  function go(code) {
    state = state(code);
  }

  /** @type {Effects['consume']} */
  function consume(code) {
    if (markdownLineEnding(code)) {
      point.line++;
      point.column = 1;
      point.offset += code === -3 ? 2 : 1;
      accountForPotentialSkip();
    } else if (code !== -1) {
      point.column++;
      point.offset++;
    }

    // Not in a string chunk.
    if (point._bufferIndex < 0) {
      point._index++;
    } else {
      point._bufferIndex++;

      // At end of string chunk.
      if (point._bufferIndex ===
      // Points w/ non-negative `_bufferIndex` reference
      // strings.
      /** @type {string} */
      chunks[point._index].length) {
        point._bufferIndex = -1;
        point._index++;
      }
    }

    // Expose the previous character.
    context.previous = code;
  }

  /** @type {Effects['enter']} */
  function enter(type, fields) {
    /** @type {Token} */
    // @ts-expect-error Patch instead of assign required fields to help GC.
    const token = fields || {};
    token.type = type;
    token.start = now();
    context.events.push(['enter', token, context]);
    stack.push(token);
    return token;
  }

  /** @type {Effects['exit']} */
  function exit(type) {
    const token = stack.pop();
    token.end = now();
    context.events.push(['exit', token, context]);
    return token;
  }

  /**
   * Use results.
   *
   * @type {ReturnHandle}
   */
  function onsuccessfulconstruct(construct, info) {
    addResult(construct, info.from);
  }

  /**
   * Discard results.
   *
   * @type {ReturnHandle}
   */
  function onsuccessfulcheck(_, info) {
    info.restore();
  }

  /**
   * Factory to attempt/check/interrupt.
   *
   * @param {ReturnHandle} onreturn
   *   Callback.
   * @param {{interrupt?: boolean | undefined} | undefined} [fields]
   *   Fields.
   */
  function constructFactory(onreturn, fields) {
    return hook;

    /**
     * Handle either an object mapping codes to constructs, a list of
     * constructs, or a single construct.
     *
     * @param {Array<Construct> | ConstructRecord | Construct} constructs
     *   Constructs.
     * @param {State} returnState
     *   State.
     * @param {State | undefined} [bogusState]
     *   State.
     * @returns {State}
     *   State.
     */
    function hook(constructs, returnState, bogusState) {
      /** @type {ReadonlyArray<Construct>} */
      let listOfConstructs;
      /** @type {number} */
      let constructIndex;
      /** @type {Construct} */
      let currentConstruct;
      /** @type {Info} */
      let info;
      return Array.isArray(constructs) ? /* c8 ignore next 1 */
      handleListOfConstructs(constructs) : 'tokenize' in constructs ?
      // Looks like a construct.
      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);

      /**
       * Handle a list of construct.
       *
       * @param {ConstructRecord} map
       *   Constructs.
       * @returns {State}
       *   State.
       */
      function handleMapOfConstructs(map) {
        return start;

        /** @type {State} */
        function start(code) {
          const left = code !== null && map[code];
          const all = code !== null && map.null;
          const list = [
          // To do: add more extension tests.
          /* c8 ignore next 2 */
          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];
          return handleListOfConstructs(list)(code);
        }
      }

      /**
       * Handle a list of construct.
       *
       * @param {ReadonlyArray<Construct>} list
       *   Constructs.
       * @returns {State}
       *   State.
       */
      function handleListOfConstructs(list) {
        listOfConstructs = list;
        constructIndex = 0;
        if (list.length === 0) {
          return bogusState;
        }
        return handleConstruct(list[constructIndex]);
      }

      /**
       * Handle a single construct.
       *
       * @param {Construct} construct
       *   Construct.
       * @returns {State}
       *   State.
       */
      function handleConstruct(construct) {
        return start;

        /** @type {State} */
        function start(code) {
          // To do: not needed to store if there is no bogus state, probably?
          // Currently doesn’t work because `inspect` in document does a check
          // w/o a bogus, which doesn’t make sense. But it does seem to help perf
          // by not storing.
          info = store();
          currentConstruct = construct;
          if (!construct.partial) {
            context.currentConstruct = construct;
          }

          // Always populated by defaults.

          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
            return nok();
          }
          return construct.tokenize.call(
          // If we do have fields, create an object w/ `context` as its
          // prototype.
          // This allows a “live binding”, which is needed for `interrupt`.
          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);
        }
      }

      /** @type {State} */
      function ok(code) {
        onreturn(currentConstruct, info);
        return returnState;
      }

      /** @type {State} */
      function nok(code) {
        info.restore();
        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex]);
        }
        return bogusState;
      }
    }
  }

  /**
   * @param {Construct} construct
   *   Construct.
   * @param {number} from
   *   From.
   * @returns {undefined}
   *   Nothing.
   */
  function addResult(construct, from) {
    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
      resolveAllConstructs.push(construct);
    }
    if (construct.resolve) {
      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));
    }
    if (construct.resolveTo) {
      context.events = construct.resolveTo(context.events, context);
    }
  }

  /**
   * Store state.
   *
   * @returns {Info}
   *   Info.
   */
  function store() {
    const startPoint = now();
    const startPrevious = context.previous;
    const startCurrentConstruct = context.currentConstruct;
    const startEventsIndex = context.events.length;
    const startStack = Array.from(stack);
    return {
      from: startEventsIndex,
      restore
    };

    /**
     * Restore state.
     *
     * @returns {undefined}
     *   Nothing.
     */
    function restore() {
      point = startPoint;
      context.previous = startPrevious;
      context.currentConstruct = startCurrentConstruct;
      context.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
    }
  }

  /**
   * Move the current point a bit forward in the line when it’s on a column
   * skip.
   *
   * @returns {undefined}
   *   Nothing.
   */
  function accountForPotentialSkip() {
    if (point.line in columnStart && point.column < 2) {
      point.column = columnStart[point.line];
      point.offset += columnStart[point.line] - 1;
    }
  }
}

/**
 * Get the chunks from a slice of chunks in the range of a token.
 *
 * @param {ReadonlyArray<Chunk>} chunks
 *   Chunks.
 * @param {Pick<Token, 'end' | 'start'>} token
 *   Token.
 * @returns {Array<Chunk>}
 *   Chunks.
 */
function sliceChunks(chunks, token) {
  const startIndex = token.start._index;
  const startBufferIndex = token.start._bufferIndex;
  const endIndex = token.end._index;
  const endBufferIndex = token.end._bufferIndex;
  /** @type {Array<Chunk>} */
  let view;
  if (startIndex === endIndex) {
    // @ts-expect-error `_bufferIndex` is used on string chunks.
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);
    if (startBufferIndex > -1) {
      const head = view[0];
      if (typeof head === 'string') {
        view[0] = head.slice(startBufferIndex);
        /* c8 ignore next 4 -- used to be used, no longer */
      } else {
        view.shift();
      }
    }
    if (endBufferIndex > 0) {
      // @ts-expect-error `_bufferIndex` is used on string chunks.
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }
  return view;
}

/**
 * Get the string value of a slice of chunks.
 *
 * @param {ReadonlyArray<Chunk>} chunks
 *   Chunks.
 * @param {boolean | undefined} [expandTabs=false]
 *   Whether to expand tabs (default: `false`).
 * @returns {string}
 *   Result.
 */
function serializeChunks(chunks, expandTabs) {
  let index = -1;
  /** @type {Array<string>} */
  const result = [];
  /** @type {boolean | undefined} */
  let atTab;
  while (++index < chunks.length) {
    const chunk = chunks[index];
    /** @type {string} */
    let value;
    if (typeof chunk === 'string') {
      value = chunk;
    } else switch (chunk) {
      case -5:
        {
          value = "\r";
          break;
        }
      case -4:
        {
          value = "\n";
          break;
        }
      case -3:
        {
          value = "\r" + "\n";
          break;
        }
      case -2:
        {
          value = expandTabs ? " " : "\t";
          break;
        }
      case -1:
        {
          if (!expandTabs && atTab) continue;
          value = " ";
          break;
        }
      default:
        {
          // Currently only replacement character.
          value = String.fromCharCode(chunk);
        }
    }
    atTab = chunk === -2;
    result.push(value);
  }
  return result.join('');
}

/**
 * @import {
 *   Create,
 *   FullNormalizedExtension,
 *   InitialConstruct,
 *   ParseContext,
 *   ParseOptions
 * } from 'micromark-util-types'
 */


/**
 * @param {ParseOptions | null | undefined} [options]
 *   Configuration (optional).
 * @returns {ParseContext}
 *   Parser.
 */
function parse(options) {
  const settings = options || {};
  const constructs = /** @type {FullNormalizedExtension} */
  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);

  /** @type {ParseContext} */
  const parser = {
    constructs,
    content: create(content$1),
    defined: [],
    document: create(document$2),
    flow: create(flow$1),
    lazy: {},
    string: create(string$1),
    text: create(text$2)
  };
  return parser;

  /**
   * @param {InitialConstruct} initial
   *   Construct to start with.
   * @returns {Create}
   *   Create a tokenizer.
   */
  function create(initial) {
    return creator;
    /** @type {Create} */
    function creator(from) {
      return createTokenizer(parser, initial, from);
    }
  }
}

/**
 * @import {Event} from 'micromark-util-types'
 */


/**
 * @param {Array<Event>} events
 *   Events.
 * @returns {Array<Event>}
 *   Events.
 */
function postprocess(events) {
  while (!subtokenize(events)) {
    // Empty
  }
  return events;
}

/**
 * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'
 */

/**
 * @callback Preprocessor
 *   Preprocess a value.
 * @param {Value} value
 *   Value.
 * @param {Encoding | null | undefined} [encoding]
 *   Encoding when `value` is a typed array (optional).
 * @param {boolean | null | undefined} [end=false]
 *   Whether this is the last chunk (default: `false`).
 * @returns {Array<Chunk>}
 *   Chunks.
 */

const search = /[\0\t\n\r]/g;

/**
 * @returns {Preprocessor}
 *   Preprocess a value.
 */
function preprocess() {
  let column = 1;
  let buffer = '';
  /** @type {boolean | undefined} */
  let start = true;
  /** @type {boolean | undefined} */
  let atCarriageReturn;
  return preprocessor;

  /** @type {Preprocessor} */
  // eslint-disable-next-line complexity
  function preprocessor(value, encoding, end) {
    /** @type {Array<Chunk>} */
    const chunks = [];
    /** @type {RegExpMatchArray | null} */
    let match;
    /** @type {number} */
    let next;
    /** @type {number} */
    let startPosition;
    /** @type {number} */
    let endPosition;
    /** @type {Code} */
    let code;
    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));
    startPosition = 0;
    buffer = '';
    if (start) {
      // To do: `markdown-rs` actually parses BOMs (byte order mark).
      if (value.charCodeAt(0) === 65279) {
        startPosition++;
      }
      start = undefined;
    }
    while (startPosition < value.length) {
      search.lastIndex = startPosition;
      match = search.exec(value);
      endPosition = match && match.index !== undefined ? match.index : value.length;
      code = value.charCodeAt(endPosition);
      if (!match) {
        buffer = value.slice(startPosition);
        break;
      }
      if (code === 10 && startPosition === endPosition && atCarriageReturn) {
        chunks.push(-3);
        atCarriageReturn = undefined;
      } else {
        if (atCarriageReturn) {
          chunks.push(-5);
          atCarriageReturn = undefined;
        }
        if (startPosition < endPosition) {
          chunks.push(value.slice(startPosition, endPosition));
          column += endPosition - startPosition;
        }
        switch (code) {
          case 0:
            {
              chunks.push(65533);
              column++;
              break;
            }
          case 9:
            {
              next = Math.ceil(column / 4) * 4;
              chunks.push(-2);
              while (column++ < next) chunks.push(-1);
              break;
            }
          case 10:
            {
              chunks.push(-4);
              column = 1;
              break;
            }
          default:
            {
              atCarriageReturn = true;
              column = 1;
            }
        }
      }
      startPosition = endPosition + 1;
    }
    if (end) {
      if (atCarriageReturn) chunks.push(-5);
      if (buffer) chunks.push(buffer);
      chunks.push(null);
    }
    return chunks;
  }
}

const characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;

/**
 * Decode markdown strings (which occur in places such as fenced code info
 * strings, destinations, labels, and titles).
 *
 * The “string” content type allows character escapes and -references.
 * This decodes those.
 *
 * @param {string} value
 *   Value to decode.
 * @returns {string}
 *   Decoded value.
 */
function decodeString(value) {
  return value.replace(characterEscapeOrReference, decode);
}

/**
 * @param {string} $0
 *   Match.
 * @param {string} $1
 *   Character escape.
 * @param {string} $2
 *   Character reference.
 * @returns {string}
 *   Decoded value
 */
function decode($0, $1, $2) {
  if ($1) {
    // Escape.
    return $1;
  }

  // Reference.
  const head = $2.charCodeAt(0);
  if (head === 35) {
    const head = $2.charCodeAt(1);
    const hex = head === 120 || head === 88;
    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);
  }
  return decodeNamedCharacterReference($2) || $0;
}

/**
 * @import {
 *   Break,
 *   Blockquote,
 *   Code,
 *   Definition,
 *   Emphasis,
 *   Heading,
 *   Html,
 *   Image,
 *   InlineCode,
 *   Link,
 *   ListItem,
 *   List,
 *   Nodes,
 *   Paragraph,
 *   PhrasingContent,
 *   ReferenceType,
 *   Root,
 *   Strong,
 *   Text,
 *   ThematicBreak
 * } from 'mdast'
 * @import {
 *   Encoding,
 *   Event,
 *   Token,
 *   Value
 * } from 'micromark-util-types'
 * @import {Point} from 'unist'
 * @import {
 *   CompileContext,
 *   CompileData,
 *   Config,
 *   Extension,
 *   Handle,
 *   OnEnterError,
 *   Options
 * } from './types.js'
 */

const own$2 = {}.hasOwnProperty;

/**
 * Turn markdown into a syntax tree.
 *
 * @overload
 * @param {Value} value
 * @param {Encoding | null | undefined} [encoding]
 * @param {Options | null | undefined} [options]
 * @returns {Root}
 *
 * @overload
 * @param {Value} value
 * @param {Options | null | undefined} [options]
 * @returns {Root}
 *
 * @param {Value} value
 *   Markdown to parse.
 * @param {Encoding | Options | null | undefined} [encoding]
 *   Character encoding for when `value` is `Buffer`.
 * @param {Options | null | undefined} [options]
 *   Configuration.
 * @returns {Root}
 *   mdast tree.
 */
function fromMarkdown(value, encoding, options) {
  if (typeof encoding !== 'string') {
    options = encoding;
    encoding = undefined;
  }
  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));
}

/**
 * Note this compiler only understand complete buffering, not streaming.
 *
 * @param {Options | null | undefined} [options]
 */
function compiler(options) {
  /** @type {Config} */
  const config = {
    transforms: [],
    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],
    enter: {
      autolink: opener(link),
      autolinkProtocol: onenterdata,
      autolinkEmail: onenterdata,
      atxHeading: opener(heading),
      blockQuote: opener(blockQuote),
      characterEscape: onenterdata,
      characterReference: onenterdata,
      codeFenced: opener(codeFlow),
      codeFencedFenceInfo: buffer,
      codeFencedFenceMeta: buffer,
      codeIndented: opener(codeFlow, buffer),
      codeText: opener(codeText, buffer),
      codeTextData: onenterdata,
      data: onenterdata,
      codeFlowValue: onenterdata,
      definition: opener(definition),
      definitionDestinationString: buffer,
      definitionLabelString: buffer,
      definitionTitleString: buffer,
      emphasis: opener(emphasis),
      hardBreakEscape: opener(hardBreak),
      hardBreakTrailing: opener(hardBreak),
      htmlFlow: opener(html, buffer),
      htmlFlowData: onenterdata,
      htmlText: opener(html, buffer),
      htmlTextData: onenterdata,
      image: opener(image),
      label: buffer,
      link: opener(link),
      listItem: opener(listItem),
      listItemValue: onenterlistitemvalue,
      listOrdered: opener(list, onenterlistordered),
      listUnordered: opener(list),
      paragraph: opener(paragraph),
      reference: onenterreference,
      referenceString: buffer,
      resourceDestinationString: buffer,
      resourceTitleString: buffer,
      setextHeading: opener(heading),
      strong: opener(strong),
      thematicBreak: opener(thematicBreak)
    },
    exit: {
      atxHeading: closer(),
      atxHeadingSequence: onexitatxheadingsequence,
      autolink: closer(),
      autolinkEmail: onexitautolinkemail,
      autolinkProtocol: onexitautolinkprotocol,
      blockQuote: closer(),
      characterEscapeValue: onexitdata,
      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
      characterReferenceValue: onexitcharacterreferencevalue,
      characterReference: onexitcharacterreference,
      codeFenced: closer(onexitcodefenced),
      codeFencedFence: onexitcodefencedfence,
      codeFencedFenceInfo: onexitcodefencedfenceinfo,
      codeFencedFenceMeta: onexitcodefencedfencemeta,
      codeFlowValue: onexitdata,
      codeIndented: closer(onexitcodeindented),
      codeText: closer(onexitcodetext),
      codeTextData: onexitdata,
      data: onexitdata,
      definition: closer(),
      definitionDestinationString: onexitdefinitiondestinationstring,
      definitionLabelString: onexitdefinitionlabelstring,
      definitionTitleString: onexitdefinitiontitlestring,
      emphasis: closer(),
      hardBreakEscape: closer(onexithardbreak),
      hardBreakTrailing: closer(onexithardbreak),
      htmlFlow: closer(onexithtmlflow),
      htmlFlowData: onexitdata,
      htmlText: closer(onexithtmltext),
      htmlTextData: onexitdata,
      image: closer(onexitimage),
      label: onexitlabel,
      labelText: onexitlabeltext,
      lineEnding: onexitlineending,
      link: closer(onexitlink),
      listItem: closer(),
      listOrdered: closer(),
      listUnordered: closer(),
      paragraph: closer(),
      referenceString: onexitreferencestring,
      resourceDestinationString: onexitresourcedestinationstring,
      resourceTitleString: onexitresourcetitlestring,
      resource: onexitresource,
      setextHeading: closer(onexitsetextheading),
      setextHeadingLineSequence: onexitsetextheadinglinesequence,
      setextHeadingText: onexitsetextheadingtext,
      strong: closer(),
      thematicBreak: closer()
    }
  };
  configure(config, (options || {}).mdastExtensions || []);

  /** @type {CompileData} */
  const data = {};
  return compile;

  /**
   * Turn micromark events into an mdast tree.
   *
   * @param {Array<Event>} events
   *   Events.
   * @returns {Root}
   *   mdast tree.
   */
  function compile(events) {
    /** @type {Root} */
    let tree = {
      type: 'root',
      children: []
    };
    /** @type {Omit<CompileContext, 'sliceSerialize'>} */
    const context = {
      stack: [tree],
      tokenStack: [],
      config,
      enter,
      exit,
      buffer,
      resume,
      data
    };
    /** @type {Array<number>} */
    const listStack = [];
    let index = -1;
    while (++index < events.length) {
      // We preprocess lists to add `listItem` tokens, and to infer whether
      // items the list itself are spread out.
      if (events[index][1].type === "listOrdered" || events[index][1].type === "listUnordered") {
        if (events[index][0] === 'enter') {
          listStack.push(index);
        } else {
          const tail = listStack.pop();
          index = prepareList(events, tail, index);
        }
      }
    }
    index = -1;
    while (++index < events.length) {
      const handler = config[events[index][0]];
      if (own$2.call(handler, events[index][1].type)) {
        handler[events[index][1].type].call(Object.assign({
          sliceSerialize: events[index][2].sliceSerialize
        }, context), events[index][1]);
      }
    }

    // Handle tokens still being open.
    if (context.tokenStack.length > 0) {
      const tail = context.tokenStack[context.tokenStack.length - 1];
      const handler = tail[1] || defaultOnError;
      handler.call(context, undefined, tail[0]);
    }

    // Figure out `root` position.
    tree.position = {
      start: point(events.length > 0 ? events[0][1].start : {
        line: 1,
        column: 1,
        offset: 0
      }),
      end: point(events.length > 0 ? events[events.length - 2][1].end : {
        line: 1,
        column: 1,
        offset: 0
      })
    };

    // Call transforms.
    index = -1;
    while (++index < config.transforms.length) {
      tree = config.transforms[index](tree) || tree;
    }
    return tree;
  }

  /**
   * @param {Array<Event>} events
   * @param {number} start
   * @param {number} length
   * @returns {number}
   */
  function prepareList(events, start, length) {
    let index = start - 1;
    let containerBalance = -1;
    let listSpread = false;
    /** @type {Token | undefined} */
    let listItem;
    /** @type {number | undefined} */
    let lineIndex;
    /** @type {number | undefined} */
    let firstBlankLineIndex;
    /** @type {boolean | undefined} */
    let atMarker;
    while (++index <= length) {
      const event = events[index];
      switch (event[1].type) {
        case "listUnordered":
        case "listOrdered":
        case "blockQuote":
          {
            if (event[0] === 'enter') {
              containerBalance++;
            } else {
              containerBalance--;
            }
            atMarker = undefined;
            break;
          }
        case "lineEndingBlank":
          {
            if (event[0] === 'enter') {
              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {
                firstBlankLineIndex = index;
              }
              atMarker = undefined;
            }
            break;
          }
        case "linePrefix":
        case "listItemValue":
        case "listItemMarker":
        case "listItemPrefix":
        case "listItemPrefixWhitespace":
          {
            // Empty.

            break;
          }
        default:
          {
            atMarker = undefined;
          }
      }
      if (!containerBalance && event[0] === 'enter' && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
        if (listItem) {
          let tailIndex = index;
          lineIndex = undefined;
          while (tailIndex--) {
            const tailEvent = events[tailIndex];
            if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
              if (tailEvent[0] === 'exit') continue;
              if (lineIndex) {
                events[lineIndex][1].type = "lineEndingBlank";
                listSpread = true;
              }
              tailEvent[1].type = "lineEnding";
              lineIndex = tailIndex;
            } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") ; else {
              break;
            }
          }
          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
            listItem._spread = true;
          }

          // Fix position.
          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);
          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);
          index++;
          length++;
        }

        // Create a new list item.
        if (event[1].type === "listItemPrefix") {
          /** @type {Token} */
          const item = {
            type: 'listItem',
            _spread: false,
            start: Object.assign({}, event[1].start),
            // @ts-expect-error: we’ll add `end` in a second.
            end: undefined
          };
          listItem = item;
          events.splice(index, 0, ['enter', item, event[2]]);
          index++;
          length++;
          firstBlankLineIndex = undefined;
          atMarker = true;
        }
      }
    }
    events[start][1]._spread = listSpread;
    return length;
  }

  /**
   * Create an opener handle.
   *
   * @param {(token: Token) => Nodes} create
   *   Create a node.
   * @param {Handle | undefined} [and]
   *   Optional function to also run.
   * @returns {Handle}
   *   Handle.
   */
  function opener(create, and) {
    return open;

    /**
     * @this {CompileContext}
     * @param {Token} token
     * @returns {undefined}
     */
    function open(token) {
      enter.call(this, create(token), token);
      if (and) and.call(this, token);
    }
  }

  /**
   * @type {CompileContext['buffer']}
   */
  function buffer() {
    this.stack.push({
      type: 'fragment',
      children: []
    });
  }

  /**
   * @type {CompileContext['enter']}
   */
  function enter(node, token, errorHandler) {
    const parent = this.stack[this.stack.length - 1];
    /** @type {Array<Nodes>} */
    const siblings = parent.children;
    siblings.push(node);
    this.stack.push(node);
    this.tokenStack.push([token, errorHandler || undefined]);
    node.position = {
      start: point(token.start),
      // @ts-expect-error: `end` will be patched later.
      end: undefined
    };
  }

  /**
   * Create a closer handle.
   *
   * @param {Handle | undefined} [and]
   *   Optional function to also run.
   * @returns {Handle}
   *   Handle.
   */
  function closer(and) {
    return close;

    /**
     * @this {CompileContext}
     * @param {Token} token
     * @returns {undefined}
     */
    function close(token) {
      if (and) and.call(this, token);
      exit.call(this, token);
    }
  }

  /**
   * @type {CompileContext['exit']}
   */
  function exit(token, onExitError) {
    const node = this.stack.pop();
    const open = this.tokenStack.pop();
    if (!open) {
      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({
        start: token.start,
        end: token.end
      }) + '): it’s not open');
    } else if (open[0].type !== token.type) {
      if (onExitError) {
        onExitError.call(this, token, open[0]);
      } else {
        const handler = open[1] || defaultOnError;
        handler.call(this, token, open[0]);
      }
    }
    node.position.end = point(token.end);
  }

  /**
   * @type {CompileContext['resume']}
   */
  function resume() {
    return toString$1(this.stack.pop());
  }

  //
  // Handlers.
  //

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onenterlistordered() {
    this.data.expectingFirstListItemValue = true;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onenterlistitemvalue(token) {
    if (this.data.expectingFirstListItemValue) {
      const ancestor = this.stack[this.stack.length - 2];
      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
      this.data.expectingFirstListItemValue = undefined;
    }
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcodefencedfenceinfo() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.lang = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcodefencedfencemeta() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.meta = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcodefencedfence() {
    // Exit if this is the closing fence.
    if (this.data.flowCodeInside) return;
    this.buffer();
    this.data.flowCodeInside = true;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcodefenced() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
    this.data.flowCodeInside = undefined;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcodeindented() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.value = data.replace(/(\r?\n|\r)$/g, '');
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitdefinitionlabelstring(token) {
    const label = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.label = label;
    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitdefinitiontitlestring() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.title = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitdefinitiondestinationstring() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.url = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitatxheadingsequence(token) {
    const node = this.stack[this.stack.length - 1];
    if (!node.depth) {
      const depth = this.sliceSerialize(token).length;
      node.depth = depth;
    }
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitsetextheadingtext() {
    this.data.setextHeadingSlurpLineEnding = true;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitsetextheadinglinesequence(token) {
    const node = this.stack[this.stack.length - 1];
    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitsetextheading() {
    this.data.setextHeadingSlurpLineEnding = undefined;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onenterdata(token) {
    const node = this.stack[this.stack.length - 1];
    /** @type {Array<Nodes>} */
    const siblings = node.children;
    let tail = siblings[siblings.length - 1];
    if (!tail || tail.type !== 'text') {
      // Add a new text node.
      tail = text();
      tail.position = {
        start: point(token.start),
        // @ts-expect-error: we’ll add `end` later.
        end: undefined
      };
      siblings.push(tail);
    }
    this.stack.push(tail);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitdata(token) {
    const tail = this.stack.pop();
    tail.value += this.sliceSerialize(token);
    tail.position.end = point(token.end);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitlineending(token) {
    const context = this.stack[this.stack.length - 1];
    // If we’re at a hard break, include the line ending in there.
    if (this.data.atHardBreak) {
      const tail = context.children[context.children.length - 1];
      tail.position.end = point(token.end);
      this.data.atHardBreak = undefined;
      return;
    }
    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {
      onenterdata.call(this, token);
      onexitdata.call(this, token);
    }
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexithardbreak() {
    this.data.atHardBreak = true;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexithtmlflow() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.value = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexithtmltext() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.value = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitcodetext() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.value = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitlink() {
    const node = this.stack[this.stack.length - 1];
    // Note: there are also `identifier` and `label` fields on this link node!
    // These are used / cleaned here.

    // To do: clean.
    if (this.data.inReference) {
      /** @type {ReferenceType} */
      const referenceType = this.data.referenceType || 'shortcut';
      node.type += 'Reference';
      // @ts-expect-error: mutate.
      node.referenceType = referenceType;
      // @ts-expect-error: mutate.
      delete node.url;
      delete node.title;
    } else {
      // @ts-expect-error: mutate.
      delete node.identifier;
      // @ts-expect-error: mutate.
      delete node.label;
    }
    this.data.referenceType = undefined;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitimage() {
    const node = this.stack[this.stack.length - 1];
    // Note: there are also `identifier` and `label` fields on this link node!
    // These are used / cleaned here.

    // To do: clean.
    if (this.data.inReference) {
      /** @type {ReferenceType} */
      const referenceType = this.data.referenceType || 'shortcut';
      node.type += 'Reference';
      // @ts-expect-error: mutate.
      node.referenceType = referenceType;
      // @ts-expect-error: mutate.
      delete node.url;
      delete node.title;
    } else {
      // @ts-expect-error: mutate.
      delete node.identifier;
      // @ts-expect-error: mutate.
      delete node.label;
    }
    this.data.referenceType = undefined;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitlabeltext(token) {
    const string = this.sliceSerialize(token);
    const ancestor = this.stack[this.stack.length - 2];
    // @ts-expect-error: stash this on the node, as it might become a reference
    // later.
    ancestor.label = decodeString(string);
    // @ts-expect-error: same as above.
    ancestor.identifier = normalizeIdentifier(string).toLowerCase();
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitlabel() {
    const fragment = this.stack[this.stack.length - 1];
    const value = this.resume();
    const node = this.stack[this.stack.length - 1];
    // Assume a reference.
    this.data.inReference = true;
    if (node.type === 'link') {
      /** @type {Array<PhrasingContent>} */
      const children = fragment.children;
      node.children = children;
    } else {
      node.alt = value;
    }
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitresourcedestinationstring() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.url = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitresourcetitlestring() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    node.title = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitresource() {
    this.data.inReference = undefined;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onenterreference() {
    this.data.referenceType = 'collapsed';
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitreferencestring(token) {
    const label = this.resume();
    const node = this.stack[this.stack.length - 1];
    // @ts-expect-error: stash this on the node, as it might become a reference
    // later.
    node.label = label;
    // @ts-expect-error: same as above.
    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
    this.data.referenceType = 'full';
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitcharacterreferencemarker(token) {
    this.data.characterReferenceType = token.type;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcharacterreferencevalue(token) {
    const data = this.sliceSerialize(token);
    const type = this.data.characterReferenceType;
    /** @type {string} */
    let value;
    if (type) {
      value = decodeNumericCharacterReference(data, type === "characterReferenceMarkerNumeric" ? 10 : 16);
      this.data.characterReferenceType = undefined;
    } else {
      const result = decodeNamedCharacterReference(data);
      value = result;
    }
    const tail = this.stack[this.stack.length - 1];
    tail.value += value;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcharacterreference(token) {
    const tail = this.stack.pop();
    tail.position.end = point(token.end);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    const node = this.stack[this.stack.length - 1];
    node.url = this.sliceSerialize(token);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    const node = this.stack[this.stack.length - 1];
    node.url = 'mailto:' + this.sliceSerialize(token);
  }

  //
  // Creaters.
  //

  /** @returns {Blockquote} */
  function blockQuote() {
    return {
      type: 'blockquote',
      children: []
    };
  }

  /** @returns {Code} */
  function codeFlow() {
    return {
      type: 'code',
      lang: null,
      meta: null,
      value: ''
    };
  }

  /** @returns {InlineCode} */
  function codeText() {
    return {
      type: 'inlineCode',
      value: ''
    };
  }

  /** @returns {Definition} */
  function definition() {
    return {
      type: 'definition',
      identifier: '',
      label: null,
      title: null,
      url: ''
    };
  }

  /** @returns {Emphasis} */
  function emphasis() {
    return {
      type: 'emphasis',
      children: []
    };
  }

  /** @returns {Heading} */
  function heading() {
    return {
      type: 'heading',
      // @ts-expect-error `depth` will be set later.
      depth: 0,
      children: []
    };
  }

  /** @returns {Break} */
  function hardBreak() {
    return {
      type: 'break'
    };
  }

  /** @returns {Html} */
  function html() {
    return {
      type: 'html',
      value: ''
    };
  }

  /** @returns {Image} */
  function image() {
    return {
      type: 'image',
      title: null,
      url: '',
      alt: null
    };
  }

  /** @returns {Link} */
  function link() {
    return {
      type: 'link',
      title: null,
      url: '',
      children: []
    };
  }

  /**
   * @param {Token} token
   * @returns {List}
   */
  function list(token) {
    return {
      type: 'list',
      ordered: token.type === 'listOrdered',
      start: null,
      spread: token._spread,
      children: []
    };
  }

  /**
   * @param {Token} token
   * @returns {ListItem}
   */
  function listItem(token) {
    return {
      type: 'listItem',
      spread: token._spread,
      checked: null,
      children: []
    };
  }

  /** @returns {Paragraph} */
  function paragraph() {
    return {
      type: 'paragraph',
      children: []
    };
  }

  /** @returns {Strong} */
  function strong() {
    return {
      type: 'strong',
      children: []
    };
  }

  /** @returns {Text} */
  function text() {
    return {
      type: 'text',
      value: ''
    };
  }

  /** @returns {ThematicBreak} */
  function thematicBreak() {
    return {
      type: 'thematicBreak'
    };
  }
}

/**
 * Copy a point-like value.
 *
 * @param {Point} d
 *   Point-like value.
 * @returns {Point}
 *   unist point.
 */
function point(d) {
  return {
    line: d.line,
    column: d.column,
    offset: d.offset
  };
}

/**
 * @param {Config} combined
 * @param {Array<Array<Extension> | Extension>} extensions
 * @returns {undefined}
 */
function configure(combined, extensions) {
  let index = -1;
  while (++index < extensions.length) {
    const value = extensions[index];
    if (Array.isArray(value)) {
      configure(combined, value);
    } else {
      extension(combined, value);
    }
  }
}

/**
 * @param {Config} combined
 * @param {Extension} extension
 * @returns {undefined}
 */
function extension(combined, extension) {
  /** @type {keyof Extension} */
  let key;
  for (key in extension) {
    if (own$2.call(extension, key)) {
      switch (key) {
        case 'canContainEols':
          {
            const right = extension[key];
            if (right) {
              combined[key].push(...right);
            }
            break;
          }
        case 'transforms':
          {
            const right = extension[key];
            if (right) {
              combined[key].push(...right);
            }
            break;
          }
        case 'enter':
        case 'exit':
          {
            const right = extension[key];
            if (right) {
              Object.assign(combined[key], right);
            }
            break;
          }
        // No default
      }
    }
  }
}

/** @type {OnEnterError} */
function defaultOnError(left, right) {
  if (left) {
    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({
      start: left.start,
      end: left.end
    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({
      start: right.start,
      end: right.end
    }) + ') is open');
  } else {
    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({
      start: right.start,
      end: right.end
    }) + ') is still open');
  }
}

/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions
 * @typedef {import('unified').Parser<Root>} Parser
 * @typedef {import('unified').Processor<Root>} Processor
 */


/**
 * Aadd support for parsing from markdown.
 *
 * @param {Readonly<Options> | null | undefined} [options]
 *   Configuration (optional).
 * @returns {undefined}
 *   Nothing.
 */
function remarkParse(options) {
  /** @type {Processor} */
  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.
  const self = this;

  self.parser = parser;

  /**
   * @type {Parser}
   */
  function parser(doc) {
    return fromMarkdown(doc, {
      ...self.data('settings'),
      ...options,
      // Note: these options are not in the readme.
      // The goal is for them to be set by plugins on `data` instead of being
      // passed by users.
      extensions: self.data('micromarkExtensions') || [],
      mdastExtensions: self.data('fromMarkdownExtensions') || []
    })
  }
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Blockquote} Blockquote
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `blockquote` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Blockquote} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function blockquote(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'blockquote',
    properties: {},
    children: state.wrap(state.all(node), true)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {import('mdast').Break} Break
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `break` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Break} node
 *   mdast node.
 * @returns {Array<Element | Text>}
 *   hast element content.
 */
function hardBreak(state, node) {
  /** @type {Element} */
  const result = {type: 'element', tagName: 'br', properties: {}, children: []};
  state.patch(node, result);
  return [state.applyData(node, result), {type: 'text', value: '\n'}]
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Code} Code
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `code` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Code} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function code(state, node) {
  const value = node.value ? node.value + '\n' : '';
  /** @type {Properties} */
  const properties = {};

  if (node.lang) {
    properties.className = ['language-' + node.lang];
  }

  // Create `<code>`.
  /** @type {Element} */
  let result = {
    type: 'element',
    tagName: 'code',
    properties,
    children: [{type: 'text', value}]
  };

  if (node.meta) {
    result.data = {meta: node.meta};
  }

  state.patch(node, result);
  result = state.applyData(node, result);

  // Create `<pre>`.
  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]};
  state.patch(node, result);
  return result
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Delete} Delete
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `delete` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Delete} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function strikethrough(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'del',
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Emphasis} Emphasis
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `emphasis` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Emphasis} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function emphasis(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'em',
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').FootnoteReference} FootnoteReference
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `footnoteReference` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {FootnoteReference} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function footnoteReference(state, node) {
  const clobberPrefix =
    typeof state.options.clobberPrefix === 'string'
      ? state.options.clobberPrefix
      : 'user-content-';
  const id = String(node.identifier).toUpperCase();
  const safeId = normalizeUri(id.toLowerCase());
  const index = state.footnoteOrder.indexOf(id);
  /** @type {number} */
  let counter;

  let reuseCounter = state.footnoteCounts.get(id);

  if (reuseCounter === undefined) {
    reuseCounter = 0;
    state.footnoteOrder.push(id);
    counter = state.footnoteOrder.length;
  } else {
    counter = index + 1;
  }

  reuseCounter += 1;
  state.footnoteCounts.set(id, reuseCounter);

  /** @type {Element} */
  const link = {
    type: 'element',
    tagName: 'a',
    properties: {
      href: '#' + clobberPrefix + 'fn-' + safeId,
      id:
        clobberPrefix +
        'fnref-' +
        safeId +
        (reuseCounter > 1 ? '-' + reuseCounter : ''),
      dataFootnoteRef: true,
      ariaDescribedBy: ['footnote-label']
    },
    children: [{type: 'text', value: String(counter)}]
  };
  state.patch(node, link);

  /** @type {Element} */
  const sup = {
    type: 'element',
    tagName: 'sup',
    properties: {},
    children: [link]
  };
  state.patch(node, sup);
  return state.applyData(node, sup)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Heading} Heading
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `heading` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Heading} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function heading(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'h' + node.depth,
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Html} Html
 * @typedef {import('../state.js').State} State
 * @typedef {import('../../index.js').Raw} Raw
 */


/**
 * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise
 * nothing).
 *
 * @param {State} state
 *   Info passed around.
 * @param {Html} node
 *   mdast node.
 * @returns {Element | Raw | undefined}
 *   hast node.
 */
function html(state, node) {
  if (state.options.allowDangerousHtml) {
    /** @type {Raw} */
    const result = {type: 'raw', value: node.value};
    state.patch(node, result);
    return state.applyData(node, result)
  }

  return undefined
}

/**
 * @typedef {import('hast').ElementContent} ElementContent
 *
 * @typedef {import('mdast').Nodes} Nodes
 * @typedef {import('mdast').Reference} Reference
 *
 * @typedef {import('./state.js').State} State
 */


/**
 * Return the content of a reference without definition as plain text.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Extract<Nodes, Reference>} node
 *   Reference node (image, link).
 * @returns {Array<ElementContent>}
 *   hast content.
 */
function revert(state, node) {
  const subtype = node.referenceType;
  let suffix = ']';

  if (subtype === 'collapsed') {
    suffix += '[]';
  } else if (subtype === 'full') {
    suffix += '[' + (node.label || node.identifier) + ']';
  }

  if (node.type === 'imageReference') {
    return [{type: 'text', value: '![' + node.alt + suffix}]
  }

  const contents = state.all(node);
  const head = contents[0];

  if (head && head.type === 'text') {
    head.value = '[' + head.value;
  } else {
    contents.unshift({type: 'text', value: '['});
  }

  const tail = contents[contents.length - 1];

  if (tail && tail.type === 'text') {
    tail.value += suffix;
  } else {
    contents.push({type: 'text', value: suffix});
  }

  return contents
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').ImageReference} ImageReference
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `imageReference` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {ImageReference} node
 *   mdast node.
 * @returns {Array<ElementContent> | ElementContent}
 *   hast node.
 */
function imageReference(state, node) {
  const id = String(node.identifier).toUpperCase();
  const definition = state.definitionById.get(id);

  if (!definition) {
    return revert(state, node)
  }

  /** @type {Properties} */
  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt};

  if (definition.title !== null && definition.title !== undefined) {
    properties.title = definition.title;
  }

  /** @type {Element} */
  const result = {type: 'element', tagName: 'img', properties, children: []};
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Image} Image
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `image` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Image} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function image(state, node) {
  /** @type {Properties} */
  const properties = {src: normalizeUri(node.url)};

  if (node.alt !== null && node.alt !== undefined) {
    properties.alt = node.alt;
  }

  if (node.title !== null && node.title !== undefined) {
    properties.title = node.title;
  }

  /** @type {Element} */
  const result = {type: 'element', tagName: 'img', properties, children: []};
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {import('mdast').InlineCode} InlineCode
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `inlineCode` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {InlineCode} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function inlineCode(state, node) {
  /** @type {Text} */
  const text = {type: 'text', value: node.value.replace(/\r?\n|\r/g, ' ')};
  state.patch(node, text);

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'code',
    properties: {},
    children: [text]
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').LinkReference} LinkReference
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `linkReference` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {LinkReference} node
 *   mdast node.
 * @returns {Array<ElementContent> | ElementContent}
 *   hast node.
 */
function linkReference(state, node) {
  const id = String(node.identifier).toUpperCase();
  const definition = state.definitionById.get(id);

  if (!definition) {
    return revert(state, node)
  }

  /** @type {Properties} */
  const properties = {href: normalizeUri(definition.url || '')};

  if (definition.title !== null && definition.title !== undefined) {
    properties.title = definition.title;
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'a',
    properties,
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Link} Link
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `link` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Link} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function link(state, node) {
  /** @type {Properties} */
  const properties = {href: normalizeUri(node.url)};

  if (node.title !== null && node.title !== undefined) {
    properties.title = node.title;
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'a',
    properties,
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').Parents} Parents
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `listItem` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {ListItem} node
 *   mdast node.
 * @param {Parents | undefined} parent
 *   Parent of `node`.
 * @returns {Element}
 *   hast node.
 */
function listItem(state, node, parent) {
  const results = state.all(node);
  const loose = parent ? listLoose(parent) : listItemLoose(node);
  /** @type {Properties} */
  const properties = {};
  /** @type {Array<ElementContent>} */
  const children = [];

  if (typeof node.checked === 'boolean') {
    const head = results[0];
    /** @type {Element} */
    let paragraph;

    if (head && head.type === 'element' && head.tagName === 'p') {
      paragraph = head;
    } else {
      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []};
      results.unshift(paragraph);
    }

    if (paragraph.children.length > 0) {
      paragraph.children.unshift({type: 'text', value: ' '});
    }

    paragraph.children.unshift({
      type: 'element',
      tagName: 'input',
      properties: {type: 'checkbox', checked: node.checked, disabled: true},
      children: []
    });

    // According to github-markdown-css, this class hides bullet.
    // See: <https://github.com/sindresorhus/github-markdown-css>.
    properties.className = ['task-list-item'];
  }

  let index = -1;

  while (++index < results.length) {
    const child = results[index];

    // Add eols before nodes, except if this is a loose, first paragraph.
    if (
      loose ||
      index !== 0 ||
      child.type !== 'element' ||
      child.tagName !== 'p'
    ) {
      children.push({type: 'text', value: '\n'});
    }

    if (child.type === 'element' && child.tagName === 'p' && !loose) {
      children.push(...child.children);
    } else {
      children.push(child);
    }
  }

  const tail = results[results.length - 1];

  // Add a final eol.
  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {
    children.push({type: 'text', value: '\n'});
  }

  /** @type {Element} */
  const result = {type: 'element', tagName: 'li', properties, children};
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @param {Parents} node
 * @return {Boolean}
 */
function listLoose(node) {
  let loose = false;
  if (node.type === 'list') {
    loose = node.spread || false;
    const children = node.children;
    let index = -1;

    while (!loose && ++index < children.length) {
      loose = listItemLoose(children[index]);
    }
  }

  return loose
}

/**
 * @param {ListItem} node
 * @return {Boolean}
 */
function listItemLoose(node) {
  const spread = node.spread;

  return spread === null || spread === undefined
    ? node.children.length > 1
    : spread
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').List} List
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `list` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {List} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function list(state, node) {
  /** @type {Properties} */
  const properties = {};
  const results = state.all(node);
  let index = -1;

  if (typeof node.start === 'number' && node.start !== 1) {
    properties.start = node.start;
  }

  // Like GitHub, add a class for custom styling.
  while (++index < results.length) {
    const child = results[index];

    if (
      child.type === 'element' &&
      child.tagName === 'li' &&
      child.properties &&
      Array.isArray(child.properties.className) &&
      child.properties.className.includes('task-list-item')
    ) {
      properties.className = ['contains-task-list'];
      break
    }
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: node.ordered ? 'ol' : 'ul',
    properties,
    children: state.wrap(results, true)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Paragraph} Paragraph
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `paragraph` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Paragraph} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function paragraph(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'p',
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Parents} HastParents
 * @typedef {import('hast').Root} HastRoot
 * @typedef {import('mdast').Root} MdastRoot
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `root` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastRoot} node
 *   mdast node.
 * @returns {HastParents}
 *   hast node.
 */
function root(state, node) {
  /** @type {HastRoot} */
  const result = {type: 'root', children: state.wrap(state.all(node))};
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Strong} Strong
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `strong` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Strong} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function strong(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'strong',
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Table} Table
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `table` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Table} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function table(state, node) {
  const rows = state.all(node);
  const firstRow = rows.shift();
  /** @type {Array<Element>} */
  const tableContent = [];

  if (firstRow) {
    /** @type {Element} */
    const head = {
      type: 'element',
      tagName: 'thead',
      properties: {},
      children: state.wrap([firstRow], true)
    };
    state.patch(node.children[0], head);
    tableContent.push(head);
  }

  if (rows.length > 0) {
    /** @type {Element} */
    const body = {
      type: 'element',
      tagName: 'tbody',
      properties: {},
      children: state.wrap(rows, true)
    };

    const start = pointStart(node.children[1]);
    const end = pointEnd(node.children[node.children.length - 1]);
    if (start && end) body.position = {start, end};
    tableContent.push(body);
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'table',
    properties: {},
    children: state.wrap(tableContent, true)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Parents} Parents
 * @typedef {import('mdast').TableRow} TableRow
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `tableRow` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {TableRow} node
 *   mdast node.
 * @param {Parents | undefined} parent
 *   Parent of `node`.
 * @returns {Element}
 *   hast node.
 */
function tableRow(state, node, parent) {
  const siblings = parent ? parent.children : undefined;
  // Generate a body row when without parent.
  const rowIndex = siblings ? siblings.indexOf(node) : 1;
  const tagName = rowIndex === 0 ? 'th' : 'td';
  // To do: option to use `style`?
  const align = parent && parent.type === 'table' ? parent.align : undefined;
  const length = align ? align.length : node.children.length;
  let cellIndex = -1;
  /** @type {Array<ElementContent>} */
  const cells = [];

  while (++cellIndex < length) {
    // Note: can also be undefined.
    const cell = node.children[cellIndex];
    /** @type {Properties} */
    const properties = {};
    const alignValue = align ? align[cellIndex] : undefined;

    if (alignValue) {
      properties.align = alignValue;
    }

    /** @type {Element} */
    let result = {type: 'element', tagName, properties, children: []};

    if (cell) {
      result.children = state.all(cell);
      state.patch(cell, result);
      result = state.applyData(cell, result);
    }

    cells.push(result);
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'tr',
    properties: {},
    children: state.wrap(cells, true)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').TableCell} TableCell
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `tableCell` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {TableCell} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function tableCell(state, node) {
  // Note: this function is normally not called: see `table-row` for how rows
  // and their cells are compiled.
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'td', // Assume body cell.
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

const tab = 9; /* `\t` */
const space = 32; /* ` ` */

/**
 * Remove initial and final spaces and tabs at the line breaks in `value`.
 * Does not trim initial and final spaces and tabs of the value itself.
 *
 * @param {string} value
 *   Value to trim.
 * @returns {string}
 *   Trimmed value.
 */
function trimLines(value) {
  const source = String(value);
  const search = /\r?\n|\r/g;
  let match = search.exec(source);
  let last = 0;
  /** @type {Array<string>} */
  const lines = [];

  while (match) {
    lines.push(
      trimLine(source.slice(last, match.index), last > 0, true),
      match[0]
    );

    last = match.index + match[0].length;
    match = search.exec(source);
  }

  lines.push(trimLine(source.slice(last), last > 0, false));

  return lines.join('')
}

/**
 * @param {string} value
 *   Line to trim.
 * @param {boolean} start
 *   Whether to trim the start of the line.
 * @param {boolean} end
 *   Whether to trim the end of the line.
 * @returns {string}
 *   Trimmed line.
 */
function trimLine(value, start, end) {
  let startIndex = 0;
  let endIndex = value.length;

  if (start) {
    let code = value.codePointAt(startIndex);

    while (code === tab || code === space) {
      startIndex++;
      code = value.codePointAt(startIndex);
    }
  }

  if (end) {
    let code = value.codePointAt(endIndex - 1);

    while (code === tab || code === space) {
      endIndex--;
      code = value.codePointAt(endIndex - 1);
    }
  }

  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''
}

/**
 * @typedef {import('hast').Element} HastElement
 * @typedef {import('hast').Text} HastText
 * @typedef {import('mdast').Text} MdastText
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `text` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastText} node
 *   mdast node.
 * @returns {HastElement | HastText}
 *   hast node.
 */
function text(state, node) {
  /** @type {HastText} */
  const result = {type: 'text', value: trimLines(String(node.value))};
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').ThematicBreak} ThematicBreak
 * @typedef {import('../state.js').State} State
 */


/**
 * Turn an mdast `thematicBreak` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {ThematicBreak} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function thematicBreak(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'hr',
    properties: {},
    children: []
  };
  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * Default handlers for nodes.
 *
 * @satisfies {import('../state.js').Handlers}
 */
const handlers = {
  blockquote,
  break: hardBreak,
  code,
  delete: strikethrough,
  emphasis,
  footnoteReference,
  heading,
  html,
  imageReference,
  image,
  inlineCode,
  linkReference,
  link,
  listItem,
  list,
  paragraph,
  // @ts-expect-error: root is different, but hard to type.
  root,
  strong,
  table,
  tableCell,
  tableRow,
  text,
  thematicBreak,
  toml: ignore,
  yaml: ignore,
  definition: ignore,
  footnoteDefinition: ignore
};

// Return nothing for nodes that are ignored.
function ignore() {
  return undefined
}

const VOID       = -1;
const PRIMITIVE  = 0;
const ARRAY      = 1;
const OBJECT     = 2;
const DATE       = 3;
const REGEXP     = 4;
const MAP        = 5;
const SET        = 6;
const ERROR      = 7;
const BIGINT     = 8;
// export const SYMBOL = 9;

const env = typeof self === 'object' ? self : globalThis;

const deserializer = ($, _) => {
  const as = (out, index) => {
    $.set(index, out);
    return out;
  };

  const unpair = index => {
    if ($.has(index))
      return $.get(index);

    const [type, value] = _[index];
    switch (type) {
      case PRIMITIVE:
      case VOID:
        return as(value, index);
      case ARRAY: {
        const arr = as([], index);
        for (const index of value)
          arr.push(unpair(index));
        return arr;
      }
      case OBJECT: {
        const object = as({}, index);
        for (const [key, index] of value)
          object[unpair(key)] = unpair(index);
        return object;
      }
      case DATE:
        return as(new Date(value), index);
      case REGEXP: {
        const {source, flags} = value;
        return as(new RegExp(source, flags), index);
      }
      case MAP: {
        const map = as(new Map, index);
        for (const [key, index] of value)
          map.set(unpair(key), unpair(index));
        return map;
      }
      case SET: {
        const set = as(new Set, index);
        for (const index of value)
          set.add(unpair(index));
        return set;
      }
      case ERROR: {
        const {name, message} = value;
        return as(new env[name](message), index);
      }
      case BIGINT:
        return as(BigInt(value), index);
      case 'BigInt':
        return as(Object(BigInt(value)), index);
      case 'ArrayBuffer':
        return as(new Uint8Array(value).buffer, value);
      case 'DataView': {
        const { buffer } = new Uint8Array(value);
        return as(new DataView(buffer), value);
      }
    }
    return as(new env[type](value), index);
  };

  return unpair;
};

/**
 * @typedef {Array<string,any>} Record a type representation
 */

/**
 * Returns a deserialized value from a serialized array of Records.
 * @param {Record[]} serialized a previously serialized value.
 * @returns {any}
 */
const deserialize = serialized => deserializer(new Map, serialized)(0);

const EMPTY = '';

const {toString} = {};
const {keys} = Object;

const typeOf = value => {
  const type = typeof value;
  if (type !== 'object' || !value)
    return [PRIMITIVE, type];

  const asString = toString.call(value).slice(8, -1);
  switch (asString) {
    case 'Array':
      return [ARRAY, EMPTY];
    case 'Object':
      return [OBJECT, EMPTY];
    case 'Date':
      return [DATE, EMPTY];
    case 'RegExp':
      return [REGEXP, EMPTY];
    case 'Map':
      return [MAP, EMPTY];
    case 'Set':
      return [SET, EMPTY];
    case 'DataView':
      return [ARRAY, asString];
  }

  if (asString.includes('Array'))
    return [ARRAY, asString];

  if (asString.includes('Error'))
    return [ERROR, asString];

  return [OBJECT, asString];
};

const shouldSkip = ([TYPE, type]) => (
  TYPE === PRIMITIVE &&
  (type === 'function' || type === 'symbol')
);

const serializer = (strict, json, $, _) => {

  const as = (out, value) => {
    const index = _.push(out) - 1;
    $.set(value, index);
    return index;
  };

  const pair = value => {
    if ($.has(value))
      return $.get(value);

    let [TYPE, type] = typeOf(value);
    switch (TYPE) {
      case PRIMITIVE: {
        let entry = value;
        switch (type) {
          case 'bigint':
            TYPE = BIGINT;
            entry = value.toString();
            break;
          case 'function':
          case 'symbol':
            if (strict)
              throw new TypeError('unable to serialize ' + type);
            entry = null;
            break;
          case 'undefined':
            return as([VOID], value);
        }
        return as([TYPE, entry], value);
      }
      case ARRAY: {
        if (type) {
          let spread = value;
          if (type === 'DataView') {
            spread = new Uint8Array(value.buffer);
          }
          else if (type === 'ArrayBuffer') {
            spread = new Uint8Array(value);
          }
          return as([type, [...spread]], value);
        }

        const arr = [];
        const index = as([TYPE, arr], value);
        for (const entry of value)
          arr.push(pair(entry));
        return index;
      }
      case OBJECT: {
        if (type) {
          switch (type) {
            case 'BigInt':
              return as([type, value.toString()], value);
            case 'Boolean':
            case 'Number':
            case 'String':
              return as([type, value.valueOf()], value);
          }
        }

        if (json && ('toJSON' in value))
          return pair(value.toJSON());

        const entries = [];
        const index = as([TYPE, entries], value);
        for (const key of keys(value)) {
          if (strict || !shouldSkip(typeOf(value[key])))
            entries.push([pair(key), pair(value[key])]);
        }
        return index;
      }
      case DATE:
        return as([TYPE, value.toISOString()], value);
      case REGEXP: {
        const {source, flags} = value;
        return as([TYPE, {source, flags}], value);
      }
      case MAP: {
        const entries = [];
        const index = as([TYPE, entries], value);
        for (const [key, entry] of value) {
          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))
            entries.push([pair(key), pair(entry)]);
        }
        return index;
      }
      case SET: {
        const entries = [];
        const index = as([TYPE, entries], value);
        for (const entry of value) {
          if (strict || !shouldSkip(typeOf(entry)))
            entries.push(pair(entry));
        }
        return index;
      }
    }

    const {message} = value;
    return as([TYPE, {name: type, message}], value);
  };

  return pair;
};

/**
 * @typedef {Array<string,any>} Record a type representation
 */

/**
 * Returns an array of serialized Records.
 * @param {any} value a serializable value.
 * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,
 *  if `true`, will not throw errors on incompatible types, and behave more
 *  like JSON stringify would behave. Symbol and Function will be discarded.
 * @returns {Record[]}
 */
 const serialize = (value, {json, lossy} = {}) => {
  const _ = [];
  return serializer(!(json || lossy), !!json, new Map, _)(value), _;
};

/**
 * @typedef {Array<string,any>} Record a type representation
 */

/**
 * Returns an array of serialized Records.
 * @param {any} any a serializable value.
 * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with
 * a transfer option (ignored when polyfilled) and/or non standard fields that
 * fallback to the polyfill if present.
 * @returns {Record[]}
 */
const structuredClone$1 = typeof structuredClone === "function" ?
  /* c8 ignore start */
  (any, options) => (
    options && ('json' in options || 'lossy' in options) ?
      deserialize(serialize(any, options)) : structuredClone(any)
  ) :
  (any, options) => deserialize(serialize(any, options));

/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 *
 * @typedef {import('./state.js').State} State
 */


/**
 * Generate the default content that GitHub uses on backreferences.
 *
 * @param {number} _
 *   Index of the definition in the order that they are first referenced,
 *   0-indexed.
 * @param {number} rereferenceIndex
 *   Index of calls to the same definition, 0-indexed.
 * @returns {Array<ElementContent>}
 *   Content.
 */
function defaultFootnoteBackContent(_, rereferenceIndex) {
  /** @type {Array<ElementContent>} */
  const result = [{type: 'text', value: '↩'}];

  if (rereferenceIndex > 1) {
    result.push({
      type: 'element',
      tagName: 'sup',
      properties: {},
      children: [{type: 'text', value: String(rereferenceIndex)}]
    });
  }

  return result
}

/**
 * Generate the default label that GitHub uses on backreferences.
 *
 * @param {number} referenceIndex
 *   Index of the definition in the order that they are first referenced,
 *   0-indexed.
 * @param {number} rereferenceIndex
 *   Index of calls to the same definition, 0-indexed.
 * @returns {string}
 *   Label.
 */
function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {
  return (
    'Back to reference ' +
    (referenceIndex + 1) +
    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')
  )
}

/**
 * Generate a hast footer for called footnote definitions.
 *
 * @param {State} state
 *   Info passed around.
 * @returns {Element | undefined}
 *   `section` element or `undefined`.
 */
// eslint-disable-next-line complexity
function footer(state) {
  const clobberPrefix =
    typeof state.options.clobberPrefix === 'string'
      ? state.options.clobberPrefix
      : 'user-content-';
  const footnoteBackContent =
    state.options.footnoteBackContent || defaultFootnoteBackContent;
  const footnoteBackLabel =
    state.options.footnoteBackLabel || defaultFootnoteBackLabel;
  const footnoteLabel = state.options.footnoteLabel || 'Footnotes';
  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2';
  const footnoteLabelProperties = state.options.footnoteLabelProperties || {
    className: ['sr-only']
  };
  /** @type {Array<ElementContent>} */
  const listItems = [];
  let referenceIndex = -1;

  while (++referenceIndex < state.footnoteOrder.length) {
    const definition = state.footnoteById.get(
      state.footnoteOrder[referenceIndex]
    );

    if (!definition) {
      continue
    }

    const content = state.all(definition);
    const id = String(definition.identifier).toUpperCase();
    const safeId = normalizeUri(id.toLowerCase());
    let rereferenceIndex = 0;
    /** @type {Array<ElementContent>} */
    const backReferences = [];
    const counts = state.footnoteCounts.get(id);

    // eslint-disable-next-line no-unmodified-loop-condition
    while (counts !== undefined && ++rereferenceIndex <= counts) {
      if (backReferences.length > 0) {
        backReferences.push({type: 'text', value: ' '});
      }

      let children =
        typeof footnoteBackContent === 'string'
          ? footnoteBackContent
          : footnoteBackContent(referenceIndex, rereferenceIndex);

      if (typeof children === 'string') {
        children = {type: 'text', value: children};
      }

      backReferences.push({
        type: 'element',
        tagName: 'a',
        properties: {
          href:
            '#' +
            clobberPrefix +
            'fnref-' +
            safeId +
            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),
          dataFootnoteBackref: '',
          ariaLabel:
            typeof footnoteBackLabel === 'string'
              ? footnoteBackLabel
              : footnoteBackLabel(referenceIndex, rereferenceIndex),
          className: ['data-footnote-backref']
        },
        children: Array.isArray(children) ? children : [children]
      });
    }

    const tail = content[content.length - 1];

    if (tail && tail.type === 'element' && tail.tagName === 'p') {
      const tailTail = tail.children[tail.children.length - 1];
      if (tailTail && tailTail.type === 'text') {
        tailTail.value += ' ';
      } else {
        tail.children.push({type: 'text', value: ' '});
      }

      tail.children.push(...backReferences);
    } else {
      content.push(...backReferences);
    }

    /** @type {Element} */
    const listItem = {
      type: 'element',
      tagName: 'li',
      properties: {id: clobberPrefix + 'fn-' + safeId},
      children: state.wrap(content, true)
    };

    state.patch(definition, listItem);

    listItems.push(listItem);
  }

  if (listItems.length === 0) {
    return
  }

  return {
    type: 'element',
    tagName: 'section',
    properties: {dataFootnotes: true, className: ['footnotes']},
    children: [
      {
        type: 'element',
        tagName: footnoteLabelTagName,
        properties: {
          ...structuredClone$1(footnoteLabelProperties),
          id: 'footnote-label'
        },
        children: [{type: 'text', value: footnoteLabel}]
      },
      {type: 'text', value: '\n'},
      {
        type: 'element',
        tagName: 'ol',
        properties: {},
        children: state.wrap(listItems, true)
      },
      {type: 'text', value: '\n'}
    ]
  }
}

/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 */


/**
 * Generate an assertion from a test.
 *
 * Useful if you’re going to test many nodes, for example when creating a
 * utility where something else passes a compatible test.
 *
 * The created function is a bit faster because it expects valid input only:
 * a `node`, `index`, and `parent`.
 *
 * @param {Test} test
 *   *   when nullish, checks if `node` is a `Node`.
 *   *   when `string`, works like passing `(node) => node.type === test`.
 *   *   when `function` checks if function passed the node is true.
 *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
 *   *   when `array`, checks if any one of the subtests pass.
 * @returns {Check}
 *   An assertion.
 */
const convert =
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
   *   ((test?: Test) => Check)
   * )}
   */
  (
    /**
     * @param {Test} [test]
     * @returns {Check}
     */
    function (test) {
      if (test === null || test === undefined) {
        return ok
      }

      if (typeof test === 'function') {
        return castFactory(test)
      }

      if (typeof test === 'object') {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)
      }

      if (typeof test === 'string') {
        return typeFactory(test)
      }

      throw new Error('Expected function, string, or object as test')
    }
  );

/**
 * @param {Array<Props | TestFunction | string>} tests
 * @returns {Check}
 */
function anyFactory(tests) {
  /** @type {Array<Check>} */
  const checks = [];
  let index = -1;

  while (++index < tests.length) {
    checks[index] = convert(tests[index]);
  }

  return castFactory(any)

  /**
   * @this {unknown}
   * @type {TestFunction}
   */
  function any(...parameters) {
    let index = -1;

    while (++index < checks.length) {
      if (checks[index].apply(this, parameters)) return true
    }

    return false
  }
}

/**
 * Turn an object into a test for a node with a certain fields.
 *
 * @param {Props} check
 * @returns {Check}
 */
function propsFactory(check) {
  const checkAsRecord = /** @type {Record<string, unknown>} */ (check);

  return castFactory(all)

  /**
   * @param {Node} node
   * @returns {boolean}
   */
  function all(node) {
    const nodeAsRecord = /** @type {Record<string, unknown>} */ (
      /** @type {unknown} */ (node)
    );

    /** @type {string} */
    let key;

    for (key in check) {
      if (nodeAsRecord[key] !== checkAsRecord[key]) return false
    }

    return true
  }
}

/**
 * Turn a string into a test for a node with a certain type.
 *
 * @param {string} check
 * @returns {Check}
 */
function typeFactory(check) {
  return castFactory(type)

  /**
   * @param {Node} node
   */
  function type(node) {
    return node && node.type === check
  }
}

/**
 * Turn a custom test into a test for a node that passes that test.
 *
 * @param {TestFunction} testFunction
 * @returns {Check}
 */
function castFactory(testFunction) {
  return check

  /**
   * @this {unknown}
   * @type {Check}
   */
  function check(value, index, parent) {
    return Boolean(
      looksLikeANode(value) &&
        testFunction.call(
          this,
          value,
          typeof index === 'number' ? index : undefined,
          parent || undefined
        )
    )
  }
}

function ok() {
  return true
}

/**
 * @param {unknown} value
 * @returns {value is Node}
 */
function looksLikeANode(value) {
  return value !== null && typeof value === 'object' && 'type' in value
}

/**
 * @param {string} d
 * @returns {string}
 */
function color(d) {
  return d
}

/**
 * @typedef {import('unist').Node} UnistNode
 * @typedef {import('unist').Parent} UnistParent
 */


/** @type {Readonly<ActionTuple>} */
const empty = [];

/**
 * Continue traversing as normal.
 */
const CONTINUE = true;

/**
 * Stop traversing immediately.
 */
const EXIT = false;

/**
 * Do not traverse this node’s children.
 */
const SKIP = 'skip';

/**
 * Visit nodes, with ancestral information.
 *
 * This algorithm performs *depth-first* *tree traversal* in *preorder*
 * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
 *
 * You can choose for which nodes `visitor` is called by passing a `test`.
 * For complex tests, you should test yourself in `visitor`, as it will be
 * faster and will have improved type information.
 *
 * Walking the tree is an intensive task.
 * Make use of the return values of the visitor when possible.
 * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
 * to check if a node matches, and then perform different operations.
 *
 * You can change the tree.
 * See `Visitor` for more info.
 *
 * @overload
 * @param {Tree} tree
 * @param {Check} check
 * @param {BuildVisitor<Tree, Check>} visitor
 * @param {boolean | null | undefined} [reverse]
 * @returns {undefined}
 *
 * @overload
 * @param {Tree} tree
 * @param {BuildVisitor<Tree>} visitor
 * @param {boolean | null | undefined} [reverse]
 * @returns {undefined}
 *
 * @param {UnistNode} tree
 *   Tree to traverse.
 * @param {Visitor | Test} test
 *   `unist-util-is`-compatible test
 * @param {Visitor | boolean | null | undefined} [visitor]
 *   Handle each node.
 * @param {boolean | null | undefined} [reverse]
 *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
 * @returns {undefined}
 *   Nothing.
 *
 * @template {UnistNode} Tree
 *   Node type.
 * @template {Test} Check
 *   `unist-util-is`-compatible test.
 */
function visitParents(tree, test, visitor, reverse) {
  /** @type {Test} */
  let check;

  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    // @ts-expect-error no visitor given, so `visitor` is test.
    visitor = test;
  } else {
    // @ts-expect-error visitor given, so `test` isn’t a visitor.
    check = test;
  }

  const is = convert(check);
  const step = reverse ? -1 : 1;

  factory(tree, undefined, [])();

  /**
   * @param {UnistNode} node
   * @param {number | undefined} index
   * @param {Array<UnistParent>} parents
   */
  function factory(node, index, parents) {
    const value = /** @type {Record<string, unknown>} */ (
      node && typeof node === 'object' ? node : {}
    );

    if (typeof value.type === 'string') {
      const name =
        // `hast`
        typeof value.tagName === 'string'
          ? value.tagName
          : // `xast`
          typeof value.name === 'string'
          ? value.name
          : undefined;

      Object.defineProperty(visit, 'name', {
        value:
          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'
      });
    }

    return visit

    function visit() {
      /** @type {Readonly<ActionTuple>} */
      let result = empty;
      /** @type {Readonly<ActionTuple>} */
      let subresult;
      /** @type {number} */
      let offset;
      /** @type {Array<UnistParent>} */
      let grandparents;

      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {
        // @ts-expect-error: `visitor` is now a visitor.
        result = toResult(visitor(node, parents));

        if (result[0] === EXIT) {
          return result
        }
      }

      if ('children' in node && node.children) {
        const nodeAsParent = /** @type {UnistParent} */ (node);

        if (nodeAsParent.children && result[0] !== SKIP) {
          offset = (reverse ? nodeAsParent.children.length : -1) + step;
          grandparents = parents.concat(nodeAsParent);

          while (offset > -1 && offset < nodeAsParent.children.length) {
            const child = nodeAsParent.children[offset];

            subresult = factory(child, offset, grandparents)();

            if (subresult[0] === EXIT) {
              return subresult
            }

            offset =
              typeof subresult[1] === 'number' ? subresult[1] : offset + step;
          }
        }
      }

      return result
    }
  }
}

/**
 * Turn a return value into a clean result.
 *
 * @param {VisitorResult} value
 *   Valid return values from visitors.
 * @returns {Readonly<ActionTuple>}
 *   Clean result.
 */
function toResult(value) {
  if (Array.isArray(value)) {
    return value
  }

  if (typeof value === 'number') {
    return [CONTINUE, value]
  }

  return value === null || value === undefined ? empty : [value]
}

/**
 * @typedef {import('unist').Node} UnistNode
 * @typedef {import('unist').Parent} UnistParent
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 */


/**
 * Visit nodes.
 *
 * This algorithm performs *depth-first* *tree traversal* in *preorder*
 * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
 *
 * You can choose for which nodes `visitor` is called by passing a `test`.
 * For complex tests, you should test yourself in `visitor`, as it will be
 * faster and will have improved type information.
 *
 * Walking the tree is an intensive task.
 * Make use of the return values of the visitor when possible.
 * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
 * to check if a node matches, and then perform different operations.
 *
 * You can change the tree.
 * See `Visitor` for more info.
 *
 * @overload
 * @param {Tree} tree
 * @param {Check} check
 * @param {BuildVisitor<Tree, Check>} visitor
 * @param {boolean | null | undefined} [reverse]
 * @returns {undefined}
 *
 * @overload
 * @param {Tree} tree
 * @param {BuildVisitor<Tree>} visitor
 * @param {boolean | null | undefined} [reverse]
 * @returns {undefined}
 *
 * @param {UnistNode} tree
 *   Tree to traverse.
 * @param {Visitor | Test} testOrVisitor
 *   `unist-util-is`-compatible test (optional, omit to pass a visitor).
 * @param {Visitor | boolean | null | undefined} [visitorOrReverse]
 *   Handle each node (when test is omitted, pass `reverse`).
 * @param {boolean | null | undefined} [maybeReverse=false]
 *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
 * @returns {undefined}
 *   Nothing.
 *
 * @template {UnistNode} Tree
 *   Node type.
 * @template {Test} Check
 *   `unist-util-is`-compatible test.
 */
function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
  /** @type {boolean | null | undefined} */
  let reverse;
  /** @type {Test} */
  let test;
  /** @type {Visitor} */
  let visitor;

  if (
    typeof testOrVisitor === 'function' &&
    typeof visitorOrReverse !== 'function'
  ) {
    test = undefined;
    visitor = testOrVisitor;
    reverse = visitorOrReverse;
  } else {
    // @ts-expect-error: assume the overload with test was given.
    test = testOrVisitor;
    // @ts-expect-error: assume the overload with test was given.
    visitor = visitorOrReverse;
    reverse = maybeReverse;
  }

  visitParents(tree, test, overload, reverse);

  /**
   * @param {UnistNode} node
   * @param {Array<UnistParent>} parents
   */
  function overload(node, parents) {
    const parent = parents[parents.length - 1];
    const index = parent ? parent.children.indexOf(node) : undefined;
    return visitor(node, index, parent)
  }
}

/**
 * @typedef {import('hast').Element} HastElement
 * @typedef {import('hast').ElementContent} HastElementContent
 * @typedef {import('hast').Nodes} HastNodes
 * @typedef {import('hast').Properties} HastProperties
 * @typedef {import('hast').RootContent} HastRootContent
 * @typedef {import('hast').Text} HastText
 *
 * @typedef {import('mdast').Definition} MdastDefinition
 * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition
 * @typedef {import('mdast').Nodes} MdastNodes
 * @typedef {import('mdast').Parents} MdastParents
 *
 * @typedef {import('vfile').VFile} VFile
 *
 * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate
 * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate
 */


const own$1 = {}.hasOwnProperty;

/** @type {Options} */
const emptyOptions = {};

/**
 * Create `state` from an mdast tree.
 *
 * @param {MdastNodes} tree
 *   mdast node to transform.
 * @param {Options | null | undefined} [options]
 *   Configuration (optional).
 * @returns {State}
 *   `state` function.
 */
function createState(tree, options) {
  const settings = options || emptyOptions;
  /** @type {Map<string, MdastDefinition>} */
  const definitionById = new Map();
  /** @type {Map<string, MdastFootnoteDefinition>} */
  const footnoteById = new Map();
  /** @type {Map<string, number>} */
  const footnoteCounts = new Map();
  /** @type {Handlers} */
  // @ts-expect-error: the root handler returns a root.
  // Hard to type.
  const handlers$1 = {...handlers, ...settings.handlers};

  /** @type {State} */
  const state = {
    all,
    applyData,
    definitionById,
    footnoteById,
    footnoteCounts,
    footnoteOrder: [],
    handlers: handlers$1,
    one,
    options: settings,
    patch,
    wrap: wrap$1
  };

  visit(tree, function (node) {
    if (node.type === 'definition' || node.type === 'footnoteDefinition') {
      const map = node.type === 'definition' ? definitionById : footnoteById;
      const id = String(node.identifier).toUpperCase();

      // Mimick CM behavior of link definitions.
      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.
      if (!map.has(id)) {
        // @ts-expect-error: node type matches map.
        map.set(id, node);
      }
    }
  });

  return state

  /**
   * Transform an mdast node into a hast node.
   *
   * @param {MdastNodes} node
   *   mdast node.
   * @param {MdastParents | undefined} [parent]
   *   Parent of `node`.
   * @returns {Array<HastElementContent> | HastElementContent | undefined}
   *   Resulting hast node.
   */
  function one(node, parent) {
    const type = node.type;
    const handle = state.handlers[type];

    if (own$1.call(state.handlers, type) && handle) {
      return handle(state, node, parent)
    }

    if (state.options.passThrough && state.options.passThrough.includes(type)) {
      if ('children' in node) {
        const {children, ...shallow} = node;
        const result = structuredClone$1(shallow);
        // @ts-expect-error: TS doesn’t understand…
        result.children = state.all(node);
        // @ts-expect-error: TS doesn’t understand…
        return result
      }

      // @ts-expect-error: it’s custom.
      return structuredClone$1(node)
    }

    const unknown = state.options.unknownHandler || defaultUnknownHandler;

    return unknown(state, node, parent)
  }

  /**
   * Transform the children of an mdast node into hast nodes.
   *
   * @param {MdastNodes} parent
   *   mdast node to compile
   * @returns {Array<HastElementContent>}
   *   Resulting hast nodes.
   */
  function all(parent) {
    /** @type {Array<HastElementContent>} */
    const values = [];

    if ('children' in parent) {
      const nodes = parent.children;
      let index = -1;
      while (++index < nodes.length) {
        const result = state.one(nodes[index], parent);

        // To do: see if we van clean this? Can we merge texts?
        if (result) {
          if (index && nodes[index - 1].type === 'break') {
            if (!Array.isArray(result) && result.type === 'text') {
              result.value = trimMarkdownSpaceStart(result.value);
            }

            if (!Array.isArray(result) && result.type === 'element') {
              const head = result.children[0];

              if (head && head.type === 'text') {
                head.value = trimMarkdownSpaceStart(head.value);
              }
            }
          }

          if (Array.isArray(result)) {
            values.push(...result);
          } else {
            values.push(result);
          }
        }
      }
    }

    return values
  }
}

/**
 * Copy a node’s positional info.
 *
 * @param {MdastNodes} from
 *   mdast node to copy from.
 * @param {HastNodes} to
 *   hast node to copy into.
 * @returns {undefined}
 *   Nothing.
 */
function patch(from, to) {
  if (from.position) to.position = position$1(from);
}

/**
 * Honor the `data` of `from` and maybe generate an element instead of `to`.
 *
 * @template {HastNodes} Type
 *   Node type.
 * @param {MdastNodes} from
 *   mdast node to use data from.
 * @param {Type} to
 *   hast node to change.
 * @returns {HastElement | Type}
 *   Nothing.
 */
function applyData(from, to) {
  /** @type {HastElement | Type} */
  let result = to;

  // Handle `data.hName`, `data.hProperties, `data.hChildren`.
  if (from && from.data) {
    const hName = from.data.hName;
    const hChildren = from.data.hChildren;
    const hProperties = from.data.hProperties;

    if (typeof hName === 'string') {
      // Transforming the node resulted in an element with a different name
      // than wanted:
      if (result.type === 'element') {
        result.tagName = hName;
      }
      // Transforming the node resulted in a non-element, which happens for
      // raw, text, and root nodes (unless custom handlers are passed).
      // The intent of `hName` is to create an element, but likely also to keep
      // the content around (otherwise: pass `hChildren`).
      else {
        /** @type {Array<HastElementContent>} */
        // @ts-expect-error: assume no doctypes in `root`.
        const children = 'children' in result ? result.children : [result];
        result = {type: 'element', tagName: hName, properties: {}, children};
      }
    }

    if (result.type === 'element' && hProperties) {
      Object.assign(result.properties, structuredClone$1(hProperties));
    }

    if (
      'children' in result &&
      result.children &&
      hChildren !== null &&
      hChildren !== undefined
    ) {
      result.children = hChildren;
    }
  }

  return result
}

/**
 * Transform an unknown node.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastNodes} node
 *   Unknown mdast node.
 * @returns {HastElement | HastText}
 *   Resulting hast node.
 */
function defaultUnknownHandler(state, node) {
  const data = node.data || {};
  /** @type {HastElement | HastText} */
  const result =
    'value' in node &&
    !(own$1.call(data, 'hProperties') || own$1.call(data, 'hChildren'))
      ? {type: 'text', value: node.value}
      : {
          type: 'element',
          tagName: 'div',
          properties: {},
          children: state.all(node)
        };

  state.patch(node, result);
  return state.applyData(node, result)
}

/**
 * Wrap `nodes` with line endings between each node.
 *
 * @template {HastRootContent} Type
 *   Node type.
 * @param {Array<Type>} nodes
 *   List of nodes to wrap.
 * @param {boolean | undefined} [loose=false]
 *   Whether to add line endings at start and end (default: `false`).
 * @returns {Array<HastText | Type>}
 *   Wrapped nodes.
 */
function wrap$1(nodes, loose) {
  /** @type {Array<HastText | Type>} */
  const result = [];
  let index = -1;

  if (loose) {
    result.push({type: 'text', value: '\n'});
  }

  while (++index < nodes.length) {
    if (index) result.push({type: 'text', value: '\n'});
    result.push(nodes[index]);
  }

  if (loose && nodes.length > 0) {
    result.push({type: 'text', value: '\n'});
  }

  return result
}

/**
 * Trim spaces and tabs at the start of `value`.
 *
 * @param {string} value
 *   Value to trim.
 * @returns {string}
 *   Result.
 */
function trimMarkdownSpaceStart(value) {
  let index = 0;
  let code = value.charCodeAt(index);

  while (code === 9 || code === 32) {
    index++;
    code = value.charCodeAt(index);
  }

  return value.slice(index)
}

/**
 * @typedef {import('hast').Nodes} HastNodes
 * @typedef {import('mdast').Nodes} MdastNodes
 * @typedef {import('./state.js').Options} Options
 */


/**
 * Transform mdast to hast.
 *
 * ##### Notes
 *
 * ###### HTML
 *
 * Raw HTML is available in mdast as `html` nodes and can be embedded in hast
 * as semistandard `raw` nodes.
 * Most utilities ignore `raw` nodes but two notable ones don’t:
 *
 * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will
 *     output the raw HTML.
 *     This is typically discouraged as noted by the option name but is useful
 *     if you completely trust authors
 * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them
 *     into standard hast nodes (`element`, `text`, etc).
 *     This is a heavy task as it needs a full HTML parser, but it is the only
 *     way to support untrusted content
 *
 * ###### Footnotes
 *
 * Many options supported here relate to footnotes.
 * Footnotes are not specified by CommonMark, which we follow by default.
 * They are supported by GitHub, so footnotes can be enabled in markdown with
 * `mdast-util-gfm`.
 *
 * The options `footnoteBackLabel` and `footnoteLabel` define natural language
 * that explains footnotes, which is hidden for sighted users but shown to
 * assistive technology.
 * When your page is not in English, you must define translated values.
 *
 * Back references use ARIA attributes, but the section label itself uses a
 * heading that is hidden with an `sr-only` class.
 * To show it to sighted users, define different attributes in
 * `footnoteLabelProperties`.
 *
 * ###### Clobbering
 *
 * Footnotes introduces a problem, as it links footnote calls to footnote
 * definitions on the page through `id` attributes generated from user content,
 * which results in DOM clobbering.
 *
 * DOM clobbering is this:
 *
 * ```html
 * <p id=x></p>
 * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>
 * ```
 *
 * Elements by their ID are made available by browsers on the `window` object,
 * which is a security risk.
 * Using a prefix solves this problem.
 *
 * More information on how to handle clobbering and the prefix is explained in
 * Example: headings (DOM clobbering) in `rehype-sanitize`.
 *
 * ###### Unknown nodes
 *
 * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.
 * The default behavior for unknown nodes is:
 *
 * *   when the node has a `value` (and doesn’t have `data.hName`,
 *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`
 *     node
 * *   otherwise, create a `<div>` element (which could be changed with
 *     `data.hName`), with its children mapped from mdast to hast as well
 *
 * This behavior can be changed by passing an `unknownHandler`.
 *
 * @param {MdastNodes} tree
 *   mdast tree.
 * @param {Options | null | undefined} [options]
 *   Configuration (optional).
 * @returns {HastNodes}
 *   hast tree.
 */
function toHast(tree, options) {
  const state = createState(tree, options);
  const node = state.one(tree, undefined);
  const foot = footer(state);
  /** @type {HastNodes} */
  const result = Array.isArray(node)
    ? {type: 'root', children: node}
    : node || {type: 'root', children: []};

  if (foot) {
    result.children.push({type: 'text', value: '\n'}, foot);
  }

  return result
}

/**
 * @import {Root as HastRoot} from 'hast'
 * @import {Root as MdastRoot} from 'mdast'
 * @import {Options as ToHastOptions} from 'mdast-util-to-hast'
 * @import {Processor} from 'unified'
 * @import {VFile} from 'vfile'
 */


/**
 * Turn markdown into HTML.
 *
 * ##### Notes
 *
 * ###### Signature
 *
 * * if a processor is given,
 *   runs the (rehype) plugins used on it with a hast tree,
 *   then discards the result (*bridge mode*)
 * * otherwise,
 *   returns a hast tree,
 *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)
 *
 * > 👉 **Note**:
 * > It’s highly unlikely that you want to pass a `processor`.
 *
 * ###### HTML
 *
 * Raw HTML is available in mdast as `html` nodes and can be embedded in hast
 * as semistandard `raw` nodes.
 * Most plugins ignore `raw` nodes but two notable ones don’t:
 *
 * * `rehype-stringify` also has an option `allowDangerousHtml` which will
 *   output the raw HTML.
 *   This is typically discouraged as noted by the option name but is useful if
 *   you completely trust authors
 * * `rehype-raw` can handle the raw embedded HTML strings by parsing them
 *   into standard hast nodes (`element`, `text`, etc);
 *   this is a heavy task as it needs a full HTML parser,
 *   but it is the only way to support untrusted content
 *
 * ###### Footnotes
 *
 * Many options supported here relate to footnotes.
 * Footnotes are not specified by CommonMark,
 * which we follow by default.
 * They are supported by GitHub,
 * so footnotes can be enabled in markdown with `remark-gfm`.
 *
 * The options `footnoteBackLabel` and `footnoteLabel` define natural language
 * that explains footnotes,
 * which is hidden for sighted users but shown to assistive technology.
 * When your page is not in English,
 * you must define translated values.
 *
 * Back references use ARIA attributes,
 * but the section label itself uses a heading that is hidden with an
 * `sr-only` class.
 * To show it to sighted users,
 * define different attributes in `footnoteLabelProperties`.
 *
 * ###### Clobbering
 *
 * Footnotes introduces a problem,
 * as it links footnote calls to footnote definitions on the page through `id`
 * attributes generated from user content,
 * which results in DOM clobbering.
 *
 * DOM clobbering is this:
 *
 * ```html
 * <p id=x></p>
 * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>
 * ```
 *
 * Elements by their ID are made available by browsers on the `window` object,
 * which is a security risk.
 * Using a prefix solves this problem.
 *
 * More information on how to handle clobbering and the prefix is explained in
 * *Example: headings (DOM clobbering)* in `rehype-sanitize`.
 *
 * ###### Unknown nodes
 *
 * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.
 * The default behavior for unknown nodes is:
 *
 * * when the node has a `value`
 *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,
 *   see later),
 *   create a hast `text` node
 * * otherwise,
 *   create a `<div>` element (which could be changed with `data.hName`),
 *   with its children mapped from mdast to hast as well
 *
 * This behavior can be changed by passing an `unknownHandler`.
 *
 * @overload
 * @param {Processor} processor
 * @param {Readonly<Options> | null | undefined} [options]
 * @returns {TransformBridge}
 *
 * @overload
 * @param {Readonly<Options> | null | undefined} [options]
 * @returns {TransformMutate}
 *
 * @overload
 * @param {Readonly<Options> | Processor | null | undefined} [destination]
 * @param {Readonly<Options> | null | undefined} [options]
 * @returns {TransformBridge | TransformMutate}
 *
 * @param {Readonly<Options> | Processor | null | undefined} [destination]
 *   Processor or configuration (optional).
 * @param {Readonly<Options> | null | undefined} [options]
 *   When a processor was given,
 *   configuration (optional).
 * @returns {TransformBridge | TransformMutate}
 *   Transform.
 */
function remarkRehype(destination, options) {
  if (destination && 'run' in destination) {
    /**
     * @type {TransformBridge}
     */
    return async function (tree, file) {
      // Cast because root in -> root out.
      const hastTree = /** @type {HastRoot} */ (
        toHast(tree, {file, ...options})
      );
      await destination.run(hastTree, file);
    }
  }

  /**
   * @type {TransformMutate}
   */
  return function (tree, file) {
    // Cast because root in -> root out.
    // To do: in the future, disallow ` || options` fallback.
    // With `unified-engine`, `destination` can be `undefined` but
    // `options` will be the file set.
    // We should not pass that as `options`.
    return /** @type {HastRoot} */ (
      toHast(tree, {file, ...(destination || options)})
    )
  }
}

/**
 * Throw a given error.
 *
 * @param {Error|null|undefined} [error]
 *   Maybe error.
 * @returns {asserts error is null|undefined}
 */
function bail(error) {
  if (error) {
    throw error
  }
}

var extend$1;
var hasRequiredExtend;

function requireExtend () {
	if (hasRequiredExtend) return extend$1;
	hasRequiredExtend = 1;

	var hasOwn = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var defineProperty = Object.defineProperty;
	var gOPD = Object.getOwnPropertyDescriptor;

	var isArray = function isArray(arr) {
		if (typeof Array.isArray === 'function') {
			return Array.isArray(arr);
		}

		return toStr.call(arr) === '[object Array]';
	};

	var isPlainObject = function isPlainObject(obj) {
		if (!obj || toStr.call(obj) !== '[object Object]') {
			return false;
		}

		var hasOwnConstructor = hasOwn.call(obj, 'constructor');
		var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
		// Not own constructor property must be Object
		if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		var key;
		for (key in obj) { /**/ }

		return typeof key === 'undefined' || hasOwn.call(obj, key);
	};

	// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
	var setProperty = function setProperty(target, options) {
		if (defineProperty && options.name === '__proto__') {
			defineProperty(target, options.name, {
				enumerable: true,
				configurable: true,
				value: options.newValue,
				writable: true
			});
		} else {
			target[options.name] = options.newValue;
		}
	};

	// Return undefined instead of __proto__ if '__proto__' is not an own property
	var getProperty = function getProperty(obj, name) {
		if (name === '__proto__') {
			if (!hasOwn.call(obj, name)) {
				return void 0;
			} else if (gOPD) {
				// In early versions of node, obj['__proto__'] is buggy when obj has
				// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
				return gOPD(obj, name).value;
			}
		}

		return obj[name];
	};

	extend$1 = function extend() {
		var options, name, src, copy, copyIsArray, clone;
		var target = arguments[0];
		var i = 1;
		var length = arguments.length;
		var deep = false;

		// Handle a deep copy situation
		if (typeof target === 'boolean') {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		}
		if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
			target = {};
		}

		for (; i < length; ++i) {
			options = arguments[i];
			// Only deal with non-null/undefined values
			if (options != null) {
				// Extend the base object
				for (name in options) {
					src = getProperty(target, name);
					copy = getProperty(options, name);

					// Prevent never-ending loop
					if (target !== copy) {
						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
							if (copyIsArray) {
								copyIsArray = false;
								clone = src && isArray(src) ? src : [];
							} else {
								clone = src && isPlainObject(src) ? src : {};
							}

							// Never move original objects, clone them
							setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

						// Don't bring in undefined values
						} else if (typeof copy !== 'undefined') {
							setProperty(target, { name: name, newValue: copy });
						}
					}
				}
			}
		}

		// Return the modified object
		return target;
	};
	return extend$1;
}

var extendExports = requireExtend();
const extend = /*@__PURE__*/getDefaultExportFromCjs(extendExports);

function isPlainObject(value) {
	if (typeof value !== 'object' || value === null) {
		return false;
	}

	const prototype = Object.getPrototypeOf(value);
	return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

// To do: remove `void`s
// To do: remove `null` from output of our APIs, allow it as user APIs.

/**
 * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback
 *   Callback.
 *
 * @typedef {(...input: Array<any>) => any} Middleware
 *   Ware.
 *
 * @typedef Pipeline
 *   Pipeline.
 * @property {Run} run
 *   Run the pipeline.
 * @property {Use} use
 *   Add middleware.
 *
 * @typedef {(...input: Array<any>) => void} Run
 *   Call all middleware.
 *
 *   Calls `done` on completion with either an error or the output of the
 *   last middleware.
 *
 *   > 👉 **Note**: as the length of input defines whether async functions get a
 *   > `next` function,
 *   > it’s recommended to keep `input` at one value normally.

 *
 * @typedef {(fn: Middleware) => Pipeline} Use
 *   Add middleware.
 */

/**
 * Create new middleware.
 *
 * @returns {Pipeline}
 *   Pipeline.
 */
function trough() {
  /** @type {Array<Middleware>} */
  const fns = [];
  /** @type {Pipeline} */
  const pipeline = {run, use};

  return pipeline

  /** @type {Run} */
  function run(...values) {
    let middlewareIndex = -1;
    /** @type {Callback} */
    const callback = values.pop();

    if (typeof callback !== 'function') {
      throw new TypeError('Expected function as last argument, not ' + callback)
    }

    next(null, ...values);

    /**
     * Run the next `fn`, or we’re done.
     *
     * @param {Error | null | undefined} error
     * @param {Array<any>} output
     */
    function next(error, ...output) {
      const fn = fns[++middlewareIndex];
      let index = -1;

      if (error) {
        callback(error);
        return
      }

      // Copy non-nullish input into values.
      while (++index < values.length) {
        if (output[index] === null || output[index] === undefined) {
          output[index] = values[index];
        }
      }

      // Save the newly created `output` for the next call.
      values = output;

      // Next or done.
      if (fn) {
        wrap(fn, next)(...output);
      } else {
        callback(null, ...output);
      }
    }
  }

  /** @type {Use} */
  function use(middelware) {
    if (typeof middelware !== 'function') {
      throw new TypeError(
        'Expected `middelware` to be a function, not ' + middelware
      )
    }

    fns.push(middelware);
    return pipeline
  }
}

/**
 * Wrap `middleware` into a uniform interface.
 *
 * You can pass all input to the resulting function.
 * `callback` is then called with the output of `middleware`.
 *
 * If `middleware` accepts more arguments than the later given in input,
 * an extra `done` function is passed to it after that input,
 * which must be called by `middleware`.
 *
 * The first value in `input` is the main input value.
 * All other input values are the rest input values.
 * The values given to `callback` are the input values,
 * merged with every non-nullish output value.
 *
 * * if `middleware` throws an error,
 *   returns a promise that is rejected,
 *   or calls the given `done` function with an error,
 *   `callback` is called with that error
 * * if `middleware` returns a value or returns a promise that is resolved,
 *   that value is the main output value
 * * if `middleware` calls `done`,
 *   all non-nullish values except for the first one (the error) overwrite the
 *   output values
 *
 * @param {Middleware} middleware
 *   Function to wrap.
 * @param {Callback} callback
 *   Callback called with the output of `middleware`.
 * @returns {Run}
 *   Wrapped middleware.
 */
function wrap(middleware, callback) {
  /** @type {boolean} */
  let called;

  return wrapped

  /**
   * Call `middleware`.
   * @this {any}
   * @param {Array<any>} parameters
   * @returns {void}
   */
  function wrapped(...parameters) {
    const fnExpectsCallback = middleware.length > parameters.length;
    /** @type {any} */
    let result;

    if (fnExpectsCallback) {
      parameters.push(done);
    }

    try {
      result = middleware.apply(this, parameters);
    } catch (error) {
      const exception = /** @type {Error} */ (error);

      // Well, this is quite the pickle.
      // `middleware` received a callback and called it synchronously, but that
      // threw an error.
      // The only thing left to do is to throw the thing instead.
      if (fnExpectsCallback && called) {
        throw exception
      }

      return done(exception)
    }

    if (!fnExpectsCallback) {
      if (result && result.then && typeof result.then === 'function') {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }

  /**
   * Call `callback`, only once.
   *
   * @type {Callback}
   */
  function done(error, ...output) {
    if (!called) {
      called = true;
      callback(error, ...output);
    }
  }

  /**
   * Call `done` with one value.
   *
   * @param {any} [value]
   */
  function then(value) {
    done(null, value);
  }
}

// A derivative work based on:
// <https://github.com/browserify/path-browserify>.
// Which is licensed:
//
// MIT License
//
// Copyright (c) 2013 James Halliday
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// A derivative work based on:
//
// Parts of that are extracted from Node’s internal `path` module:
// <https://github.com/nodejs/node/blob/master/lib/path.js>.
// Which is licensed:
//
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

const minpath = {basename, dirname, extname, join, sep: '/'};

/* eslint-disable max-depth, complexity */

/**
 * Get the basename from a path.
 *
 * @param {string} path
 *   File path.
 * @param {string | null | undefined} [extname]
 *   Extension to strip.
 * @returns {string}
 *   Stem or basename.
 */
function basename(path, extname) {
  if (extname !== undefined && typeof extname !== 'string') {
    throw new TypeError('"ext" argument must be a string')
  }

  assertPath$1(path);
  let start = 0;
  let end = -1;
  let index = path.length;
  /** @type {boolean | undefined} */
  let seenNonSlash;

  if (
    extname === undefined ||
    extname.length === 0 ||
    extname.length > path.length
  ) {
    while (index--) {
      if (path.codePointAt(index) === 47 /* `/` */) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now.
        if (seenNonSlash) {
          start = index + 1;
          break
        }
      } else if (end < 0) {
        // We saw the first non-path separator, mark this as the end of our
        // path component.
        seenNonSlash = true;
        end = index + 1;
      }
    }

    return end < 0 ? '' : path.slice(start, end)
  }

  if (extname === path) {
    return ''
  }

  let firstNonSlashEnd = -1;
  let extnameIndex = extname.length - 1;

  while (index--) {
    if (path.codePointAt(index) === 47 /* `/` */) {
      // If we reached a path separator that was not part of a set of path
      // separators at the end of the string, stop now.
      if (seenNonSlash) {
        start = index + 1;
        break
      }
    } else {
      if (firstNonSlashEnd < 0) {
        // We saw the first non-path separator, remember this index in case
        // we need it if the extension ends up not matching.
        seenNonSlash = true;
        firstNonSlashEnd = index + 1;
      }

      if (extnameIndex > -1) {
        // Try to match the explicit extension.
        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {
          if (extnameIndex < 0) {
            // We matched the extension, so mark this as the end of our path
            // component
            end = index;
          }
        } else {
          // Extension does not match, so our result is the entire path
          // component
          extnameIndex = -1;
          end = firstNonSlashEnd;
        }
      }
    }
  }

  if (start === end) {
    end = firstNonSlashEnd;
  } else if (end < 0) {
    end = path.length;
  }

  return path.slice(start, end)
}

/**
 * Get the dirname from a path.
 *
 * @param {string} path
 *   File path.
 * @returns {string}
 *   File path.
 */
function dirname(path) {
  assertPath$1(path);

  if (path.length === 0) {
    return '.'
  }

  let end = -1;
  let index = path.length;
  /** @type {boolean | undefined} */
  let unmatchedSlash;

  // Prefix `--` is important to not run on `0`.
  while (--index) {
    if (path.codePointAt(index) === 47 /* `/` */) {
      if (unmatchedSlash) {
        end = index;
        break
      }
    } else if (!unmatchedSlash) {
      // We saw the first non-path separator
      unmatchedSlash = true;
    }
  }

  return end < 0
    ? path.codePointAt(0) === 47 /* `/` */
      ? '/'
      : '.'
    : end === 1 && path.codePointAt(0) === 47 /* `/` */
      ? '//'
      : path.slice(0, end)
}

/**
 * Get an extname from a path.
 *
 * @param {string} path
 *   File path.
 * @returns {string}
 *   Extname.
 */
function extname(path) {
  assertPath$1(path);

  let index = path.length;

  let end = -1;
  let startPart = 0;
  let startDot = -1;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find.
  let preDotState = 0;
  /** @type {boolean | undefined} */
  let unmatchedSlash;

  while (index--) {
    const code = path.codePointAt(index);

    if (code === 47 /* `/` */) {
      // If we reached a path separator that was not part of a set of path
      // separators at the end of the string, stop now.
      if (unmatchedSlash) {
        startPart = index + 1;
        break
      }

      continue
    }

    if (end < 0) {
      // We saw the first non-path separator, mark this as the end of our
      // extension.
      unmatchedSlash = true;
      end = index + 1;
    }

    if (code === 46 /* `.` */) {
      // If this is our first dot, mark it as the start of our extension.
      if (startDot < 0) {
        startDot = index;
      } else if (preDotState !== 1) {
        preDotState = 1;
      }
    } else if (startDot > -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension.
      preDotState = -1;
    }
  }

  if (
    startDot < 0 ||
    end < 0 ||
    // We saw a non-dot character immediately before the dot.
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly `..`.
    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)
  ) {
    return ''
  }

  return path.slice(startDot, end)
}

/**
 * Join segments from a path.
 *
 * @param {Array<string>} segments
 *   Path segments.
 * @returns {string}
 *   File path.
 */
function join(...segments) {
  let index = -1;
  /** @type {string | undefined} */
  let joined;

  while (++index < segments.length) {
    assertPath$1(segments[index]);

    if (segments[index]) {
      joined =
        joined === undefined ? segments[index] : joined + '/' + segments[index];
    }
  }

  return joined === undefined ? '.' : normalize(joined)
}

/**
 * Normalize a basic file path.
 *
 * @param {string} path
 *   File path.
 * @returns {string}
 *   File path.
 */
// Note: `normalize` is not exposed as `path.normalize`, so some code is
// manually removed from it.
function normalize(path) {
  assertPath$1(path);

  const absolute = path.codePointAt(0) === 47; /* `/` */

  // Normalize the path according to POSIX rules.
  let value = normalizeString(path, !absolute);

  if (value.length === 0 && !absolute) {
    value = '.';
  }

  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {
    value += '/';
  }

  return absolute ? '/' + value : value
}

/**
 * Resolve `.` and `..` elements in a path with directory names.
 *
 * @param {string} path
 *   File path.
 * @param {boolean} allowAboveRoot
 *   Whether `..` can move above root.
 * @returns {string}
 *   File path.
 */
function normalizeString(path, allowAboveRoot) {
  let result = '';
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let index = -1;
  /** @type {number | undefined} */
  let code;
  /** @type {number} */
  let lastSlashIndex;

  while (++index <= path.length) {
    if (index < path.length) {
      code = path.codePointAt(index);
    } else if (code === 47 /* `/` */) {
      break
    } else {
      code = 47; /* `/` */
    }

    if (code === 47 /* `/` */) {
      if (lastSlash === index - 1 || dots === 1) ; else if (lastSlash !== index - 1 && dots === 2) {
        if (
          result.length < 2 ||
          lastSegmentLength !== 2 ||
          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||
          result.codePointAt(result.length - 2) !== 46 /* `.` */
        ) {
          if (result.length > 2) {
            lastSlashIndex = result.lastIndexOf('/');

            if (lastSlashIndex !== result.length - 1) {
              if (lastSlashIndex < 0) {
                result = '';
                lastSegmentLength = 0;
              } else {
                result = result.slice(0, lastSlashIndex);
                lastSegmentLength = result.length - 1 - result.lastIndexOf('/');
              }

              lastSlash = index;
              dots = 0;
              continue
            }
          } else if (result.length > 0) {
            result = '';
            lastSegmentLength = 0;
            lastSlash = index;
            dots = 0;
            continue
          }
        }

        if (allowAboveRoot) {
          result = result.length > 0 ? result + '/..' : '..';
          lastSegmentLength = 2;
        }
      } else {
        if (result.length > 0) {
          result += '/' + path.slice(lastSlash + 1, index);
        } else {
          result = path.slice(lastSlash + 1, index);
        }

        lastSegmentLength = index - lastSlash - 1;
      }

      lastSlash = index;
      dots = 0;
    } else if (code === 46 /* `.` */ && dots > -1) {
      dots++;
    } else {
      dots = -1;
    }
  }

  return result
}

/**
 * Make sure `path` is a string.
 *
 * @param {string} path
 *   File path.
 * @returns {asserts path is string}
 *   Nothing.
 */
function assertPath$1(path) {
  if (typeof path !== 'string') {
    throw new TypeError(
      'Path must be a string. Received ' + JSON.stringify(path)
    )
  }
}

/* eslint-enable max-depth, complexity */

// Somewhat based on:
// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.
// But I don’t think one tiny line of code can be copyrighted. 😅
const minproc = {cwd};

function cwd() {
  return '/'
}

/**
 * Checks if a value has the shape of a WHATWG URL object.
 *
 * Using a symbol or instanceof would not be able to recognize URL objects
 * coming from other implementations (e.g. in Electron), so instead we are
 * checking some well known properties for a lack of a better test.
 *
 * We use `href` and `protocol` as they are the only properties that are
 * easy to retrieve and calculate due to the lazy nature of the getters.
 *
 * We check for auth attribute to distinguish legacy url instance with
 * WHATWG URL instance.
 *
 * @param {unknown} fileUrlOrPath
 *   File path or URL.
 * @returns {fileUrlOrPath is URL}
 *   Whether it’s a URL.
 */
// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>
function isUrl(fileUrlOrPath) {
  return Boolean(
    fileUrlOrPath !== null &&
      typeof fileUrlOrPath === 'object' &&
      'href' in fileUrlOrPath &&
      fileUrlOrPath.href &&
      'protocol' in fileUrlOrPath &&
      fileUrlOrPath.protocol &&
      // @ts-expect-error: indexing is fine.
      fileUrlOrPath.auth === undefined
  )
}

// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>

/**
 * @param {URL | string} path
 *   File URL.
 * @returns {string}
 *   File URL.
 */
function urlToPath(path) {
  if (typeof path === 'string') {
    path = new URL(path);
  } else if (!isUrl(path)) {
    /** @type {NodeJS.ErrnoException} */
    const error = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' +
        path +
        '`'
    );
    error.code = 'ERR_INVALID_ARG_TYPE';
    throw error
  }

  if (path.protocol !== 'file:') {
    /** @type {NodeJS.ErrnoException} */
    const error = new TypeError('The URL must be of scheme file');
    error.code = 'ERR_INVALID_URL_SCHEME';
    throw error
  }

  return getPathFromURLPosix(path)
}

/**
 * Get a path from a POSIX URL.
 *
 * @param {URL} url
 *   URL.
 * @returns {string}
 *   File path.
 */
function getPathFromURLPosix(url) {
  if (url.hostname !== '') {
    /** @type {NodeJS.ErrnoException} */
    const error = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    error.code = 'ERR_INVALID_FILE_URL_HOST';
    throw error
  }

  const pathname = url.pathname;
  let index = -1;

  while (++index < pathname.length) {
    if (
      pathname.codePointAt(index) === 37 /* `%` */ &&
      pathname.codePointAt(index + 1) === 50 /* `2` */
    ) {
      const third = pathname.codePointAt(index + 2);
      if (third === 70 /* `F` */ || third === 102 /* `f` */) {
        /** @type {NodeJS.ErrnoException} */
        const error = new TypeError(
          'File URL path must not include encoded / characters'
        );
        error.code = 'ERR_INVALID_FILE_URL_PATH';
        throw error
      }
    }
  }

  return decodeURIComponent(pathname)
}

/**
 * @import {Node, Point, Position} from 'unist'
 * @import {Options as MessageOptions} from 'vfile-message'
 * @import {Compatible, Data, Map, Options, Value} from 'vfile'
 */


/**
 * Order of setting (least specific to most), we need this because otherwise
 * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
 * stem can be set.
 */
const order = /** @type {const} */ ([
  'history',
  'path',
  'basename',
  'stem',
  'extname',
  'dirname'
]);

class VFile {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Uint8Array` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(value) {
    /** @type {Options | VFile} */
    let options;

    if (!value) {
      options = {};
    } else if (isUrl(value)) {
      options = {path: value};
    } else if (typeof value === 'string' || isUint8Array$1(value)) {
      options = {value};
    } else {
      options = value;
    }

    /* eslint-disable no-unused-expressions */

    /**
     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).
     *
     * @type {string}
     */
    // Prevent calling `cwd` (which could be expensive) if it’s not needed;
    // the empty string will be overridden in the next block.
    this.cwd = 'cwd' in options ? '' : minproc.cwd();

    /**
     * Place to store custom info (default: `{}`).
     *
     * It’s OK to store custom data directly on the file but moving it to
     * `data` is recommended.
     *
     * @type {Data}
     */
    this.data = {};

    /**
     * List of file paths the file moved between.
     *
     * The first is the original path and the last is the current path.
     *
     * @type {Array<string>}
     */
    this.history = [];

    /**
     * List of messages associated with the file.
     *
     * @type {Array<VFileMessage>}
     */
    this.messages = [];
    /* eslint-enable no-unused-expressions */

    // Set path related properties in the correct order.
    let index = -1;

    while (++index < order.length) {
      const field = order[index];

      // Note: we specifically use `in` instead of `hasOwnProperty` to accept
      // `vfile`s too.
      if (
        field in options &&
        options[field] !== undefined &&
        options[field] !== null
      ) {
        // @ts-expect-error: TS doesn’t understand basic reality.
        this[field] = field === 'history' ? [...options[field]] : options[field];
      }
    }

    /** @type {string} */
    let field;

    // Set non-path related properties.
    for (field in options) {
      // @ts-expect-error: fine to set other things.
      if (!order.includes(field)) {
        // @ts-expect-error: fine to set other things.
        this[field] = options[field];
      }
    }
  }

  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   *
   * @returns {string | undefined}
   *   Basename.
   */
  get basename() {
    return typeof this.path === 'string'
      ? minpath.basename(this.path)
      : undefined
  }

  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} basename
   *   Basename.
   * @returns {undefined}
   *   Nothing.
   */
  set basename(basename) {
    assertNonEmpty(basename, 'basename');
    assertPart(basename, 'basename');
    this.path = minpath.join(this.dirname || '', basename);
  }

  /**
   * Get the parent path (example: `'~'`).
   *
   * @returns {string | undefined}
   *   Dirname.
   */
  get dirname() {
    return typeof this.path === 'string'
      ? minpath.dirname(this.path)
      : undefined
  }

  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} dirname
   *   Dirname.
   * @returns {undefined}
   *   Nothing.
   */
  set dirname(dirname) {
    assertPath(this.basename, 'dirname');
    this.path = minpath.join(dirname || '', this.basename);
  }

  /**
   * Get the extname (including dot) (example: `'.js'`).
   *
   * @returns {string | undefined}
   *   Extname.
   */
  get extname() {
    return typeof this.path === 'string'
      ? minpath.extname(this.path)
      : undefined
  }

  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} extname
   *   Extname.
   * @returns {undefined}
   *   Nothing.
   */
  set extname(extname) {
    assertPart(extname, 'extname');
    assertPath(this.dirname, 'extname');

    if (extname) {
      if (extname.codePointAt(0) !== 46 /* `.` */) {
        throw new Error('`extname` must start with `.`')
      }

      if (extname.includes('.', 1)) {
        throw new Error('`extname` cannot contain multiple dots')
      }
    }

    this.path = minpath.join(this.dirname, this.stem + (extname || ''));
  }

  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   *   Path.
   */
  get path() {
    return this.history[this.history.length - 1]
  }

  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {URL | string} path
   *   Path.
   * @returns {undefined}
   *   Nothing.
   */
  set path(path) {
    if (isUrl(path)) {
      path = urlToPath(path);
    }

    assertNonEmpty(path, 'path');

    if (this.path !== path) {
      this.history.push(path);
    }
  }

  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   *
   * @returns {string | undefined}
   *   Stem.
   */
  get stem() {
    return typeof this.path === 'string'
      ? minpath.basename(this.path, this.extname)
      : undefined
  }

  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} stem
   *   Stem.
   * @returns {undefined}
   *   Nothing.
   */
  set stem(stem) {
    assertNonEmpty(stem, 'stem');
    assertPart(stem, 'stem');
    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''));
  }

  // Normal prototypal methods.
  /**
   * Create a fatal message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `true` (error; file not usable)
   * and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Never.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(causeOrReason, optionsOrParentOrPlace, origin) {
    // @ts-expect-error: the overloads are fine.
    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);

    message.fatal = true;

    throw message
  }

  /**
   * Create an info message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `undefined` (info; change
   * likely not needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(causeOrReason, optionsOrParentOrPlace, origin) {
    // @ts-expect-error: the overloads are fine.
    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);

    message.fatal = undefined;

    return message
  }

  /**
   * Create a message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `false` (warning; change may be
   * needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = new VFileMessage(
      // @ts-expect-error: the overloads are fine.
      causeOrReason,
      optionsOrParentOrPlace,
      origin
    );

    if (this.path) {
      message.name = this.path + ':' + message.name;
      message.file = this.path;
    }

    message.fatal = false;

    this.messages.push(message);

    return message
  }

  /**
   * Serialize the file.
   *
   * > **Note**: which encodings are supported depends on the engine.
   * > For info on Node.js, see:
   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
   *
   * @param {string | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Uint8Array`
   *   (default: `'utf-8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(encoding) {
    if (this.value === undefined) {
      return ''
    }

    if (typeof this.value === 'string') {
      return this.value
    }

    const decoder = new TextDecoder(encoding || undefined);
    return decoder.decode(this.value)
  }
}

/**
 * Assert that `part` is not a path (as in, does not contain `path.sep`).
 *
 * @param {string | null | undefined} part
 *   File path part.
 * @param {string} name
 *   Part name.
 * @returns {undefined}
 *   Nothing.
 */
function assertPart(part, name) {
  if (part && part.includes(minpath.sep)) {
    throw new Error(
      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'
    )
  }
}

/**
 * Assert that `part` is not empty.
 *
 * @param {string | undefined} part
 *   Thing.
 * @param {string} name
 *   Part name.
 * @returns {asserts part is string}
 *   Nothing.
 */
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error('`' + name + '` cannot be empty')
  }
}

/**
 * Assert `path` exists.
 *
 * @param {string | undefined} path
 *   Path.
 * @param {string} name
 *   Dependency name.
 * @returns {asserts path is string}
 *   Nothing.
 */
function assertPath(path, name) {
  if (!path) {
    throw new Error('Setting `' + name + '` requires `path` to be set too')
  }
}

/**
 * Assert `value` is an `Uint8Array`.
 *
 * @param {unknown} value
 *   thing.
 * @returns {value is Uint8Array}
 *   Whether `value` is an `Uint8Array`.
 */
function isUint8Array$1(value) {
  return Boolean(
    value &&
      typeof value === 'object' &&
      'byteLength' in value &&
      'byteOffset' in value
  )
}

const CallableInstance =
  /**
   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
   */
  (
    /** @type {unknown} */
    (
      /**
       * @this {Function}
       * @param {string | symbol} property
       * @returns {(...parameters: Array<unknown>) => unknown}
       */
      function (property) {
        const self = this;
        const constr = self.constructor;
        const proto = /** @type {Record<string | symbol, Function>} */ (
          // Prototypes do exist.
          // type-coverage:ignore-next-line
          constr.prototype
        );
        const value = proto[property];
        /** @type {(...parameters: Array<unknown>) => unknown} */
        const apply = function () {
          return value.apply(apply, arguments)
        };

        Object.setPrototypeOf(apply, proto);

        // Not needed for us in `unified`: we only call this on the `copy`
        // function,
        // and we don't need to add its fields (`length`, `name`)
        // over.
        // See also: GH-246.
        // const names = Object.getOwnPropertyNames(value)
        //
        // for (const p of names) {
        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)
        //   if (descriptor) Object.defineProperty(apply, p, descriptor)
        // }

        return apply
      }
    )
  );

/**
 * @typedef {import('trough').Pipeline} Pipeline
 *
 * @typedef {import('unist').Node} Node
 *
 * @typedef {import('vfile').Compatible} Compatible
 * @typedef {import('vfile').Value} Value
 *
 * @typedef {import('../index.js').CompileResultMap} CompileResultMap
 * @typedef {import('../index.js').Data} Data
 * @typedef {import('../index.js').Settings} Settings
 */


// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.

// To do: we could start yielding `never` in TS when a parser is missing and
// `parse` is called.
// Currently, we allow directly setting `processor.parser`, which is untyped.

const own = {}.hasOwnProperty;

/**
 * @template {Node | undefined} [ParseTree=undefined]
 *   Output of `parse` (optional).
 * @template {Node | undefined} [HeadTree=undefined]
 *   Input for `run` (optional).
 * @template {Node | undefined} [TailTree=undefined]
 *   Output for `run` (optional).
 * @template {Node | undefined} [CompileTree=undefined]
 *   Input of `stringify` (optional).
 * @template {CompileResults | undefined} [CompileResult=undefined]
 *   Output of `stringify` (optional).
 * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}
 */
class Processor extends CallableInstance {
  /**
   * Create a processor.
   */
  constructor() {
    // If `Processor()` is called (w/o new), `copy` is called instead.
    super('copy');

    /**
     * Compiler to use (deprecated).
     *
     * @deprecated
     *   Use `compiler` instead.
     * @type {(
     *   Compiler<
     *     CompileTree extends undefined ? Node : CompileTree,
     *     CompileResult extends undefined ? CompileResults : CompileResult
     *   > |
     *   undefined
     * )}
     */
    this.Compiler = undefined;

    /**
     * Parser to use (deprecated).
     *
     * @deprecated
     *   Use `parser` instead.
     * @type {(
     *   Parser<ParseTree extends undefined ? Node : ParseTree> |
     *   undefined
     * )}
     */
    this.Parser = undefined;

    // Note: the following fields are considered private.
    // However, they are needed for tests, and TSC generates an untyped
    // `private freezeIndex` field for, which trips `type-coverage` up.
    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.
    /**
     * Internal list of configured plugins.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {Array<PluginTuple<Array<unknown>>>}
     */
    this.attachers = [];

    /**
     * Compiler to use.
     *
     * @type {(
     *   Compiler<
     *     CompileTree extends undefined ? Node : CompileTree,
     *     CompileResult extends undefined ? CompileResults : CompileResult
     *   > |
     *   undefined
     * )}
     */
    this.compiler = undefined;

    /**
     * Internal state to track where we are while freezing.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {number}
     */
    this.freezeIndex = -1;

    /**
     * Internal state to track whether we’re frozen.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {boolean | undefined}
     */
    this.frozen = undefined;

    /**
     * Internal state.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {Data}
     */
    this.namespace = {};

    /**
     * Parser to use.
     *
     * @type {(
     *   Parser<ParseTree extends undefined ? Node : ParseTree> |
     *   undefined
     * )}
     */
    this.parser = undefined;

    /**
     * Internal list of configured transformers.
     *
     * @deprecated
     *   This is a private internal property and should not be used.
     * @type {Pipeline}
     */
    this.transformers = trough();
  }

  /**
   * Copy a processor.
   *
   * @deprecated
   *   This is a private internal method and should not be used.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   New *unfrozen* processor ({@linkcode Processor}) that is
   *   configured to work the same as its ancestor.
   *   When the descendant processor is configured in the future it does not
   *   affect the ancestral processor.
   */
  copy() {
    // Cast as the type parameters will be the same after attaching.
    const destination =
      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (
        new Processor()
      );
    let index = -1;

    while (++index < this.attachers.length) {
      const attacher = this.attachers[index];
      destination.use(...attacher);
    }

    destination.data(extend(true, {}, this.namespace));

    return destination
  }

  /**
   * Configure the processor with info available to all plugins.
   * Information is stored in an object.
   *
   * Typically, options can be given to a specific plugin, but sometimes it
   * makes sense to have information shared with several plugins.
   * For example, a list of HTML elements that are self-closing, which is
   * needed during all phases.
   *
   * > **Note**: setting information cannot occur on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * > **Note**: to register custom data in TypeScript, augment the
   * > {@linkcode Data} interface.
   *
   * @example
   *   This example show how to get and set info:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   const processor = unified().data('alpha', 'bravo')
   *
   *   processor.data('alpha') // => 'bravo'
   *
   *   processor.data() // => {alpha: 'bravo'}
   *
   *   processor.data({charlie: 'delta'})
   *
   *   processor.data() // => {charlie: 'delta'}
   *   ```
   *
   * @template {keyof Data} Key
   *
   * @overload
   * @returns {Data}
   *
   * @overload
   * @param {Data} dataset
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Key} key
   * @returns {Data[Key]}
   *
   * @overload
   * @param {Key} key
   * @param {Data[Key]} value
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @param {Data | Key} [key]
   *   Key to get or set, or entire dataset to set, or nothing to get the
   *   entire dataset (optional).
   * @param {Data[Key]} [value]
   *   Value to set (optional).
   * @returns {unknown}
   *   The current processor when setting, the value at `key` when getting, or
   *   the entire dataset when getting without key.
   */
  data(key, value) {
    if (typeof key === 'string') {
      // Set `key`.
      if (arguments.length === 2) {
        assertUnfrozen('data', this.frozen);
        this.namespace[key] = value;
        return this
      }

      // Get `key`.
      return (own.call(this.namespace, key) && this.namespace[key]) || undefined
    }

    // Set space.
    if (key) {
      assertUnfrozen('data', this.frozen);
      this.namespace = key;
      return this
    }

    // Get space.
    return this.namespace
  }

  /**
   * Freeze a processor.
   *
   * Frozen processors are meant to be extended and not to be configured
   * directly.
   *
   * When a processor is frozen it cannot be unfrozen.
   * New processors working the same way can be created by calling the
   * processor.
   *
   * It’s possible to freeze processors explicitly by calling `.freeze()`.
   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
   * `.stringify()`, `.process()`, or `.processSync()` are called.
   *
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   The current processor.
   */
  freeze() {
    if (this.frozen) {
      return this
    }

    // Cast so that we can type plugins easier.
    // Plugins are supposed to be usable on different processors, not just on
    // this exact processor.
    const self = /** @type {Processor} */ (/** @type {unknown} */ (this));

    while (++this.freezeIndex < this.attachers.length) {
      const [attacher, ...options] = this.attachers[this.freezeIndex];

      if (options[0] === false) {
        continue
      }

      if (options[0] === true) {
        options[0] = undefined;
      }

      const transformer = attacher.call(self, ...options);

      if (typeof transformer === 'function') {
        this.transformers.use(transformer);
      }
    }

    this.frozen = true;
    this.freezeIndex = Number.POSITIVE_INFINITY;

    return this
  }

  /**
   * Parse text to a syntax tree.
   *
   * > **Note**: `parse` freezes the processor if not already *frozen*.
   *
   * > **Note**: `parse` performs the parse phase, not the run phase or other
   * > phases.
   *
   * @param {Compatible | undefined} [file]
   *   file to parse (optional); typically `string` or `VFile`; any value
   *   accepted as `x` in `new VFile(x)`.
   * @returns {ParseTree extends undefined ? Node : ParseTree}
   *   Syntax tree representing `file`.
   */
  parse(file) {
    this.freeze();
    const realFile = vfile(file);
    const parser = this.parser || this.Parser;
    assertParser('parse', parser);
    return parser(String(realFile), realFile)
  }

  /**
   * Process the given file as configured on the processor.
   *
   * > **Note**: `process` freezes the processor if not already *frozen*.
   *
   * > **Note**: `process` performs the parse, run, and stringify phases.
   *
   * @overload
   * @param {Compatible | undefined} file
   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
   * @returns {undefined}
   *
   * @overload
   * @param {Compatible | undefined} [file]
   * @returns {Promise<VFileWithOutput<CompileResult>>}
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`]; any value accepted as
   *   `x` in `new VFile(x)`.
   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
   *   Callback (optional).
   * @returns {Promise<VFile> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise a promise, rejected with a fatal error or resolved with the
   *   processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  process(file, done) {
    const self = this;

    this.freeze();
    assertParser('process', this.parser || this.Parser);
    assertCompiler('process', this.compiler || this.Compiler);

    return done ? executor(undefined, done) : new Promise(executor)

    // Note: `void`s needed for TS.
    /**
     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve
     * @param {(error: Error | undefined) => undefined | void} reject
     * @returns {undefined}
     */
    function executor(resolve, reject) {
      const realFile = vfile(file);
      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the
      // input of the first transform).
      const parseTree =
        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (
          /** @type {unknown} */ (self.parse(realFile))
        );

      self.run(parseTree, realFile, function (error, tree, file) {
        if (error || !tree || !file) {
          return realDone(error)
        }

        // Assume `TailTree` (the output of the last transform) matches
        // `CompileTree` (the input of the compiler).
        const compileTree =
          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (
            /** @type {unknown} */ (tree)
          );

        const compileResult = self.stringify(compileTree, file);

        if (looksLikeAValue(compileResult)) {
          file.value = compileResult;
        } else {
          file.result = compileResult;
        }

        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file));
      });

      /**
       * @param {Error | undefined} error
       * @param {VFileWithOutput<CompileResult> | undefined} [file]
       * @returns {undefined}
       */
      function realDone(error, file) {
        if (error || !file) {
          reject(error);
        } else if (resolve) {
          resolve(file);
        } else {
          done(undefined, file);
        }
      }
    }
  }

  /**
   * Process the given file as configured on the processor.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `processSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `processSync` performs the parse, run, and stringify phases.
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`; any value accepted as
   *   `x` in `new VFile(x)`.
   * @returns {VFileWithOutput<CompileResult>}
   *   The processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  processSync(file) {
    /** @type {boolean} */
    let complete = false;
    /** @type {VFileWithOutput<CompileResult> | undefined} */
    let result;

    this.freeze();
    assertParser('processSync', this.parser || this.Parser);
    assertCompiler('processSync', this.compiler || this.Compiler);

    this.process(file, realDone);
    assertDone('processSync', 'process', complete);

    return result

    /**
     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}
     */
    function realDone(error, file) {
      complete = true;
      bail(error);
      result = file;
    }
  }

  /**
   * Run *transformers* on a syntax tree.
   *
   * > **Note**: `run` freezes the processor if not already *frozen*.
   *
   * > **Note**: `run` performs the run phase, not other phases.
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} file
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} [file]
   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {(
   *   RunCallback<TailTree extends undefined ? Node : TailTree> |
   *   Compatible
   * )} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
   *   Callback (optional).
   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise, a promise rejected with a fatal error or resolved with the
   *   transformed tree.
   */
  run(tree, file, done) {
    assertNode(tree);
    this.freeze();

    const transformers = this.transformers;

    if (!done && typeof file === 'function') {
      done = file;
      file = undefined;
    }

    return done ? executor(undefined, done) : new Promise(executor)

    // Note: `void`s needed for TS.
    /**
     * @param {(
     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |
     *   undefined
     * )} resolve
     * @param {(error: Error) => undefined | void} reject
     * @returns {undefined}
     */
    function executor(resolve, reject) {
      const realFile = vfile(file);
      transformers.run(tree, realFile, realDone);

      /**
       * @param {Error | undefined} error
       * @param {Node} outputTree
       * @param {VFile} file
       * @returns {undefined}
       */
      function realDone(error, outputTree, file) {
        const resultingTree =
          /** @type {TailTree extends undefined ? Node : TailTree} */ (
            outputTree || tree
          );

        if (error) {
          reject(error);
        } else if (resolve) {
          resolve(resultingTree);
        } else {
          done(undefined, resultingTree, file);
        }
      }
    }
  }

  /**
   * Run *transformers* on a syntax tree.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `runSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `runSync` performs the run phase, not other phases.
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {TailTree extends undefined ? Node : TailTree}
   *   Transformed tree.
   */
  runSync(tree, file) {
    /** @type {boolean} */
    let complete = false;
    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */
    let result;

    this.run(tree, file, realDone);

    assertDone('runSync', 'run', complete);
    return result

    /**
     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}
     */
    function realDone(error, tree) {
      bail(error);
      result = tree;
      complete = true;
    }
  }

  /**
   * Compile a syntax tree.
   *
   * > **Note**: `stringify` freezes the processor if not already *frozen*.
   *
   * > **Note**: `stringify` performs the stringify phase, not the run phase
   * > or other phases.
   *
   * @param {CompileTree extends undefined ? Node : CompileTree} tree
   *   Tree to compile.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {CompileResult extends undefined ? Value : CompileResult}
   *   Textual representation of the tree (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most compilers
   *   > return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  stringify(tree, file) {
    this.freeze();
    const realFile = vfile(file);
    const compiler = this.compiler || this.Compiler;
    assertCompiler('stringify', compiler);
    assertNode(tree);

    return compiler(tree, realFile)
  }

  /**
   * Configure the processor to use a plugin, a list of usable values, or a
   * preset.
   *
   * If the processor is already using a plugin, the previous plugin
   * configuration is changed based on the options that are passed in.
   * In other words, the plugin is not added a second time.
   *
   * > **Note**: `use` cannot be called on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * @example
   *   There are many ways to pass plugins to `.use()`.
   *   This example gives an overview:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   unified()
   *     // Plugin with options:
   *     .use(pluginA, {x: true, y: true})
   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
   *     .use(pluginA, {y: false, z: true})
   *     // Plugins:
   *     .use([pluginB, pluginC])
   *     // Two plugins, the second with options:
   *     .use([pluginD, [pluginE, {}]])
   *     // Preset with plugins and settings:
   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
   *     // Settings only:
   *     .use({settings: {position: false}})
   *   ```
   *
   * @template {Array<unknown>} [Parameters=[]]
   * @template {Node | string | undefined} [Input=undefined]
   * @template [Output=Input]
   *
   * @overload
   * @param {Preset | null | undefined} [preset]
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {PluggableList} list
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Plugin<Parameters, Input, Output>} plugin
   * @param {...(Parameters | [boolean])} parameters
   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
   *
   * @param {PluggableList | Plugin | Preset | null | undefined} value
   *   Usable value.
   * @param {...unknown} parameters
   *   Parameters, when a plugin is given as a usable value.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   Current processor.
   */
  use(value, ...parameters) {
    const attachers = this.attachers;
    const namespace = this.namespace;

    assertUnfrozen('use', this.frozen);

    if (value === null || value === undefined) ; else if (typeof value === 'function') {
      addPlugin(value, parameters);
    } else if (typeof value === 'object') {
      if (Array.isArray(value)) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new TypeError('Expected usable value, not `' + value + '`')
    }

    return this

    /**
     * @param {Pluggable} value
     * @returns {undefined}
     */
    function add(value) {
      if (typeof value === 'function') {
        addPlugin(value, []);
      } else if (typeof value === 'object') {
        if (Array.isArray(value)) {
          const [plugin, ...parameters] =
            /** @type {PluginTuple<Array<unknown>>} */ (value);
          addPlugin(plugin, parameters);
        } else {
          addPreset(value);
        }
      } else {
        throw new TypeError('Expected usable value, not `' + value + '`')
      }
    }

    /**
     * @param {Preset} result
     * @returns {undefined}
     */
    function addPreset(result) {
      if (!('plugins' in result) && !('settings' in result)) {
        throw new Error(
          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'
        )
      }

      addList(result.plugins);

      if (result.settings) {
        namespace.settings = extend(true, namespace.settings, result.settings);
      }
    }

    /**
     * @param {PluggableList | null | undefined} plugins
     * @returns {undefined}
     */
    function addList(plugins) {
      let index = -1;

      if (plugins === null || plugins === undefined) ; else if (Array.isArray(plugins)) {
        while (++index < plugins.length) {
          const thing = plugins[index];
          add(thing);
        }
      } else {
        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')
      }
    }

    /**
     * @param {Plugin} plugin
     * @param {Array<unknown>} parameters
     * @returns {undefined}
     */
    function addPlugin(plugin, parameters) {
      let index = -1;
      let entryIndex = -1;

      while (++index < attachers.length) {
        if (attachers[index][0] === plugin) {
          entryIndex = index;
          break
        }
      }

      if (entryIndex === -1) {
        attachers.push([plugin, ...parameters]);
      }
      // Only set if there was at least a `primary` value, otherwise we’d change
      // `arguments.length`.
      else if (parameters.length > 0) {
        let [primary, ...rest] = parameters;
        const currentPrimary = attachers[entryIndex][1];
        if (isPlainObject(currentPrimary) && isPlainObject(primary)) {
          primary = extend(true, currentPrimary, primary);
        }

        attachers[entryIndex] = [plugin, primary, ...rest];
      }
    }
  }
}

// Note: this returns a *callable* instance.
// That’s why it’s documented as a function.
/**
 * Create a new processor.
 *
 * @example
 *   This example shows how a new processor can be created (from `remark`) and linked
 *   to **stdin**(4) and **stdout**(4).
 *
 *   ```js
 *   import process from 'node:process'
 *   import concatStream from 'concat-stream'
 *   import {remark} from 'remark'
 *
 *   process.stdin.pipe(
 *     concatStream(function (buf) {
 *       process.stdout.write(String(remark().processSync(buf)))
 *     })
 *   )
 *   ```
 *
 * @returns
 *   New *unfrozen* processor (`processor`).
 *
 *   This processor is configured to work the same as its ancestor.
 *   When the descendant processor is configured in the future it does not
 *   affect the ancestral processor.
 */
const unified = new Processor().freeze();

/**
 * Assert a parser is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Parser}
 */
function assertParser(name, value) {
  if (typeof value !== 'function') {
    throw new TypeError('Cannot `' + name + '` without `parser`')
  }
}

/**
 * Assert a compiler is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Compiler}
 */
function assertCompiler(name, value) {
  if (typeof value !== 'function') {
    throw new TypeError('Cannot `' + name + '` without `compiler`')
  }
}

/**
 * Assert the processor is not frozen.
 *
 * @param {string} name
 * @param {unknown} frozen
 * @returns {asserts frozen is false}
 */
function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error(
      'Cannot call `' +
        name +
        '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'
    )
  }
}

/**
 * Assert `node` is a unist node.
 *
 * @param {unknown} node
 * @returns {asserts node is Node}
 */
function assertNode(node) {
  // `isPlainObj` unfortunately uses `any` instead of `unknown`.
  // type-coverage:ignore-next-line
  if (!isPlainObject(node) || typeof node.type !== 'string') {
    throw new TypeError('Expected node, got `' + node + '`')
    // Fine.
  }
}

/**
 * Assert that `complete` is `true`.
 *
 * @param {string} name
 * @param {string} asyncName
 * @param {unknown} complete
 * @returns {asserts complete is true}
 */
function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error(
      '`' + name + '` finished async. Use `' + asyncName + '` instead'
    )
  }
}

/**
 * @param {Compatible | undefined} [value]
 * @returns {VFile}
 */
function vfile(value) {
  return looksLikeAVFile(value) ? value : new VFile(value)
}

/**
 * @param {Compatible | undefined} [value]
 * @returns {value is VFile}
 */
function looksLikeAVFile(value) {
  return Boolean(
    value &&
      typeof value === 'object' &&
      'message' in value &&
      'messages' in value
  )
}

/**
 * @param {unknown} [value]
 * @returns {value is Value}
 */
function looksLikeAValue(value) {
  return typeof value === 'string' || isUint8Array(value)
}

/**
 * Assert `value` is an `Uint8Array`.
 *
 * @param {unknown} value
 *   thing.
 * @returns {value is Uint8Array}
 *   Whether `value` is an `Uint8Array`.
 */
function isUint8Array(value) {
  return Boolean(
    value &&
      typeof value === 'object' &&
      'byteLength' in value &&
      'byteOffset' in value
  )
}

/**
 * @import {Element, Nodes, Parents, Root} from 'hast'
 * @import {Root as MdastRoot} from 'mdast'
 * @import {ComponentType, JSX, ReactElement, ReactNode} from 'react'
 * @import {Options as RemarkRehypeOptions} from 'remark-rehype'
 * @import {BuildVisitor} from 'unist-util-visit'
 * @import {PluggableList, Processor} from 'unified'
 */


/** @type {PluggableList} */
const emptyPlugins = [];
/** @type {Readonly<RemarkRehypeOptions>} */
const emptyRemarkRehypeOptions = {allowDangerousHtml: true};
const safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i;

// Mutable because we `delete` any time it’s used and a message is sent.
/** @type {ReadonlyArray<Readonly<Deprecation>>} */
const deprecations = [
  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},
  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},
  {
    from: 'allowNode',
    id: 'replace-allownode-allowedtypes-and-disallowedtypes',
    to: 'allowElement'
  },
  {
    from: 'allowedTypes',
    id: 'replace-allownode-allowedtypes-and-disallowedtypes',
    to: 'allowedElements'
  },
  {from: 'className', id: 'remove-classname'},
  {
    from: 'disallowedTypes',
    id: 'replace-allownode-allowedtypes-and-disallowedtypes',
    to: 'disallowedElements'
  },
  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},
  {from: 'includeElementIndex', id: '#remove-includeelementindex'},
  {
    from: 'includeNodeIndex',
    id: 'change-includenodeindex-to-includeelementindex'
  },
  {from: 'linkTarget', id: 'remove-linktarget'},
  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},
  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},
  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},
  {from: 'source', id: 'change-source-to-children', to: 'children'},
  {from: 'sourcePos', id: '#remove-sourcepos'},
  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},
  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}
];

/**
 * Component to render markdown.
 *
 * This is a synchronous component.
 * When using async plugins,
 * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.
 *
 * @param {Readonly<Options>} options
 *   Props.
 * @returns {ReactElement}
 *   React element.
 */
function Markdown(options) {
  const processor = createProcessor(options);
  const file = createFile(options);
  return post(processor.runSync(processor.parse(file), file), options)
}

/**
 * Set up the `unified` processor.
 *
 * @param {Readonly<Options>} options
 *   Props.
 * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}
 *   Result.
 */
function createProcessor(options) {
  const rehypePlugins = options.rehypePlugins || emptyPlugins;
  const remarkPlugins = options.remarkPlugins || emptyPlugins;
  const remarkRehypeOptions = options.remarkRehypeOptions
    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}
    : emptyRemarkRehypeOptions;

  const processor = unified()
    .use(remarkParse)
    .use(remarkPlugins)
    .use(remarkRehype, remarkRehypeOptions)
    .use(rehypePlugins);

  return processor
}

/**
 * Set up the virtual file.
 *
 * @param {Readonly<Options>} options
 *   Props.
 * @returns {VFile}
 *   Result.
 */
function createFile(options) {
  const children = options.children || '';
  const file = new VFile();

  if (typeof children === 'string') {
    file.value = children;
  }

  return file
}

/**
 * Process the result from unified some more.
 *
 * @param {Nodes} tree
 *   Tree.
 * @param {Readonly<Options>} options
 *   Props.
 * @returns {ReactElement}
 *   React element.
 */
function post(tree, options) {
  const allowedElements = options.allowedElements;
  const allowElement = options.allowElement;
  const components = options.components;
  const disallowedElements = options.disallowedElements;
  const skipHtml = options.skipHtml;
  const unwrapDisallowed = options.unwrapDisallowed;
  const urlTransform = options.urlTransform || defaultUrlTransform;

  for (const deprecation of deprecations) {
  }

  visit(tree, transform);

  return toJsxRuntime(tree, {
    Fragment: jsxRuntimeExports.Fragment,
    components,
    ignoreInvalidStyle: true,
    jsx: jsxRuntimeExports.jsx,
    jsxs: jsxRuntimeExports.jsxs,
    passKeys: true,
    passNode: true
  })

  /** @type {BuildVisitor<Root>} */
  function transform(node, index, parent) {
    if (node.type === 'raw' && parent && typeof index === 'number') {
      if (skipHtml) {
        parent.children.splice(index, 1);
      } else {
        parent.children[index] = {type: 'text', value: node.value};
      }

      return index
    }

    if (node.type === 'element') {
      /** @type {string} */
      let key;

      for (key in urlAttributes) {
        if (
          Object.hasOwn(urlAttributes, key) &&
          Object.hasOwn(node.properties, key)
        ) {
          const value = node.properties[key];
          const test = urlAttributes[key];
          if (test === null || test.includes(node.tagName)) {
            node.properties[key] = urlTransform(String(value || ''), key, node);
          }
        }
      }
    }

    if (node.type === 'element') {
      let remove = allowedElements
        ? !allowedElements.includes(node.tagName)
        : disallowedElements
          ? disallowedElements.includes(node.tagName)
          : false;

      if (!remove && allowElement && typeof index === 'number') {
        remove = !allowElement(node, index, parent);
      }

      if (remove && parent && typeof index === 'number') {
        if (unwrapDisallowed && node.children) {
          parent.children.splice(index, 1, ...node.children);
        } else {
          parent.children.splice(index, 1);
        }

        return index
      }
    }
  }
}

/**
 * Make a URL safe.
 *
 * @satisfies {UrlTransform}
 * @param {string} value
 *   URL.
 * @returns {string}
 *   Safe URL.
 */
function defaultUrlTransform(value) {
  // Same as:
  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>
  // But without the `encode` part.
  const colon = value.indexOf(':');
  const questionMark = value.indexOf('?');
  const numberSign = value.indexOf('#');
  const slash = value.indexOf('/');

  if (
    // If there is no protocol, it’s relative.
    colon === -1 ||
    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
    (slash !== -1 && colon > slash) ||
    (questionMark !== -1 && colon > questionMark) ||
    (numberSign !== -1 && colon > numberSign) ||
    // It is a protocol, it should be allowed.
    safeProtocol.test(value.slice(0, colon))
  ) {
    return value
  }

  return ''
}

const byteToHex = [];
for (let i = 0; i < 256; ++i) {
    byteToHex.push((i + 0x100).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
    return (byteToHex[arr[offset + 0]] +
        byteToHex[arr[offset + 1]] +
        byteToHex[arr[offset + 2]] +
        byteToHex[arr[offset + 3]] +
        '-' +
        byteToHex[arr[offset + 4]] +
        byteToHex[arr[offset + 5]] +
        '-' +
        byteToHex[arr[offset + 6]] +
        byteToHex[arr[offset + 7]] +
        '-' +
        byteToHex[arr[offset + 8]] +
        byteToHex[arr[offset + 9]] +
        '-' +
        byteToHex[arr[offset + 10]] +
        byteToHex[arr[offset + 11]] +
        byteToHex[arr[offset + 12]] +
        byteToHex[arr[offset + 13]] +
        byteToHex[arr[offset + 14]] +
        byteToHex[arr[offset + 15]]).toLowerCase();
}

let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
    if (!getRandomValues) {
        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {
            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
        getRandomValues = crypto.getRandomValues.bind(crypto);
    }
    return getRandomValues(rnds8);
}

const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native = { randomUUID };

function v4(options, buf, offset) {
    if (native.randomUUID && true && !options) {
        return native.randomUUID();
    }
    options = options || {};
    const rnds = options.random ?? options.rng?.() ?? rng();
    if (rnds.length < 16) {
        throw new Error('Random bytes length must be >= 16');
    }
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;
    return unsafeStringify(rnds);
}

const VERSION = 'current';

function assertConnection(falcon) {
    if (!falcon.isConnected) {
        throw new Error('You cannot call this API before having established a connection to the host!');
    }
}
function isValidResponse(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
event) {
    return !!event?.data?.meta?.messageId;
}

const CONNECTION_TIMEOUT = 5_000;
const API_TIMEOUT = 30_000;
const NAVIGATION_TIMEOUT = 5_000;
function timeoutForMessage(message) {
    const timeout = message.type === 'connect'
        ? CONNECTION_TIMEOUT
        : message.type === 'api'
            ? API_TIMEOUT
            : message.type === 'navigateTo'
                ? NAVIGATION_TIMEOUT
                : // Requests not explicitly covered above will not have a timeout. This includes 'fileUpload', which is a user interaction that can take any amount of time.
                    null;
    // In tests we have mocked responses which do not require long timeouts
    return timeout;
}
class Bridge {
    onDataUpdate;
    onBroadcast;
    onLivereload;
    pendingMessages = new Map();
    targetOrigin = '*';
    constructor({ onDataUpdate, onBroadcast, onLivereload, } = {}) {
        this.onDataUpdate = onDataUpdate;
        this.onBroadcast = onBroadcast;
        this.onLivereload = onLivereload;
        window.addEventListener('message', this.handleMessageWrapper);
    }
    destroy() {
        window.removeEventListener('message', this.handleMessageWrapper);
    }
    setOrigin(origin) {
        this.targetOrigin = origin;
    }
    sendUnidirectionalMessage(message) {
        const messageId = v4();
        const eventData = {
            message,
            meta: {
                messageId,
                version: VERSION,
            },
        };
        window.parent.postMessage(eventData, this.targetOrigin);
    }
    async postMessage(message) {
        return new Promise((resolve, reject) => {
            const messageId = v4();
            let timeoutTimer;
            const timeoutValue = timeoutForMessage(message);
            if (timeoutValue !== null) {
                timeoutTimer = setTimeout(() => {
                    reject(new Error(`Waiting for response from foundry host for "${message.type}" message (ID: ${messageId}) timed out after ${timeoutValue}ms`));
                }, timeoutValue);
            }
            this.pendingMessages.set(messageId, (result) => {
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }
                resolve(result);
            });
            const eventData = {
                message,
                meta: {
                    messageId,
                    version: VERSION,
                },
            };
            window.parent.postMessage(eventData, this.targetOrigin);
        });
    }
    handleMessageWrapper = (event) => {
        return this.handleMessage(event);
    };
    handleMessage = (event) => {
        if (!isValidResponse(event)) {
            return;
        }
        const { message } = event.data;
        if (message.type === 'data') {
            this.onDataUpdate?.(message);
            // data update events are unidirectional and originated from the host, so there cannot be a callback waiting for this message
            return;
        }
        if (message.type === 'broadcast') {
            this.onBroadcast?.(message);
            // data update events are unidirectional and are proxied via the host, so there cannot be a callback waiting for this message
            return;
        }
        if (message.type === 'livereload') {
            this.onLivereload?.(message);
            // livereload events are unidirectional and are proxied via the host, so there cannot be a callback waiting for this message
            return;
        }
        const { messageId } = event.data.meta;
        const callback = this.pendingMessages.get(messageId);
        if (!callback) {
            this.throwError(`Received unexpected message`);
            return;
        }
        this.pendingMessages.delete(messageId);
        callback(message.payload);
    };
    throwError(message) {
        throw new Error(message);
    }
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const anyMap = new WeakMap();
const eventsMap = new WeakMap();
const producersMap = new WeakMap();

const anyProducer = Symbol('anyProducer');
const resolvedPromise = Promise.resolve();

// Define symbols for "meta" events.
const listenerAdded = Symbol('listenerAdded');
const listenerRemoved = Symbol('listenerRemoved');

let canEmitMetaEvents = false;
let isGlobalDebugEnabled = false;

const isEventKeyType = key => typeof key === 'string' || typeof key === 'symbol' || typeof key === 'number';

function assertEventName(eventName) {
	if (!isEventKeyType(eventName)) {
		throw new TypeError('`eventName` must be a string, symbol, or number');
	}
}

function assertListener(listener) {
	if (typeof listener !== 'function') {
		throw new TypeError('listener must be a function');
	}
}

function getListeners(instance, eventName) {
	const events = eventsMap.get(instance);
	if (!events.has(eventName)) {
		return;
	}

	return events.get(eventName);
}

function getEventProducers(instance, eventName) {
	const key = isEventKeyType(eventName) ? eventName : anyProducer;
	const producers = producersMap.get(instance);
	if (!producers.has(key)) {
		return;
	}

	return producers.get(key);
}

function enqueueProducers(instance, eventName, eventData) {
	const producers = producersMap.get(instance);
	if (producers.has(eventName)) {
		for (const producer of producers.get(eventName)) {
			producer.enqueue(eventData);
		}
	}

	if (producers.has(anyProducer)) {
		const item = Promise.all([eventName, eventData]);
		for (const producer of producers.get(anyProducer)) {
			producer.enqueue(item);
		}
	}
}

function iterator(instance, eventNames) {
	eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];

	let isFinished = false;
	let flush = () => {};
	let queue = [];

	const producer = {
		enqueue(item) {
			queue.push(item);
			flush();
		},
		finish() {
			isFinished = true;
			flush();
		},
	};

	for (const eventName of eventNames) {
		let set = getEventProducers(instance, eventName);
		if (!set) {
			set = new Set();
			const producers = producersMap.get(instance);
			producers.set(eventName, set);
		}

		set.add(producer);
	}

	return {
		async next() {
			if (!queue) {
				return {done: true};
			}

			if (queue.length === 0) {
				if (isFinished) {
					queue = undefined;
					return this.next();
				}

				await new Promise(resolve => {
					flush = resolve;
				});

				return this.next();
			}

			return {
				done: false,
				value: await queue.shift(),
			};
		},

		async return(value) {
			queue = undefined;

			for (const eventName of eventNames) {
				const set = getEventProducers(instance, eventName);
				if (set) {
					set.delete(producer);
					if (set.size === 0) {
						const producers = producersMap.get(instance);
						producers.delete(eventName);
					}
				}
			}

			flush();

			return arguments.length > 0
				? {done: true, value: await value}
				: {done: true};
		},

		[Symbol.asyncIterator]() {
			return this;
		},
	};
}

function defaultMethodNamesOrAssert(methodNames) {
	if (methodNames === undefined) {
		return allEmitteryMethods;
	}

	if (!Array.isArray(methodNames)) {
		throw new TypeError('`methodNames` must be an array of strings');
	}

	for (const methodName of methodNames) {
		if (!allEmitteryMethods.includes(methodName)) {
			if (typeof methodName !== 'string') {
				throw new TypeError('`methodNames` element must be a string');
			}

			throw new Error(`${methodName} is not Emittery method`);
		}
	}

	return methodNames;
}

const isMetaEvent = eventName => eventName === listenerAdded || eventName === listenerRemoved;

function emitMetaEvent(emitter, eventName, eventData) {
	if (!isMetaEvent(eventName)) {
		return;
	}

	try {
		canEmitMetaEvents = true;
		emitter.emit(eventName, eventData);
	} finally {
		canEmitMetaEvents = false;
	}
}

class Emittery {
	static mixin(emitteryPropertyName, methodNames) {
		methodNames = defaultMethodNamesOrAssert(methodNames);
		return target => {
			if (typeof target !== 'function') {
				throw new TypeError('`target` must be function');
			}

			for (const methodName of methodNames) {
				if (target.prototype[methodName] !== undefined) {
					throw new Error(`The property \`${methodName}\` already exists on \`target\``);
				}
			}

			function getEmitteryProperty() {
				Object.defineProperty(this, emitteryPropertyName, {
					enumerable: false,
					value: new Emittery(),
				});
				return this[emitteryPropertyName];
			}

			Object.defineProperty(target.prototype, emitteryPropertyName, {
				enumerable: false,
				get: getEmitteryProperty,
			});

			const emitteryMethodCaller = methodName => function (...args) {
				return this[emitteryPropertyName][methodName](...args);
			};

			for (const methodName of methodNames) {
				Object.defineProperty(target.prototype, methodName, {
					enumerable: false,
					value: emitteryMethodCaller(methodName),
				});
			}

			return target;
		};
	}

	static get isDebugEnabled() {
		// In a browser environment, `globalThis.process` can potentially reference a DOM Element with a `#process` ID,
		// so instead of just type checking `globalThis.process`, we need to make sure that `globalThis.process.env` exists.
		// eslint-disable-next-line n/prefer-global/process
		if (typeof globalThis.process?.env !== 'object') {
			return isGlobalDebugEnabled;
		}

		// eslint-disable-next-line n/prefer-global/process
		const {env} = globalThis.process ?? {env: {}};
		return env.DEBUG === 'emittery' || env.DEBUG === '*' || isGlobalDebugEnabled;
	}

	static set isDebugEnabled(newValue) {
		isGlobalDebugEnabled = newValue;
	}

	constructor(options = {}) {
		anyMap.set(this, new Set());
		eventsMap.set(this, new Map());
		producersMap.set(this, new Map());

		producersMap.get(this).set(anyProducer, new Set());

		this.debug = options.debug ?? {};

		if (this.debug.enabled === undefined) {
			this.debug.enabled = false;
		}

		if (!this.debug.logger) {
			this.debug.logger = (type, debugName, eventName, eventData) => {
				try {
					// TODO: Use https://github.com/sindresorhus/safe-stringify when the package is more mature. Just copy-paste the code.
					eventData = JSON.stringify(eventData);
				} catch {
					eventData = `Object with the following keys failed to stringify: ${Object.keys(eventData).join(',')}`;
				}

				if (typeof eventName === 'symbol' || typeof eventName === 'number') {
					eventName = eventName.toString();
				}

				const currentTime = new Date();
				const logTime = `${currentTime.getHours()}:${currentTime.getMinutes()}:${currentTime.getSeconds()}.${currentTime.getMilliseconds()}`;
				console.log(`[${logTime}][emittery:${type}][${debugName}] Event Name: ${eventName}\n\tdata: ${eventData}`);
			};
		}
	}

	logIfDebugEnabled(type, eventName, eventData) {
		if (Emittery.isDebugEnabled || this.debug.enabled) {
			this.debug.logger(type, this.debug.name, eventName, eventData);
		}
	}

	on(eventNames, listener, {signal} = {}) {
		assertListener(listener);

		eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];
		for (const eventName of eventNames) {
			assertEventName(eventName);
			let set = getListeners(this, eventName);
			if (!set) {
				set = new Set();
				const events = eventsMap.get(this);
				events.set(eventName, set);
			}

			set.add(listener);

			this.logIfDebugEnabled('subscribe', eventName, undefined);

			if (!isMetaEvent(eventName)) {
				emitMetaEvent(this, listenerAdded, {eventName, listener});
			}
		}

		const off = () => {
			this.off(eventNames, listener);
			signal?.removeEventListener('abort', off);
		};

		signal?.addEventListener('abort', off, {once: true});

		if (signal?.aborted) {
			off();
		}

		return off;
	}

	off(eventNames, listener) {
		assertListener(listener);

		eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];
		for (const eventName of eventNames) {
			assertEventName(eventName);
			const set = getListeners(this, eventName);
			if (set) {
				set.delete(listener);
				if (set.size === 0) {
					const events = eventsMap.get(this);
					events.delete(eventName);
				}
			}

			this.logIfDebugEnabled('unsubscribe', eventName, undefined);

			if (!isMetaEvent(eventName)) {
				emitMetaEvent(this, listenerRemoved, {eventName, listener});
			}
		}
	}

	once(eventNames, predicate) {
		if (predicate !== undefined && typeof predicate !== 'function') {
			throw new TypeError('predicate must be a function');
		}

		let off_;

		const promise = new Promise(resolve => {
			off_ = this.on(eventNames, data => {
				if (predicate && !predicate(data)) {
					return;
				}

				off_();
				resolve(data);
			});
		});

		promise.off = off_;
		return promise;
	}

	events(eventNames) {
		eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];
		for (const eventName of eventNames) {
			assertEventName(eventName);
		}

		return iterator(this, eventNames);
	}

	async emit(eventName, eventData) {
		assertEventName(eventName);

		if (isMetaEvent(eventName) && !canEmitMetaEvents) {
			throw new TypeError('`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`');
		}

		this.logIfDebugEnabled('emit', eventName, eventData);

		enqueueProducers(this, eventName, eventData);

		const listeners = getListeners(this, eventName) ?? new Set();
		const anyListeners = anyMap.get(this);
		const staticListeners = [...listeners];
		const staticAnyListeners = isMetaEvent(eventName) ? [] : [...anyListeners];

		await resolvedPromise;
		await Promise.all([
			...staticListeners.map(async listener => {
				if (listeners.has(listener)) {
					return listener(eventData);
				}
			}),
			...staticAnyListeners.map(async listener => {
				if (anyListeners.has(listener)) {
					return listener(eventName, eventData);
				}
			}),
		]);
	}

	async emitSerial(eventName, eventData) {
		assertEventName(eventName);

		if (isMetaEvent(eventName) && !canEmitMetaEvents) {
			throw new TypeError('`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`');
		}

		this.logIfDebugEnabled('emitSerial', eventName, eventData);

		const listeners = getListeners(this, eventName) ?? new Set();
		const anyListeners = anyMap.get(this);
		const staticListeners = [...listeners];
		const staticAnyListeners = [...anyListeners];

		await resolvedPromise;
		/* eslint-disable no-await-in-loop */
		for (const listener of staticListeners) {
			if (listeners.has(listener)) {
				await listener(eventData);
			}
		}

		for (const listener of staticAnyListeners) {
			if (anyListeners.has(listener)) {
				await listener(eventName, eventData);
			}
		}
		/* eslint-enable no-await-in-loop */
	}

	onAny(listener, {signal} = {}) {
		assertListener(listener);

		this.logIfDebugEnabled('subscribeAny', undefined, undefined);

		anyMap.get(this).add(listener);
		emitMetaEvent(this, listenerAdded, {listener});

		const offAny = () => {
			this.offAny(listener);
			signal?.removeEventListener('abort', offAny);
		};

		signal?.addEventListener('abort', offAny, {once: true});

		if (signal?.aborted) {
			offAny();
		}

		return offAny;
	}

	anyEvent() {
		return iterator(this);
	}

	offAny(listener) {
		assertListener(listener);

		this.logIfDebugEnabled('unsubscribeAny', undefined, undefined);

		emitMetaEvent(this, listenerRemoved, {listener});
		anyMap.get(this).delete(listener);
	}

	clearListeners(eventNames) {
		eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];

		for (const eventName of eventNames) {
			this.logIfDebugEnabled('clear', eventName, undefined);

			if (isEventKeyType(eventName)) {
				const set = getListeners(this, eventName);
				if (set) {
					set.clear();
				}

				const producers = getEventProducers(this, eventName);
				if (producers) {
					for (const producer of producers) {
						producer.finish();
					}

					producers.clear();
				}
			} else {
				anyMap.get(this).clear();

				for (const [eventName, listeners] of eventsMap.get(this).entries()) {
					listeners.clear();
					eventsMap.get(this).delete(eventName);
				}

				for (const [eventName, producers] of producersMap.get(this).entries()) {
					for (const producer of producers) {
						producer.finish();
					}

					producers.clear();
					producersMap.get(this).delete(eventName);
				}
			}
		}
	}

	listenerCount(eventNames) {
		eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];
		let count = 0;

		for (const eventName of eventNames) {
			if (isEventKeyType(eventName)) {
				count += anyMap.get(this).size
					+ (getListeners(this, eventName)?.size ?? 0)
					+ (getEventProducers(this, eventName)?.size ?? 0)
					+ (getEventProducers(this)?.size ?? 0);

				continue;
			}

			if (eventName !== undefined) {
				assertEventName(eventName);
			}

			count += anyMap.get(this).size;

			for (const value of eventsMap.get(this).values()) {
				count += value.size;
			}

			for (const value of producersMap.get(this).values()) {
				count += value.size;
			}
		}

		return count;
	}

	bindMethods(target, methodNames) {
		if (typeof target !== 'object' || target === null) {
			throw new TypeError('`target` must be an object');
		}

		methodNames = defaultMethodNamesOrAssert(methodNames);

		for (const methodName of methodNames) {
			if (target[methodName] !== undefined) {
				throw new Error(`The property \`${methodName}\` already exists on \`target\``);
			}

			Object.defineProperty(target, methodName, {
				enumerable: false,
				value: this[methodName].bind(this),
			});
		}
	}
}

const allEmitteryMethods = Object.getOwnPropertyNames(Emittery.prototype).filter(v => v !== 'constructor');

Object.defineProperty(Emittery, 'listenerAdded', {
	value: listenerAdded,
	writable: false,
	enumerable: true,
	configurable: false,
});
Object.defineProperty(Emittery, 'listenerRemoved', {
	value: listenerRemoved,
	writable: false,
	enumerable: true,
	configurable: false,
});

function Memoize(args) {
    let hashFunction;
    let duration;
    let tags;
    {
        hashFunction = args;
    }
    return (target, propertyKey, descriptor) => {
        if (descriptor.value != null) {
            descriptor.value = getNewFunction(descriptor.value, hashFunction, duration, tags);
        }
        else if (descriptor.get != null) {
            descriptor.get = getNewFunction(descriptor.get, hashFunction, duration, tags);
        }
        else {
            throw 'Only put a Memoize() decorator on a method or get accessor.';
        }
    };
}
const clearCacheTagsMap = new Map();
function getNewFunction(originalMethod, hashFunction, duration = 0, tags) {
    const propMapName = Symbol(`__memoized_map__`);
    return function (...args) {
        let returnedValue;
        if (!this.hasOwnProperty(propMapName)) {
            Object.defineProperty(this, propMapName, {
                configurable: false,
                enumerable: false,
                writable: false,
                value: new Map()
            });
        }
        let myMap = this[propMapName];
        if (Array.isArray(tags)) {
            for (const tag of tags) {
                if (clearCacheTagsMap.has(tag)) {
                    clearCacheTagsMap.get(tag).push(myMap);
                }
                else {
                    clearCacheTagsMap.set(tag, [myMap]);
                }
            }
        }
        if (hashFunction || args.length > 0 || duration > 0) {
            let hashKey;
            if (hashFunction === true) {
                hashKey = args.map(a => a.toString()).join('!');
            }
            else if (hashFunction) {
                hashKey = hashFunction.apply(this, args);
            }
            else {
                hashKey = args[0];
            }
            const timestampKey = `${hashKey}__timestamp`;
            let isExpired = false;
            if (duration > 0) {
                if (!myMap.has(timestampKey)) {
                    isExpired = true;
                }
                else {
                    let timestamp = myMap.get(timestampKey);
                    isExpired = (Date.now() - timestamp) > duration;
                }
            }
            if (myMap.has(hashKey) && !isExpired) {
                returnedValue = myMap.get(hashKey);
            }
            else {
                returnedValue = originalMethod.apply(this, args);
                myMap.set(hashKey, returnedValue);
                if (duration > 0) {
                    myMap.set(timestampKey, Date.now());
                }
            }
        }
        else {
            const hashKey = this;
            if (myMap.has(hashKey)) {
                returnedValue = myMap.get(hashKey);
            }
            else {
                returnedValue = originalMethod.apply(this, args);
                myMap.set(hashKey, returnedValue);
            }
        }
        return returnedValue;
    };
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class AlertsApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async deleteEntitiesSuppressedDevicesV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'deleteEntitiesSuppressedDevicesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    /**
     * @deprecated This method is deprecated. Use getQueriesAlertsV2 instead.
     */
    async getQueriesAlertsV1(urlParams = {}) {
        console.warn('This method is deprecated. Use getQueriesAlertsV2 instead.');
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'getQueriesAlertsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesAlertsV2(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'getQueriesAlertsV2',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    /**
     * @deprecated This method is deprecated. Use patchCombinedAlertsV3 instead.
     */
    async patchCombinedAlertsV2(postBody, urlParams = {}) {
        console.warn('This method is deprecated. Use patchCombinedAlertsV3 instead.');
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'patchCombinedAlertsV2',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async patchCombinedAlertsV3(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'patchCombinedAlertsV3',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    /**
     * @deprecated This method is deprecated. Use patchEntitiesAlertsV3 instead.
     */
    async patchEntitiesAlertsV2(postBody, urlParams = {}) {
        console.warn('This method is deprecated. Use patchEntitiesAlertsV3 instead.');
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'patchEntitiesAlertsV2',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async patchEntitiesAlertsV3(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'patchEntitiesAlertsV3',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async patchEntitiesSuppressedDevicesV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'patchEntitiesSuppressedDevicesV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    /**
     * @deprecated This method is deprecated. Use postAggregatesAlertsV2 instead.
     */
    async postAggregatesAlertsV1(postBody, urlParams = {}) {
        console.warn('This method is deprecated. Use postAggregatesAlertsV2 instead.');
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'postAggregatesAlertsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postAggregatesAlertsV2(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'postAggregatesAlertsV2',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    /**
     * @deprecated This method is deprecated. Use postEntitiesAlertsV2 instead.
     */
    async postEntitiesAlertsV1(postBody, urlParams = {}) {
        console.warn('This method is deprecated. Use postEntitiesAlertsV2 instead.');
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'postEntitiesAlertsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesAlertsV2(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'postEntitiesAlertsV2',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesSuppressedDevicesV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'alerts',
            method: 'postEntitiesSuppressedDevicesV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class CustomobjectsApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async deleteV1CollectionsCollectionNameObjectsObjectKey(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'customobjects',
            method: 'deleteV1CollectionsCollectionNameObjectsObjectKey',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getV1Collections(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'customobjects',
            method: 'getV1Collections',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getV1CollectionsCollectionNameObjects(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'customobjects',
            method: 'getV1CollectionsCollectionNameObjects',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getV1CollectionsCollectionNameObjectsObjectKey(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'customobjects',
            method: 'getV1CollectionsCollectionNameObjectsObjectKey',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getV1CollectionsCollectionNameObjectsObjectKeyMetadata(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'customobjects',
            method: 'getV1CollectionsCollectionNameObjectsObjectKeyMetadata',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postV1CollectionsCollectionNameObjects(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'customobjects',
            method: 'postV1CollectionsCollectionNameObjects',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async putV1CollectionsCollectionNameObjectsObjectKey(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'customobjects',
            method: 'putV1CollectionsCollectionNameObjectsObjectKey',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class DetectsApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async getEntitiesSuppressedDevicesV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'detects',
            method: 'getEntitiesSuppressedDevicesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async patchEntitiesDetectsV2(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'detects',
            method: 'patchEntitiesDetectsV2',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async patchQueriesDetectsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'detects',
            method: 'patchQueriesDetectsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async patchQueriesDetectsV2(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'detects',
            method: 'patchQueriesDetectsV2',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postAggregatesDetectsGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'detects',
            method: 'postAggregatesDetectsGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesSummariesGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'detects',
            method: 'postEntitiesSummariesGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesSuppressedDevicesV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'detects',
            method: 'postEntitiesSuppressedDevicesV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class DevicesApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async deleteEntitiesGroupsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'deleteEntitiesGroupsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getAggregatesBucketsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getAggregatesBucketsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getAggregatesFgaTagPrefixCountsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getAggregatesFgaTagPrefixCountsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getAggregatesTagPrefixCountsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getAggregatesTagPrefixCountsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesDevicesV1(urlParams) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getEntitiesDevicesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesFgaGroupsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getEntitiesFgaGroupsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesGroupsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getEntitiesGroupsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesAvailableGroupsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getQueriesAvailableGroupsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesDevicesHiddenV2(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getQueriesDevicesHiddenV2',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesDevicesV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getQueriesDevicesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesDevicesV2(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getQueriesDevicesV2',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesFgaGroupsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getQueriesFgaGroupsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesGroupsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'getQueriesGroupsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async patchEntitiesDevicesTagsV2(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'patchEntitiesDevicesTagsV2',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async patchEntitiesDevicesV1(postBody, urlParams) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'patchEntitiesDevicesV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async patchEntitiesGroupsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'patchEntitiesGroupsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postAggregatesDevicesGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postAggregatesDevicesGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postAggregatesFgaHostsGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postAggregatesFgaHostsGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postCombinedDevicesLoginHistoryV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postCombinedDevicesLoginHistoryV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postCombinedFgaHostsLoginHistoryV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postCombinedFgaHostsLoginHistoryV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesDevicesActionsV4(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postEntitiesDevicesActionsV4',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesDevicesHiddenActionsV4(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postEntitiesDevicesHiddenActionsV4',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesDevicesReportsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postEntitiesDevicesReportsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesDevicesV1(postBody, urlParams) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postEntitiesDevicesV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesDevicesV2(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postEntitiesDevicesV2',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesFgaHostsReportsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postEntitiesFgaHostsReportsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesFgaHostsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postEntitiesFgaHostsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesGroupActionsV1(postBody, urlParams) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postEntitiesGroupActionsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesGroupsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'devices',
            method: 'postEntitiesGroupsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class FaasGatewayApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async getEntitiesExecutionV1(urlParams) {
        const message = {
            type: 'api',
            api: 'faasGateway',
            method: 'getEntitiesExecutionV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesExecutionV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'faasGateway',
            method: 'postEntitiesExecutionV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class FwmgrApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async deleteEntitiesNetworkLocationsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'deleteEntitiesNetworkLocationsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async deleteEntitiesPoliciesV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'deleteEntitiesPoliciesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async deleteEntitiesRuleGroupsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'deleteEntitiesRuleGroupsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesEventsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getEntitiesEventsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesFirewallFieldsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getEntitiesFirewallFieldsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesNetworkLocationsDetailsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getEntitiesNetworkLocationsDetailsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesNetworkLocationsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getEntitiesNetworkLocationsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesPlatformsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getEntitiesPlatformsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesPoliciesV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getEntitiesPoliciesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesRuleGroupsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getEntitiesRuleGroupsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesRulesV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getEntitiesRulesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getLibraryEntitiesRuleGroupsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getLibraryEntitiesRuleGroupsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getLibraryQueriesRuleGroupsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getLibraryQueriesRuleGroupsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesEventsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getQueriesEventsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesFirewallFieldsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getQueriesFirewallFieldsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesNetworkLocationsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getQueriesNetworkLocationsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesPlatformsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getQueriesPlatformsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesPolicyRulesV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getQueriesPolicyRulesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesRuleGroupsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getQueriesRuleGroupsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesRulesV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'getQueriesRulesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async patchEntitiesNetworkLocationsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'patchEntitiesNetworkLocationsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async patchEntitiesRuleGroupsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'patchEntitiesRuleGroupsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postAggregatesEventsGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'postAggregatesEventsGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postAggregatesPolicyRulesGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'postAggregatesPolicyRulesGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postAggregatesRuleGroupsGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'postAggregatesRuleGroupsGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postAggregatesRulesGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'postAggregatesRulesGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesNetworkLocationsMetadataV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'postEntitiesNetworkLocationsMetadataV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesNetworkLocationsPrecedenceV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'postEntitiesNetworkLocationsPrecedenceV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesNetworkLocationsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'postEntitiesNetworkLocationsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesOntologyV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'postEntitiesOntologyV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesRuleGroupsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'postEntitiesRuleGroupsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesRulesValidateFilepathV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'postEntitiesRulesValidateFilepathV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async putEntitiesNetworkLocationsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'putEntitiesNetworkLocationsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async putEntitiesPoliciesV2(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'fwmgr',
            method: 'putEntitiesPoliciesV2',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class IncidentsApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async getCombinedCrowdscoresV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'incidents',
            method: 'getCombinedCrowdscoresV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesBehaviorsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'incidents',
            method: 'getQueriesBehaviorsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesIncidentsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'incidents',
            method: 'getQueriesIncidentsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postAggregatesBehaviorsGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'incidents',
            method: 'postAggregatesBehaviorsGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postAggregatesIncidentsGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'incidents',
            method: 'postAggregatesIncidentsGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesBehaviorsGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'incidents',
            method: 'postEntitiesBehaviorsGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesIncidentActionsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'incidents',
            method: 'postEntitiesIncidentActionsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesIncidentsGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'incidents',
            method: 'postEntitiesIncidentsGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class LoggingapiApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async getEntitiesSavedSearchesExecuteV1(urlParams) {
        const message = {
            type: 'api',
            api: 'loggingapi',
            method: 'getEntitiesSavedSearchesExecuteV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesSavedSearchesV1(urlParams) {
        const message = {
            type: 'api',
            api: 'loggingapi',
            method: 'getEntitiesSavedSearchesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesSavedSearchesExecuteV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'loggingapi',
            method: 'postEntitiesSavedSearchesExecuteV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class MitreApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async getIntelMitreEntitiesMatrixV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'mitre',
            method: 'getIntelMitreEntitiesMatrixV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class PluginsApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async getEntitiesConfigsV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'plugins',
            method: 'getEntitiesConfigsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesDefinitionsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'plugins',
            method: 'getEntitiesDefinitionsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesExecuteDraftV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'plugins',
            method: 'postEntitiesExecuteDraftV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesExecuteV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'plugins',
            method: 'postEntitiesExecuteV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class RemoteResponseApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async deleteEntitiesPutFilesV1(urlParams) {
        const message = {
            type: 'api',
            api: 'remoteResponse',
            method: 'deleteEntitiesPutFilesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesAppCommandV1(urlParams) {
        const message = {
            type: 'api',
            api: 'remoteResponse',
            method: 'getEntitiesAppCommandV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getEntitiesPutFilesV2(urlParams) {
        const message = {
            type: 'api',
            api: 'remoteResponse',
            method: 'getEntitiesPutFilesV2',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async getQueriesPutFilesV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'remoteResponse',
            method: 'getQueriesPutFilesV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesAppCommandV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'remoteResponse',
            method: 'postEntitiesAppCommandV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesAppSessionsV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'remoteResponse',
            method: 'postEntitiesAppSessionsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class UserManagementApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async getQueriesUsersV1(urlParams = {}) {
        const message = {
            type: 'api',
            api: 'userManagement',
            method: 'getQueriesUsersV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesUsersGetV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'userManagement',
            method: 'postEntitiesUsersGetV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class WorkflowsApiBridge {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    getBridge() {
        return this.bridge;
    }
    async getEntitiesExecutionResultsV1(urlParams) {
        const message = {
            type: 'api',
            api: 'workflows',
            method: 'getEntitiesExecutionResultsV1',
            payload: {
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesExecuteV1(postBody, urlParams = {}) {
        const message = {
            type: 'api',
            api: 'workflows',
            method: 'postEntitiesExecuteV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
    async postEntitiesExecutionActionsV1(postBody, urlParams) {
        const message = {
            type: 'api',
            api: 'workflows',
            method: 'postEntitiesExecutionActionsV1',
            payload: {
                body: postBody,
                params: urlParams,
            },
        };
        return this.bridge.postMessage(message);
    }
}

/**
 *
 * This file is autogenerated.
 *
 * DO NOT EDIT DIRECTLY
 *
 **/
class FalconPublicApis {
    api;
    constructor(api) {
        this.api = api;
    }
    get alerts() {
        assertConnection(this.api);
        return new AlertsApiBridge(this.api.bridge);
    }
    get detects() {
        assertConnection(this.api);
        return new DetectsApiBridge(this.api.bridge);
    }
    get devices() {
        assertConnection(this.api);
        return new DevicesApiBridge(this.api.bridge);
    }
    get fwmgr() {
        assertConnection(this.api);
        return new FwmgrApiBridge(this.api.bridge);
    }
    get incidents() {
        assertConnection(this.api);
        return new IncidentsApiBridge(this.api.bridge);
    }
    get mitre() {
        assertConnection(this.api);
        return new MitreApiBridge(this.api.bridge);
    }
    /**
     * @internal
     */
    get plugins() {
        assertConnection(this.api);
        return new PluginsApiBridge(this.api.bridge);
    }
    get remoteResponse() {
        assertConnection(this.api);
        return new RemoteResponseApiBridge(this.api.bridge);
    }
    get userManagement() {
        assertConnection(this.api);
        return new UserManagementApiBridge(this.api.bridge);
    }
    get workflows() {
        assertConnection(this.api);
        return new WorkflowsApiBridge(this.api.bridge);
    }
    /**
     * @internal
     */
    get customobjects() {
        assertConnection(this.api);
        return new CustomobjectsApiBridge(this.api.bridge);
    }
    /**
     * @internal
     */
    get faasGateway() {
        assertConnection(this.api);
        return new FaasGatewayApiBridge(this.api.bridge);
    }
    /**
     * @internal
     */
    get loggingapi() {
        assertConnection(this.api);
        return new LoggingapiApiBridge(this.api.bridge);
    }
}
__decorate([
    Memoize()
], FalconPublicApis.prototype, "alerts", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "detects", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "devices", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "fwmgr", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "incidents", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "mitre", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "plugins", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "remoteResponse", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "userManagement", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "workflows", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "customobjects", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "faasGateway", null);
__decorate([
    Memoize()
], FalconPublicApis.prototype, "loggingapi", null);

class ApiIntegration {
    falcon;
    definition;
    constructor(falcon, definition) {
        this.falcon = falcon;
        this.definition = definition;
    }
    async execute({ request } = {}) {
        return this.falcon.api.plugins.postEntitiesExecuteV1({
            resources: [
                {
                    definition_id: this.definition.definitionId,
                    operation_id: this.definition.operationId,
                    request,
                },
            ],
        });
    }
}

class CloudFunction {
    falcon;
    definition;
    static GET = 'GET';
    static POST = 'POST';
    static PATCH = 'PATCH';
    static PUT = 'PUT';
    static DELETE = 'DELETE';
    /**
     * @internal
     */
    pollTimeout = 500;
    /**
     * @internal
     */
    intervalId;
    /**
     * @internal
     */
    constructor(falcon, definition) {
        this.falcon = falcon;
        this.definition = definition;
    }
    async execute({ path, method, body, params }) {
        const functionDefinition = 'id' in this.definition
            ? {
                function_id: this.definition.id,
                function_version: this.definition.version,
            }
            : {
                function_name: this.definition.name,
                function_version: this.definition.version,
            };
        const result = await this.falcon.api.faasGateway.postEntitiesExecutionV1({
            ...functionDefinition,
            payload: {
                path,
                method,
                body,
                params,
            },
        });
        return new Promise((resolve, reject) => {
            const execution = result?.resources?.[0];
            if (!execution?.execution_id) {
                reject(result?.errors);
            }
            else {
                this.pollForResult({
                    resolve,
                    reject,
                    executionId: execution?.execution_id,
                });
            }
        });
    }
    async getExecutionResult(executionId) {
        const resultResponse = await this.falcon.api.faasGateway.getEntitiesExecutionV1({
            id: executionId,
        });
        const executionResult = resultResponse?.resources?.[0];
        return executionResult?.payload;
    }
    pollForResult({ resolve, reject, executionId, }) {
        let exceptionRetries = 2;
        this.intervalId = window.setInterval(async () => {
            try {
                const payload = await this.getExecutionResult(executionId);
                if (payload) {
                    window.clearInterval(this.intervalId);
                    resolve(payload);
                }
            }
            catch (e) {
                if (exceptionRetries <= 0) {
                    window.clearInterval(this.intervalId);
                    reject(e);
                }
                exceptionRetries--;
            }
        }, this.pollTimeout);
    }
    path(pathEntry) {
        const urlPath = new URL(pathEntry, 'http://localhost');
        const path = urlPath.pathname;
        const searchParams = [...urlPath.searchParams.entries()].reduce((acc, [key, value]) => ({
            ...acc,
            [key]: [value],
        }), {});
        return {
            path,
            queryParams: searchParams,
            get: async (params = {}) => {
                return this.get({
                    path,
                    params: {
                        query: params?.query ?? searchParams ?? {},
                        header: params?.header ?? {},
                    },
                });
            },
            post: async (body, params = {}) => {
                return this.post({
                    path,
                    params: {
                        query: params?.query ?? searchParams ?? {},
                        header: params?.header ?? {},
                    },
                    body,
                });
            },
            patch: async (body, params = {}) => {
                return this.patch({
                    path,
                    params: {
                        query: params?.query ?? searchParams ?? {},
                        header: params?.header ?? {},
                    },
                    body,
                });
            },
            put: async (body, params = {}) => {
                return this.put({
                    path,
                    params: {
                        query: params?.query ?? searchParams ?? {},
                        header: params?.header ?? {},
                    },
                    body,
                });
            },
            delete: async (body, params = {}) => {
                return this.delete({
                    path,
                    params: {
                        query: params?.query ?? searchParams ?? {},
                        header: params?.header ?? {},
                    },
                    body,
                });
            },
        };
    }
    async get({ path, params }) {
        return this.execute({
            path,
            method: CloudFunction.GET,
            params,
        });
    }
    async post({ path, params, body }) {
        return this.execute({
            path,
            method: CloudFunction.POST,
            body,
            params,
        });
    }
    async patch({ path, params, body }) {
        return this.execute({
            path,
            method: CloudFunction.PATCH,
            body,
            params,
        });
    }
    async put({ path, params, body }) {
        return this.execute({
            path,
            method: CloudFunction.PUT,
            body,
            params,
        });
    }
    async delete({ path, params, body }) {
        return this.execute({
            path,
            method: CloudFunction.DELETE,
            body,
            params,
        });
    }
    destroy() {
        if (this.intervalId) {
            window.clearInterval(this.intervalId);
            this.intervalId = undefined;
        }
    }
}

class Collection {
    falcon;
    definition;
    constructor(falcon, definition) {
        this.falcon = falcon;
        this.definition = definition;
    }
    /**
     * Write data to the collection
     *
     * @param key
     * @param data
     * @returns
     */
    async write(key, data) {
        return this.falcon.bridge.postMessage({
            type: 'collection',
            payload: {
                type: 'write',
                key,
                collection: this.definition.collection,
                data,
            },
        });
    }
    /**
     * Read the data for the given `key`
     *
     * @param key
     * @returns
     */
    async read(key) {
        return this.falcon.bridge.postMessage({
            type: 'collection',
            payload: {
                type: 'read',
                key,
                collection: this.definition.collection,
            },
        });
    }
    /**
     * Delete the data for the given `key`
     *
     * @param key
     * @returns
     */
    async delete(key) {
        return this.falcon.bridge.postMessage({
            type: 'collection',
            payload: {
                type: 'delete',
                key,
                collection: this.definition.collection,
            },
        });
    }
    /**
     * Search for data
     *
     * @param searchDefinition
     * @returns
     */
    async search({ filter, offset, sort, limit, }) {
        return this.falcon.bridge.postMessage({
            type: 'collection',
            payload: {
                type: 'search',
                filter,
                limit,
                offset,
                sort,
                collection: this.definition.collection,
            },
        });
    }
    /**
     * lists the object keys in the specified collection
     *
     * @param searchDefinition
     * @returns
     */
    async list(options) {
        return this.falcon.bridge.postMessage({
            type: 'collection',
            payload: {
                type: 'list',
                collection: this.definition.collection,
                start: options?.start,
                end: options?.end,
                limit: options?.limit,
            },
        });
    }
}

class Logscale {
    falcon;
    constructor(falcon) {
        this.falcon = falcon;
    }
    /**
     * Write data to LogScale
     *
     * @param data
     * @param properties
     * @returns
     */
    async write(
    // @todo the proper type here is unclear  - we need to make clear how the user needs to call this
    data, properties) {
        return this.falcon.bridge.postMessage({
            type: 'loggingapi',
            payload: {
                type: 'ingest',
                data,
                tag: properties?.tag,
                tagSource: properties?.tagSource,
                testData: properties?.testData,
            },
        });
    }
    /**
     * Execute a dynamic query
     *
     * @param query
     * @returns Promise that resolves with the data
     */
    async query(
    // @todo the proper type here is unclear  - we need to make clear how the user needs to call this
    query) {
        return this.falcon.bridge.postMessage({
            type: 'loggingapi',
            payload: {
                type: 'dynamic-execute',
                data: query,
            },
        });
    }
    /**
     * Execute a saved query
     *
     * @param savedQuery
     * @returns
     */
    async savedQuery(
    // @todo the proper type here is unclear  - we need to make clear how the user needs to call this
    savedQuery) {
        return this.falcon.bridge.postMessage({
            type: 'loggingapi',
            payload: {
                type: 'saved-query-execute',
                data: savedQuery,
            },
        });
    }
}

const ALLOWED_TARGETS = ['_self', '_blank'];
class Navigation {
    falcon;
    constructor(falcon) {
        this.falcon = falcon;
    }
    async navigateTo({ path, type, target, metaKey, ctrlKey, shiftKey, }) {
        await this.falcon.bridge.postMessage({
            type: 'navigateTo',
            payload: {
                path,
                type: type ?? 'falcon',
                target: target ?? '_self',
                metaKey: metaKey ?? false,
                ctrlKey: ctrlKey ?? false,
                shiftKey: shiftKey ?? false,
            },
        });
    }
    async onClick(event, defaultTarget = '_self', defaultType = 'falcon') {
        if (!(event instanceof Event)) {
            throw Error('"event" property should be subclass of Event');
        }
        if (!('preventDefault' in event)) {
            return;
        }
        if (!(event.target instanceof HTMLAnchorElement)) {
            return;
        }
        event.preventDefault();
        const path = event.target.getAttribute('href');
        defaultTarget =
            event.target.getAttribute('target') ??
                defaultTarget;
        const type = (event.target.dataset?.type ??
            defaultType);
        if (defaultTarget === null ||
            !ALLOWED_TARGETS.includes(defaultTarget)) {
            throw new Error('Target should be _self or _blank');
        }
        const target = defaultTarget;
        if (path === undefined || path === null) {
            throw new Error('Navigation path is missing. Make sure you have added navigation.onClick on the `a` tag and `href` is present.');
        }
        const { metaKey, ctrlKey, shiftKey } = event;
        await this.navigateTo({ path, type, target, metaKey, ctrlKey, shiftKey });
    }
}

/**
 * @internal
 */
class ResizeTracker {
    bridge;
    observer;
    constructor(bridge) {
        this.bridge = bridge;
        this.observer = new ResizeObserver((entries) => this.handleResizeEvent(entries));
        this.observer.observe(document.body);
    }
    handleResizeEvent(entries) {
        const { height } = entries[0].contentRect;
        this.bridge.sendUnidirectionalMessage({
            type: 'resize',
            payload: {
                height,
            },
        });
    }
    destroy() {
        this.observer.disconnect();
    }
}

/**
 * Invoke UI features within the main Falcon Console.
 */
class UI {
    bridge;
    constructor(bridge) {
        this.bridge = bridge;
    }
    /**
     * Open a modal within the Falcon Console, rendering an UI extension of your choice.
     *
     * ```js
     * const result = await api.ui.openModal({ id: '<extension ID as defined in the manifest>', type: 'extension' }, 'Modal title', {
        path: '/foo',
        data: { foo: 'bar' },
        size: 'lg',
        align: 'top',
      });
      ```
     *
     * @param extension The identifier of the extension, consisting of {@link ExtensionIdentifier.id} and {@link ExtensionIdentifier.type}
     * @param title The title to render in the header of the modal
     * @param options
     * @returns a Promise that resolves with the data passed to {@link closeModal}, or `undefined` if the user dismisses it
     */
    async openModal(extension, title, options = {}) {
        const result = await this.bridge.postMessage({
            type: 'openModal',
            payload: {
                extension,
                title,
                options,
            },
        });
        if (result instanceof Error) {
            throw result;
        }
        return result;
    }
    /**
     * Close a modal already opened via {@link openModal}. This can be called both by the extension that is rendered inside the modal or by the extension that opened the modal.
     *
     * @param payload the data to return to the caller that opened the modal as the value of the resolved promise
     */
    closeModal(payload) {
        this.bridge.sendUnidirectionalMessage({
            type: 'closeModal',
            payload,
        });
    }
    /**
     * This opens a file upload modal inside the Falcon Console, to support file uploads, even large binary files.
     *
     * @param fileUploadType the type of file upload
     * @param initialData data that you want to pre-populate the form with
     */
    async uploadFile(fileUploadType, initialData) {
        return this.bridge.postMessage({
            type: 'fileUpload',
            fileUploadType,
            payload: initialData,
        });
    }
}

/**
 * This is the main class and only entrypoint for engaging with the Falcon APIs from an Foundry UI extension or page.
 *
 * At the very minimum, you would have to instantiate the class and connect to the Falcon Console:
 *
 * ```js
 * import FalconApi from '@crowdstrike/foundry-js';
 *
 * const api = new FalconApi();
 *
 * await api.connect();
 * ```
 *
 */
class FalconApi {
    /**
     * @internal
     */
    isConnected = false;
    /**
     * An event emitter that allows you to subscribe to events issued by the Falcon Console.
     *
     * Currently supported event types:
     * * `data`: fires when {@link data} is updated.
     * * `broadcast`: this event is received when another extension of the same app has send a `broadcast` event via {@link sendBroadcast}.
     *
     * ```js
     * api.events.on('data', (newData) => console.log('new data received:', newData));
     * ```
     */
    events = new Emittery();
    /**
     * The "local data" that your extension receives from the Falcon Console. This can vary depending on the state of the Falcon Console and the socket of the extension.
     *
     * At the very least it will contain the data specified by the {@link LocalData} interface.
     */
    data;
    /**
     * @internal
     */
    bridge = new Bridge({
        onDataUpdate: (data) => this.handleDataUpdate(data),
        onBroadcast: (msg) => this.handleBroadcastMessage(msg),
        onLivereload: () => this.handleLivereloadMessage(),
    });
    /**
     * Namespace for all the {@link FalconPublicApis | Falcon Cloud APIs} you have access to with this SDK.
     */
    api = new FalconPublicApis(this);
    /**
     * The {@link UI} class contains methods to invoke UI features within the main Falcon Console.
     */
    ui = new UI(this.bridge);
    resizeTracker;
    cloudFunctions = [];
    apiIntegrations = [];
    collections = [];
    /**
     * Connect to the main Falcon Console from within your UI extension.
     *
     * This establishes a connection to send messages between the extension and the Falcon Console. Only when established you will be able to call other APIs.
     */
    async connect() {
        const response = await this.bridge.postMessage({ type: 'connect' });
        if (response !== undefined) {
            const { data, origin } = response;
            this.bridge.setOrigin(origin);
            this.data = data;
            this.updateTheme(data?.theme);
            this.isConnected = true;
        }
        this.resizeTracker = new ResizeTracker(this.bridge);
        return response;
    }
    /**
     * The ID of the Foundry app this UI extension belongs to.
     */
    get appId() {
        return this.data?.app.id;
    }
    /**
     * Sending broadcast messages is a mechanism for allowing communication between different UI extensions, when they are displayed at the same time.
     * When sending a broadcast message, other extensions need to listen for the `broadcast` event on the {@link events} event emitter.
     *
     * Note that broadcast messages are only dispatched between UI extensions of the same app!
     *
     * @param payload the data you want to send to other UI extensions
     */
    sendBroadcast(payload) {
        this.bridge.sendUnidirectionalMessage({ type: 'broadcast', payload });
    }
    handleDataUpdate(dataMessage) {
        this.data = dataMessage.payload;
        this.updateTheme(this.data.theme);
        this.events.emit('data', this.data);
    }
    handleBroadcastMessage(message) {
        this.events.emit('broadcast', message.payload);
    }
    handleLivereloadMessage() {
        document.location.reload();
    }
    updateTheme(activeTheme) {
        if (!activeTheme) {
            return;
        }
        const inactiveTheme = activeTheme === 'theme-dark' ? 'theme-light' : 'theme-dark';
        document.documentElement.classList.add(activeTheme);
        document.documentElement.classList.remove(inactiveTheme);
    }
    /**
     * Create a {@link CloudFunction} to integrate with Falcon's "Function as a Service" platform.
     *
     * @param definition
     * @returns
     */
    cloudFunction(definition) {
        assertConnection(this);
        const cf = new CloudFunction(this, definition);
        this.cloudFunctions.push(cf);
        return cf;
    }
    /**
     * Create an {@link ApiIntegration} to call external APIs.
     *
     * @param defintition
     * @returns
     */
    apiIntegration({ definitionId, operationId, }) {
        assertConnection(this);
        if (!this.data) {
            throw Error('Data from console is missing');
        }
        const apiIntegration = new ApiIntegration(this, {
            operationId,
            definitionId: definitionId,
        });
        this.apiIntegrations.push(apiIntegration);
        return apiIntegration;
    }
    /**
     * Create a {@link Collection} to write to and query Falcon's custom storage service.
     *
     * @param definition
     * @returns
     */
    collection({ collection }) {
        assertConnection(this);
        const co = new Collection(this, { collection });
        this.collections.push(co);
        return co;
    }
    /**
     * The {@link Navigation} class provides functionality to navigate to other pages.
     */
    get navigation() {
        assertConnection(this);
        return new Navigation(this);
    }
    /**
     * The {@link Logscale} class allows you to read and write to your custom LogScale repository.
     */
    get logscale() {
        assertConnection(this);
        return new Logscale(this);
    }
    destroy() {
        this.cloudFunctions.forEach((cf) => cf.destroy());
        this.resizeTracker?.destroy();
        this.bridge.destroy();
    }
}
__decorate([
    Memoize()
], FalconApi.prototype, "navigation", null);
__decorate([
    Memoize()
], FalconApi.prototype, "logscale", null);

SlTreeItem.define("sl-tree-item");

SlTooltip.define("sl-tooltip");

SlTree.define("sl-tree");

SlVisuallyHidden.define("sl-visually-hidden");

SlTabPanel.define("sl-tab-panel");

SlTag.define("sl-tag");

SlTextarea.define("sl-textarea");

SlTab.define("sl-tab");

SlTabGroup.define("sl-tab-group");

SlSkeleton.define("sl-skeleton");

SlSplitPanel.define("sl-split-panel");

SlSwitch.define("sl-switch");

SlResizeObserver.define("sl-resize-observer");

SlSelect.define("sl-select");

SlSpinner.define("sl-spinner");

SlRange.define("sl-range");

SlRating.define("sl-rating");

SlRelativeTime.define("sl-relative-time");

SlRadioButton.define("sl-radio-button");

SlRadioGroup.define("sl-radio-group");

SlProgressRing.define("sl-progress-ring");

SlQrCode.define("sl-qr-code");

SlRadio.define("sl-radio");

SlOption.define("sl-option");

SlPopup.define("sl-popup");

SlProgressBar.define("sl-progress-bar");

SlMenuLabel.define("sl-menu-label");

SlMutationObserver.define("sl-mutation-observer");

SlInput.define("sl-input");

SlMenu.define("sl-menu");

SlMenuItem.define("sl-menu-item");

SlImageComparer.define("sl-image-comparer");

SlInclude.define("sl-include");

SlIcon.define("sl-icon");

SlIconButton.define("sl-icon-button");

SlFormatBytes.define("sl-format-bytes");

SlFormatDate.define("sl-format-date");

SlFormatNumber.define("sl-format-number");

SlDivider.define("sl-divider");

SlDrawer.define("sl-drawer");

SlDropdown.define("sl-dropdown");

SlCopyButton.define("sl-copy-button");

SlDetails.define("sl-details");

SlDialog.define("sl-dialog");

SlCheckbox.define("sl-checkbox");

SlColorPicker.define("sl-color-picker");

SlCard.define("sl-card");

SlCarousel.define("sl-carousel");

SlCarouselItem.define("sl-carousel-item");

SlBreadcrumbItem.define("sl-breadcrumb-item");

SlButtonGroup.define("sl-button-group");

SlAvatar.define("sl-avatar");

SlBreadcrumb.define("sl-breadcrumb");

SlButton.define("sl-button");

SlAnimatedImage.define("sl-animated-image");

SlBadge.define("sl-badge");

SlAlert.define("sl-alert");

SlAnimation.define("sl-animation");

export { FalconApi, Markdown, React, ReactDOM, badge_default, button_default, card_default, checkbox_default, details_default, divider_default, dropdown_default, icon_default, input_default, jsxDevRuntimeExports, menu_default, menu_item_default, option_default, reactExports, select_default, setBasePath, spinner_default, tab_default, tab_group_default, tab_panel_default, textarea_default, tooltip_default };
//# sourceMappingURL=vendor-mdzentjy849.js.map
