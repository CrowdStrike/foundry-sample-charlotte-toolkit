{"version":3,"file":"index-mdzentjy849.js","sources":["../src/components/ErrorBoundary.tsx","../src/utils/queryTemplates.ts","../src/utils/contextConstants.ts","../src/utils/context/EntityHelpers.ts","../src/utils/context/DomainProcessor.ts","../src/utils/context/FileProcessor.ts","../src/utils/context/IpProcessor.ts","../src/utils/context/MitreProcessor.ts","../src/utils/context/index.ts","../src/hooks/useContextProcessor.ts","../src/utils/copyUtils.ts","../src/utils/security/iocUtils.ts","../src/hooks/useCopyToClipboard.ts","../src/hooks/useCopyManager.ts","../src/utils/socketDetection.ts","../src/hooks/useJsonDataManager.ts","../src/hooks/useTabManager.ts","../src/utils/constants.ts","../src/utils/helpers.ts","../src/services/workflow/types.ts","../src/services/workflow/WorkflowContentExtractor.ts","../src/utils/promptEngineer.ts","../src/services/workflow/WorkflowPayloadBuilder.ts","../src/services/workflow/WorkflowPolling.ts","../src/services/workflow/WorkflowValidator.ts","../src/services/workflow/WorkflowExecutor.ts","../src/components/form/AdvancedOptionsPanel.tsx","../src/components/TruncatedText.tsx","../src/components/form/ContextEntitySelector.tsx","../src/components/form/PromptTextarea.tsx","../src/components/form/SubmitSection.tsx","../src/components/QueryForm.tsx","../src/components/markdown/CodeBlock.tsx","../src/utils/security/iocCore.ts","../src/components/markdown/InlineCode.tsx","../src/components/markdown/index.ts","../src/components/security/IocDisplay.tsx","../src/utils/textFormatting.ts","../src/components/security/MitreDisplay.tsx","../src/utils/universalFormatting.ts","../src/utils/badgeUtils.ts","../src/components/security/StructuredSecurityAnalysis.tsx","../src/components/ResponseDisplay.tsx","../src/components/Home.tsx","../src/hooks/useFalconApi.ts","../src/components/App.tsx","../src/index.ts"],"sourcesContent":["// src/components/ErrorBoundary.tsx\n\nimport { Component, ReactNode } from 'react';\n\nimport type { ErrorInfo, ErrorBoundaryState } from '../types';\n\ninterface ErrorBoundaryProperties {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n}\n\n/**\n * Error Boundary component to catch and handle React errors gracefully\n */\nexport class ErrorBoundary extends Component<ErrorBoundaryProperties, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProperties) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\n    return {\n      hasError: true,\n      error,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    // Error caught by boundary - details available in UI\n\n    this.setState({\n      error,\n      errorInfo,\n    });\n\n    // Call optional error handler\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n  }\n\n  handleReset = (): void => {\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    });\n  };\n\n  render(): ReactNode {\n    if (this.state.hasError) {\n      // Custom fallback UI\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      // Default error UI\n      return (\n        <div \n          className='error-boundary-container p-6 rounded-lg'\n          style={{\n            backgroundColor: 'var(--cs-background-base)',\n            border: '1px solid var(--cs-border-color-light)',\n            borderRadius: 'var(--spacing-base)',\n            padding: 'var(--spacing-3xl)',\n          }}\n        >\n          <div className='flex items-center mb-4'>\n            <div className='flex-shrink-0'>\n              <svg\n                className='h-5 w-5'\n                style={{ color: 'var(--cs-status-error)' }}\n                xmlns='http://www.w3.org/2000/svg'\n                viewBox='0 0 20 20'\n                fill='currentColor'\n              >\n                <path\n                  fillRule='evenodd'\n                  d='M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z'\n                  clipRule='evenodd'\n                />\n              </svg>\n            </div>\n            <div className='ml-3'>\n              <h3 \n                className='text-sm font-medium'\n                style={{ color: 'var(--cs-status-error)' }}\n              >\n                Something went wrong\n              </h3>\n            </div>\n          </div>\n\n          <div \n            className='text-sm mb-4'\n            style={{ color: 'var(--cs-text-primary)' }}\n          >\n            <p>\n              The application encountered an unexpected error. Please try refreshing the page or\n              contact support if the problem persists.\n            </p>\n          </div>\n\n          {this.state.error && (\n            <details className='mb-4'>\n              <summary \n                className='text-sm font-medium cursor-pointer hover:opacity-80'\n                style={{ color: 'var(--cs-status-error)' }}\n              >\n                Error Details\n              </summary>\n              <div \n                className='mt-2 text-xs font-mono p-2 rounded border'\n                style={{\n                  color: 'var(--cs-text-secondary)',\n                  fontFamily: 'var(--font-family-mono)',\n                  backgroundColor: 'var(--cs-background-lighter)',\n                  border: '1px solid var(--cs-border-color-light)',\n                  padding: 'var(--spacing-lg)',\n                  borderRadius: 'var(--spacing-sm)',\n                }}\n              >\n                <div className='mb-2'>\n                  <strong>Error:</strong> {this.state.error.message}\n                </div>\n                {this.state.errorInfo && (\n                  <div>\n                    <strong>Component Stack:</strong>\n                    <pre className='whitespace-pre-wrap mt-1'>\n                      {this.state.errorInfo.componentStack}\n                    </pre>\n                  </div>\n                )}\n              </div>\n            </details>\n          )}\n\n          <div className='flex space-x-3'>\n            <button\n              type='button'\n              onClick={this.handleReset}\n              className='inline-flex items-center px-3 py-2 border shadow-sm text-sm leading-4 font-medium rounded-md hover:opacity-80 focus:outline-none focus:ring-2 focus:ring-offset-2'\n              style={{\n                borderColor: 'var(--cs-border-color-light)',\n                color: 'var(--cs-text-primary)',\n                backgroundColor: 'var(--cs-background-base)',\n                focusRingColor: 'var(--cs-primary)',\n              }}\n            >\n              Try Again\n            </button>\n            <button\n              type='button'\n              onClick={() => window.location.reload()}\n              className='inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md hover:opacity-80 focus:outline-none focus:ring-2 focus:ring-offset-2'\n              style={{\n                color: 'white',\n                backgroundColor: 'var(--cs-status-error)',\n                focusRingColor: 'var(--cs-status-error)',\n              }}\n            >\n              Refresh Page\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","/**\n * Query template utilities for security analysis\n * Provides standardized templates for different types of security investigations\n */\n\n/**\n * Base template structure for security analysis queries\n * Contains placeholders for entity-specific customization\n */\nconst BASE_SECURITY_TEMPLATE = `Conduct a comprehensive security analysis of {entityType} \"{entityValue}\" and provide a structured assessment including:\n\n**🔍 {analysisType} ANALYSIS**\n- {contextSpecific}\n- Threat classification (Malicious/Suspicious/Clean/Unknown)\n- Risk level (Critical/High/Medium/Low)\n\n**⚔️ THREAT INTELLIGENCE**\n- Known malicious activities and associations\n- Malware families or campaigns linked to this {entityType}\n- MITRE ATT&CK techniques if applicable\n\n**🎯 INCIDENT CONTEXT**\n- Relevance to current investigation\n- {responseActions}\n- Associated IOCs for hunting and blocking\n\n**🚨 RESPONSE ACTIONS**\n- Immediate containment and mitigation steps\n- Detection rules and monitoring recommendations\n- Investigation and forensic analysis guidance\n\n**📊 CONFIDENCE ASSESSMENT**\n- Analysis confidence level (High/Medium/Low)\n- Data source reliability and validation\n- Recommended next steps for verification\n\nProvide specific, actionable guidance for SOC analysts and incident responders.`;\n\n/**\n * Generate domain analysis query template for DNS and domain investigation\n * @param domain - Domain name to analyze (e.g., 'example.com')\n * @returns Structured query template for comprehensive domain security analysis\n */\nexport const createDomainQueryTemplate = (domain: string): string => {\n  return BASE_SECURITY_TEMPLATE.replace(/{entityType}/g, 'domain')\n    .replace(/{entityValue}/g, domain)\n    .replace(/{analysisType}/g, 'DOMAIN')\n    .replace(/{contextSpecific}/g, 'Registration details and ownership information')\n    .replace(/{responseActions}/g, 'Common attack vectors and associated subdomains/URLs');\n};\n\n/**\n * Generate file analysis query template for file-based threat analysis\n * @param filename - Name of the file to analyze\n * @returns Structured query template for comprehensive file security analysis\n */\nexport const createFileQueryTemplate = (filename: string): string => {\n  return BASE_SECURITY_TEMPLATE.replace(/{entityType}/g, 'file')\n    .replace(/{entityValue}/g, filename)\n    .replace(/{analysisType}/g, 'FILE')\n    .replace(/{contextSpecific}/g, 'File type, format identification, and behavioral analysis')\n    .replace(/{responseActions}/g, 'Associated hashes, registry keys, and network indicators');\n};\n\n/**\n * Generate hash analysis query template for malware analysis\n * @param hash - File hash to analyze\n * @param hashType - Type of hash (default: 'SHA256')\n * @returns Structured query template for comprehensive malware analysis\n */\nexport const createHashQueryTemplate = (hash: string, hashType: string = 'SHA256'): string => {\n  return `Conduct a comprehensive malware analysis of ${hashType} hash \"${hash}\" and provide a structured security assessment including:\n\n**🦠 MALWARE ANALYSIS**\n- Threat classification (Malicious/Suspicious/Clean/Unknown)\n- Malware family and variant identification\n- Risk level (Critical/High/Medium/Low)\n\n**⚔️ ATTACK INTELLIGENCE**\n- Primary malware functions and capabilities\n- MITRE ATT&CK techniques and tactics\n- Persistence mechanisms and behavior patterns\n\n**🎯 INCIDENT CONTEXT**\n- Relevance to current investigation\n- Associated file names and execution contexts\n- Related IOCs for hunting (domains, IPs, registry keys)\n\n**🚨 RESPONSE ACTIONS**\n- Immediate containment and isolation steps\n- Detection rules and hunting queries\n- Remediation and cleanup guidance\n\n**📊 CONFIDENCE ASSESSMENT**\n- Analysis confidence level (High/Medium/Low)\n- Threat intelligence source reliability\n- Recommended validation and sandbox analysis\n\nProvide specific, actionable guidance for incident response and threat hunting.`;\n};\n\n/**\n * Generate IP analysis query template for network investigation\n * @param ip - IP address to analyze (IPv4 or IPv6)\n * @returns Structured query template for comprehensive IP address analysis\n */\nexport const createIPQueryTemplate = (ip: string): string => {\n  return BASE_SECURITY_TEMPLATE.replace(/{entityType}/g, 'IP address')\n    .replace(/{entityValue}/g, ip)\n    .replace(/{analysisType}/g, 'IP')\n    .replace(/{contextSpecific}/g, 'Geolocation, ISP information, and network infrastructure')\n    .replace(/{responseActions}/g, 'Network communication patterns, ports, and associated domains');\n};\n\n/**\n * Generate FQDN analysis query template\n */\nexport const createFQDNQueryTemplate = (fqdn: string): string => {\n  return BASE_SECURITY_TEMPLATE.replace(/{entityType}/g, 'hostname')\n    .replace(/{entityValue}/g, fqdn)\n    .replace(/{analysisType}/g, 'HOSTNAME')\n    .replace(/{contextSpecific}/g, 'DNS resolution and infrastructure details')\n    .replace(/{responseActions}/g, 'Network services, certificates, and subdomain patterns');\n};\n\n/**\n * Generate hostname analysis query template\n */\nexport const createHostnameQueryTemplate = (hostname: string): string => {\n  return BASE_SECURITY_TEMPLATE.replace(/{entityType}/g, 'hostname')\n    .replace(/{entityValue}/g, hostname)\n    .replace(/{analysisType}/g, 'HOSTNAME')\n    .replace(/{contextSpecific}/g, 'System identification and network infrastructure')\n    .replace(/{responseActions}/g, 'Network connections, services, and associated processes');\n};\n\n/**\n * Generate user analysis query template\n */\nexport const createUserQueryTemplate = (user: string): string => {\n  return BASE_SECURITY_TEMPLATE.replace(/{entityType}/g, 'user account')\n    .replace(/{entityValue}/g, user)\n    .replace(/{analysisType}/g, 'USER ACCOUNT')\n    .replace(\n      /{contextSpecific}/g,\n      'Account privileges, activity patterns, and authentication details'\n    )\n    .replace(\n      /{responseActions}/g,\n      'Login history, privilege escalation attempts, and associated processes'\n    );\n};\n\n/**\n * Generate MITRE ATT&CK technique analysis query template\n * @param techniqueId - MITRE technique ID (e.g., 'T1055')\n * @param techniqueName - Optional technique name for display\n * @returns Structured query template for comprehensive MITRE technique analysis\n */\nexport const createMitreQueryTemplate = (techniqueId: string, techniqueName?: string): string => {\n  const techniqueDisplay = techniqueName ? `${techniqueId} - ${techniqueName}` : techniqueId;\n\n  return `Conduct a comprehensive analysis of MITRE ATT&CK technique \"${techniqueDisplay}\" and provide a structured assessment including:\n\n**🎯 TECHNIQUE ANALYSIS**\n- Technique overview and primary functionality\n- Attack methodology and implementation methods\n- Target systems and environments\n- Risk level and prevalence in real-world attacks\n\n**🔍 DETECTION & MONITORING**\n- Key indicators and detection signatures\n- Log sources and telemetry requirements\n- Behavioral patterns and anomaly detection\n- Detection rules and hunting queries\n\n**🛡️ MITIGATION & PREVENTION**\n- Specific security controls and countermeasures\n- Configuration hardening recommendations\n- Preventive technologies and solutions\n- Network and endpoint protection strategies\n\n**⚔️ THREAT INTELLIGENCE**\n- APT groups and malware families using this technique\n- Common attack chains and technique combinations\n- Geographic and sector targeting patterns\n- Recent campaigns and threat actor TTPs\n\n**🚨 INCIDENT RESPONSE**\n- Immediate containment and isolation steps\n- Forensic artifacts and evidence collection\n- Impact assessment and damage evaluation\n- Recovery and remediation guidance\n\n**📊 CONTEXTUAL ANALYSIS**\n- Related techniques and sub-techniques\n- Kill chain phase and tactical positioning\n- Difficulty level and skill requirements\n- Business impact and criticality assessment\n\nProvide specific, actionable guidance for security analysts, SOC teams, and incident responders dealing with this MITRE ATT&CK technique.`;\n};\n\n/**\n * Create query template based on entity type and data\n * Dispatches to appropriate specialized template based on entity type\n * @param entityType - Type of entity to analyze\n * @param entityValue - Value/identifier of the entity\n * @param entityData - Optional additional data for template customization\n * @returns Structured query template optimized for the specific entity type\n */\nexport const createQueryTemplate = (\n  entityType: 'domain' | 'file' | 'ip' | 'fqdn' | 'hostname' | 'user' | 'mitre',\n  entityValue: string,\n  entityData?: any\n): string => {\n  switch (entityType) {\n    case 'domain':\n      return createDomainQueryTemplate(entityValue);\n    case 'file':\n      if (entityData?.hashType) {\n        return createHashQueryTemplate(entityValue, entityData.hashType);\n      }\n      return createFileQueryTemplate(entityValue);\n    case 'ip':\n      return createIPQueryTemplate(entityValue);\n    case 'fqdn':\n      return createFQDNQueryTemplate(entityValue);\n    case 'hostname':\n      return createHostnameQueryTemplate(entityValue);\n    case 'user':\n      return createUserQueryTemplate(entityValue);\n    case 'mitre':\n      return createMitreQueryTemplate(entityValue, entityData?.techniqueName);\n    default: {\n      // This should never happen with the current type system, but provides a fallback\n      const fallbackEntityType = entityType as string;\n      return BASE_SECURITY_TEMPLATE.replace(/{entityType}/g, fallbackEntityType)\n        .replace(/{entityValue}/g, entityValue)\n        .replace(/{analysisType}/g, fallbackEntityType.toUpperCase())\n        .replace(/{contextSpecific}/g, 'Entity-specific analysis and characteristics')\n        .replace(/{responseActions}/g, 'Related indicators and attack patterns');\n    }\n  }\n};\n\n/**\n * Create grouped file + hash query template for combined analysis\n * @param filename - Name of the file\n * @param hash - File hash\n * @param hashType - Type of hash (default: 'SHA256')\n * @returns Structured query template combining file and hash analysis\n */\nexport const createGroupedFileTemplate = (\n  filename: string,\n  hash: string,\n  hashType: string = 'SHA256'\n): string => {\n  return `Conduct a comprehensive security analysis of file \"${filename}\" (${hashType}: ${hash}) and provide a structured assessment including:\n\n**📁 FILE ANALYSIS**\n- File type and format identification\n- Threat classification (Malicious/Suspicious/Clean/Unknown)\n- Risk level (Critical/High/Medium/Low)\n\n**🔍 BEHAVIORAL ANALYSIS**\n- Primary file functions and capabilities\n- Execution context and dependencies\n- MITRE ATT&CK techniques if applicable\n\n**🎯 INCIDENT CONTEXT**\n- Relevance to current investigation\n- Digital signatures and certificate information\n- Related IOCs for hunting (registry keys, network indicators)\n\n**🚨 RESPONSE ACTIONS**\n- Immediate containment and quarantine steps\n- Detection rules and hunting queries\n- File reputation and sandbox analysis recommendations\n\n**📊 CONFIDENCE ASSESSMENT**\n- Analysis confidence level (High/Medium/Low)\n- Data source reliability\n- Recommended validation and deeper analysis steps\n\nProvide specific, actionable guidance for file-based threat analysis and incident response.`;\n};\n","// Context processing constants\n\n// Hash display constants\nexport const HASH_TRUNCATION_LENGTH = 32;\nexport const HASH_DISPLAY_FORMAT = {\n  PREFIX_LENGTH: 12,\n  SUFFIX_LENGTH: 12,\n  SEPARATOR: '...',\n};\n\n// IP filtering constants\nexport const PRIVATE_IP_RANGES = {\n  CLASS_A: { start: [10, 0, 0, 0], end: [10, 255, 255, 255] },\n  CLASS_B: { start: [172, 16, 0, 0], end: [172, 31, 255, 255] },\n  CLASS_C: { start: [192, 168, 0, 0], end: [192, 168, 255, 255] },\n  LOOPBACK: { start: [127, 0, 0, 0], end: [127, 255, 255, 255] },\n  LINK_LOCAL: { start: [169, 254, 0, 0], end: [169, 254, 255, 255] },\n  MULTICAST_START: 224,\n  RESERVED_START: 0,\n};\n\n// Domain filtering patterns\nexport const INTERNAL_DOMAIN_PATTERNS = [\n  '.lan',\n  '.local',\n  '.internal',\n  '.corp',\n  '.intranet',\n  '.private',\n  '.domain',\n  '.ad',\n];\n\n// Entity type configurations\nexport const ENTITY_TYPE_CONFIG = {\n  domain: {\n    name: 'Domains',\n    icon: 'shield-exclamation',\n    childIcon: 'shield',\n  },\n  file: {\n    name: 'Files',\n    icon: 'file-lock',\n    childIcons: {\n      filename: 'file-earmark',\n      md5: 'fingerprint',\n      sha256: 'fingerprint',\n    },\n  },\n  ip: {\n    name: 'IP Addresses',\n    icon: 'router-fill',\n    childIcon: 'router',\n  },\n  fqdn: {\n    name: 'FQDNs',\n    icon: 'globe2',\n    childIcon: 'dns',\n  },\n};\n\n// Note: Validation constants moved to constants.ts VALIDATION_THRESHOLDS\n// to eliminate duplication and provide centralized configuration\n\n// Processing limits\nexport const PROCESSING_LIMITS = {\n  MAX_DOMAIN_INSTANCES_DISPLAY: 20,\n  MAX_FILE_ASSOCIATIONS: 50,\n  MIN_DOMAIN_PARTS: 2,\n  MIN_TLD_LENGTH: 2,\n};\n","// Entity processing helper utilities\n\nimport { ContextOption } from '../../types';\nimport {\n  HASH_TRUNCATION_LENGTH,\n  HASH_DISPLAY_FORMAT,\n  PRIVATE_IP_RANGES,\n  INTERNAL_DOMAIN_PATTERNS,\n} from '../contextConstants';\n\n/**\n * Truncate hash values for better display with more characters\n */\nexport const truncateHash = (hash: string): string => {\n  if (hash.length <= HASH_TRUNCATION_LENGTH) return hash;\n  return `${hash.slice(0, Math.max(0, HASH_DISPLAY_FORMAT.PREFIX_LENGTH))}${HASH_DISPLAY_FORMAT.SEPARATOR}${hash.slice(Math.max(0, hash.length - HASH_DISPLAY_FORMAT.SUFFIX_LENGTH))}`;\n};\n\n/**\n * Extract top-level domain from full domain\n */\nexport const extractTopLevelDomain = (domain: string): string => {\n  const parts = domain.split('.');\n  if (parts.length < 2) return domain;\n\n  // Handle common two-part TLDs (e.g., .co.uk, .com.au)\n  const lastPart = parts.at(-1)?.toLowerCase() ?? '';\n  const secondLastPart = parts.at(-2)?.toLowerCase() ?? '';\n\n  const commonTwoPartTLDs = ['co.uk', 'com.au', 'org.uk', 'net.au', 'gov.uk', 'edu.au'];\n  const twoPartTLD = `${secondLastPart}.${lastPart}`;\n\n  if (commonTwoPartTLDs.includes(twoPartTLD) && parts.length >= 3) {\n    return `${parts.at(-3)}.${twoPartTLD}`;\n  }\n\n  // Standard TLD (e.g., .com, .org, .net)\n  return `${secondLastPart}.${lastPart}`;\n};\n\n/**\n * Smart domain truncation showing beginning with consistent 32-character maximum\n * Example: \"aaa.bbb.ccc.ddd.com\" becomes \"aaa.bbb.ccc...\" (32 chars max)\n */\nexport const truncateDomain = (domain: string, maxLength: number = 32): string => {\n  if (domain.length <= maxLength) return domain;\n\n  // Always truncate at the end with consistent character count\n  const truncationSuffix = '...';\n  const availableLength = maxLength - truncationSuffix.length;\n\n  if (availableLength <= 0) return domain; // Safety check\n\n  return domain.slice(0, Math.max(0, availableLength)) + truncationSuffix;\n};\n\n/**\n * Check if a domain needs truncation\n */\nexport const isDomainTruncated = (originalDomain: string, maxLength: number = 32): boolean => {\n  return originalDomain.length > maxLength;\n};\n\n/**\n * Format display names for better readability\n * Returns both display text and original text for tooltip support\n */\nexport const formatDisplayName = (\n  option: ContextOption\n): { displayText: string; originalText: string } => {\n  if (option.subType === 'md5' || option.subType === 'sha256') {\n    const hashMatch = option.displayName.match(/^(MD5|SHA256):\\s*(.+)$/);\n    if (hashMatch?.[1] && hashMatch[2]) {\n      const [, type, displayedHash] = hashMatch; // This is already truncated\n\n      // Get the original hash from entityData\n      const originalHash = option.entityData?.hash;\n      if (originalHash && originalHash !== displayedHash) {\n        return {\n          displayText: option.displayName, // Already formatted with truncated hash\n          originalText: `${type}: ${originalHash}`, // Show full hash in tooltip\n        };\n      }\n    }\n  }\n\n  // For domain entries, check if it's truncated\n  if (option.type === 'domain' && option.subType === 'fqdn' && option.entityData) {\n    const { fullDomain, isTruncated } = option.entityData;\n    if (isTruncated && fullDomain) {\n      return {\n        displayText: option.displayName, // Already truncated\n        originalText: fullDomain, // Show original full domain\n      };\n    }\n  }\n\n  return { displayText: option.displayName, originalText: option.displayName };\n};\n\n/**\n * Check if an IP address is public/routable (not private/internal)\n */\nexport const isPublicIP = (ip: string): boolean => {\n  const parts = ip.split('.').map(Number);\n  if (parts.length !== 4 || parts.some(part => Number.isNaN(Number(part)) || part < 0 || part > 255)) {\n    return false;\n  }\n\n  const [a, b] = parts; // Safe because we validated length and values above\n\n  // Private ranges (RFC 1918)\n  if (a === 10) return false; // 10.0.0.0/8\n  if (a === 172 && b >= 16 && b <= 31) return false; // 172.16.0.0/12\n  if (a === 192 && b === 168) return false; // 192.168.0.0/16\n\n  // Other non-routable ranges\n  if (a === 127) return false; // 127.0.0.0/8 (loopback)\n  if (a === 169 && b === 254) return false; // 169.254.0.0/16 (link-local)\n  if (a === 0) return false; // 0.0.0.0/8\n  if (a >= PRIVATE_IP_RANGES.MULTICAST_START) return false; // 224.0.0.0/4 (multicast/reserved)\n\n  return true;\n};\n\n/**\n * Check if a hostname is external (not internal domain)\n */\nexport const isExternalFQDN = (hostname: string): boolean => {\n  // Basic validation\n  if (!hostname.includes('.')) return false;\n  if (hostname === '.' || hostname === 'localhost') return false;\n  if (/^\\d+\\.\\d+\\.\\d+\\.\\d+$/.test(hostname)) return false;\n\n  const parts = hostname.split('.');\n  if (parts.length < 2 || (parts.at(-1)?.length ?? 0) < 2) return false;\n\n  // Filter out internal domain patterns\n  const lowerHostname = hostname.toLowerCase();\n  return !INTERNAL_DOMAIN_PATTERNS.some(pattern => lowerHostname.endsWith(pattern));\n};\n\n/**\n * Calculate entity counts for each type\n */\nexport const calculateEntityCounts = (options: ContextOption[]) => {\n  return {\n    total: options.length,\n    domains: options.filter(opt => opt.type === 'domain').length,\n    files: options.filter(opt => opt.type === 'file').length,\n    ips: options.filter(opt => opt.type === 'ip').length,\n    mitres: options.filter(opt => opt.type === 'mitre').length,\n  };\n};\n\n\n","// Domain processing utilities\n\nimport { ContextOption } from '../../types';\nimport { createQueryTemplate } from '../queryTemplates';\n\nimport { extractTopLevelDomain, truncateDomain, isExternalFQDN } from './EntityHelpers';\n\n/**\n * Process domains with hierarchical structure: TLD as parent, full domains as children\n * Filters out internal/non-routable domains\n */\nexport const processDomains = (entityValues: any): ContextOption[] => {\n  const domainMap = new Map<string, { count: number; sources: string[] }>();\n\n  // Add domains from direct domain_names array\n  if (entityValues.domain_names && Array.isArray(entityValues.domain_names)) {\n    entityValues.domain_names.forEach((domain: string) => {\n      if (domain && typeof domain === 'string' && isExternalFQDN(domain)) {\n        const existing = domainMap.get(domain) ?? { count: 0, sources: [] };\n        existing.count += 1;\n        existing.sources.push('domain_names');\n        domainMap.set(domain, existing);\n      }\n    });\n  }\n\n  // Add domains from email addresses\n  if (entityValues.email_addresses && Array.isArray(entityValues.email_addresses)) {\n    entityValues.email_addresses.forEach((email: string) => {\n      const [, domain] = email.split('@');\n      if (domain && isExternalFQDN(domain)) {\n        const existing = domainMap.get(domain) ?? { count: 0, sources: [] };\n        existing.count += 1;\n        existing.sources.push('email_addresses');\n        domainMap.set(domain, existing);\n      }\n    });\n  }\n\n  // Add domains from email-formatted usernames\n  if (entityValues.users && Array.isArray(entityValues.users)) {\n    entityValues.users.forEach((user: string) => {\n      if (user && typeof user === 'string' && user.includes('@')) {\n        const [, domain] = user.split('@');\n        if (domain && isExternalFQDN(domain)) {\n          const existing = domainMap.get(domain) ?? { count: 0, sources: [] };\n          existing.count += 1;\n          existing.sources.push('users');\n          domainMap.set(domain, existing);\n        }\n      }\n    });\n  }\n\n  // Add domains from host_names (previously handled by processFQDNs)\n  if (entityValues.host_names && Array.isArray(entityValues.host_names)) {\n    entityValues.host_names.forEach((hostname: string) => {\n      if (hostname && typeof hostname === 'string' && isExternalFQDN(hostname)) {\n        const existing = domainMap.get(hostname) ?? { count: 0, sources: [] };\n        existing.count += 1;\n        existing.sources.push('host_names');\n        domainMap.set(hostname, existing);\n      }\n    });\n  }\n\n  // Group domains by their top-level domain\n  const tldGroups = new Map<\n    string,\n    { domains: string[]; totalCount: number; allSources: string[] }\n  >();\n\n  domainMap.forEach(({ count, sources }, fullDomain) => {\n    const tld = extractTopLevelDomain(fullDomain);\n\n    if (!tldGroups.has(tld)) {\n      tldGroups.set(tld, { domains: [], totalCount: 0, allSources: [] });\n    }\n\n    const group = tldGroups.get(tld)!;\n    group.domains.push(fullDomain);\n    group.totalCount += count;\n\n    // Add unique sources\n    sources.forEach(source => {\n      if (!group.allSources.includes(source)) {\n        group.allSources.push(source);\n      }\n    });\n  });\n\n  // Create hierarchical structure\n  const options: ContextOption[] = [];\n\n  tldGroups.forEach(({ domains, totalCount, allSources }, tld) => {\n    // Create TLD as parent entry\n    const tldDisplayName =\n      totalCount > 1 ? `${tld.toLowerCase()} (${totalCount} instances)` : tld.toLowerCase();\n\n    options.push({\n      value: `tld:${tld}`,\n      displayName: tldDisplayName,\n      type: 'domain',\n      subType: 'tld',\n      queryTemplate: createQueryTemplate('domain', tld),\n      entityData: {\n        tld,\n        domainCount: domains.length,\n        totalCount,\n        sources: allSources,\n      },\n    });\n\n    // Create full domains as children under each TLD\n    domains.forEach(fullDomain => {\n      const domainData = domainMap.get(fullDomain)!;\n      const truncatedDomain = truncateDomain(fullDomain);\n\n      options.push({\n        value: `domain:${fullDomain}`,\n        displayName: truncatedDomain.toLowerCase(),\n        type: 'domain',\n        subType: 'fqdn',\n        parentDomain: tld,\n        queryTemplate: createQueryTemplate('domain', fullDomain),\n        entityData: {\n          fullDomain,\n          tld,\n          count: domainData.count,\n          sources: domainData.sources,\n          isTruncated: truncatedDomain !== fullDomain,\n        },\n      });\n    });\n  });\n\n  return options;\n};\n\n/**\n * Extract domain entities from detection data with validation\n */\nexport const extractDomainsFromDetection = (detection: any, options: ContextOption[]): void => {\n  if (!detection) return;\n\n  // Extract domains from device information\n  if (detection.device) {\n    // Domains from device\n    if (detection.device.machine_domain && isExternalFQDN(detection.device.machine_domain)) {\n      const domain = detection.device.machine_domain.toLowerCase();\n      const truncatedDomain = truncateDomain(domain);\n\n      options.push({\n        value: `domain:${domain}`,\n        displayName: truncatedDomain,\n        type: 'domain',\n        subType: 'fqdn',\n        queryTemplate: createQueryTemplate('domain', domain),\n        entityData: {\n          fullDomain: domain,\n          isTruncated: truncatedDomain !== domain,\n        },\n      });\n    }\n\n    // Domain from hostinfo\n    if (detection.device.hostinfo?.domain && isExternalFQDN(detection.device.hostinfo.domain)) {\n      const domain = detection.device.hostinfo.domain.toLowerCase();\n      const truncatedDomain = truncateDomain(domain);\n\n      // Avoid duplicates\n      const domainExists = options.some(opt => opt.value === `domain:${domain}`);\n      if (!domainExists) {\n        options.push({\n          value: `domain:${domain}`,\n          displayName: truncatedDomain,\n          type: 'domain',\n          subType: 'fqdn',\n          queryTemplate: createQueryTemplate('domain', domain),\n          entityData: {\n            fullDomain: domain,\n            isTruncated: truncatedDomain !== domain,\n          },\n        });\n      }\n    }\n  }\n\n  // Extract domain from user email if it's external (e.g., gmail.com from user@gmail.com)\n  // Note: We don't extract the user account itself as that's private information\n  if (detection.user_principal?.includes('@')) {\n    const email = detection.user_principal.toLowerCase();\n    const [, domain] = email.split('@');\n\n    // Only add domain from email if external (e.g., gmail.com, outlook.com)\n    // Internal domains like user@internal.system are filtered out by isExternalFQDN()\n    if (domain && isExternalFQDN(domain)) {\n      const truncatedDomain = truncateDomain(domain);\n\n      // Avoid duplicates\n      const domainExists = options.some(opt => opt.value === `domain:${domain}`);\n      if (!domainExists) {\n        options.push({\n          value: `domain:${domain}`,\n          displayName: truncatedDomain,\n          type: 'domain',\n          subType: 'fqdn',\n          queryTemplate: createQueryTemplate('domain', domain),\n          entityData: {\n            fullDomain: domain,\n            isTruncated: truncatedDomain !== domain,\n            source: 'user_principal',\n          },\n        });\n      }\n    }\n  }\n};\n","// File and hash processing utilities\n\nimport { ContextOption } from '../../types';\nimport { createQueryTemplate, createHashQueryTemplate } from '../queryTemplates';\n\nimport { truncateHash } from './EntityHelpers';\n\n/**\n * Process files and hashes with proper parent-child grouping\n * Filename as parent, hashes as children. MD5 only shown if no SHA256 available.\n */\nexport const processFiles = (entityValues: any, entities: any): ContextOption[] => {\n  const options: ContextOption[] = [];\n\n  // Create a comprehensive file-to-hash mapping\n  const fileHashMap = new Map<string, { sha256Hashes: Set<string>; md5Hashes: Set<string> }>();\n\n  // Collect all SHA256 hashes from various sources\n  const sha256Array = entityValues.sha256s ?? [];\n  const md5Array = entityValues.md5s ?? [];\n  const fileNameArray = entities?.file_name ?? [];\n\n  // Method 1: Positional association (if arrays align)\n  const canGroupFiles =\n    fileNameArray.length > 0 &&\n    sha256Array.length > 0 &&\n    fileNameArray.length === sha256Array.length;\n\n  if (canGroupFiles) {\n    for (const [i, filename] of fileNameArray.entries()) {\n      const sha256Hash = sha256Array[i];\n\n      if (\n        filename &&\n        typeof filename === 'string' &&\n        sha256Hash &&\n        typeof sha256Hash === 'string'\n      ) {\n        if (!fileHashMap.has(filename)) {\n          fileHashMap.set(filename, { sha256Hashes: new Set(), md5Hashes: new Set() });\n        }\n\n        fileHashMap.get(filename)!.sha256Hashes.add(sha256Hash);\n      }\n    }\n\n    // Also collect MD5 hashes if available and arrays align\n    if (md5Array.length === fileNameArray.length) {\n      for (const [i, filename] of fileNameArray.entries()) {\n        const md5Hash = md5Array[i];\n\n        if (filename && typeof filename === 'string' && md5Hash && typeof md5Hash === 'string') {\n          if (!fileHashMap.has(filename)) {\n            fileHashMap.set(filename, { sha256Hashes: new Set(), md5Hashes: new Set() });\n          }\n\n          fileHashMap.get(filename)!.md5Hashes.add(md5Hash);\n        }\n      }\n    }\n  } else {\n    // Method 2: Collect all hashes separately (no positional association)\n    // If we have filenames but no positional association, create entries for standalone hashes\n    if (fileNameArray.length > 0) {\n      fileNameArray.forEach((filename: string) => {\n        if (filename && typeof filename === 'string' && !fileHashMap.has(filename)) {\n          fileHashMap.set(filename, { sha256Hashes: new Set(), md5Hashes: new Set() });\n        }\n      });\n    }\n  }\n\n  // Create parent-child structure from file-hash mapping\n  fileHashMap.forEach((hashData, filename) => {\n    const { sha256Hashes, md5Hashes } = hashData;\n\n    // Always create the filename as parent\n    options.push({\n      value: `file:${filename}`,\n      displayName: filename.toLowerCase(),\n      type: 'file',\n      subType: 'filename',\n      queryTemplate: createQueryTemplate('file', filename),\n      entityData: {\n        filename,\n        sha256Count: sha256Hashes.size,\n        md5Count: md5Hashes.size,\n      },\n    });\n\n    // Add SHA256 hashes as children (always preferred)\n    sha256Hashes.forEach(sha256Hash => {\n      const truncatedHash = truncateHash(sha256Hash);\n      options.push({\n        value: `sha256:${sha256Hash}`,\n        displayName: `SHA256: ${truncatedHash.toLowerCase()}`,\n        type: 'file',\n        subType: 'sha256',\n        parentFile: filename,\n        queryTemplate: createHashQueryTemplate(sha256Hash, 'SHA256'),\n        entityData: {\n          hash: sha256Hash,\n          hashType: 'SHA256',\n          filename,\n          isGrouped: true,\n        },\n      });\n    });\n\n    // Add MD5 hashes as children ONLY if no SHA256 hashes exist for this file\n    if (sha256Hashes.size === 0 && md5Hashes.size > 0) {\n      md5Hashes.forEach(md5Hash => {\n        const truncatedHash = truncateHash(md5Hash);\n        options.push({\n          value: `md5:${md5Hash}`,\n          displayName: `MD5: ${truncatedHash.toLowerCase()}`,\n          type: 'file',\n          subType: 'md5',\n          parentFile: filename,\n          queryTemplate: createHashQueryTemplate(md5Hash, 'MD5'),\n          entityData: {\n            hash: md5Hash,\n            hashType: 'MD5',\n            filename,\n            isGrouped: true,\n          },\n        });\n      });\n    }\n  });\n\n  // Note: Removed standalone hash processing - only show hashes with associated files\n\n  return options;\n};\n\n/**\n * Process legacy structured file data from entities_full\n * Creates proper parent-child structure: filename as parent, hashes as children\n */\nexport const processLegacyFiles = (\n  entitiesFull: any[],\n  existingOptions: ContextOption[]\n): ContextOption[] => {\n  const options: ContextOption[] = [];\n\n  if (entitiesFull && Array.isArray(entitiesFull)) {\n    const fileMap = new Map<string, { sha256Hashes: Set<string>; md5Hashes: Set<string> }>();\n\n    // Process entities_full to collect unique filenames and their hashes\n    entitiesFull.forEach((entity: any) => {\n      if (entity?.FileName) {\n        const filename = entity.FileName;\n\n        if (!fileMap.has(filename)) {\n          fileMap.set(filename, { sha256Hashes: new Set(), md5Hashes: new Set() });\n        }\n\n        const fileData = fileMap.get(filename)!;\n\n        // Add SHA256 hashes (automatically deduplicates)\n        if (entity.SHA256HashData && typeof entity.SHA256HashData === 'string') {\n          fileData.sha256Hashes.add(entity.SHA256HashData);\n        }\n\n        // Add MD5 hashes (automatically deduplicates)\n        if (entity.MD5HashData && typeof entity.MD5HashData === 'string') {\n          fileData.md5Hashes.add(entity.MD5HashData);\n        }\n      }\n    });\n\n    // Create parent-child structure from the deduplicated map\n    fileMap.forEach((fileData, filename) => {\n      const { sha256Hashes, md5Hashes } = fileData;\n\n      // Only create entries if not already handled by main processFiles function\n      const filenameExists = existingOptions.some(\n        opt => opt.value === `file:${filename}` && opt.subType === 'filename'\n      );\n\n      if (!filenameExists && (sha256Hashes.size > 0 || md5Hashes.size > 0)) {\n        // Create filename as parent\n        options.push({\n          value: `file:${filename}`,\n          displayName: filename.toLowerCase(),\n          type: 'file',\n          subType: 'filename',\n          queryTemplate: createQueryTemplate('file', filename),\n          entityData: {\n            filename,\n            sha256Count: sha256Hashes.size,\n            md5Count: md5Hashes.size,\n            isLegacy: true,\n          },\n        });\n\n        // Add SHA256 hashes as children (always preferred)\n        sha256Hashes.forEach(sha256Hash => {\n          const optionValue = `sha256:${sha256Hash}`;\n          const alreadyExists = existingOptions.some(opt => opt.value === optionValue);\n\n          if (!alreadyExists) {\n            const truncatedHash = truncateHash(sha256Hash);\n\n            options.push({\n              value: optionValue,\n              displayName: `SHA256: ${truncatedHash.toLowerCase()}`,\n              type: 'file',\n              subType: 'sha256',\n              parentFile: filename,\n              queryTemplate: createHashQueryTemplate(sha256Hash, 'SHA256'),\n              entityData: {\n                hash: sha256Hash,\n                hashType: 'SHA256',\n                filename,\n                isLegacy: true,\n                isGrouped: true,\n              },\n            });\n          }\n        });\n\n        // Add MD5 hashes as children ONLY if no SHA256 hashes exist for this file\n        if (sha256Hashes.size === 0 && md5Hashes.size > 0) {\n          md5Hashes.forEach(md5Hash => {\n            const optionValue = `md5:${md5Hash}`;\n            const alreadyExists = existingOptions.some(opt => opt.value === optionValue);\n\n            if (!alreadyExists) {\n              const truncatedHash = truncateHash(md5Hash);\n\n              options.push({\n                value: optionValue,\n                displayName: `MD5: ${truncatedHash.toLowerCase()}`,\n                type: 'file',\n                subType: 'md5',\n                parentFile: filename,\n                queryTemplate: createHashQueryTemplate(md5Hash, 'MD5'),\n                entityData: {\n                  hash: md5Hash,\n                  hashType: 'MD5',\n                  filename,\n                  isLegacy: true,\n                  isGrouped: true,\n                },\n              });\n            }\n          });\n        }\n      }\n    });\n  }\n\n  return options;\n};\n\n/**\n * Extract file entities from detection data with hash association\n */\nexport const extractFilesFromDetection = (detection: any, options: ContextOption[]): void => {\n  if (!detection) return;\n\n  // Extract file information from main detection\n  if (detection.filename) {\n    const filename = detection.filename.toLowerCase();\n\n    // Create file entry\n    options.push({\n      value: `file:${filename}`,\n      displayName: filename,\n      type: 'file',\n      subType: 'filename',\n      queryTemplate: createQueryTemplate('file', filename),\n      entityData: { filename },\n    });\n\n    // Add hashes associated with this file\n    if (detection.sha256) {\n      const sha256Hash = detection.sha256.toLowerCase();\n      const truncatedHash = truncateHash(sha256Hash);\n\n      options.push({\n        value: `sha256:${sha256Hash}`,\n        displayName: `SHA256: ${truncatedHash}`,\n        type: 'file',\n        subType: 'sha256',\n        parentFile: filename,\n        queryTemplate: createHashQueryTemplate(sha256Hash, 'SHA256'),\n        entityData: {\n          hash: sha256Hash,\n          hashType: 'SHA256',\n          filename,\n          isGrouped: true,\n        },\n      });\n    }\n\n    if (detection.md5) {\n      const md5Hash = detection.md5.toLowerCase();\n      const truncatedHash = truncateHash(md5Hash);\n\n      // Only add MD5 if no SHA256 exists\n      const hasSha256 = options.some(\n        opt => opt.subType === 'sha256' && opt.parentFile === filename\n      );\n      if (!hasSha256) {\n        options.push({\n          value: `md5:${md5Hash}`,\n          displayName: `MD5: ${truncatedHash}`,\n          type: 'file',\n          subType: 'md5',\n          parentFile: filename,\n          queryTemplate: createHashQueryTemplate(md5Hash, 'MD5'),\n          entityData: {\n            hash: md5Hash,\n            hashType: 'MD5',\n            filename,\n            isGrouped: true,\n          },\n        });\n      }\n    }\n\n    if (detection.sha1) {\n      const sha1Hash = detection.sha1.toLowerCase();\n      const truncatedHash = truncateHash(sha1Hash);\n\n      // Only add SHA1 if no SHA256 exists\n      const hasSha256 = options.some(\n        opt => opt.subType === 'sha256' && opt.parentFile === filename\n      );\n      if (!hasSha256) {\n        options.push({\n          value: `sha1:${sha1Hash}`,\n          displayName: `SHA1: ${truncatedHash}`,\n          type: 'file',\n          subType: 'sha1',\n          parentFile: filename,\n          queryTemplate: createHashQueryTemplate(sha1Hash, 'SHA1'),\n          entityData: {\n            hash: sha1Hash,\n            hashType: 'SHA1',\n            filename,\n            isGrouped: true,\n          },\n        });\n      }\n    }\n  }\n\n  // Extract parent process information\n  if (detection.parent_details) {\n    const parent = detection.parent_details;\n\n    if (parent.filename) {\n      const filename = parent.filename.toLowerCase();\n\n      // Avoid duplicates\n      const fileExists = options.some(opt => opt.value === `file:${filename}`);\n      if (!fileExists) {\n        options.push({\n          value: `file:${filename}`,\n          displayName: filename,\n          type: 'file',\n          subType: 'filename',\n          queryTemplate: createQueryTemplate('file', filename),\n          entityData: { filename, source: 'parent_process' },\n        });\n\n        // Add parent hashes\n        if (parent.sha256) {\n          const sha256Hash = parent.sha256.toLowerCase();\n          const truncatedHash = truncateHash(sha256Hash);\n\n          options.push({\n            value: `sha256:${sha256Hash}`,\n            displayName: `SHA256: ${truncatedHash}`,\n            type: 'file',\n            subType: 'sha256',\n            parentFile: filename,\n            queryTemplate: createHashQueryTemplate(sha256Hash, 'SHA256'),\n            entityData: {\n              hash: sha256Hash,\n              hashType: 'SHA256',\n              filename,\n              source: 'parent_process',\n              isGrouped: true,\n            },\n          });\n        }\n\n        if (parent.md5) {\n          const md5Hash = parent.md5.toLowerCase();\n          const truncatedHash = truncateHash(md5Hash);\n\n          // Only add MD5 if no SHA256 exists for this file\n          const hasSha256 = options.some(\n            opt => opt.subType === 'sha256' && opt.parentFile === filename\n          );\n          if (!hasSha256) {\n            options.push({\n              value: `md5:${md5Hash}`,\n              displayName: `MD5: ${truncatedHash}`,\n              type: 'file',\n              subType: 'md5',\n              parentFile: filename,\n              queryTemplate: createHashQueryTemplate(md5Hash, 'MD5'),\n              entityData: {\n                hash: md5Hash,\n                hashType: 'MD5',\n                filename,\n                source: 'parent_process',\n                isGrouped: true,\n              },\n            });\n          }\n        }\n      }\n    }\n  }\n\n  // Extract grandparent process information\n  if (detection.grandparent_details) {\n    const grandparent = detection.grandparent_details;\n\n    if (grandparent.filename) {\n      const filename = grandparent.filename.toLowerCase();\n\n      // Avoid duplicates\n      const fileExists = options.some(opt => opt.value === `file:${filename}`);\n      if (!fileExists) {\n        options.push({\n          value: `file:${filename}`,\n          displayName: filename,\n          type: 'file',\n          subType: 'filename',\n          queryTemplate: createQueryTemplate('file', filename),\n          entityData: { filename, source: 'grandparent_process' },\n        });\n\n        // Add grandparent hashes\n        if (grandparent.sha256) {\n          const sha256Hash = grandparent.sha256.toLowerCase();\n          const truncatedHash = truncateHash(sha256Hash);\n\n          options.push({\n            value: `sha256:${sha256Hash}`,\n            displayName: `SHA256: ${truncatedHash}`,\n            type: 'file',\n            subType: 'sha256',\n            parentFile: filename,\n            queryTemplate: createHashQueryTemplate(sha256Hash, 'SHA256'),\n            entityData: {\n              hash: sha256Hash,\n              hashType: 'SHA256',\n              filename,\n              source: 'grandparent_process',\n              isGrouped: true,\n            },\n          });\n        }\n\n        if (grandparent.md5) {\n          const md5Hash = grandparent.md5.toLowerCase();\n          const truncatedHash = truncateHash(md5Hash);\n\n          // Only add MD5 if no SHA256 exists for this file\n          const hasSha256 = options.some(\n            opt => opt.subType === 'sha256' && opt.parentFile === filename\n          );\n          if (!hasSha256) {\n            options.push({\n              value: `md5:${md5Hash}`,\n              displayName: `MD5: ${truncatedHash}`,\n              type: 'file',\n              subType: 'md5',\n              parentFile: filename,\n              queryTemplate: createHashQueryTemplate(md5Hash, 'MD5'),\n              entityData: {\n                hash: md5Hash,\n                hashType: 'MD5',\n                filename,\n                source: 'grandparent_process',\n                isGrouped: true,\n              },\n            });\n          }\n        }\n      }\n    }\n  }\n};\n","// IP address processing utilities\n\nimport { ContextOption } from '../../types';\nimport { createQueryTemplate } from '../queryTemplates';\n\nimport { isPublicIP } from './EntityHelpers';\n\n/**\n * Process IP addresses and filter out private/internal ones\n */\nexport const processIPs = (entityValues: any): ContextOption[] => {\n  const options: ContextOption[] = [];\n\n  if (entityValues.ipv4s && Array.isArray(entityValues.ipv4s)) {\n    entityValues.ipv4s.filter(isPublicIP).forEach((ip: string) => {\n      options.push({\n        value: ip,\n        displayName: ip.toLowerCase(),\n        type: 'ip',\n        queryTemplate: createQueryTemplate('ip', ip),\n        entityData: { ip },\n      });\n    });\n  }\n\n  return options;\n};\n\n/**\n * Extract IP entities from detection data with validation\n */\nexport const extractIPsFromDetection = (detection: any, options: ContextOption[]): void => {\n  if (!detection) return;\n\n  // Extract IPs from device information\n  if (detection.device) {\n    // External IP\n    if (detection.device.external_ip && isPublicIP(detection.device.external_ip)) {\n      options.push({\n        value: detection.device.external_ip.toLowerCase(),\n        displayName: detection.device.external_ip.toLowerCase(),\n        type: 'ip',\n        queryTemplate: createQueryTemplate('ip', detection.device.external_ip),\n        entityData: { ip: detection.device.external_ip.toLowerCase() },\n      });\n    }\n\n    // Local IP (if public - rare but possible)\n    if (detection.device.local_ip && isPublicIP(detection.device.local_ip)) {\n      options.push({\n        value: detection.device.local_ip.toLowerCase(),\n        displayName: detection.device.local_ip.toLowerCase(),\n        type: 'ip',\n        queryTemplate: createQueryTemplate('ip', detection.device.local_ip),\n        entityData: { ip: detection.device.local_ip.toLowerCase() },\n      });\n    }\n  }\n};\n","// MITRE ATT&CK technique processing utilities\n\nimport { ContextOption } from '../../types';\nimport { createQueryTemplate } from '../queryTemplates';\n\n/**\n * Extract MITRE ATT&CK techniques from various detection data structures\n */\nexport const extractMITREFromDetection = (detection: any, options: ContextOption[]): void => {\n  if (!detection) return;\n\n  const mitreMap = new Map<\n    string,\n    { techniqueName?: string; tactic?: string; count: number; sources: string[] }\n  >();\n\n  // Method 1: From detection.behaviors array\n  if (detection.behaviors && Array.isArray(detection.behaviors)) {\n    detection.behaviors.forEach((behavior: any) => {\n      if (behavior.technique_id) {\n        const techniqueId = behavior.technique_id.toUpperCase();\n\n        // Validate MITRE technique ID format (T1055, T1003.001, etc.)\n        const mitrePattern = /^T\\d{4}(\\.\\d{3})?$/;\n        if (mitrePattern.test(techniqueId)) {\n          const existing = mitreMap.get(techniqueId) ?? { count: 0, sources: [] };\n          existing.count += 1;\n          existing.sources.push('detection_behaviors');\n\n          // Capture technique name and tactic if available\n          if (behavior.technique && !existing.techniqueName) {\n            existing.techniqueName = behavior.technique;\n          }\n          if (behavior.tactic && !existing.tactic) {\n            existing.tactic = behavior.tactic;\n          }\n\n          mitreMap.set(techniqueId, existing);\n        }\n      }\n    });\n  }\n\n  // Method 2: From detection.kill_chain array\n  if (detection.kill_chain && Array.isArray(detection.kill_chain)) {\n    detection.kill_chain.forEach((phase: any) => {\n      if (phase.technique_id) {\n        const techniqueId = phase.technique_id.toUpperCase();\n        const mitrePattern = /^T\\d{4}(\\.\\d{3})?$/;\n\n        if (mitrePattern.test(techniqueId)) {\n          const existing = mitreMap.get(techniqueId) ?? { count: 0, sources: [] };\n          existing.count += 1;\n          existing.sources.push('kill_chain');\n\n          if (phase.technique_name && !existing.techniqueName) {\n            existing.techniqueName = phase.technique_name;\n          }\n          if (phase.tactic && !existing.tactic) {\n            existing.tactic = phase.tactic;\n          }\n\n          mitreMap.set(techniqueId, existing);\n        }\n      }\n    });\n  }\n\n  // Method 3: From detection.mitre_attack array (common in activity detections)\n  if (detection.mitre_attack && Array.isArray(detection.mitre_attack)) {\n    detection.mitre_attack.forEach((attack: any) => {\n      if (attack.technique_id) {\n        const techniqueId = attack.technique_id.toUpperCase();\n        const mitrePattern = /^T\\d{4}(\\.\\d{3})?$/;\n\n        if (mitrePattern.test(techniqueId)) {\n          const existing = mitreMap.get(techniqueId) ?? { count: 0, sources: [] };\n          existing.count += 1;\n          existing.sources.push('mitre_attack');\n\n          if (attack.technique && !existing.techniqueName) {\n            existing.techniqueName = attack.technique;\n          }\n          if (attack.tactic && !existing.tactic) {\n            existing.tactic = attack.tactic;\n          }\n\n          mitreMap.set(techniqueId, existing);\n        }\n      }\n    });\n  }\n\n  // Method 4: From individual detection fields (fallback)\n  if (detection.technique_id) {\n    const techniqueId = detection.technique_id.toUpperCase();\n    const mitrePattern = /^T\\d{4}(\\.\\d{3})?$/;\n\n    if (mitrePattern.test(techniqueId)) {\n      const existing = mitreMap.get(techniqueId) ?? { count: 0, sources: [] };\n      existing.count += 1;\n      existing.sources.push('detection_fields');\n\n      if (detection.technique && !existing.techniqueName) {\n        existing.techniqueName = detection.technique;\n      }\n      if (detection.tactic && !existing.tactic) {\n        existing.tactic = detection.tactic;\n      }\n\n      mitreMap.set(techniqueId, existing);\n    }\n  }\n\n  // Create MITRE technique entries from collected data\n  mitreMap.forEach(({ techniqueName, tactic, count, sources }, techniqueId) => {\n    let displayName = techniqueId;\n\n    // Add technique name if available\n    if (techniqueName) {\n      displayName += ` - ${techniqueName}`;\n    }\n\n    // Add count if multiple occurrences\n    if (count > 1) {\n      displayName += ` (${count} occurrences)`;\n    }\n\n    options.push({\n      value: `mitre:${techniqueId}`,\n      displayName,\n      type: 'mitre',\n      subType: 'technique',\n      queryTemplate: createQueryTemplate('mitre', techniqueId, { techniqueName }),\n      entityData: {\n        techniqueId,\n        techniqueName,\n        tactic,\n        count,\n        sources,\n      },\n    });\n  });\n};\n\n/**\n * Validate MITRE technique ID format\n */\nexport const isValidMITRETechnique = (techniqueId: string): boolean => {\n  const mitrePattern = /^T\\d{4}(\\.\\d{3})?$/;\n  return mitrePattern.test(techniqueId.toUpperCase());\n};\n\n/**\n * Extract technique ID from various MITRE data formats\n */\nexport const extractTechniqueId = (mitreData: any): string | null => {\n  if (typeof mitreData === 'string') {\n    return isValidMITRETechnique(mitreData) ? mitreData.toUpperCase() : null;\n  }\n\n  if (mitreData && typeof mitreData === 'object') {\n    const possibleIds = [\n      mitreData.technique_id,\n      mitreData.techniqueId,\n      mitreData.id,\n      mitreData.technique,\n    ];\n\n    for (const id of possibleIds) {\n      if (typeof id === 'string' && isValidMITRETechnique(id)) {\n        return id.toUpperCase();\n      }\n    }\n  }\n\n  return null;\n};\n\n/**\n * Process MITRE techniques from incident data (for legacy support)\n */\nexport const processMITRETechniques = (entityValues: any): ContextOption[] => {\n  const options: ContextOption[] = [];\n\n  if (entityValues.mitre_techniques && Array.isArray(entityValues.mitre_techniques)) {\n    const mitreMap = new Map<string, { techniqueName?: string; tactic?: string; count: number }>();\n\n    entityValues.mitre_techniques.forEach((technique: any) => {\n      const techniqueId = extractTechniqueId(technique);\n      if (techniqueId) {\n        const existing = mitreMap.get(techniqueId) ?? { count: 0 };\n        existing.count += 1;\n\n        // Capture additional data if available\n        if (technique.name && !existing.techniqueName) {\n          existing.techniqueName = technique.name;\n        }\n        if (technique.tactic && !existing.tactic) {\n          existing.tactic = technique.tactic;\n        }\n\n        mitreMap.set(techniqueId, existing);\n      }\n    });\n\n    // Create options from collected techniques\n    mitreMap.forEach(({ techniqueName, tactic, count }, techniqueId) => {\n      let displayName = techniqueId;\n\n      if (techniqueName) {\n        displayName += ` - ${techniqueName}`;\n      }\n\n      if (count > 1) {\n        displayName += ` (${count} occurrences)`;\n      }\n\n      options.push({\n        value: `mitre:${techniqueId}`,\n        displayName,\n        type: 'mitre',\n        subType: 'technique',\n        queryTemplate: createQueryTemplate('mitre', techniqueId, { techniqueName }),\n        entityData: {\n          techniqueId,\n          techniqueName,\n          tactic,\n          count,\n          sources: ['incident_data'],\n        },\n      });\n    });\n  }\n\n  return options;\n};\n","// Context processing orchestrator - combines all entity processors\n\nimport { ContextOption } from '../../types';\n\nimport { processDomains, extractDomainsFromDetection } from './DomainProcessor';\nimport { processFiles, processLegacyFiles, extractFilesFromDetection } from './FileProcessor';\nimport { processIPs, extractIPsFromDetection } from './IpProcessor';\nimport { extractMITREFromDetection, processMITRETechniques } from './MitreProcessor';\n\n// Re-export helper functions for backward compatibility\nexport {\n  truncateHash,\n  extractTopLevelDomain,\n  truncateDomain,\n  isDomainTruncated,\n  formatDisplayName,\n  isPublicIP,\n  isExternalFQDN,\n  calculateEntityCounts,\n} from './EntityHelpers';\n\n/**\n * Extract entities from detection data structure with lowercase normalization\n */\nconst extractDetectionEntities = (detection: any): ContextOption[] => {\n  const options: ContextOption[] = [];\n\n  if (!detection) return options;\n\n  // Extract each entity type using specialized processors\n  extractIPsFromDetection(detection, options);\n  extractDomainsFromDetection(detection, options);\n  extractFilesFromDetection(detection, options);\n  extractMITREFromDetection(detection, options);\n\n  return options;\n};\n\n/**\n * Main processing function that coordinates all entity processing\n */\nexport const processAllEntities = (falconData: any): ContextOption[] => {\n  if (!falconData) return [];\n\n  const options: ContextOption[] = [];\n\n  // Check if we have detection data (activity detections)\n  if (falconData.detection || falconData.detectionId) {\n    const detectionEntities = extractDetectionEntities(falconData.detection);\n    options.push(...detectionEntities);\n  }\n\n  // Check for incident data (traditional structure)\n  const entityValues = falconData.incident?.entity_values;\n  if (entityValues) {\n    const entitiesFull = falconData.incident?.entities_full ?? [];\n    const entities = falconData.incident?.entities;\n\n    // Process each entity type from incident data using specialized processors\n    options.push(...processDomains(entityValues));\n    options.push(...processFiles(entityValues, entities));\n    options.push(...processLegacyFiles(entitiesFull, options));\n    options.push(...processIPs(entityValues));\n    options.push(...processMITRETechniques(entityValues));\n  }\n\n  return options;\n};\n\n// Export individual processors for advanced usage\n\n// Export the main processing function as default\nexport default processAllEntities;\n\nexport { processDomains, extractDomainsFromDetection } from './DomainProcessor';\nexport { processFiles, processLegacyFiles, extractFilesFromDetection } from './FileProcessor';\nexport { processIPs, extractIPsFromDetection } from './IpProcessor';\nexport { processMITRETechniques, extractMITREFromDetection } from './MitreProcessor';\n","// src/hooks/useContextProcessor.ts\n\nimport { useMemo } from 'react';\n\nimport { UseContextProcessorProps, UseContextProcessorResult } from '../types';\nimport { processAllEntities, calculateEntityCounts } from '../utils/context';\n\n/**\n * Custom hook to process Falcon context data and extract available entities\n * Handles both incident and detection contexts\n *\n * This hook has been refactored to use utility functions for better maintainability.\n * The complex processing logic has been moved to contextProcessing.ts utilities.\n */\nexport const useContextProcessor = ({\n  falconData,\n}: UseContextProcessorProps): UseContextProcessorResult => {\n  // Memoized context options to prevent unnecessary recalculation\n  const availableContextOptions = useMemo(() => {\n    return processAllEntities(falconData);\n  }, [falconData]);\n\n  // Calculate counts for each entity type\n  const contextCounts = useMemo(() => {\n    return calculateEntityCounts(availableContextOptions);\n  }, [availableContextOptions]);\n\n  return {\n    availableContextOptions,\n    contextCounts,\n  };\n};\n","// src/utils/copyUtils.ts\n\n/**\n * Copy format options for the enhanced copy functionality\n */\nexport type CopyFormat = 'json' | 'markdown' | 'plaintext';\n\n/**\n * Copy option configuration\n */\nexport interface CopyOption {\n  format: CopyFormat;\n  label: string;\n  icon: string;\n  description: string;\n}\n\n/**\n * Available copy format options\n */\nexport const COPY_OPTIONS: CopyOption[] = [\n  {\n    format: 'json',\n    label: 'JSON',\n    icon: 'code-square',\n    description: 'Complete structured data including request/response context',\n  },\n  {\n    format: 'markdown',\n    label: 'Markdown',\n    icon: 'markdown',\n    description: 'Formatted response with markdown styling',\n  },\n  {\n    format: 'plaintext',\n    label: 'Plain Text',\n    icon: 'file-text',\n    description: 'Clean text without formatting',\n  },\n];\n\n/**\n * Strip markdown formatting from text\n * @param markdown - Markdown text to convert\n * @returns Plain text without markdown formatting\n */\nexport const stripMarkdown = (markdown: string): string => {\n  if (!markdown) return '';\n\n  let text = markdown;\n\n  // Remove code blocks\n  text = text.replace(/```[\\s\\S]*?```/g, '');\n  text = text.replace(/`([^`]+)`/g, '$1');\n\n  // Remove headers\n  text = text.replace(/^#{1,6}\\s+/gm, '');\n\n  // Remove bold/italic\n  text = text.replace(/\\*\\*([^*]+)\\*\\*/g, '$1');\n  text = text.replace(/\\*([^*]+)\\*/g, '$1');\n  text = text.replace(/__([^_]+)__/g, '$1');\n  text = text.replace(/_([^_]+)_/g, '$1');\n\n  // Remove links\n  text = text.replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1');\n\n  // Remove list markers\n  text = text.replace(/^[\\s]*[-*+]\\s+/gm, '');\n  text = text.replace(/^[\\s]*\\d+\\.\\s+/gm, '');\n\n  // Remove blockquotes\n  text = text.replace(/^>\\s*/gm, '');\n\n  // Remove horizontal rules\n  text = text.replace(/^[\\s]*[-*_]{3,}[\\s]*$/gm, '');\n\n  // Clean up extra whitespace\n  text = text.replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n');\n  text = text.replace(/^\\s+|\\s+$/g, '');\n\n  return text;\n};\n\n/**\n * Convert structured JSON data to markdown format\n * @param jsonData - Parsed JSON response\n * @returns Markdown formatted string\n */\nexport const convertJsonToMarkdown = (jsonData: any): string => {\n  if (!jsonData) return '';\n\n  let markdown = '';\n\n  // Executive Summary\n  if (jsonData.executive_summary) {\n    markdown += `# Executive Summary\\n\\n${jsonData.executive_summary}\\n\\n`;\n  }\n\n  // Threat and Confidence Levels\n  if (jsonData.threat_level || jsonData.confidence_level) {\n    markdown += `## Assessment\\n\\n`;\n    if (jsonData.threat_level) {\n      markdown += `**Threat Level:** ${jsonData.threat_level}\\n\\n`;\n    }\n    if (jsonData.confidence_level) {\n      markdown += `**Confidence Level:** ${jsonData.confidence_level}\\n\\n`;\n    }\n  }\n\n  // Malware Analysis\n  if (jsonData.malware_analysis) {\n    markdown += `## Malware Analysis\\n\\n`;\n    if (jsonData.malware_analysis.malware_family) {\n      markdown += `**Family:** ${jsonData.malware_analysis.malware_family}\\n\\n`;\n    }\n    if (jsonData.malware_analysis.variant_identification) {\n      markdown += `**Variant:** ${jsonData.malware_analysis.variant_identification}\\n\\n`;\n    }\n    if (jsonData.malware_analysis.threat_classification) {\n      markdown += `**Classification:** ${jsonData.malware_analysis.threat_classification}\\n\\n`;\n    }\n    if (jsonData.malware_analysis.risk_level) {\n      markdown += `**Risk Level:** ${jsonData.malware_analysis.risk_level}\\n\\n`;\n    }\n  }\n\n  // Attack Intelligence\n  if (jsonData.attack_intelligence) {\n    markdown += `## Attack Intelligence\\n\\n`;\n    if (\n      jsonData.attack_intelligence.primary_functions &&\n      jsonData.attack_intelligence.primary_functions.length > 0\n    ) {\n      markdown += `### Primary Functions\\n`;\n      jsonData.attack_intelligence.primary_functions.forEach((func: string) => {\n        markdown += `- ${func}\\n`;\n      });\n      markdown += '\\n';\n    }\n    if (\n      jsonData.attack_intelligence.persistence_mechanisms &&\n      jsonData.attack_intelligence.persistence_mechanisms.length > 0\n    ) {\n      markdown += `### Persistence Mechanisms\\n`;\n      jsonData.attack_intelligence.persistence_mechanisms.forEach((mech: string) => {\n        markdown += `- ${mech}\\n`;\n      });\n      markdown += '\\n';\n    }\n    if (\n      jsonData.attack_intelligence.behavior_patterns &&\n      jsonData.attack_intelligence.behavior_patterns.length > 0\n    ) {\n      markdown += `### Behavior Patterns\\n`;\n      jsonData.attack_intelligence.behavior_patterns.forEach((pattern: string) => {\n        markdown += `- ${pattern}\\n`;\n      });\n      markdown += '\\n';\n    }\n  }\n\n  // Incident Context\n  if (jsonData.incident_context) {\n    markdown += `## Incident Context\\n\\n`;\n    if (jsonData.incident_context.investigation_relevance) {\n      markdown += `**Investigation Relevance:** ${jsonData.incident_context.investigation_relevance}\\n\\n`;\n    }\n    if (\n      jsonData.incident_context.associated_filenames &&\n      jsonData.incident_context.associated_filenames.length > 0\n    ) {\n      markdown += `### Associated Filenames\\n`;\n      jsonData.incident_context.associated_filenames.forEach((filename: string) => {\n        markdown += `- \\`${filename}\\`\\n`;\n      });\n      markdown += '\\n';\n    }\n    if (jsonData.incident_context.related_iocs) {\n      markdown += `### Related IOCs for Hunting\\n`;\n      if (\n        jsonData.incident_context.related_iocs.domains &&\n        jsonData.incident_context.related_iocs.domains.length > 0\n      ) {\n        markdown += `**Domains:**\\n`;\n        jsonData.incident_context.related_iocs.domains.forEach((domain: string) => {\n          markdown += `- \\`${domain}\\`\\n`;\n        });\n        markdown += '\\n';\n      }\n      if (\n        jsonData.incident_context.related_iocs.ips &&\n        jsonData.incident_context.related_iocs.ips.length > 0\n      ) {\n        markdown += `**IPs:**\\n`;\n        jsonData.incident_context.related_iocs.ips.forEach((ip: string) => {\n          markdown += `- \\`${ip}\\`\\n`;\n        });\n        markdown += '\\n';\n      }\n      if (\n        jsonData.incident_context.related_iocs.registry_keys &&\n        jsonData.incident_context.related_iocs.registry_keys.length > 0\n      ) {\n        markdown += `**Registry Keys:**\\n`;\n        jsonData.incident_context.related_iocs.registry_keys.forEach((key: string) => {\n          markdown += `- \\`${key}\\`\\n`;\n        });\n        markdown += '\\n';\n      }\n      if (\n        jsonData.incident_context.related_iocs.hashes &&\n        jsonData.incident_context.related_iocs.hashes.length > 0\n      ) {\n        markdown += `**Hashes:**\\n`;\n        jsonData.incident_context.related_iocs.hashes.forEach((hash: string) => {\n          markdown += `- \\`${hash}\\`\\n`;\n        });\n        markdown += '\\n';\n      }\n    }\n  }\n\n  // Immediate Actions\n  if (jsonData.immediate_actions && jsonData.immediate_actions.length > 0) {\n    markdown += `## Immediate Actions\\n\\n`;\n    jsonData.immediate_actions.forEach((action: string, index: number) => {\n      markdown += `${index + 1}. ${action}\\n`;\n    });\n    markdown += '\\n';\n  }\n\n  // Response Actions (comprehensive)\n  if (jsonData.response_actions) {\n    if (\n      jsonData.response_actions.immediate_containment &&\n      jsonData.response_actions.immediate_containment.length > 0\n    ) {\n      markdown += `## Immediate Containment\\n\\n`;\n      jsonData.response_actions.immediate_containment.forEach((action: string, index: number) => {\n        markdown += `${index + 1}. ${action}\\n`;\n      });\n      markdown += '\\n';\n    }\n    if (\n      jsonData.response_actions.detection_rules &&\n      jsonData.response_actions.detection_rules.length > 0\n    ) {\n      markdown += `## Detection Rules\\n\\n`;\n      jsonData.response_actions.detection_rules.forEach((rule: string, index: number) => {\n        markdown += `${index + 1}. ${rule}\\n`;\n      });\n      markdown += '\\n';\n    }\n    if (\n      jsonData.response_actions.remediation_guidance &&\n      jsonData.response_actions.remediation_guidance.length > 0\n    ) {\n      markdown += `## Remediation Guidance\\n\\n`;\n      jsonData.response_actions.remediation_guidance.forEach((guidance: string, index: number) => {\n        markdown += `${index + 1}. ${guidance}\\n`;\n      });\n      markdown += '\\n';\n    }\n  }\n\n  // IOCs\n  if (jsonData.iocs && Object.keys(jsonData.iocs).length > 0) {\n    markdown += `## Indicators of Compromise (IOCs)\\n\\n`;\n\n    if (jsonData.iocs.hashes && jsonData.iocs.hashes.length > 0) {\n      markdown += `### File Hashes\\n`;\n      jsonData.iocs.hashes.forEach((hash: string) => {\n        markdown += `- \\`${hash}\\`\\n`;\n      });\n      markdown += '\\n';\n    }\n\n    if (jsonData.iocs.ips && jsonData.iocs.ips.length > 0) {\n      markdown += `### IP Addresses\\n`;\n      jsonData.iocs.ips.forEach((ip: string) => {\n        markdown += `- \\`${ip}\\`\\n`;\n      });\n      markdown += '\\n';\n    }\n\n    if (jsonData.iocs.domains && jsonData.iocs.domains.length > 0) {\n      markdown += `### Domains\\n`;\n      jsonData.iocs.domains.forEach((domain: string) => {\n        markdown += `- \\`${domain}\\`\\n`;\n      });\n      markdown += '\\n';\n    }\n\n    if (jsonData.iocs.urls && jsonData.iocs.urls.length > 0) {\n      markdown += `### URLs\\n`;\n      jsonData.iocs.urls.forEach((url: string) => {\n        markdown += `- \\`${url}\\`\\n`;\n      });\n      markdown += '\\n';\n    }\n\n    if (jsonData.iocs.file_paths && jsonData.iocs.file_paths.length > 0) {\n      markdown += `### File Paths\\n`;\n      jsonData.iocs.file_paths.forEach((path: string) => {\n        markdown += `- \\`${path}\\`\\n`;\n      });\n      markdown += '\\n';\n    }\n  }\n\n  // MITRE ATT&CK Techniques\n  if (jsonData.mitre_techniques && jsonData.mitre_techniques.length > 0) {\n    markdown += `## MITRE ATT&CK Techniques\\n\\n`;\n    jsonData.mitre_techniques.forEach((technique: any) => {\n      markdown += `### ${technique.technique_id}: ${technique.technique_name}\\n`;\n      if (technique.tactic) {\n        markdown += `**Tactic:** ${technique.tactic}\\n`;\n      }\n      if (technique.description) {\n        markdown += `${technique.description}\\n\\n`;\n      }\n    });\n  }\n\n  // MITRE techniques from attack intelligence\n  if (\n    jsonData.attack_intelligence?.mitre_techniques &&\n    jsonData.attack_intelligence.mitre_techniques.length > 0\n  ) {\n    markdown += `## MITRE ATT&CK Techniques (Attack Intelligence)\\n\\n`;\n    jsonData.attack_intelligence.mitre_techniques.forEach((technique: any) => {\n      markdown += `### ${technique.technique_id}: ${technique.technique_name}\\n`;\n      if (technique.tactic) {\n        markdown += `**Tactic:** ${technique.tactic}\\n`;\n      }\n      if (technique.description) {\n        markdown += `${technique.description}\\n\\n`;\n      }\n    });\n  }\n\n  // Technical Details\n  if (jsonData.technical_details) {\n    markdown += `## Technical Details\\n\\n${jsonData.technical_details}\\n\\n`;\n  }\n\n  // Recommendations\n  if (jsonData.recommendations && jsonData.recommendations.length > 0) {\n    markdown += `## Recommendations\\n\\n`;\n    jsonData.recommendations.forEach((rec: string, index: number) => {\n      markdown += `${index + 1}. ${rec}\\n`;\n    });\n    markdown += '\\n';\n  }\n\n  // Confidence Assessment and Reasoning Assessment\n  if (jsonData.confidence_assessment || jsonData.reasoning_assessment) {\n    markdown += `## Confidence & Reasoning Assessment\\n\\n`;\n\n    if (jsonData.confidence_assessment) {\n      markdown += `### Confidence Metrics\\n`;\n      if (jsonData.confidence_assessment.analysis_confidence) {\n        markdown += `**Analysis Confidence:** ${jsonData.confidence_assessment.analysis_confidence}\\n`;\n      }\n      if (jsonData.confidence_assessment.source_reliability) {\n        markdown += `**Source Reliability:** ${jsonData.confidence_assessment.source_reliability}\\n`;\n      }\n      if (\n        jsonData.confidence_assessment.validation_recommendations &&\n        jsonData.confidence_assessment.validation_recommendations.length > 0\n      ) {\n        markdown += `\\n**Validation Recommendations:**\\n`;\n        jsonData.confidence_assessment.validation_recommendations.forEach((rec: string) => {\n          markdown += `- ${rec}\\n`;\n        });\n      }\n      markdown += '\\n';\n    }\n\n    if (jsonData.reasoning_assessment) {\n      markdown += `### Charlotte's Analytical Methodology\\n`;\n      markdown += `${jsonData.reasoning_assessment}\\n\\n`;\n    }\n  }\n\n  return markdown;\n};\n\n/**\n * Convert structured JSON data to plain text format\n * @param jsonData - Parsed JSON response\n * @returns Plain text formatted string\n */\nexport const convertJsonToPlainText = (jsonData: any): string => {\n  if (!jsonData) return '';\n\n  let text = '';\n\n  // Executive Summary\n  if (jsonData.executive_summary) {\n    text += `EXECUTIVE SUMMARY\\n${jsonData.executive_summary}\\n\\n`;\n  }\n\n  // Assessment\n  if (jsonData.threat_level || jsonData.confidence_level) {\n    text += `ASSESSMENT\\n`;\n    if (jsonData.threat_level) {\n      text += `Threat Level: ${jsonData.threat_level}\\n`;\n    }\n    if (jsonData.confidence_level) {\n      text += `Confidence Level: ${jsonData.confidence_level}\\n`;\n    }\n    text += '\\n';\n  }\n\n  // Malware Analysis\n  if (jsonData.malware_analysis) {\n    text += `MALWARE ANALYSIS\\n`;\n    if (jsonData.malware_analysis.malware_family) {\n      text += `Family: ${jsonData.malware_analysis.malware_family}\\n`;\n    }\n    if (jsonData.malware_analysis.variant_identification) {\n      text += `Variant: ${jsonData.malware_analysis.variant_identification}\\n`;\n    }\n    if (jsonData.malware_analysis.threat_classification) {\n      text += `Classification: ${jsonData.malware_analysis.threat_classification}\\n`;\n    }\n    if (jsonData.malware_analysis.risk_level) {\n      text += `Risk Level: ${jsonData.malware_analysis.risk_level}\\n`;\n    }\n    text += '\\n';\n  }\n\n  // Attack Intelligence\n  if (jsonData.attack_intelligence) {\n    text += `ATTACK INTELLIGENCE\\n`;\n    if (\n      jsonData.attack_intelligence.primary_functions &&\n      jsonData.attack_intelligence.primary_functions.length > 0\n    ) {\n      text += `Primary Functions:\\n`;\n      jsonData.attack_intelligence.primary_functions.forEach((func: string) => {\n        text += `- ${func}\\n`;\n      });\n      text += '\\n';\n    }\n    if (\n      jsonData.attack_intelligence.persistence_mechanisms &&\n      jsonData.attack_intelligence.persistence_mechanisms.length > 0\n    ) {\n      text += `Persistence Mechanisms:\\n`;\n      jsonData.attack_intelligence.persistence_mechanisms.forEach((mech: string) => {\n        text += `- ${mech}\\n`;\n      });\n      text += '\\n';\n    }\n    if (\n      jsonData.attack_intelligence.behavior_patterns &&\n      jsonData.attack_intelligence.behavior_patterns.length > 0\n    ) {\n      text += `Behavior Patterns:\\n`;\n      jsonData.attack_intelligence.behavior_patterns.forEach((pattern: string) => {\n        text += `- ${pattern}\\n`;\n      });\n      text += '\\n';\n    }\n  }\n\n  // Incident Context\n  if (jsonData.incident_context) {\n    text += `INCIDENT CONTEXT\\n`;\n    if (jsonData.incident_context.investigation_relevance) {\n      text += `Investigation Relevance: ${jsonData.incident_context.investigation_relevance}\\n\\n`;\n    }\n    if (\n      jsonData.incident_context.associated_filenames &&\n      jsonData.incident_context.associated_filenames.length > 0\n    ) {\n      text += `Associated Filenames:\\n`;\n      jsonData.incident_context.associated_filenames.forEach((filename: string) => {\n        text += `- ${filename}\\n`;\n      });\n      text += '\\n';\n    }\n    if (jsonData.incident_context.related_iocs) {\n      text += `Related IOCs for Hunting:\\n`;\n      if (\n        jsonData.incident_context.related_iocs.domains &&\n        jsonData.incident_context.related_iocs.domains.length > 0\n      ) {\n        text += `Domains:\\n`;\n        jsonData.incident_context.related_iocs.domains.forEach((domain: string) => {\n          text += `- ${domain}\\n`;\n        });\n        text += '\\n';\n      }\n      if (\n        jsonData.incident_context.related_iocs.ips &&\n        jsonData.incident_context.related_iocs.ips.length > 0\n      ) {\n        text += `IPs:\\n`;\n        jsonData.incident_context.related_iocs.ips.forEach((ip: string) => {\n          text += `- ${ip}\\n`;\n        });\n        text += '\\n';\n      }\n      if (\n        jsonData.incident_context.related_iocs.registry_keys &&\n        jsonData.incident_context.related_iocs.registry_keys.length > 0\n      ) {\n        text += `Registry Keys:\\n`;\n        jsonData.incident_context.related_iocs.registry_keys.forEach((key: string) => {\n          text += `- ${key}\\n`;\n        });\n        text += '\\n';\n      }\n      if (\n        jsonData.incident_context.related_iocs.hashes &&\n        jsonData.incident_context.related_iocs.hashes.length > 0\n      ) {\n        text += `Hashes:\\n`;\n        jsonData.incident_context.related_iocs.hashes.forEach((hash: string) => {\n          text += `- ${hash}\\n`;\n        });\n        text += '\\n';\n      }\n    }\n  }\n\n  // Immediate Actions\n  if (jsonData.immediate_actions && jsonData.immediate_actions.length > 0) {\n    text += `IMMEDIATE ACTIONS\\n`;\n    jsonData.immediate_actions.forEach((action: string, index: number) => {\n      text += `${index + 1}. ${action}\\n`;\n    });\n    text += '\\n';\n  }\n\n  // Response Actions (comprehensive)\n  if (jsonData.response_actions) {\n    if (\n      jsonData.response_actions.immediate_containment &&\n      jsonData.response_actions.immediate_containment.length > 0\n    ) {\n      text += `IMMEDIATE CONTAINMENT\\n`;\n      jsonData.response_actions.immediate_containment.forEach((action: string, index: number) => {\n        text += `${index + 1}. ${action}\\n`;\n      });\n      text += '\\n';\n    }\n    if (\n      jsonData.response_actions.detection_rules &&\n      jsonData.response_actions.detection_rules.length > 0\n    ) {\n      text += `DETECTION RULES\\n`;\n      jsonData.response_actions.detection_rules.forEach((rule: string, index: number) => {\n        text += `${index + 1}. ${rule}\\n`;\n      });\n      text += '\\n';\n    }\n    if (\n      jsonData.response_actions.remediation_guidance &&\n      jsonData.response_actions.remediation_guidance.length > 0\n    ) {\n      text += `REMEDIATION GUIDANCE\\n`;\n      jsonData.response_actions.remediation_guidance.forEach((guidance: string, index: number) => {\n        text += `${index + 1}. ${guidance}\\n`;\n      });\n      text += '\\n';\n    }\n  }\n\n  // IOCs\n  if (jsonData.iocs && Object.keys(jsonData.iocs).length > 0) {\n    text += `INDICATORS OF COMPROMISE (IOCs)\\n`;\n\n    if (jsonData.iocs.hashes && jsonData.iocs.hashes.length > 0) {\n      text += `File Hashes:\\n`;\n      jsonData.iocs.hashes.forEach((hash: string) => {\n        text += `- ${hash}\\n`;\n      });\n      text += '\\n';\n    }\n\n    if (jsonData.iocs.ips && jsonData.iocs.ips.length > 0) {\n      text += `IP Addresses:\\n`;\n      jsonData.iocs.ips.forEach((ip: string) => {\n        text += `- ${ip}\\n`;\n      });\n      text += '\\n';\n    }\n\n    if (jsonData.iocs.domains && jsonData.iocs.domains.length > 0) {\n      text += `Domains:\\n`;\n      jsonData.iocs.domains.forEach((domain: string) => {\n        text += `- ${domain}\\n`;\n      });\n      text += '\\n';\n    }\n\n    if (jsonData.iocs.urls && jsonData.iocs.urls.length > 0) {\n      text += `URLs:\\n`;\n      jsonData.iocs.urls.forEach((url: string) => {\n        text += `- ${url}\\n`;\n      });\n      text += '\\n';\n    }\n\n    if (jsonData.iocs.file_paths && jsonData.iocs.file_paths.length > 0) {\n      text += `File Paths:\\n`;\n      jsonData.iocs.file_paths.forEach((path: string) => {\n        text += `- ${path}\\n`;\n      });\n      text += '\\n';\n    }\n  }\n\n  // MITRE ATT&CK Techniques\n  if (jsonData.mitre_techniques && jsonData.mitre_techniques.length > 0) {\n    text += `MITRE ATT&CK TECHNIQUES\\n`;\n    jsonData.mitre_techniques.forEach((technique: any) => {\n      text += `${technique.technique_id}: ${technique.technique_name}\\n`;\n      if (technique.description) {\n        text += `${technique.description}\\n\\n`;\n      }\n    });\n  }\n\n  // Technical Details\n  if (jsonData.technical_details) {\n    text += `TECHNICAL DETAILS\\n${jsonData.technical_details}\\n\\n`;\n  }\n\n  // Recommendations\n  if (jsonData.recommendations && jsonData.recommendations.length > 0) {\n    text += `RECOMMENDATIONS\\n`;\n    jsonData.recommendations.forEach((rec: string, index: number) => {\n      text += `${index + 1}. ${rec}\\n`;\n    });\n    text += '\\n';\n  }\n\n  // Confidence Assessment and Reasoning Assessment\n  if (jsonData.confidence_assessment || jsonData.reasoning_assessment) {\n    text += `CONFIDENCE & REASONING ASSESSMENT\\n`;\n\n    if (jsonData.confidence_assessment) {\n      text += `Confidence Metrics:\\n`;\n      if (jsonData.confidence_assessment.analysis_confidence) {\n        text += `Analysis Confidence: ${jsonData.confidence_assessment.analysis_confidence}\\n`;\n      }\n      if (jsonData.confidence_assessment.source_reliability) {\n        text += `Source Reliability: ${jsonData.confidence_assessment.source_reliability}\\n`;\n      }\n      if (\n        jsonData.confidence_assessment.validation_recommendations &&\n        jsonData.confidence_assessment.validation_recommendations.length > 0\n      ) {\n        text += `\\nValidation Recommendations:\\n`;\n        jsonData.confidence_assessment.validation_recommendations.forEach((rec: string) => {\n          text += `- ${rec}\\n`;\n        });\n      }\n      text += '\\n';\n    }\n\n    if (jsonData.reasoning_assessment) {\n      text += `Charlotte's Analytical Methodology:\\n`;\n      text += `${jsonData.reasoning_assessment}\\n\\n`;\n    }\n  }\n\n  return text;\n};\n\n/**\n * Format data for copying based on the selected format\n * @param format - The format to copy as\n * @param responseText - The markdown response text\n * @param jsonData - The complete JSON context data\n * @param parsedJsonResponse - The parsed structured JSON response (if available)\n * @returns Formatted string ready for clipboard\n */\nexport const formatForCopy = (\n  format: CopyFormat,\n  responseText: string,\n  jsonData?: any,\n  parsedJsonResponse?: any\n): string => {\n  switch (format) {\n    case 'json':\n      // First try to use the parsed JSON response (Charlotte AI's structured response)\n      if (parsedJsonResponse) {\n        return JSON.stringify(parsedJsonResponse, null, 2);\n      }\n      // Fall back to complete JSON context data\n      if (jsonData) {\n        return JSON.stringify(jsonData, null, 2);\n      }\n      // Final fallback to basic JSON structure\n      return JSON.stringify(\n        {\n          response: responseText,\n          timestamp: new Date().toISOString(),\n        },\n        null,\n        2\n      );\n\n    case 'markdown':\n      // If we have parsed JSON response, convert it to markdown\n      if (parsedJsonResponse) {\n        return convertJsonToMarkdown(parsedJsonResponse);\n      }\n      // Otherwise use the raw response text\n      return responseText;\n\n    case 'plaintext':\n      // If we have parsed JSON response, convert it to plain text\n      if (parsedJsonResponse) {\n        return convertJsonToPlainText(parsedJsonResponse);\n      }\n      // Otherwise strip markdown from response text\n      return stripMarkdown(responseText);\n\n    default:\n      return responseText;\n  }\n};\n\n/**\n * Copy text to clipboard with error handling\n * @param text - Text to copy\n * @param format - Format being copied (for error messages)\n * @returns Promise that resolves to success boolean\n */\nexport const copyToClipboard = async (text: string, _format: CopyFormat): Promise<boolean> => {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch {\n    // Silently fail - clipboard API might not be available\n    return false;\n  }\n};\n\n/**\n * Get appropriate success message for copy operation\n * @param format - The format that was copied\n * @returns Success message string\n */\nexport const getCopySuccessMessage = (format: CopyFormat): string => {\n  switch (format) {\n    case 'json':\n      return 'JSON copied to clipboard!';\n    case 'markdown':\n      return 'Markdown copied to clipboard!';\n    case 'plaintext':\n      return 'Plain text copied to clipboard!';\n    default:\n      return 'Copied to clipboard!';\n  }\n};\n","// src/utils/security/iocUtils.ts\n\nimport type { StructuredSecurityResponse } from '../../types/security';\n\n/**\n * Parse structured security response from text\n * @param responseText - Response text to parse\n * @returns Parsed security response or null\n */\nexport const parseStructuredResponse = (\n  responseText: string\n): StructuredSecurityResponse | null => {\n  try {\n    // Try to parse as JSON\n    const parsed = JSON.parse(responseText.trim());\n\n    // Validate it has the expected structure\n    if (\n      parsed &&\n      typeof parsed === 'object' &&\n      parsed.executive_summary &&\n      parsed.threat_level &&\n      parsed.priority_actions\n    ) {\n      return parsed as StructuredSecurityResponse;\n    }\n  } catch {\n    // Not JSON or invalid structure\n  }\n  return null;\n};\n\n// Note: All IOC-related functions have been moved to iocCore.ts\n// Components should import from '../../utils/security/iocCore' instead\n","// src/hooks/useCopyToClipboard.ts\n\nimport { useState, useCallback } from 'react';\n\ninterface CopyToClipboardState {\n  copyState: 'clipboard' | 'check-circle';\n  isSuccess: boolean;\n  copyToClipboard: (text: string, successDuration?: number) => Promise<void>;\n}\n\n/**\n * Shared hook for copy-to-clipboard functionality with visual feedback\n * Eliminates duplication across CodeBlock, InlineCode, and IOCDisplay components\n */\nexport const useCopyToClipboard = (): CopyToClipboardState => {\n  const [copyState, setCopyState] = useState<'clipboard' | 'check-circle'>('clipboard');\n\n  const copyToClipboard = useCallback(async (text: string, successDuration = 2000) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopyState('check-circle');\n      \n      setTimeout(() => {\n        setCopyState('clipboard');\n      }, successDuration);\n    } catch {\n      // Silent failure for copy operation - matches existing behavior\n    }\n  }, []);\n\n  return {\n    copyState,\n    isSuccess: copyState === 'check-circle',\n    copyToClipboard,\n  };\n};\n","// src/hooks/useCopyManager.ts\n\nimport { useCallback } from 'react';\n\nimport {\n  COPY_OPTIONS,\n  formatForCopy,\n  type CopyFormat,\n} from '../utils/copyUtils';\nimport { parseStructuredResponse } from '../utils/security/iocUtils';\n\nimport { useCopyToClipboard } from './useCopyToClipboard';\n\ninterface UseCopyManagerProps {\n  responseText: string;\n  jsonContextData?: unknown;\n}\n\ninterface UseCopyManagerReturn {\n  copyState: 'clipboard' | 'check-circle';\n  isSuccess: boolean;\n  handleCopyFormat: (format: CopyFormat) => Promise<void>;\n  copyOptions: typeof COPY_OPTIONS;\n}\n\n/**\n * Enhanced copy manager hook that integrates with useCopyToClipboard\n * Provides multi-format copy functionality for the Response tab\n */\nexport const useCopyManager = ({\n  responseText,\n  jsonContextData,\n}: UseCopyManagerProps): UseCopyManagerReturn => {\n  const { copyState, isSuccess, copyToClipboard } = useCopyToClipboard();\n\n  // Handle copy operation for different formats\n  const handleCopyFormat = useCallback(\n    async (format: CopyFormat) => {\n      // Always try to parse the response as structured JSON first\n      const parsedJsonResponse = parseStructuredResponse(responseText);\n\n      // Format the text for the selected copy format\n      const textToCopy = formatForCopy(format, responseText, jsonContextData, parsedJsonResponse);\n\n      // Use the shared copy hook for consistent visual feedback\n      await copyToClipboard(textToCopy);\n    },\n    [responseText, jsonContextData, copyToClipboard]\n  );\n\n  return {\n    copyState,\n    isSuccess,\n    handleCopyFormat,\n    copyOptions: COPY_OPTIONS,\n  };\n};\n","// src/utils/socketDetection.ts\n\n/**\n * Socket detection utility for CrowdStrike Falcon Console\n * Detects which socket/page the extension is currently embedded in\n */\n\nexport interface SocketInfo {\n  socket: string;\n  displayName: string;\n  description: string;\n  detected: boolean;\n  detectionMethod: string;\n}\n\n/**\n * Map of socket identifiers to their display information\n */\nconst SOCKET_MAP: Record<string, { socket: string; displayName: string; description: string }> = {\n  'activity.detections.details': {\n    socket: 'activity.detections.details',\n    displayName: 'Activity Detections',\n    description: 'Activity app detection detail pages',\n  },\n  'ngsiem.workbench.details': {\n    socket: 'ngsiem.workbench.details',\n    displayName: 'Next-Gen SIEM',\n    description: 'Next-Gen SIEM workbench detail views',\n  },\n  'xdr.detections.panel': {\n    socket: 'xdr.detections.panel',\n    displayName: 'XDR Detections',\n    description: 'XDR detection panel views',\n  },\n};\n\n/**\n * Detects the current socket based on various context clues\n */\nexport function detectCurrentSocket(falconData?: any): SocketInfo {\n  // Method 1: Check URL patterns\n  const urlSocket = detectSocketFromUrl();\n  if (urlSocket && SOCKET_MAP[urlSocket]) {\n    const socketInfo = SOCKET_MAP[urlSocket];\n    return {\n      socket: socketInfo.socket,\n      displayName: socketInfo.displayName,\n      description: socketInfo.description,\n      detected: true,\n      detectionMethod: 'URL pattern analysis',\n    };\n  }\n\n  // Method 2: Check Falcon context data structure\n  const contextSocket = detectSocketFromContext(falconData);\n  if (contextSocket && SOCKET_MAP[contextSocket]) {\n    const socketInfo = SOCKET_MAP[contextSocket];\n    return {\n      socket: socketInfo.socket,\n      displayName: socketInfo.displayName,\n      description: socketInfo.description,\n      detected: true,\n      detectionMethod: 'Falcon context analysis',\n    };\n  }\n\n  // Method 3: Check document title or parent window\n  const titleSocket = detectSocketFromTitle();\n  if (titleSocket && SOCKET_MAP[titleSocket]) {\n    const socketInfo = SOCKET_MAP[titleSocket];\n    return {\n      socket: socketInfo.socket,\n      displayName: socketInfo.displayName,\n      description: socketInfo.description,\n      detected: true,\n      detectionMethod: 'Document title analysis',\n    };\n  }\n\n  // Fallback: Unknown socket\n  return {\n    socket: 'unknown',\n    displayName: 'Unknown Page',\n    description: 'Unable to detect current Falcon Console page',\n    detected: false,\n    detectionMethod: 'No detection method successful',\n  };\n}\n\n/**\n * Detect socket from URL patterns\n */\nfunction detectSocketFromUrl(): string | null {\n  try {\n    const currentUrl = window.location.href;\n    const parentUrl = window.parent?.location?.href ?? '';\n    const topUrl = window.top?.location?.href ?? '';\n\n    // Check current and parent URLs for patterns\n    const urlsToCheck = [currentUrl, parentUrl, topUrl].filter(Boolean);\n\n    for (const url of urlsToCheck) {\n      // Activity detections\n      if (url.includes('/activity/') && url.includes('/detections/')) {\n        return 'activity.detections.details';\n      }\n\n      // Next-Gen SIEM\n      if (url.includes('/ngsiem/') || url.includes('/workbench/')) {\n        return 'ngsiem.workbench.details';\n      }\n\n      // XDR detections\n      if (url.includes('/xdr/') && url.includes('/detections/')) {\n        return 'xdr.detections.panel';\n      }\n    }\n  } catch {\n    // Silently handle URL detection errors\n  }\n\n  return null;\n}\n\n/**\n * Detect socket from Falcon context data structure\n */\nfunction detectSocketFromContext(falconData?: any): string | null {\n  if (!falconData) return null;\n\n  try {\n    // Check for specific data structures that indicate the current page\n\n    // Next-Gen SIEM: Look for incident data\n    if (falconData.incident || falconData.ngsiem) {\n      return 'ngsiem.workbench.details';\n    }\n\n    // Detection pages: Look for detection data\n    if (falconData.detection) {\n      // Differentiate between activity and XDR detections\n      if (falconData.detection.source?.includes('activity') || falconData.activity) {\n        return 'activity.detections.details';\n      }\n      if (falconData.detection.source?.includes('xdr') || falconData.xdr) {\n        return 'xdr.detections.panel';\n      }\n      // Generic detection fallback\n      return 'activity.detections.details';\n    }\n  } catch {\n    // Silently handle context detection errors\n  }\n\n  return null;\n}\n\n/**\n * Detect socket from document title or DOM elements\n */\nfunction detectSocketFromTitle(): string | null {\n  try {\n    const title = document.title?.toLowerCase() ?? '';\n    const parentTitle = window.parent?.document?.title?.toLowerCase() ?? '';\n    const topTitle = window.top?.document?.title?.toLowerCase() ?? '';\n\n    const titlesToCheck = [title, parentTitle, topTitle].filter(Boolean);\n\n    for (const titleText of titlesToCheck) {\n      if (titleText.includes('activity') && titleText.includes('detection')) {\n        return 'activity.detections.details';\n      }\n\n      if (titleText.includes('siem') || titleText.includes('workbench')) {\n        return 'ngsiem.workbench.details';\n      }\n\n      if (titleText.includes('xdr') && titleText.includes('detection')) {\n        return 'xdr.detections.panel';\n      }\n    }\n  } catch {\n    // Silently handle title detection errors\n  }\n\n  return null;\n}\n\n/**\n * Get all available sockets from manifest\n */\nexport function getAllAvailableSockets(): SocketInfo[] {\n  return Object.values(SOCKET_MAP).map(socket => ({\n    ...socket,\n    detected: false,\n    detectionMethod: 'Not detected',\n  }));\n}\n\n/**\n * Format socket information for display\n */\nexport function formatSocketInfo(socketInfo: SocketInfo): string {\n  if (!socketInfo.detected) {\n    return `Socket: Unknown (${socketInfo.detectionMethod})`;\n  }\n\n  return `Socket: ${socketInfo.displayName} (${socketInfo.socket})`;\n}\n","// src/hooks/useJsonDataManager.ts\n\nimport { useState, useEffect, useCallback } from 'react';\n\nimport type { ContextOption } from '../types';\nimport { useCopyToClipboard } from './useCopyToClipboard';\nimport { detectCurrentSocket, type SocketInfo } from '../utils/socketDetection';\n\ninterface JsonContextData {\n  falcon_context: {\n    socket_info: SocketInfo;\n    falcon_object: {\n      full_data: any;\n      data_structure: string[];\n      incident: any;\n      detection: any;\n      available_entities: ContextOption[];\n      entity_counts: {\n        total_entities: number;\n        domains: number;\n        files: number;\n        ips: number;\n        fqdns: number;\n      };\n    };\n  };\n  request_data?: {\n    timestamp: string;\n    parameters: {\n      query: string;\n      model: string;\n      temperature: number;\n      stopWords: string[];\n      jsonSchema: string;\n      dataToInclude: string[];\n      selectedContext: string;\n    };\n  };\n  response_data?: {\n    timestamp: string;\n    execution_time_ms: number;\n    success: boolean;\n    from_cache: boolean;\n    content: string | null;\n    content_length: number;\n    error: string | null;\n    workflow_result: any;\n  };\n}\n\ninterface UseJsonDataManagerProps {\n  falconData: any;\n  availableContextOptions: ContextOption[];\n  contextCounts: {\n    total: number;\n    domains: number;\n    files: number;\n    ips: number;\n    fqdns: number;\n  };\n}\n\ninterface UseJsonDataManagerResult {\n  jsonContextData: JsonContextData | null;\n  initializeRequestData: (requestParams: any) => JsonContextData;\n  updateRequestData: (requestParams: any) => void;\n  updateResponseData: (responseData: any) => void;\n  copyFalconContext: () => Promise<void>;\n  copyRequestData: () => Promise<void>;\n  copyResponseData: () => Promise<void>;\n  copyRawResponse: () => Promise<void>;\n  // Copy states for visual feedback\n  contextCopyState: 'clipboard' | 'check-circle';\n  requestCopyState: 'clipboard' | 'check-circle';\n  responseCopyState: 'clipboard' | 'check-circle';\n  rawResponseCopyState: 'clipboard' | 'check-circle';\n}\n\n/**\n * Custom hook to manage JSON context data for the application\n * Handles Falcon context, request data, and response data with enhanced copy functionality\n */\nexport const useJsonDataManager = ({\n  falconData,\n  availableContextOptions,\n  contextCounts,\n}: UseJsonDataManagerProps): UseJsonDataManagerResult => {\n  const [jsonContextData, setJsonContextData] = useState<JsonContextData | null>(null);\n  \n  // Individual copy hooks for visual feedback\n  const { copyState: contextCopyState, copyToClipboard: copyContextToClipboard } = useCopyToClipboard();\n  const { copyState: requestCopyState, copyToClipboard: copyRequestToClipboard } = useCopyToClipboard();\n  const { copyState: responseCopyState, copyToClipboard: copyResponseToClipboard } = useCopyToClipboard();\n  const { copyState: rawResponseCopyState, copyToClipboard: copyRawResponseToClipboard } = useCopyToClipboard();\n\n  // Initialize falcon context data when component mounts\n  useEffect(() => {\n    if (falconData) {\n      // Detect current socket information\n      const socketInfo = detectCurrentSocket(falconData);\n\n      const falconContextData = {\n        socket_info: socketInfo,\n        falcon_object: {\n          full_data: falconData,\n          data_structure: Object.keys(falconData),\n          incident: falconData.incident ?? null,\n          detection: falconData.detection ?? null,\n          available_entities: availableContextOptions,\n          entity_counts: {\n            total_entities: contextCounts.total,\n            domains: contextCounts.domains,\n            files: contextCounts.files,\n            ips: contextCounts.ips,\n            fqdns: contextCounts.fqdns,\n          },\n        },\n      };\n\n      const initialJsonContext: JsonContextData = {\n        falcon_context: falconContextData,\n      };\n\n      setJsonContextData(initialJsonContext);\n    }\n  }, [falconData, availableContextOptions, contextCounts]);\n\n  // Initialize request data and return updated context\n  const initializeRequestData = useCallback(\n    (requestParams: {\n      query: string;\n      model: string;\n      temperature: number;\n      stopWords: string[];\n      jsonSchema: string;\n      dataToInclude: string[];\n      selectedContext: string;\n    }): JsonContextData => {\n      const executionStartTime = new Date().toISOString();\n\n      // Create the updated context directly\n      const updatedContext: JsonContextData = {\n        ...jsonContextData!,\n        request_data: {\n          timestamp: executionStartTime,\n          parameters: requestParams,\n        },\n      };\n\n      // Update state with the new context\n      setJsonContextData(updatedContext);\n      \n      // Return the context immediately for synchronous use\n      return updatedContext;\n    },\n    [jsonContextData]\n  );\n\n  // Update request data in real-time (preserves existing timestamp)\n  const updateRequestData = useCallback(\n    (requestParams: {\n      query: string;\n      model: string;\n      temperature: number;\n      stopWords: string[];\n      jsonSchema: string;\n      dataToInclude: string[];\n      selectedContext: string;\n    }) => {\n      setJsonContextData(prevState => {\n        if (!prevState) return prevState;\n        \n        return {\n          ...prevState,\n          request_data: {\n            timestamp: prevState.request_data?.timestamp ?? '', // Don't generate new timestamp during updates\n            parameters: requestParams,\n          },\n        };\n      });\n    },\n    []\n  );\n\n  // Update response data\n  const updateResponseData = useCallback(\n    (responseData: {\n      executionEndTime: string;\n      executionStartTime: string;\n      success: boolean;\n      fromCache?: boolean;\n      content?: string;\n      error?: string;\n      workflowResult?: any;\n    }) => {\n      setJsonContextData(prevState => {\n        if (!prevState) {\n          return prevState;\n        }\n\n        const newResponseData = {\n          timestamp: responseData.executionEndTime,\n          execution_time_ms:\n            new Date(responseData.executionEndTime).getTime() -\n            new Date(responseData.executionStartTime).getTime(),\n          success: responseData.success,\n          from_cache: responseData.fromCache ?? false,\n          content: responseData.content ?? null,\n          content_length: responseData.content?.length ?? 0,\n          error: responseData.error ?? null,\n          workflow_result: responseData.workflowResult,\n        };\n\n\n        return {\n          ...prevState,\n          response_data: newResponseData,\n        };\n      });\n    },\n    []\n  );\n\n  // Copy falcon context to clipboard with visual feedback\n  const copyFalconContext = useCallback(async () => {\n    const falconData = jsonContextData?.falcon_context ?? {};\n    await copyContextToClipboard(JSON.stringify(falconData, null, 2));\n  }, [jsonContextData, copyContextToClipboard]);\n\n  // Copy request data to clipboard with visual feedback\n  const copyRequestData = useCallback(async () => {\n    const requestData = jsonContextData?.request_data ?? {};\n    await copyRequestToClipboard(JSON.stringify(requestData, null, 2));\n  }, [jsonContextData, copyRequestToClipboard]);\n\n  // Copy response metadata to clipboard with visual feedback\n  const copyResponseData = useCallback(async () => {\n    if (!jsonContextData?.response_data) {\n      await copyResponseToClipboard(JSON.stringify({}, null, 2));\n      return;\n    }\n    \n    const responseData = jsonContextData.response_data;\n    // Create a copy without the raw content for metadata-only copy\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { content: _, ...metadataOnly } = responseData;\n    await copyResponseToClipboard(JSON.stringify(metadataOnly, null, 2));\n  }, [jsonContextData, copyResponseToClipboard]);\n\n  // Copy raw response content to clipboard with visual feedback\n  const copyRawResponse = useCallback(async () => {\n    const rawContent = jsonContextData?.response_data?.content ?? '';\n    await copyRawResponseToClipboard(rawContent);\n  }, [jsonContextData, copyRawResponseToClipboard]);\n\n  return {\n    jsonContextData,\n    initializeRequestData,\n    updateRequestData,\n    updateResponseData,\n    copyFalconContext,\n    copyRequestData,\n    copyResponseData,\n    copyRawResponse,\n    // Copy states for visual feedback\n    contextCopyState,\n    requestCopyState,\n    responseCopyState,\n    rawResponseCopyState,\n  };\n};\n\nexport type { JsonContextData, UseJsonDataManagerProps, UseJsonDataManagerResult };\n","// src/hooks/useTabManager.ts\n\nimport { SlIcon } from '@shoelace-style/shoelace/dist/react';\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\n\ntype TabType = 'request' | 'response' | 'json';\n\ninterface UseTabManagerProps {\n  hasSubmittedQuery: boolean;\n  loading: boolean;\n  errorMessage: string;\n  responseText: string;\n}\n\ninterface UseTabManagerReturn {\n  activeTab: TabType;\n  tabGroupRef: React.RefObject<any>;\n  handleTabChange: (e: CustomEvent) => void;\n  setActiveTab: (tab: TabType) => void;\n  getResponseTabIndicator: () => React.ReactNode;\n}\n\n/**\n * Custom hook to manage tab state and transitions\n * Extracted from Home.tsx for better separation of concerns\n */\nexport const useTabManager = ({\n  hasSubmittedQuery,\n  loading,\n  errorMessage,\n  responseText,\n}: UseTabManagerProps): UseTabManagerReturn => {\n  const [activeTab, setActiveTab] = useState<TabType>('request');\n  const tabGroupRef = useRef<any>(null);\n\n  // Handle tab change events from Shoelace TabGroup\n  const handleTabChange = useCallback((e: CustomEvent) => {\n    setActiveTab(e.detail.name as TabType);\n  }, []);\n\n  // Programmatically switch tabs when activeTab state changes\n  useEffect(() => {\n    if (tabGroupRef.current && activeTab) {\n      tabGroupRef.current.show(activeTab);\n    }\n  }, [activeTab]);\n\n  // Generate response tab indicator icon based on current state\n  const getResponseTabIndicator = useCallback((): React.ReactNode => {\n    if (!hasSubmittedQuery) return null;\n\n    if (loading) {\n      return React.createElement(SlIcon, {\n        name: 'hourglass-split',\n        className: 'mr-2',\n        style: { color: 'var(--cs-status-info)' },\n      });\n    }\n\n    if (errorMessage) {\n      return React.createElement(SlIcon, {\n        name: 'exclamation-triangle',\n        className: 'mr-2',\n        style: { color: 'var(--cs-status-error)' },\n      });\n    }\n\n    if (responseText) {\n      return React.createElement(SlIcon, {\n        name: 'check-circle',\n        className: 'mr-2',\n        style: { color: 'var(--cs-status-success)' },\n      });\n    }\n\n    return null;\n  }, [hasSubmittedQuery, loading, errorMessage, responseText]);\n\n  return {\n    activeTab,\n    tabGroupRef,\n    handleTabChange,\n    setActiveTab,\n    getResponseTabIndicator,\n  };\n};\n","// src/utils/constants.ts\n\n// Cache configuration\nexport const CACHE_TTL = 5 * 60 * 1000; // 5 minutes in milliseconds\nexport const MAX_CACHE_SIZE = 100;\n\n// API configuration - Note: Workflow polling now uses WORKFLOW_CONFIG in types.ts\n\n// UI configuration\nexport const DEBOUNCE_DELAY = 300; // milliseconds\nexport const MAX_QUERY_LENGTH = 10000; // characters\nexport const MIN_QUERY_LENGTH = 1; // characters\n\n// Charlotte models with space-safe values and display labels\nexport const CHARLOTTE_MODEL_OPTIONS = [\n  { value: 'claude-latest', label: 'Claude Latest' },\n  { value: 'claude-3-7-sonnet', label: 'Claude 3.7 Sonnet' },\n  { value: 'gpt-4o', label: 'GPT-4o' },\n] as const;\n\nexport const DEFAULT_MODEL = 'claude-latest'; // Space-safe default value\n\n// Model mapping utilities\n\n/**\n * Get display label for a model value\n * @param value - The model value (e.g., 'claude-latest')\n * @returns The display label (e.g., 'Claude Latest') or the original value if not found\n */\nexport const getModelLabel = (value: string): string => {\n  const option = CHARLOTTE_MODEL_OPTIONS.find(opt => opt.value === value);\n  return option?.label ?? value;\n};\n\n/**\n * Get model value from a display label\n * @param label - The display label (e.g., 'Claude Latest')\n * @returns The model value (e.g., 'claude-latest') or the original label if not found\n */\nexport const getModelValue = (label: string): string => {\n  const option = CHARLOTTE_MODEL_OPTIONS.find(opt => opt.label === label);\n  return option?.value ?? label;\n};\n\n// Temperature options with specific descriptions\nexport const TEMPERATURE_OPTIONS = [\n  { value: 0, label: '0.0 - Precise' },\n  { value: 0.1, label: '0.1' },\n  { value: 0.2, label: '0.2 - Focused' },\n  { value: 0.3, label: '0.3' },\n  { value: 0.4, label: '0.4 - Balanced' },\n  { value: 0.5, label: '0.5' },\n  { value: 0.6, label: '0.6 - Flexible' },\n  { value: 0.7, label: '0.7' },\n  { value: 0.8, label: '0.8 - Varied' },\n  { value: 0.9, label: '0.9' },\n  { value: 1, label: '1.0 - Creative' },\n] as const;\n\n// Charlotte workflow parameter defaults (from schema)\nexport const DEFAULT_TEMPERATURE = 0.1;\nexport const DEFAULT_STOP_WORDS: string[] = [];\nexport const DEFAULT_JSON_SCHEMA = '';\nexport const DEFAULT_DATA_TO_INCLUDE: string[] = [];\n\n// Charlotte Toolkit specific constants\nexport const DEFAULT_WORKFLOW_NAME = 'Charlotte Toolkit Chat Completion';\n\n// UI constants for better maintainability\nexport const LOADING_SPINNER_SIZE = 32; // 8 * 4 (h-8 w-8 in tailwind = 32px)\nexport const MIN_HEIGHT_SCREEN = '100vh';\n\n// Validation and optimization thresholds (consolidated from contextConstants.ts)\nexport const VALIDATION_THRESHOLDS = {\n  PROMPT_LENGTH: 8000, // characters (was PROMPT_OPTIMIZATION_THRESHOLD)\n  CONTEXT_ITEMS: 10, // max context items warning\n  STOP_WORDS_MAX: 3, // max stop words warning\n  LONG_PROMPT: 5000, // characters\n  JSON_SCHEMA_SIZE: 2000, // characters\n  PAYLOAD_SIZE_HIGH: 50000, // bytes\n  PAYLOAD_SIZE_MEDIUM: 20000, // bytes\n} as const;\n","// src/utils/helpers.ts\n\n/**\n * Wait for a specified amount of time\n * @param ms - Time to wait in milliseconds\n * @returns Promise that resolves after the specified time\n */\nexport const wait = (ms: number = 1000): Promise<void> =>\n  new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Create display name for Charlotte workflow\n * @param modelName - Selected Charlotte model name\n * @returns Display name showing the selected model with proper formatting\n */\nexport const getDisplayModelName = (modelName: string): string => {\n  // Normalize model name for display (convert underscores to spaces)\n  return modelName.replace(/_/g, ' ');\n};\n\n/**\n * Simple hash function for cache key generation\n * @param str - String to hash\n * @returns Hash number\n */\nconst simpleHash = (inputString: string): string => {\n  let hash = 0;\n  for (let i = 0; i < inputString.length; i++) {\n    const char = inputString.codePointAt(i) ?? 0;\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return Math.abs(hash).toString(36);\n};\n\n/**\n * Generate optimized cache key for Charlotte workflow requests\n * Single-pass hashing with consistent parameter serialization\n * @param query - User query\n * @param model - Model name\n * @param temperature - Temperature setting\n * @param stopWords - Stop words array\n * @param jsonSchema - JSON schema string\n * @param dataToInclude - Data to include array\n * @returns Cache key string\n */\nexport const generateCacheKey = (\n  query: string,\n  model: string,\n  temperature: number,\n  stopWords: string[],\n  jsonSchema: string,\n  dataToInclude: string[]\n): string => {\n  // Serialize all parameters into single string for consistent hashing\n  const cacheParams = {\n    query: query.slice(0, 100), // Truncate for performance while maintaining uniqueness\n    model,\n    temperature,\n    stopWords: stopWords.length > 0 ? stopWords.join('|') : '',\n    jsonSchema: jsonSchema.trim().slice(0, 50),\n    dataToInclude: dataToInclude.length > 0 ? dataToInclude.join('|') : ''\n  };\n\n  // Single-pass hash generation - much more efficient than multiple btoa() calls\n  const paramString = JSON.stringify(cacheParams);\n  const hash = simpleHash(paramString);\n\n  return `charlotte:${hash}`;\n};\n\n/**\n * Validate query input\n * @param query - Query string to validate\n * @returns Validation result\n */\nexport const validateQuery = (query: string): { isValid: boolean; error?: string } => {\n  if (!query || typeof query !== 'string') {\n    return { isValid: false, error: 'Query is required' };\n  }\n\n  const trimmed = query.trim();\n  if (trimmed.length === 0) {\n    return { isValid: false, error: 'Query cannot be empty' };\n  }\n\n  if (trimmed.length > 10000) {\n    return { isValid: false, error: 'Query is too long (max 10,000 characters)' };\n  }\n\n  return { isValid: true };\n};\n\n/**\n * Format error message for display\n * @param error - Error object or string\n * @returns Formatted error message\n */\nexport const formatErrorMessage = (error: unknown): string => {\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  if (error instanceof Error) {\n    return error.message;\n  }\n\n  if (error && typeof error === 'object' && 'message' in error) {\n    return String(error.message);\n  }\n\n  return 'An unexpected error occurred';\n};\n\n/**\n * Builds MITRE ATT&CK URL from technique ID\n * @param techniqueId - MITRE technique ID (e.g., \"T1027\", \"T1566.001\")\n * @returns MITRE ATT&CK URL\n */\nexport const buildMitreUrl = (techniqueId: string): string => {\n  const baseUrl = 'https://attack.mitre.org/techniques/';\n  \n  // Convert dot notation to slash notation for sub-techniques\n  // T1566.001 → T1566/001/\n  // T1027 → T1027/\n  const urlPath = techniqueId.replace('.', '/');\n  \n  return `${baseUrl}${urlPath}/`;\n};\n","// src/services/workflow/types.ts\n\n/**\n * Interface for security context (simplified)\n */\nexport interface SecurityContext {\n  incidentId?: string;\n  hostName?: string;\n  detectionType?: string;\n  severity?: string;\n  timestamp?: string;\n  additionalContext?: Record<string, any>;\n}\n\n/**\n * Interface for workflow execution parameters\n */\nexport interface WorkflowExecutionParams {\n  query: string;\n  model: string;\n  temperature: number;\n  stopWords: string[];\n  jsonSchema: string;\n  dataToInclude: string[];\n  selectedContext: string;\n  enableCaching: boolean;\n  enablePromptEnhancement?: boolean;\n  securityContext?: SecurityContext;\n}\n\n/**\n * Interface for workflow execution result\n */\nexport interface WorkflowExecutionResult {\n  success: boolean;\n  content?: string;\n  error?: string;\n  fromCache?: boolean;\n}\n\n/**\n * Enum for workflow execution statuses\n */\nexport enum WorkflowStatus {\n  PENDING = 'Pending',\n  IN_PROGRESS = 'InProgress',\n  RUNNING = 'Running',\n  COMPLETED = 'Completed',\n  FAILED = 'Failed',\n  UNKNOWN = 'Unknown',\n}\n\n/**\n * Interface for workflow execution payload\n */\nexport interface WorkflowPayload {\n  user_prompt: string;\n  model_name: string;\n  temperature: number;\n  stop_words?: string[];\n  json_schema?: string;\n  data_to_include?: string[];\n}\n\n/**\n * Interface for API error responses\n */\nexport interface ApiError {\n  message: string;\n  code?: string;\n}\n\n/**\n * Interface for standard API responses\n */\nexport interface ApiResponse<T = unknown> {\n  resources?: T[];\n  errors?: ApiError[];\n}\n\n/**\n * Interface for workflow polling result\n */\nexport interface WorkflowPollResult {\n  status: WorkflowStatus;\n  output_data?: Record<string, unknown>;\n  error?: string;\n  pollResults?: any[];\n}\n\n/**\n * Interface for workflow execution data from API\n */\nexport interface WorkflowExecutionData {\n  status: WorkflowStatus;\n  output_data?: Record<string, unknown>;\n}\n\n/**\n * Configuration constants for workflow execution\n */\nexport const WORKFLOW_CONFIG = {\n  MAX_POLL_ATTEMPTS: 90,\n  WORKFLOW_NAME: 'Charlotte Toolkit Chat Completion',\n  WORKFLOW_DEPTH: 0,\n} as const;\n\n// Note: Model mapping and options are now centralized in utils/constants.ts\n// This reduces duplication and keeps UI-related model definitions in one place\n","// src/services/workflow/WorkflowContentExtractor.ts\n\n/**\n * Content extraction utilities for workflow output parsing\n * Handles various workflow output formats and ensures robust content extraction\n */\n\n/**\n * Extract content from workflow output data\n * Tries multiple extraction strategies to handle different workflow output formats\n * @param outputData - Workflow output data from API response\n * @returns Extracted content string\n * @throws Error if no content can be extracted\n */\nexport const extractWorkflowContent = (outputData: any): string => {\n  if (!outputData) {\n    throw new Error('No output data received from workflow');\n  }\n\n  let content = '';\n\n  // Strategy 1: Charlotte workflow dynamic completion field\n  // Pattern: \"activity_{UUID}.FaaS.nlpassistantapi.llminvocator_handler.completion\"\n  const dynamicCompletionField = findDynamicCompletionField(outputData);\n  if (dynamicCompletionField) {\n    content = outputData[dynamicCompletionField];\n  }\n  // Strategy 2: Simple Charlotte schema format\n  else if (outputData.completion) {\n    content = outputData.completion;\n  }\n  // Strategy 3: Legacy fallback formats\n  else {\n    content = extractFromLegacyFormats(outputData);\n  }\n\n  // Validate extracted content\n  if (!content || typeof content !== 'string') {\n    logExtractionFailure(outputData);\n    throw new Error('Unable to extract content from workflow output');\n  }\n\n  // Validate content is not empty\n  if (!content.trim()) {\n    throw new Error('Workflow completed but produced no content');\n  }\n\n  // Always preserve JSON structure for Charlotte AI responses\n  const trimmedContent = content.trim();\n\n  // Debug logging disabled for production\n\n  return trimmedContent;\n};\n\n/**\n * Find dynamic completion field in Charlotte workflow output\n * @param outputData - Output data to search\n * @returns Field name if found, null otherwise\n */\nconst findDynamicCompletionField = (outputData: any): string | null => {\n  const found = Object.keys(outputData).find(\n    key =>\n      key.includes('.completion') &&\n      !key.includes('.meta') && // Exclude metadata fields\n      key.includes('llminvocator_handler')\n  );\n  if (found === undefined) {\n    return null;\n  }\n  return found;\n};\n\n/**\n * Extract content from legacy workflow output formats\n * @param outputData - Output data to extract from\n * @returns Extracted content or empty string\n */\nconst extractFromLegacyFormats = (outputData: any): string => {\n  // Try standard content fields\n  if (outputData.content) {\n    return outputData.content;\n  }\n\n  if (outputData.response) {\n    return outputData.response;\n  }\n\n  if (outputData.result) {\n    return outputData.result;\n  }\n\n  if (outputData.output) {\n    return outputData.output;\n  }\n\n  // Handle string output data directly\n  if (typeof outputData === 'string') {\n    return outputData;\n  }\n\n  // Try generic completion field pattern\n  const genericCompletionField = Object.keys(outputData).find(\n    key => key.endsWith('.completion') && !key.includes('.meta')\n  );\n\n  if (genericCompletionField && typeof outputData[genericCompletionField] === 'string') {\n    return outputData[genericCompletionField];\n  }\n\n  // Last resort: try to extract from nested structure\n  return extractFromNestedStructure(outputData);\n};\n\n/**\n * Attempt to extract content from nested object structures\n * @param outputData - Output data with nested structure\n * @returns Extracted content or empty string\n */\nconst extractFromNestedStructure = (outputData: any): string => {\n  const keys = Object.keys(outputData);\n  if (keys.length === 0) {\n    return '';\n  }\n\n  const [firstKey] = keys;\n  if (!firstKey) {\n    return '';\n  }\n\n  const firstValue = outputData[firstKey];\n\n  if (typeof firstValue === 'string') {\n    return firstValue;\n  }\n\n  if (firstValue && typeof firstValue === 'object') {\n    if (firstValue.completion) {\n      return firstValue.completion;\n    }\n\n    if (firstValue.content) {\n      return firstValue.content;\n    }\n  }\n\n  return '';\n};\n\n/**\n * Log detailed information about extraction failure for debugging\n * @param outputData - Output data that failed extraction\n */\nconst logExtractionFailure = (outputData: any): void => {\n  // console.error('=== CONTENT EXTRACTION FAILURE ===');\n  // console.error('Unable to extract content from output data:', outputData);\n  // console.error('Available fields:', Object.keys(outputData));\n  // console.error('Field types:', Object.keys(outputData).map(...));\n\n  // Log potential completion fields for debugging\n  const potentialFields = Object.keys(outputData).filter(\n    key =>\n      key.includes('completion') ||\n      key.includes('content') ||\n      key.includes('response') ||\n      key.includes('result')\n  );\n\n  if (potentialFields.length > 0) {\n    // console.error('Potential content fields found:', potentialFields);\n    potentialFields.forEach(_field => {\n      // console.error(`${field}:`, typeof outputData[field], outputData[field]);\n    });\n  }\n};\n\n/**\n * Analyze workflow output structure for debugging\n * @param outputData - Output data to analyze\n * @returns Analysis summary\n */\nexport const analyzeWorkflowOutput = (\n  outputData: any\n): {\n  hasContent: boolean;\n  contentFields: string[];\n  structure: 'simple' | 'nested' | 'complex';\n  recommendedExtraction: string | null;\n} => {\n  if (!outputData || typeof outputData !== 'object') {\n    return {\n      hasContent: false,\n      contentFields: [],\n      structure: 'simple',\n      recommendedExtraction: null,\n    };\n  }\n\n  const keys = Object.keys(outputData);\n  const contentFields = keys.filter(\n    key =>\n      key.includes('completion') ||\n      key.includes('content') ||\n      key.includes('response') ||\n      key.includes('result') ||\n      key.includes('output')\n  );\n\n  // Determine structure complexity\n  let structure: 'simple' | 'nested' | 'complex' = 'simple';\n  const hasNestedObjects = keys.some(key => outputData[key] && typeof outputData[key] === 'object');\n\n  if (hasNestedObjects) {\n    structure = keys.length > 3 ? 'complex' : 'nested';\n  }\n\n  // Find recommended extraction field\n  let recommendedExtraction: string | null = null;\n\n  // Prioritize Charlotte-specific fields\n  const dynamicField = findDynamicCompletionField(outputData);\n  if (dynamicField) {\n    recommendedExtraction = dynamicField;\n  } else if (outputData.completion) {\n    recommendedExtraction = 'completion';\n  } else if (contentFields.length > 0) {\n    const [firstField] = contentFields;\n    recommendedExtraction = firstField ?? null;\n  }\n\n  return {\n    hasContent: contentFields.length > 0,\n    contentFields,\n    structure,\n    recommendedExtraction,\n  };\n};\n\n/**\n * Validate extracted content quality\n * @param content - Extracted content to validate\n * @returns Validation result with quality metrics\n */\nexport const validateExtractedContent = (\n  content: string\n): {\n  isValid: boolean;\n  isEmpty: boolean;\n  wordCount: number;\n  hasStructuredData: boolean;\n  estimatedFormat: 'json' | 'markdown' | 'html' | 'text';\n  warnings: string[];\n} => {\n  const warnings: string[] = [];\n\n  if (!content || typeof content !== 'string') {\n    return {\n      isValid: false,\n      isEmpty: true,\n      wordCount: 0,\n      hasStructuredData: false,\n      estimatedFormat: 'text',\n      warnings: ['Content is not a string or is null/undefined'],\n    };\n  }\n\n  const trimmedContent = content.trim();\n  const isEmpty = trimmedContent.length === 0;\n  const wordCount = trimmedContent.split(/\\s+/).length;\n\n  // Detect content format\n  let estimatedFormat: 'json' | 'markdown' | 'html' | 'text' = 'text';\n  let hasStructuredData = false;\n\n  try {\n    JSON.parse(trimmedContent);\n    estimatedFormat = 'json';\n    hasStructuredData = true;\n  } catch {\n    if (trimmedContent.includes('<') && trimmedContent.includes('>')) {\n      estimatedFormat = 'html';\n    } else if (trimmedContent.includes('#') || trimmedContent.includes('```')) {\n      estimatedFormat = 'markdown';\n    }\n  }\n\n  // Generate warnings\n  if (isEmpty) {\n    warnings.push('Content is empty after trimming');\n  } else if (wordCount < 5) {\n    warnings.push('Content is very short (less than 5 words)');\n  } else if (wordCount > 5000) {\n    warnings.push('Content is very long (over 5000 words)');\n  }\n\n  if (trimmedContent.includes('Error:') || trimmedContent.includes('error:')) {\n    warnings.push('Content appears to contain error messages');\n  }\n\n  return {\n    isValid: !isEmpty,\n    isEmpty,\n    wordCount,\n    hasStructuredData,\n    estimatedFormat,\n    warnings,\n  };\n};\n\n/**\n * Extract metadata from workflow output if available\n * @param outputData - Workflow output data\n * @returns Extracted metadata object\n */\nexport const extractWorkflowMetadata = (outputData: any): Record<string, any> => {\n  if (!outputData || typeof outputData !== 'object') {\n    return {};\n  }\n\n  const metadata: Record<string, any> = {};\n\n  // Look for metadata fields\n  Object.keys(outputData).forEach(key => {\n    if (key.includes('.meta') || key.includes('metadata') || key.includes('_meta')) {\n      metadata[key] = outputData[key];\n    }\n  });\n\n  // Extract timing information if available\n  if (outputData.execution_time || outputData.processing_time) {\n    metadata.timing = {\n      execution_time: outputData.execution_time,\n      processing_time: outputData.processing_time,\n    };\n  }\n\n  // Extract model information if available\n  if (outputData.model_used || outputData.model_name) {\n    metadata.model = {\n      model_used: outputData.model_used,\n      model_name: outputData.model_name,\n    };\n  }\n\n  return metadata;\n};\n","// src/utils/promptEngineer.ts\n\n/**\n * Simplified prompt engineering utilities for Charlotte AI\n * Provides intelligent use case detection and schema generation for security analysis\n */\n\n/**\n * Supported use cases for Charlotte AI security analysis\n */\nexport interface PromptOptions {\n  useCase:\n    | 'hash_analysis'\n    | 'ip_investigation'\n    | 'domain_analysis'\n    | 'incident_response'\n    | 'general_security'\n    | 'malware_analysis'\n    | 'threat_hunting';\n}\n\n/**\n * Detect the most appropriate use case from a user query\n * Uses pattern matching and keyword analysis to determine the best analysis type\n * @param query - User input query to analyze\n * @returns The detected use case that best matches the query content\n */\nexport const detectUseCase = (query: string): PromptOptions['useCase'] => {\n  const lowercaseQuery = query.toLowerCase();\n\n  // Hash patterns\n  if (/\\b[a-f0-9]{32}\\b|\\b[a-f0-9]{40}\\b|\\b[a-f0-9]{64}\\b/i.test(query)) {\n    return 'hash_analysis';\n  }\n\n  // IP patterns\n  if (/\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/.test(query)) {\n    return 'ip_investigation';\n  }\n\n  // Domain patterns\n  if (/\\b[a-z0-9.-]+\\.[a-z]{2,}\\b/i.test(query)) {\n    return 'domain_analysis';\n  }\n\n  // Keyword detection\n  if (\n    lowercaseQuery.includes('incident') ||\n    lowercaseQuery.includes('response') ||\n    lowercaseQuery.includes('containment')\n  ) {\n    return 'incident_response';\n  }\n\n  if (\n    lowercaseQuery.includes('malware') ||\n    lowercaseQuery.includes('virus') ||\n    lowercaseQuery.includes('trojan')\n  ) {\n    return 'malware_analysis';\n  }\n\n  if (\n    lowercaseQuery.includes('hunt') ||\n    lowercaseQuery.includes('hunting') ||\n    lowercaseQuery.includes('proactive')\n  ) {\n    return 'threat_hunting';\n  }\n\n  return 'general_security';\n};\n\n/**\n * Create optimized JSON schema for structured Charlotte AI responses\n * Generates use case-specific schemas with appropriate fields and validation\n * @param useCase - The detected or specified use case for analysis\n * @returns JSON schema string optimized for the specific security analysis type\n */\nexport const createSecurityResponseSchema = (useCase: PromptOptions['useCase']): string => {\n  // Generate use-case specific schema\n  switch (useCase) {\n    case 'hash_analysis':\n    case 'malware_analysis':\n      return createMalwareAnalysisSchema();\n\n    case 'ip_investigation':\n      return createIPInvestigationSchema();\n\n    case 'domain_analysis':\n      return createDomainAnalysisSchema();\n\n    case 'incident_response':\n      return createIncidentResponseSchema();\n\n    case 'threat_hunting':\n      return createThreatHuntingSchema();\n\n    default:\n      return createGeneralSecuritySchema();\n  }\n};\n\n/**\n * Create simplified universal security analysis schema\n * Provides clean, focused structure for all security analysis types\n * @returns JSON schema string for security analysis responses\n */\nconst createUniversalSecuritySchema = (): string => {\n  const schema = {\n    type: 'object',\n    properties: {\n      executive_summary: {\n        type: 'string',\n        description: 'Brief executive overview for leadership',\n      },\n      \n      threat_level: {\n        type: 'string',\n        enum: ['Low', 'Medium', 'High', 'Critical'],\n        description: 'Overall threat severity',\n      },\n      \n      confidence_level: {\n        type: 'string',\n        enum: ['Low', 'Medium', 'High'],\n        description: 'Analysis confidence level',\n      },\n\n      // Unified priority actions - replaces all multiple recommendation arrays\n      priority_actions: {\n        type: 'array',\n        items: { type: 'string', maxLength: 150 },\n        maxItems: 6,\n        description: 'Top priority security actions ranked by urgency and impact',\n      },\n\n      // Technical analysis details\n      technical_details: {\n        type: 'string',\n        maxLength: 600,\n        description: 'Concise technical analysis and findings',\n      },\n\n      // Unified IOCs structure (when applicable)\n      iocs: {\n        type: 'object',\n        properties: {\n          hashes: { type: 'array', items: { type: 'string' } },\n          ips: { type: 'array', items: { type: 'string' } },\n          domains: { type: 'array', items: { type: 'string' } },\n          urls: { type: 'array', items: { type: 'string' } },\n          file_paths: { type: 'array', items: { type: 'string' } },\n        },\n        description: 'Indicators of Compromise when applicable',\n      },\n\n      // MITRE techniques (when applicable)\n      mitre_techniques: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            technique_id: { type: 'string' },\n            technique_name: { type: 'string' },\n            description: { type: 'string' },\n          },\n        },\n        description: 'MITRE ATT&CK techniques when applicable',\n      },\n\n      // Analysis methodology and reasoning\n      reasoning_assessment: {\n        type: 'string',\n        maxLength: 800,\n        description: 'Concise explanation of analytical methodology and confidence reasoning: data sources consulted, key decision factors, specific evidence supporting findings, and reasoning behind confidence levels. Focus on essential rationale rather than comprehensive details.',\n      },\n    },\n    required: [\n      'executive_summary',\n      'threat_level',\n      'confidence_level',\n      'priority_actions',\n      'technical_details',\n      'reasoning_assessment',\n    ],\n  };\n\n  return JSON.stringify(schema, null, 2);\n};\n\n/**\n * Create simplified universal security analysis schema\n * Provides clean, focused structure for all security analysis types\n * @returns JSON schema string for security analysis responses\n */\nconst createMalwareAnalysisSchema = (): string => {\n  return createUniversalSecuritySchema();\n};\n\n/**\n * Create IP investigation schema - now uses simplified universal schema\n * @returns JSON schema string for IP investigation responses\n */\nconst createIPInvestigationSchema = (): string => {\n  return createUniversalSecuritySchema();\n};\n\n/**\n * Create domain analysis schema - now uses simplified universal schema\n * @returns JSON schema string for domain analysis responses\n */\nconst createDomainAnalysisSchema = (): string => {\n  return createUniversalSecuritySchema();\n};\n\n/**\n * Create incident response schema - now uses simplified universal schema\n * @returns JSON schema string for incident response workflows\n */\nconst createIncidentResponseSchema = (): string => {\n  return createUniversalSecuritySchema();\n};\n\n/**\n * Create threat hunting schema - now uses simplified universal schema\n * @returns JSON schema string for threat hunting activities\n */\nconst createThreatHuntingSchema = (): string => {\n  return createUniversalSecuritySchema();\n};\n\n/**\n * Create general security analysis schema - now uses simplified universal schema\n * @returns JSON schema string for general security analysis responses\n */\nconst createGeneralSecuritySchema = (): string => {\n  return createUniversalSecuritySchema();\n};\n","// src/services/workflow/WorkflowPayloadBuilder.ts\n\nimport { createSecurityResponseSchema, detectUseCase } from '../../utils/promptEngineer';\n\nimport { \n  getModelLabel,\n  VALIDATION_THRESHOLDS,\n} from '../../utils/constants';\nimport type { WorkflowExecutionParams } from './types';\n\n/**\n * Build workflow execution payload with enhanced prompting\n * Handles model name normalization, prompt enhancement, and parameter formatting\n * @param params - Workflow execution parameters\n * @returns Formatted payload for workflow execution\n */\nexport const buildWorkflowPayload = (params: WorkflowExecutionParams): Record<string, any> => {\n  const { query, model, temperature, selectedContext } = params;\n\n  // Normalize model name to ensure schema compliance\n  const normalizedModel = normalizeModelName(model);\n\n  // Enhanced prompt engineering for Charlotte AI\n  let finalPrompt = query;\n  let enhancedJsonSchema = params.jsonSchema;\n\n  // Apply prompt enhancement if enabled (default: true for better Charlotte AI results)\n  const shouldEnhancePrompts = params.enablePromptEnhancement !== false;\n\n  if (shouldEnhancePrompts) {\n    // console.log('🔬 Enhancing prompt for Charlotte AI security expertise...');\n\n    // Use query as-is (simplified prompt handling)\n    finalPrompt = query;\n\n    // Auto-generate structured schema if none provided\n    if (!enhancedJsonSchema?.trim()) {\n      const detectedUseCase = detectUseCase(query);\n      enhancedJsonSchema = createSecurityResponseSchema(detectedUseCase);\n      // console.log(`📋 Auto-generated ${detectedUseCase} response schema`);\n    }\n\n    // console.log('✅ Prompt enhancement applied for better Charlotte AI analysis');\n  } else {\n    // console.log('📝 Using raw prompt (enhancement disabled)');\n    finalPrompt = query;\n  }\n\n  // Build base payload\n  const payload: Record<string, any> = {\n    user_prompt: finalPrompt,\n    model_name: normalizedModel,\n    temperature,\n  };\n\n  // Add optional parameters if provided\n  addOptionalParameters(payload, params, enhancedJsonSchema, selectedContext);\n\n  return payload;\n};\n\n/**\n * Normalize model name to match workflow schema exactly\n * @param modelName - Model name that might have underscores\n * @returns Normalized model name with spaces as required by schema\n */\nexport const normalizeModelName = (modelName: string): string => {\n  return getModelLabel(modelName);\n};\n\n/**\n * Add optional parameters to payload if provided\n * @param payload - Base payload to enhance\n * @param params - Original workflow parameters\n * @param enhancedJsonSchema - Processed JSON schema\n * @param selectedContext - Selected context data\n */\nconst addOptionalParameters = (\n  payload: Record<string, any>,\n  params: WorkflowExecutionParams,\n  enhancedJsonSchema: string,\n  selectedContext: string\n): void => {\n  // Add stop words if provided\n  if (params.stopWords && params.stopWords.length > 0) {\n    payload.stop_words = params.stopWords;\n  }\n\n  // Add JSON schema if provided\n  if (enhancedJsonSchema?.trim()) {\n    payload.json_schema = enhancedJsonSchema.trim();\n  }\n\n  // Add data to include if provided\n  if (params.dataToInclude && params.dataToInclude.length > 0) {\n    payload.data_to_include = [...params.dataToInclude];\n  }\n\n  // Add context data if selected\n  if (selectedContext?.trim()) {\n    if (payload.data_to_include) {\n      payload.data_to_include = [...payload.data_to_include, selectedContext];\n    } else {\n      payload.data_to_include = [selectedContext];\n    }\n  }\n};\n\n/**\n * Validate payload before sending to workflow\n * @param payload - Payload to validate\n * @returns Validation result\n */\nexport const validatePayload = (\n  payload: Record<string, any>\n): {\n  isValid: boolean;\n  error?: string;\n  warnings?: string[];\n} => {\n  const warnings: string[] = [];\n\n  // Required field validation\n  if (!payload.user_prompt || typeof payload.user_prompt !== 'string') {\n    return { isValid: false, error: 'user_prompt is required and must be a string' };\n  }\n\n  if (!payload.model_name || typeof payload.model_name !== 'string') {\n    return { isValid: false, error: 'model_name is required and must be a string' };\n  }\n\n  if (typeof payload.temperature !== 'number') {\n    return { isValid: false, error: 'temperature is required and must be a number' };\n  }\n\n  // Optional field validation\n  if (payload.stop_words && !Array.isArray(payload.stop_words)) {\n    return { isValid: false, error: 'stop_words must be an array if provided' };\n  }\n\n  if (payload.json_schema && typeof payload.json_schema !== 'string') {\n    return { isValid: false, error: 'json_schema must be a string if provided' };\n  }\n\n  if (payload.data_to_include && !Array.isArray(payload.data_to_include)) {\n    return { isValid: false, error: 'data_to_include must be an array if provided' };\n  }\n\n  // Generate warnings for optimization\n  if (payload.user_prompt.length > VALIDATION_THRESHOLDS.PROMPT_LENGTH) {\n    warnings.push('Prompt is very long - consider shortening for optimal performance');\n  }\n\n  if (payload.stop_words && payload.stop_words.length > VALIDATION_THRESHOLDS.STOP_WORDS_MAX) {\n    warnings.push('Many stop words may constrain response creativity');\n  }\n\n  if (payload.data_to_include && payload.data_to_include.length > VALIDATION_THRESHOLDS.CONTEXT_ITEMS) {\n    warnings.push('Large amount of context data may affect response focus');\n  }\n\n  return {\n    isValid: true,\n    ...(warnings.length > 0 && { warnings }),\n  };\n};\n\n/**\n * Create payload for different use cases with optimized parameters\n * @param baseParams - Base workflow parameters\n * @param useCase - Specific use case for optimization\n * @returns Optimized payload\n */\nexport const createOptimizedPayload = (\n  baseParams: WorkflowExecutionParams,\n  useCase: 'security_analysis' | 'threat_hunting' | 'incident_response' | 'general'\n): Record<string, any> => {\n  const optimizations = getUseCaseOptimizations(useCase);\n\n  // Apply use case specific optimizations\n  const optimizedParams: WorkflowExecutionParams = {\n    ...baseParams,\n    ...optimizations.parameterOverrides,\n    enablePromptEnhancement: optimizations.enablePromptEnhancement,\n  };\n\n  const payload = buildWorkflowPayload(optimizedParams);\n\n  // Add use case specific metadata\n  payload._useCase = useCase;\n  payload._optimization = optimizations.name;\n\n  return payload;\n};\n\n/**\n * Get optimization settings for different use cases\n * @param useCase - Use case to optimize for\n * @returns Optimization configuration\n */\nconst getUseCaseOptimizations = (useCase: string) => {\n  const optimizations = {\n    security_analysis: {\n      name: 'Security Analysis Optimized',\n      enablePromptEnhancement: true,\n      parameterOverrides: {\n        temperature: 0.3, // More focused for analysis\n      },\n    },\n    threat_hunting: {\n      name: 'Threat Hunting Optimized',\n      enablePromptEnhancement: true,\n      parameterOverrides: {\n        temperature: 0.5, // Balanced for discovery\n      },\n    },\n    incident_response: {\n      name: 'Incident Response Optimized',\n      enablePromptEnhancement: true,\n      parameterOverrides: {\n        temperature: 0.2, // Very focused for critical decisions\n      },\n    },\n    general: {\n      name: 'General Purpose',\n      enablePromptEnhancement: true,\n      parameterOverrides: {},\n    },\n  };\n\n  return optimizations[useCase as keyof typeof optimizations] ?? optimizations.general;\n};\n\n/**\n * Estimate payload size for performance optimization\n * @param payload - Payload to analyze\n * @returns Size estimation and recommendations\n */\nexport const analyzePayloadSize = (\n  payload: Record<string, any>\n): {\n  estimatedBytes: number;\n  characterCount: number;\n  complexity: 'low' | 'medium' | 'high';\n  recommendations: string[];\n} => {\n  const jsonString = JSON.stringify(payload);\n  const estimatedBytes = new Blob([jsonString]).size;\n  const characterCount = jsonString.length;\n\n  let complexity: 'low' | 'medium' | 'high' = 'low';\n  const recommendations: string[] = [];\n\n  // Determine complexity\n  if (estimatedBytes > VALIDATION_THRESHOLDS.PAYLOAD_SIZE_HIGH) {\n    complexity = 'high';\n    recommendations.push('Consider breaking down the request into smaller chunks');\n  } else if (estimatedBytes > VALIDATION_THRESHOLDS.PAYLOAD_SIZE_MEDIUM) {\n    complexity = 'medium';\n    recommendations.push('Monitor response times for potential optimization');\n  }\n\n  // Specific recommendations\n  if (payload.user_prompt && payload.user_prompt.length > VALIDATION_THRESHOLDS.LONG_PROMPT) {\n    recommendations.push('Consider shortening the main prompt');\n  }\n\n  if (payload.data_to_include && payload.data_to_include.length > (VALIDATION_THRESHOLDS.CONTEXT_ITEMS - 2)) {\n    recommendations.push('Reduce context data for better focus');\n  }\n\n  if (payload.json_schema && payload.json_schema.length > VALIDATION_THRESHOLDS.JSON_SCHEMA_SIZE) {\n    recommendations.push('Simplify JSON schema for faster processing');\n  }\n\n  return {\n    estimatedBytes,\n    characterCount,\n    complexity,\n    recommendations,\n  };\n};\n\n/**\n * Create minimal payload for testing purposes\n * @param query - Test query\n * @param model - Model to use\n * @returns Minimal test payload\n */\nexport const createTestPayload = (query: string, model: string): Record<string, any> => {\n  return {\n    user_prompt: query,\n    model_name: normalizeModelName(model),\n    temperature: 0.5,\n  };\n};\n\n/**\n * Log payload information for debugging\n * @param payload - Payload to log\n * @param context - Additional context for logging\n */\nexport const logPayloadInfo = (payload: Record<string, any>, _context: string = ''): void => {\n  // console.log(`=== PAYLOAD INFO ${context ? `(${context})` : ''} ===`);\n  // console.log('Model:', payload.model_name);\n  // console.log('Temperature:', payload.temperature);\n  // console.log('Prompt length:', payload.user_prompt?.length || 0);\n  // console.log('Has schema:', !!payload.json_schema);\n  // console.log('Stop words:', payload.stop_words?.length || 0);\n  // console.log('Context items:', payload.data_to_include?.length || 0);\n\n  const sizeInfo = analyzePayloadSize(payload);\n  // console.log('Estimated size:', `${sizeInfo.estimatedBytes} bytes (${sizeInfo.complexity} complexity)`);\n\n  if (sizeInfo.recommendations.length > 0) {\n    // console.log('Recommendations:', sizeInfo.recommendations);\n  }\n};\n","// src/services/workflow/WorkflowPolling.ts\n\nimport FalconApi from '@crowdstrike/foundry-js';\n\nimport { wait } from '../../utils/helpers';\n\nimport { WorkflowStatus, WORKFLOW_CONFIG, type WorkflowPollResult } from './types';\n\n/**\n * Poll workflow for completion with simple 1-second intervals\n * Handles status checking, retry logic, and timeout management\n * @param falcon - Falcon API instance\n * @param workflowId - Workflow execution ID\n * @param options - Polling configuration options\n * @returns Promise with workflow completion result\n */\nexport const pollWorkflowCompletion = async (\n  falcon: FalconApi,\n  workflowId: string,\n  options: {\n    maxAttempts?: number;\n  } = {}\n): Promise<WorkflowPollResult> => {\n  const { maxAttempts = WORKFLOW_CONFIG.MAX_POLL_ATTEMPTS } = options;\n\n  let attempts = 0;\n  const delay = 1000; // Fixed 1-second delay\n  const pollResults: any[] = [];\n\n  while (attempts < maxAttempts) {\n    try {\n      const result = await getWorkflowStatus(falcon, workflowId);\n      pollResults.push({\n        attempt: attempts + 1,\n        timestamp: Date.now(),\n        status: result.status,\n        hasOutput: !!result.output_data,\n      });\n\n      // Check if workflow is complete\n      if (result.status === WorkflowStatus.COMPLETED) {\n        return {\n          status: WorkflowStatus.COMPLETED,\n          ...(result.output_data && { output_data: result.output_data }),\n          pollResults,\n        };\n      }\n\n      // Check if workflow failed\n      if (result.status === WorkflowStatus.FAILED) {\n        return {\n          status: WorkflowStatus.FAILED,\n          error: result.error ?? 'Workflow execution failed',\n          pollResults,\n        };\n      }\n\n      // Still running, wait and try again\n      if (isWorkflowRunning(result.status)) {\n        attempts++;\n        if (attempts < maxAttempts) {\n          // console.log(`⏳ Polling attempt ${attempts}/${maxAttempts} - Status: ${result.status} - Waiting 1 second`);\n          await wait(delay);\n          continue;\n        } else {\n          throw new Error('Workflow execution timed out');\n        }\n      }\n\n      // Unknown status\n      throw new Error(`Unknown workflow status: ${result.status}`);\n    } catch (error) {\n      // console.error(`Polling attempt ${attempts + 1} failed:`, error);\n\n      // Add error to poll results\n      pollResults.push({\n        attempt: attempts + 1,\n        timestamp: Date.now(),\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      // If this is the last attempt, throw the error\n      if (attempts >= maxAttempts - 1) {\n        throw error;\n      }\n\n      // Otherwise, wait and try again\n      attempts++;\n      await wait(delay);\n    }\n  }\n\n  throw new Error('Workflow polling timed out after maximum attempts');\n};\n\n/**\n * Get current workflow execution status\n * @param falcon - Falcon API instance\n * @param workflowId - Workflow execution ID\n * @returns Current workflow status and data\n */\nexport const getWorkflowStatus = async (\n  falcon: FalconApi,\n  workflowId: string\n): Promise<{\n  status: WorkflowStatus;\n  output_data?: Record<string, unknown>;\n  error?: string;\n}> => {\n  const result = await falcon.api.workflows.getEntitiesExecutionResultsV1({\n    ids: [workflowId],\n  });\n\n  if (result.errors && result.errors.length > 0) {\n    throw new Error(result.errors[0]?.message ?? 'Failed to get workflow results');\n  }\n\n  if (!result.resources || result.resources.length === 0) {\n    throw new Error('No workflow results found');\n  }\n\n  const workflowResult = result.resources[0] as any;\n\n  return {\n    status: parseWorkflowStatus(workflowResult.status),\n    output_data: workflowResult.output_data,\n    error: workflowResult.error,\n  };\n};\n\n/**\n * Check if workflow is in a running state\n * @param status - Workflow status to check\n * @returns True if workflow is still running\n */\nexport const isWorkflowRunning = (status: WorkflowStatus): boolean => {\n  return (\n    status === WorkflowStatus.IN_PROGRESS ||\n    status === WorkflowStatus.RUNNING ||\n    status === WorkflowStatus.PENDING\n  );\n};\n\n/**\n * Check if workflow is in a terminal state (completed or failed)\n * @param status - Workflow status to check\n * @returns True if workflow is finished\n */\nexport const isWorkflowTerminal = (status: WorkflowStatus): boolean => {\n  return status === WorkflowStatus.COMPLETED || status === WorkflowStatus.FAILED;\n};\n\n/**\n * Parse workflow status string to enum\n * @param statusString - Status string from API\n * @returns Parsed workflow status\n */\nexport const parseWorkflowStatus = (statusString: string): WorkflowStatus => {\n  const normalizedStatus = statusString?.trim().toLowerCase();\n\n  switch (normalizedStatus) {\n    case 'pending':\n      return WorkflowStatus.PENDING;\n    case 'inprogress':\n    case 'in progress':\n      return WorkflowStatus.IN_PROGRESS;\n    case 'running':\n      return WorkflowStatus.RUNNING;\n    case 'completed':\n      return WorkflowStatus.COMPLETED;\n    case 'failed':\n      return WorkflowStatus.FAILED;\n    default:\n      // console.warn(`Unknown workflow status: ${statusString}`);\n      return WorkflowStatus.UNKNOWN;\n  }\n};\n","// src/services/workflow/WorkflowValidator.ts\n\nimport type { WorkflowExecutionParams } from './types';\n\n/**\n * Validation result interface\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  error?: string;\n}\n\n/**\n * Validate workflow execution parameters\n * Ensures all required parameters are present and properly formatted\n * @param params - Parameters to validate\n * @returns Validation result with error details if invalid\n */\nexport const validateWorkflowParams = (params: WorkflowExecutionParams): ValidationResult => {\n  // Query validation\n  if (!params.query || typeof params.query !== 'string' || !params.query.trim()) {\n    return { isValid: false, error: 'Query is required' };\n  }\n\n  // Model validation\n  if (!params.model || typeof params.model !== 'string') {\n    return { isValid: false, error: 'Model is required' };\n  }\n\n  // Temperature validation\n  if (typeof params.temperature !== 'number' || params.temperature < 0 || params.temperature > 1) {\n    return { isValid: false, error: 'Temperature must be between 0 and 1' };\n  }\n\n  // Stop words validation (optional parameter)\n  if (params.stopWords && !Array.isArray(params.stopWords)) {\n    return { isValid: false, error: 'Stop words must be an array' };\n  }\n\n  if (params.stopWords && params.stopWords.length > 4) {\n    return { isValid: false, error: 'Maximum 4 stop words allowed' };\n  }\n\n  // JSON schema validation (optional parameter)\n  if (params.jsonSchema && typeof params.jsonSchema !== 'string') {\n    return { isValid: false, error: 'JSON schema must be a string' };\n  }\n\n  // Data to include validation (optional parameter)\n  if (params.dataToInclude && !Array.isArray(params.dataToInclude)) {\n    return { isValid: false, error: 'Data to include must be an array' };\n  }\n\n  return { isValid: true };\n};\n\n/**\n * Validate model name against supported models\n * @param modelName - Model name to validate\n * @returns Validation result\n */\nexport const validateModelName = (modelName: string): ValidationResult => {\n  const supportedModels = [\n    'Claude Latest',\n    'Claude_Latest',\n    'Claude 3.7 Sonnet',\n    'Claude_3.7_Sonnet',\n    'GPT-4o',\n  ];\n\n  if (!supportedModels.includes(modelName)) {\n    return {\n      isValid: false,\n      error: `Unsupported model: ${modelName}. Supported models: ${supportedModels.join(', ')}`,\n    };\n  }\n\n  return { isValid: true };\n};\n\n/**\n * Validate temperature value with specific recommendations\n * @param temperature - Temperature value to validate\n * @returns Validation result with recommendations\n */\nexport const validateTemperature = (temperature: number): ValidationResult => {\n  if (typeof temperature !== 'number') {\n    return { isValid: false, error: 'Temperature must be a number' };\n  }\n\n  if (temperature < 0 || temperature > 1) {\n    return { isValid: false, error: 'Temperature must be between 0 and 1' };\n  }\n\n  // Optional: Provide recommendations for different use cases\n  if (temperature === 0) {\n    // console.log('ℹ️ Temperature 0.0: Deterministic output, good for consistent results');\n  } else if (temperature <= 0.3) {\n    // console.log('ℹ️ Low temperature: More focused and deterministic responses');\n  } else if (temperature <= 0.7) {\n    // console.log('ℹ️ Medium temperature: Balanced creativity and consistency');\n  } else {\n    // console.log('ℹ️ High temperature: More creative and varied responses');\n  }\n\n  return { isValid: true };\n};\n\n/**\n * Validate JSON schema format\n * @param jsonSchema - JSON schema string to validate\n * @returns Validation result\n */\nexport const validateJsonSchema = (jsonSchema: string): ValidationResult => {\n  if (!jsonSchema.trim()) {\n    return { isValid: true }; // Empty schema is valid (optional)\n  }\n\n  try {\n    const parsed = JSON.parse(jsonSchema);\n\n    // Basic JSON Schema validation\n    if (typeof parsed !== 'object' || parsed === null) {\n      return { isValid: false, error: 'JSON schema must be an object' };\n    }\n\n    // Check for required JSON Schema properties\n    if (!parsed.type) {\n      return { isValid: false, error: 'JSON schema must have a \"type\" property' };\n    }\n\n    return { isValid: true };\n  } catch (error) {\n    return {\n      isValid: false,\n      error: `Invalid JSON schema format: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    };\n  }\n};\n\n/**\n * Comprehensive validation with detailed error reporting\n * @param params - Workflow execution parameters\n * @returns Detailed validation result\n */\nexport const validateWorkflowParamsDetailed = (\n  params: WorkflowExecutionParams\n): ValidationResult & {\n  warnings?: string[];\n} => {\n  const warnings: string[] = [];\n\n  // Run basic validation first\n  const basicValidation = validateWorkflowParams(params);\n  if (!basicValidation.isValid) {\n    return basicValidation;\n  }\n\n  // Additional detailed validations\n  const modelValidation = validateModelName(params.model);\n  if (!modelValidation.isValid) {\n    return modelValidation;\n  }\n\n  const temperatureValidation = validateTemperature(params.temperature);\n  if (!temperatureValidation.isValid) {\n    return temperatureValidation;\n  }\n\n  if (params.jsonSchema) {\n    const schemaValidation = validateJsonSchema(params.jsonSchema);\n    if (!schemaValidation.isValid) {\n      return schemaValidation;\n    }\n  }\n\n  // Generate warnings for potential issues\n  if (params.query.length < 10) {\n    warnings.push('Query is very short - consider providing more context for better results');\n  }\n\n  if (params.query.length > 4000) {\n    warnings.push('Query is very long - consider breaking it into smaller, focused requests');\n  }\n\n  if (params.stopWords && params.stopWords.length > 2) {\n    warnings.push('Many stop words may overly constrain the response');\n  }\n\n  if (params.dataToInclude && params.dataToInclude.length > 5) {\n    warnings.push('Large amount of context data may affect response focus');\n  }\n\n  return {\n    isValid: true,\n    ...(warnings.length > 0 && { warnings }),\n  };\n};\n","// src/services/workflow/WorkflowExecutor.ts\n\nimport FalconApi from '@crowdstrike/foundry-js';\n\nimport type { LLMResponse } from '../../types';\nimport { responseCache } from '../../utils/cache';\nimport { generateCacheKey, formatErrorMessage } from '../../utils/helpers';\nimport { WorkflowStatus, WORKFLOW_CONFIG, type WorkflowExecutionParams, type WorkflowExecutionResult } from './types';\nimport { extractWorkflowContent, validateExtractedContent } from './WorkflowContentExtractor';\nimport { buildWorkflowPayload, logPayloadInfo } from './WorkflowPayloadBuilder';\nimport { pollWorkflowCompletion } from './WorkflowPolling';\nimport { validateWorkflowParams } from './WorkflowValidator';\n\n/**\n * Execute workflow via Falcon API\n * Handles the initial workflow trigger and returns the execution ID\n * @param falcon - Falcon API instance\n * @param payload - Workflow execution payload\n * @returns Promise with workflow execution response\n */\nconst executeWorkflow = async (falcon: FalconApi, payload: Record<string, any>): Promise<any> => {\n  const workflowConfig = {\n    name: WORKFLOW_CONFIG.WORKFLOW_NAME,\n    depth: WORKFLOW_CONFIG.WORKFLOW_DEPTH,\n  };\n\n  // console.log(`🚀 Executing workflow: ${workflowConfig.name}`);\n  const response = await falcon.api.workflows.postEntitiesExecuteV1(payload, workflowConfig);\n\n  if (response.errors && response.errors.length > 0) {\n    throw new Error(response.errors[0]?.message ?? 'Workflow execution failed');\n  }\n\n  if (!response.resources || response.resources.length === 0) {\n    throw new Error('No workflow execution ID returned');\n  }\n\n  return response;\n};\n\n/**\n * Check cache for existing response\n * @param params - Workflow execution parameters\n * @returns Cached response or null\n */\nconst checkCache = (params: WorkflowExecutionParams): string | null => {\n  if (!params.enableCaching) {\n    return null;\n  }\n\n  try {\n    const cacheKey = generateCacheKey(\n      params.query,\n      params.model,\n      params.temperature,\n      params.stopWords,\n      params.jsonSchema,\n      params.dataToInclude\n    );\n\n    const cachedResponse = responseCache.get(cacheKey);\n    return cachedResponse?.content ?? null;\n  } catch {\n    // console.warn('Cache check failed:', error);\n    return null;\n  }\n};\n\n/**\n * Save response to cache\n * @param params - Workflow execution parameters\n * @param content - Response content to cache\n */\nconst saveResponseToCache = (params: WorkflowExecutionParams, content: string): void => {\n  if (!params.enableCaching) {\n    return;\n  }\n\n  try {\n    const cacheKey = generateCacheKey(\n      params.query,\n      params.model,\n      params.temperature,\n      params.stopWords,\n      params.jsonSchema,\n      params.dataToInclude\n    );\n\n    const llmResponse: LLMResponse = {\n      content,\n      model: params.model,\n    };\n\n    responseCache.set(cacheKey, llmResponse);\n    // console.log('💾 Response cached successfully');\n  } catch {\n    // console.warn('Cache save failed:', error);\n  }\n};\n\n/**\n * Execute workflow with full error handling and caching\n * Main function to execute LLM workflow with modular architecture\n * @param falcon - Falcon API instance\n * @param params - Workflow execution parameters\n * @returns Promise with workflow execution result\n */\nexport const executeWorkflowWithCache = async (\n  falcon: FalconApi,\n  params: WorkflowExecutionParams\n): Promise<WorkflowExecutionResult> => {\n  let workflowId: string | undefined;\n  let payload: Record<string, any> | undefined;\n  let pollingResult: any;\n\n  try {\n    // console.log('🎯 Starting workflow execution with modular architecture...');\n\n    // Step 1: Validate parameters using WorkflowValidator\n    const validation = validateWorkflowParams(params);\n    if (!validation.isValid) {\n      return {\n        success: false,\n        error: validation.error ?? 'Validation failed',\n      };\n    }\n\n    // Step 2: Check cache first\n    const cachedResponse = checkCache(params);\n    if (cachedResponse) {\n      // console.log('💾 Cache hit - returning cached response');\n      return {\n        success: true,\n        content: cachedResponse,\n        fromCache: true,\n      };\n    }\n\n    // Step 3: Build payload using WorkflowPayloadBuilder\n    payload = buildWorkflowPayload(params);\n    logPayloadInfo(payload, 'Workflow Execution');\n\n    // Step 4: Execute workflow\n    const executionResponse = await executeWorkflow(falcon, payload);\n    [workflowId] = executionResponse.resources;\n\n    // console.log(`✅ Workflow started successfully: ${workflowId}`);\n\n    // Step 5: Poll for completion using WorkflowPolling\n    if (!workflowId) {\n      throw new Error('No workflow ID received from execution');\n    }\n\n    // console.log('⏳ Polling for workflow completion...');\n    pollingResult = await pollWorkflowCompletion(falcon, workflowId);\n\n    if (pollingResult.status === WorkflowStatus.FAILED) {\n      const errorMessage = pollingResult.error ?? 'Workflow execution failed';\n\n      return {\n        success: false,\n        error: errorMessage,\n      };\n    }\n\n    // Step 6: Extract content using WorkflowContentExtractor\n    // console.log('📤 Extracting workflow results...');\n    const content = extractWorkflowContent(pollingResult.output_data);\n\n    // Step 7: Validate extracted content quality\n    const contentValidation = validateExtractedContent(content);\n    if (!contentValidation.isValid) {\n      // console.warn('⚠️ Content validation warnings:', contentValidation.warnings);\n    }\n\n    // console.log(`✅ Content extracted successfully (${contentValidation.wordCount} words, ${contentValidation.estimatedFormat} format)`);\n\n    // Step 8: Save to cache\n    saveResponseToCache(params, content);\n\n    // console.log(`🎉 Workflow execution completed successfully`);\n\n    return {\n      success: true,\n      content,\n      fromCache: false,\n    };\n  } catch (error) {\n    // console.error('❌ Workflow execution failed:', error);\n\n    return {\n      success: false,\n      error: formatErrorMessage(error),\n    };\n  }\n};\n\n/**\n * Cancel workflow execution (if supported)\n * @param falcon - Falcon API instance\n * @param workflowId - Workflow execution ID to cancel\n * @returns Promise with cancellation result\n */\nexport const cancelWorkflowExecution = async (\n  _falcon: FalconApi,\n  _workflowId: string\n): Promise<{ success: boolean; error?: string }> => {\n  // Note: This depends on the Falcon API supporting workflow cancellation\n  // Implementation may vary based on available API endpoints\n  // console.log('🛑 Attempting to cancel workflow:', workflowId);\n\n  // If cancellation API is available, use it here\n  // For now, we'll just return success\n\n  return { success: true };\n};\n\n/**\n * Get workflow execution status using modular polling\n * @param falcon - Falcon API instance\n * @param workflowId - Workflow execution ID\n * @returns Promise with workflow status\n */\nexport const getWorkflowStatus = async (\n  falcon: FalconApi,\n  workflowId: string\n): Promise<{ status: string; error?: string }> => {\n  try {\n    const result = await falcon.api.workflows.getEntitiesExecutionResultsV1({\n      ids: [workflowId],\n    });\n\n    if (result.errors && result.errors.length > 0) {\n      throw new Error(result.errors[0]?.message ?? 'Failed to get workflow status');\n    }\n\n    if (!result.resources || result.resources.length === 0) {\n      throw new Error('No workflow status found');\n    }\n\n    const workflowResult = result.resources[0] as any;\n    return { status: workflowResult.status ?? 'Unknown' };\n  } catch (error) {\n    // console.error('Get workflow status error:', error);\n    return {\n      status: 'Unknown',\n      error: formatErrorMessage(error),\n    };\n  }\n};\n","// Advanced options panel component\n\nimport {\n  SlDetails,\n  SlCheckbox,\n  SlSelect,\n  SlOption,\n  SlIcon,\n  SlTooltip,\n  SlTextarea,\n  SlInput,\n  SlButton,\n} from '@shoelace-style/shoelace/dist/react';\nimport React, { useState } from 'react';\n\nimport { TEMPERATURE_OPTIONS } from '../../utils/constants';\n\ninterface AdvancedOptionsPanelProps {\n  showJsonTab: boolean;\n  setShowJsonTab: (showJsonTab: boolean) => void;\n  temperature: number;\n  setTemperature: (temperature: number) => void;\n  stopWords: string[];\n  setStopWords: (stopWords: string[]) => void;\n  jsonSchema: string;\n  setJsonSchema: (jsonSchema: string) => void;\n  dataToInclude: string[];\n  setDataToInclude: (dataToInclude: string[]) => void;\n}\n\nconst AdvancedOptionsPanel: React.FC<AdvancedOptionsPanelProps> = ({\n  showJsonTab,\n  setShowJsonTab,\n  temperature,\n  setTemperature,\n  stopWords,\n  setStopWords,\n  jsonSchema,\n  setJsonSchema,\n  dataToInclude,\n  setDataToInclude,\n}) => {\n  // State for stop words input\n  const [stopWordsInput, setStopWordsInput] = useState('');\n\n  // State for data to include input\n  const [dataToIncludeInput, setDataToIncludeInput] = useState('');\n\n  // Handle adding stop words\n  const handleAddStopWord = () => {\n    if (stopWordsInput.trim() && stopWords.length < 4) {\n      setStopWords([...stopWords, stopWordsInput.trim()]);\n      setStopWordsInput('');\n    }\n  };\n\n  // Handle removing stop words\n  const handleRemoveStopWord = (index: number) => {\n    setStopWords(stopWords.filter((_, i) => i !== index));\n  };\n\n  // Handle adding data to include\n  const handleAddDataToInclude = () => {\n    if (dataToIncludeInput.trim()) {\n      setDataToInclude([...dataToInclude, dataToIncludeInput.trim()]);\n      setDataToIncludeInput('');\n    }\n  };\n\n  // Handle removing data to include\n  const handleRemoveDataToInclude = (index: number) => {\n    setDataToInclude(dataToInclude.filter((_, i) => i !== index));\n  };\n\n  return (\n    <SlDetails summary='Advanced Options' className='advanced-options-subtle'>\n      <div className='flex flex-col gap-4 mt-3'>\n        {/* Show JSON Tab - Moved to Top */}\n        <div className='flex items-center gap-2'>\n          <div className='flex-1'>\n            <SlCheckbox\n              checked={showJsonTab}\n              onSlChange={(e: CustomEvent) =>\n                setShowJsonTab((e.target as HTMLInputElement).checked)\n              }\n            >\n              Show JSON objects\n            </SlCheckbox>\n          </div>\n          <SlTooltip content='Enable a JSON tab in the response to view complete request and response data for analysis and troubleshooting.'>\n            <SlIcon\n              name='question-circle'\n              className='cursor-help'\n              style={{ color: `var(--cs-text-secondary)` }}\n            />\n          </SlTooltip>\n        </div>\n\n        {/* Temperature */}\n        <div className='flex items-center gap-2'>\n          <div className='flex-1'>\n            <SlSelect\n              label='Temperature'\n              value={String(temperature)}\n              onSlChange={(e: CustomEvent) =>\n                setTemperature(Number.parseFloat((e.target as HTMLSelectElement).value))\n              }\n            >\n              <SlIcon slot='prefix' name='thermometer' />\n              {TEMPERATURE_OPTIONS.map(option => (\n                <SlOption key={option.value} value={String(option.value)}>\n                  {option.label}\n                </SlOption>\n              ))}\n            </SlSelect>\n          </div>\n          <SlTooltip content='Controls randomness. Lowering results in less random completions. As the temperature approaches zero, the model will become deterministic and repetitive.'>\n            <SlIcon\n              name='question-circle'\n              className='cursor-help'\n              style={{ color: `var(--cs-text-secondary)` }}\n            />\n          </SlTooltip>\n        </div>\n\n        {/* Stop Words */}\n        <div className='flex items-start gap-2'>\n          <div className='flex-1'>\n            <label className='block text-sm font-medium mb-2'>Stop Sequences</label>\n            {stopWords.length > 0 ? (\n              <div\n                className='flex flex-wrap gap-2 mb-2 min-h-[32px] p-2 rounded'\n                style={{\n                  border: `1px solid var(--cs-border-color-light)`,\n                  backgroundColor: `var(--cs-background-light)`,\n                }}\n              >\n                {stopWords.map((word, index) => (\n                  <div\n                    key={index}\n                    className='flex items-center gap-1 px-2 py-1 rounded text-sm'\n                    style={{\n                      backgroundColor: 'var(--cs-background-light)',\n                      color: `var(--cs-text-primary)`,\n                    }}\n                  >\n                    <span>{word}</span>\n                    <button\n                      type='button'\n                      onClick={() => handleRemoveStopWord(index)}\n                      className='hover:opacity-80 transition-opacity'\n                      style={{ color: `var(--cs-status-info)` }}\n                    >\n                      <SlIcon name='x' style={{ fontSize: 'var(--font-size-sm)' }} />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className='text-sm mb-2 italic' style={{ color: `var(--cs-text-secondary)` }}>\n                Optional: Add stop sequences to control output termination\n              </p>\n            )}\n            {stopWords.length < 4 && (\n              <div className='flex gap-2'>\n                <SlInput\n                  placeholder='Enter stop sequence'\n                  value={stopWordsInput}\n                  onSlInput={(e: CustomEvent) =>\n                    setStopWordsInput((e.target as HTMLInputElement).value)\n                  }\n                  onKeyDown={(e: React.KeyboardEvent) => {\n                    if (e.key === 'Enter') {\n                      e.preventDefault();\n                      handleAddStopWord();\n                    }\n                  }}\n                />\n                <SlButton\n                  size='small'\n                  onClick={handleAddStopWord}\n                  disabled={!stopWordsInput.trim()}\n                >\n                  <SlIcon name='plus' />\n                </SlButton>\n              </div>\n            )}\n            {stopWords.length >= 4 && (\n              <p className='text-sm' style={{ color: `var(--cs-text-secondary)` }}>\n                Maximum 4 stop sequences allowed\n              </p>\n            )}\n          </div>\n          <SlTooltip content='Up to 4 sequences where API will stop generating further tokens. The return text will not contain the stop sequence.'>\n            <SlIcon\n              name='question-circle'\n              className='cursor-help mt-6'\n              style={{ color: `var(--cs-text-secondary)` }}\n            />\n          </SlTooltip>\n        </div>\n\n        {/* JSON Schema */}\n        <div className='flex items-start gap-2'>\n          <div className='flex-1'>\n            <SlTextarea\n              label='JSON Schema'\n              value={jsonSchema}\n              placeholder='Enter JSON schema to define response structure...'\n              rows={4}\n              onSlInput={(e: CustomEvent) => setJsonSchema((e.target as HTMLTextAreaElement).value)}\n            >\n              <SlIcon slot='prefix' name='code-square' />\n            </SlTextarea>\n          </div>\n          <SlTooltip content=\"JSON schema is used to define the structure of the model's response format.\">\n            <SlIcon\n              name='question-circle'\n              className='cursor-help mt-6'\n              style={{ color: `var(--cs-text-secondary)` }}\n            />\n          </SlTooltip>\n        </div>\n\n        {/* Data to Include */}\n        <div className='flex items-start gap-2'>\n          <div className='flex-1'>\n            <label className='block text-sm font-medium mb-2'>Data to Include</label>\n            {dataToInclude.length > 0 ? (\n              <div\n                className='flex flex-wrap gap-2 mb-2 min-h-[32px] p-2 rounded'\n                style={{\n                  border: `1px solid var(--cs-border-color-light)`,\n                  backgroundColor: `var(--cs-background-light)`,\n                }}\n              >\n                {dataToInclude.map((data, index) => (\n                  <div\n                    key={index}\n                    className='flex items-center gap-1 px-2 py-1 rounded text-sm'\n                    style={{\n                      backgroundColor: `var(--cs-background-light)`,\n                      color: `var(--cs-text-primary)`,\n                    }}\n                  >\n                    <span>{data}</span>\n                    <button\n                      type='button'\n                      onClick={() => handleRemoveDataToInclude(index)}\n                      className='hover:opacity-80 transition-opacity'\n                      style={{ color: `var(--cs-status-warning)` }}\n                    >\n                      <SlIcon name='x' style={{ fontSize: 'var(--font-size-sm)' }} />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className='text-sm mb-2 italic' style={{ color: `var(--cs-text-secondary)` }}>\n                Optional: Add custom data to enhance your analysis\n              </p>\n            )}\n            <div className='flex gap-2'>\n              <SlInput\n                placeholder='Enter additional data'\n                value={dataToIncludeInput}\n                onSlInput={(e: CustomEvent) =>\n                  setDataToIncludeInput((e.target as HTMLInputElement).value)\n                }\n                onKeyDown={(e: React.KeyboardEvent) => {\n                  if (e.key === 'Enter') {\n                    e.preventDefault();\n                    handleAddDataToInclude();\n                  }\n                }}\n              />\n              <SlButton\n                size='small'\n                onClick={handleAddDataToInclude}\n                disabled={!dataToIncludeInput.trim()}\n              >\n                <SlIcon name='plus' />\n              </SlButton>\n            </div>\n          </div>\n          <SlTooltip content='Additional key-value pairs provided from the trigger or preceding action output fields. This data is appended to the user prompt.'>\n            <SlIcon\n              name='question-circle'\n              className='cursor-help mt-6'\n              style={{ color: `var(--cs-text-secondary)` }}\n            />\n          </SlTooltip>\n        </div>\n      </div>\n    </SlDetails>\n  );\n};\n\nexport default AdvancedOptionsPanel;\n","// src/components/TruncatedText.tsx\n\nimport { SlTooltip } from '@shoelace-style/shoelace/dist/react';\nimport React from 'react';\n\ninterface TruncatedTextProps {\n  originalText: string;\n  displayText: string;\n  children: React.ReactNode;\n  placement?:\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\n/**\n * Conditionally wraps content with SlTooltip when text is truncated\n * Shows full text on hover when display text differs from original\n * Uses Shoelace's auto-placement system for optimal positioning\n */\nexport const TruncatedText: React.FC<TruncatedTextProps> = ({\n  originalText,\n  displayText,\n  children,\n  placement = 'top',\n}) => {\n  // Only show tooltip if content is actually truncated\n  const isTruncated = originalText !== displayText;\n\n  if (isTruncated) {\n    return (\n      <SlTooltip\n        content={originalText}\n        placement={placement}\n        hoist\n        className='truncated-text-tooltip'\n        trigger='hover focus'\n        distance={8}\n      >\n        {children}\n      </SlTooltip>\n    );\n  }\n\n  return <>{children}</>;\n};\n\nexport default TruncatedText;\n","// Context entity selection component\n\nimport {\n  SlSelect,\n  SlOption,\n  SlIcon,\n  SlTooltip,\n  SlDivider,\n  SlBadge,\n} from '@shoelace-style/shoelace/dist/react';\nimport React from 'react';\n\nimport { ContextOption } from '../../types';\nimport { formatDisplayName } from '../../utils/context';\nimport TruncatedText from '../TruncatedText';\n\ninterface ContextEntitySelectorProps {\n  selectedContextEntity: string | null;\n  setSelectedContextEntity: (selectedContextEntity: string | null) => void;\n  availableContextOptions: ContextOption[];\n  setQuery: (query: string) => void;\n}\n\nconst ContextEntitySelector: React.FC<ContextEntitySelectorProps> = ({\n  selectedContextEntity,\n  setSelectedContextEntity,\n  availableContextOptions,\n  setQuery,\n}) => {\n  const isContextDisabled = availableContextOptions.length === 0;\n\n  // Get entity counts for badge display\n  const getEntityCounts = () => {\n    const counts = {\n      domain: availableContextOptions.filter(opt => opt.type === 'domain').length,\n      file: availableContextOptions.filter(opt => opt.type === 'file').length,\n      ip: availableContextOptions.filter(opt => opt.type === 'ip').length,\n      mitre: availableContextOptions.filter(opt => opt.type === 'mitre').length,\n    };\n    return counts;\n  };\n\n  // Helper function to detect if an option is a child item\n  const isChildOption = (option: ContextOption): boolean => {\n    return !!(\n      option.parentFile ??\n      option.parentDomain ??\n      ['md5', 'sha256', 'fqdn'].includes(option.subType ?? '')\n    );\n  };\n\n  const handleContextEntityChange = (e: CustomEvent) => {\n    const target = e.target as HTMLSelectElement;\n    const selectedValue = target.value;\n\n    if (selectedValue) {\n      const selectedOption = availableContextOptions.find(option => option.value === selectedValue);\n      if (selectedOption) {\n        setSelectedContextEntity(selectedValue);\n        setQuery(selectedOption.queryTemplate);\n      }\n    } else {\n      setSelectedContextEntity(null);\n    }\n  };\n\n  if (isContextDisabled) {\n    return (\n      <SlTooltip content='No context detected for this incident'>\n        <div className='opacity-60 cursor-not-allowed'>\n          <SlSelect label='Incident Context' value='' disabled={true}>\n            <SlIcon slot='prefix' name='layers' />\n            <SlOption value='' disabled>\n              No entities available\n            </SlOption>\n          </SlSelect>\n        </div>\n      </SlTooltip>\n    );\n  }\n\n  const entityCounts = getEntityCounts();\n\n  return (\n    <SlSelect\n      label='Incident Context'\n      value={selectedContextEntity ?? ''}\n      onSlChange={handleContextEntityChange}\n    >\n      <SlIcon slot='prefix' name='layers' />\n\n      <SlOption value=''>None Selected</SlOption>\n\n      {/* Group by entity type using proper Shoelace grouping */}\n      {['domain', 'file', 'ip', 'mitre'].map((type, index) => {\n        const optionsOfType = availableContextOptions.filter(option => option.type === type);\n        if (optionsOfType.length === 0) return null;\n\n        const groupConfig = {\n          domain: { name: 'Domains', icon: 'shield-exclamation' },\n          file: { name: 'Files', icon: 'file-lock' },\n          ip: { name: 'IP Addresses', icon: 'router-fill' },\n          mitre: { name: 'MITRE ATT&CK', icon: 'shield-exclamation' },\n        }[type];\n\n        if (!groupConfig) return null;\n        const count = entityCounts[type as keyof typeof entityCounts];\n\n        return (\n          <React.Fragment key={type}>\n            {/* Add divider before each group except the first */}\n            {index > 0 && <SlDivider />}\n\n            {/* Group header using <small> as recommended by Shoelace */}\n            <small className='context-group-header'>\n              <SlIcon name={groupConfig.icon} className='mr-2' />\n              {groupConfig.name}\n              <SlBadge className='ml-2 context-entity-badge'>{count}</SlBadge>\n            </small>\n\n            {/* Group options */}\n            {optionsOfType.map(option => (\n              <SlOption\n                key={option.value}\n                value={option.value}\n                className={isChildOption(option) ? 'child-option' : ''}\n              >\n                {/* Icons for ALL child entries */}\n                {(option.subType === 'md5' || option.subType === 'sha256') && (\n                  <SlIcon slot='prefix' name='fingerprint' />\n                )}\n                {option.subType === 'fqdn' && <SlIcon slot='prefix' name='globe' />}\n                {option.subType === 'tld' && <SlIcon slot='prefix' name='shield-exclamation' />}\n                {option.subType === 'filename' && <SlIcon slot='prefix' name='file-earmark' />}\n                {option.subType === 'technique' && <SlIcon slot='prefix' name='shield-exclamation' />}\n\n                {/* Icons for individual entries without subtypes */}\n                {option.type === 'ip' && !option.subType && <SlIcon slot='prefix' name='router' />}\n                {option.type === 'domain' && !option.subType && (\n                  <SlIcon slot='prefix' name='shield-exclamation' />\n                )}\n                {option.type === 'mitre' && !option.subType && (\n                  <SlIcon slot='prefix' name='shield-exclamation' />\n                )}\n                {option.type === 'file' && !option.subType && (\n                  <SlIcon slot='prefix' name='file-lock' />\n                )}\n\n                {(() => {\n                  const { displayText, originalText } = formatDisplayName(option);\n                  return (\n                    <TruncatedText originalText={originalText} displayText={displayText}>\n                      {displayText}\n                    </TruncatedText>\n                  );\n                })()}\n              </SlOption>\n            ))}\n          </React.Fragment>\n        );\n      })}\n    </SlSelect>\n  );\n};\n\nexport default ContextEntitySelector;\n","// Auto-resizing prompt textarea component\n\nimport { SlTextarea, SlIcon } from '@shoelace-style/shoelace/dist/react';\nimport React, { useEffect, useRef } from 'react';\n\ninterface PromptTextareaProps {\n  query: string;\n  setQuery: (query: string) => void;\n}\n\nconst PromptTextarea: React.FC<PromptTextareaProps> = ({ query, setQuery }) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const textareaRef = useRef<any>(null);\n\n  // Set initial textarea dimensions on mount with delayed calculation and no transitions\n  useEffect(() => {\n    if (textareaRef.current) {\n      const element = textareaRef.current;\n\n      // Disable transitions temporarily to prevent visible resize\n      element.style.transition = 'none';\n\n      // Delay calculation to ensure component is fully rendered\n      setTimeout(() => {\n        element.style.height = 'auto';\n        const calculatedHeight = Math.max(element.scrollHeight, 96);\n        element.style.height = `${calculatedHeight}px`;\n\n        // Re-enable transitions after calculation\n        setTimeout(() => {\n          element.style.transition = 'height 0.15s ease-out';\n        }, 50);\n      }, 50);\n    }\n  }, []);\n\n  // Handle immediate resize during input to prevent scrollbar flicker\n  const handleTextareaInput = (e: CustomEvent) => {\n    const target = e.target as HTMLTextAreaElement;\n    const newValue = target.value;\n\n    // Resize immediately before state update to prevent scrollbar flicker\n    if (textareaRef.current) {\n      const element = textareaRef.current;\n      const currentHeight = element.offsetHeight;\n\n      // Calculate required height for new content\n      const newHeight = Math.min(element.scrollHeight, 300);\n\n      // Only resize if there's a meaningful difference\n      if (Math.abs(newHeight - currentHeight) > 2) {\n        element.style.height = `${newHeight}px`;\n      }\n    }\n\n    // Update React state after resize\n    setQuery(newValue);\n  };\n\n  return (\n    <div className='relative min-h-[120px] z-10'>\n      <SlTextarea\n        ref={textareaRef}\n        label='Prompt'\n        value={query}\n        rows={5}\n        resize=\"none\"\n        placeholder='Enter your security analysis question...'\n        onSlInput={handleTextareaInput}\n      >\n        <SlIcon slot='prefix' name='chat-quote' />\n      </SlTextarea>\n    </div>\n  );\n};\n\nexport default PromptTextarea;\n","// Submit section with quota acknowledgment and submit button\n\nimport { SlCheckbox, SlButton, SlIcon } from '@shoelace-style/shoelace/dist/react';\nimport React from 'react';\n\ninterface SubmitSectionProps {\n  quotaAcknowledged: boolean;\n  setQuotaAcknowledged: (quotaAcknowledged: boolean) => void;\n  loading: boolean;\n  query: string;\n  handleSubmit: () => void;\n}\n\nconst SubmitSection: React.FC<SubmitSectionProps> = ({\n  quotaAcknowledged,\n  setQuotaAcknowledged,\n  loading,\n  query,\n  handleSubmit,\n}) => {\n  return (\n    <div className='flex flex-col gap-3 mt-3'>\n      {/* Inline Quota Acknowledgment and Submit */}\n      <div className='flex items-center justify-between gap-4'>\n        <SlCheckbox\n          size='small'\n          checked={quotaAcknowledged}\n          onSlChange={(e: CustomEvent) =>\n            setQuotaAcknowledged((e.target as HTMLInputElement).checked)\n          }\n        >\n          I understand this will use Charlotte AI credits\n        </SlCheckbox>\n\n        <SlButton\n          variant='primary'\n          size='medium'\n          disabled={loading || !query.trim() || !quotaAcknowledged}\n          onClick={handleSubmit}\n        >\n          <SlIcon slot='prefix' name={loading ? 'hourglass-split' : 'send'} />\n          {loading ? 'Analyzing...' : 'Analyze with Charlotte'}\n        </SlButton>\n      </div>\n    </div>\n  );\n};\n\nexport default SubmitSection;\n","// Modular QueryForm component using extracted subcomponents\n\nimport { SlSelect, SlOption, SlIcon } from '@shoelace-style/shoelace/dist/react';\nimport React from 'react';\n\nimport { ContextOption } from '../types';\nimport { CHARLOTTE_MODEL_OPTIONS } from '../utils/constants';\n\n// Import modular subcomponents\nimport AdvancedOptionsPanel from './form/AdvancedOptionsPanel';\nimport ContextEntitySelector from './form/ContextEntitySelector';\nimport PromptTextarea from './form/PromptTextarea';\nimport SubmitSection from './form/SubmitSection';\n\ninterface QueryFormProps {\n  query: string;\n  setQuery: (query: string) => void;\n  modelName: string;\n  setModelName: (modelName: string) => void;\n  temperature: number;\n  setTemperature: (temperature: number) => void;\n  stopWords: string[];\n  setStopWords: (stopWords: string[]) => void;\n  jsonSchema: string;\n  setJsonSchema: (jsonSchema: string) => void;\n  dataToInclude: string[];\n  setDataToInclude: (dataToInclude: string[]) => void;\n  loading: boolean;\n  handleSubmit: () => void;\n  selectedContextEntity: string | null;\n  setSelectedContextEntity: (selectedContextEntity: string | null) => void;\n  availableContextOptions: ContextOption[];\n  showJsonTab: boolean;\n  setShowJsonTab: (showJsonTab: boolean) => void;\n  quotaAcknowledged: boolean;\n  setQuotaAcknowledged: (quotaAcknowledged: boolean) => void;\n}\n\nconst QueryForm = React.memo(\n  ({\n    query,\n    setQuery,\n    modelName,\n    setModelName,\n    temperature,\n    setTemperature,\n    stopWords,\n    setStopWords,\n    jsonSchema,\n    setJsonSchema,\n    dataToInclude,\n    setDataToInclude,\n    loading,\n    handleSubmit,\n    selectedContextEntity,\n    setSelectedContextEntity,\n    availableContextOptions,\n    showJsonTab,\n    setShowJsonTab,\n    quotaAcknowledged,\n    setQuotaAcknowledged,\n  }: QueryFormProps) => {\n    const handleModelChange = (e: CustomEvent) => {\n      const target = e.target as HTMLSelectElement;\n      setModelName(target.value);\n    };\n\n    return (\n      <div className='flex flex-col gap-4 isolate'>\n        {/* Context Entity Selection */}\n        <ContextEntitySelector\n          selectedContextEntity={selectedContextEntity}\n          setSelectedContextEntity={setSelectedContextEntity}\n          availableContextOptions={availableContextOptions}\n          setQuery={setQuery}\n        />\n\n        {/* Prompt Input */}\n        <PromptTextarea query={query} setQuery={setQuery} />\n\n        {/* Model Selection */}\n        <SlSelect\n          label='Model'\n          defaultValue={modelName}\n          value={modelName}\n          onSlChange={handleModelChange}\n        >\n          <SlIcon slot='prefix' name='cpu' />\n          {CHARLOTTE_MODEL_OPTIONS.map(option => (\n            <SlOption key={option.value} value={option.value}>\n              {option.label}\n            </SlOption>\n          ))}\n        </SlSelect>\n\n        {/* Submit Section */}\n        <SubmitSection\n          quotaAcknowledged={quotaAcknowledged}\n          setQuotaAcknowledged={setQuotaAcknowledged}\n          loading={loading}\n          query={query}\n          handleSubmit={handleSubmit}\n        />\n\n        {/* Advanced Options Panel */}\n        <AdvancedOptionsPanel\n          showJsonTab={showJsonTab}\n          setShowJsonTab={setShowJsonTab}\n          temperature={temperature}\n          setTemperature={setTemperature}\n          stopWords={stopWords}\n          setStopWords={setStopWords}\n          jsonSchema={jsonSchema}\n          setJsonSchema={setJsonSchema}\n          dataToInclude={dataToInclude}\n          setDataToInclude={setDataToInclude}\n        />\n      </div>\n    );\n  }\n);\n\nQueryForm.displayName = 'QueryForm';\n\nexport default QueryForm;\n","// src/components/markdown/CodeBlock.tsx\n\nimport { SlButton, SlIcon, SlBadge, SlTooltip } from '@shoelace-style/shoelace/dist/react';\nimport React from 'react';\n\nimport { useCopyToClipboard } from '../../hooks/useCopyToClipboard';\n\ninterface CodeBlockProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const CodeBlock: React.FC<CodeBlockProps> = ({ children, className }) => {\n  const { copyState, copyToClipboard } = useCopyToClipboard();\n\n  const handleCopy = () => {\n    copyToClipboard(String(children));\n  };\n\n  const language = className?.replace('language-', '') ?? 'text';\n\n  return (\n    <div className='relative group'>\n      <div className='flex items-center justify-between mb-2'>\n        <SlBadge variant='neutral'>{language}</SlBadge>\n        <SlTooltip\n          content={\n            copyState === 'check-circle'\n              ? 'Copied to clipboard!'\n              : `Copy ${language} code to clipboard`\n          }\n          placement='top'\n          distance={8}\n          hoist\n        >\n          <SlButton\n            size='small'\n            variant='text'\n            onClick={handleCopy}\n            className={`compact-copy-btn opacity-0 group-hover:opacity-100 transition-opacity ${\n              copyState === 'check-circle' ? 'copy-success' : 'text-body-and-labels'\n            }`}\n          >\n            <SlIcon name={copyState} />\n          </SlButton>\n        </SlTooltip>\n      </div>\n      <pre className='enhanced-code-block'>\n        <code className={className}>{children}</code>\n      </pre>\n    </div>\n  );\n};\n","// src/utils/security/iocCore.ts\n// Unified IOC handling system - single source of truth for all IOC operations\n\nexport type IOCType = 'ip' | 'domain' | 'hash' | 'url' | 'path' | 'registry';\n\n/**\n * Detect the type of an IOC\n */\nexport const detectIOCType = (text: string): IOCType | null => {\n  if (!text || typeof text !== 'string') return null;\n\n  // Hash patterns\n  const isHash = /^[a-fA-F0-9]{32}$|^[a-fA-F0-9]{40}$|^[a-fA-F0-9]{64}$/.test(text);\n  if (isHash) return 'hash';\n\n  // IP patterns (including defanged)\n  const isIP =\n    /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[.[\\].]){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n      text\n    );\n  if (isIP) return 'ip';\n\n  // Domain patterns (including defanged)\n  const isDomain = /^[a-zA-Z0-9][a-zA-Z0-9\\-[\\].-]{1,61}[a-zA-Z0-9][.[\\].][a-zA-Z]{2,}$/.test(text);\n  if (isDomain) return 'domain';\n\n  // URL patterns\n  const isURL = /^https?:\\/\\//.test(text) || text.includes('://');\n  if (isURL) return 'url';\n\n  // Registry key patterns\n  const isRegistry = /^HK[A-Z_]+(\\\\|\\/).+/.test(text);\n  if (isRegistry) return 'registry';\n\n  // File path patterns\n  const isPath = /^[a-zA-Z]:\\\\|^\\/|\\\\/.test(text) || text.includes('\\\\') || text.includes('/');\n  if (isPath) return 'path';\n\n  return null;\n};\n\n\n\n\n\n/**\n * Defang an IOC for safe display (prevents accidental clicks/navigation)\n */\nexport const defangIOC = (ioc: string): string => {\n  if (!ioc || typeof ioc !== 'string') return ioc;\n  return ioc\n    .replace(/\\./g, '[.]')\n    .replace(/http/g, 'hxxp')\n    .replace(/ftp/g, 'fxp');\n};\n\n/**\n * Remove defanging from an IOC (for copying original values)\n */\nexport const removeFanging = (ioc: string): string => {\n  if (!ioc || typeof ioc !== 'string') return ioc;\n  return ioc.replace(/\\[\\.\\]/g, '.');\n};\n\n/**\n * Normalize IOC for comparison (remove defanging, convert to lowercase)\n */\nexport const normalizeIOC = (ioc: string): string => {\n  if (!ioc || typeof ioc !== 'string') return ioc;\n  return removeFanging(ioc).toLowerCase().trim();\n};\n\n/**\n * Get appropriate CSS classes for IOC display\n */\nexport const getIOCDisplayClasses = (\n  _type: IOCType,\n  variant: 'list' | 'pill' | 'inline' = 'list'\n): string => {\n  const baseClasses = 'font-mono text-xs break-words';\n\n  switch (variant) {\n    case 'pill':\n      return `${baseClasses} inline-block px-2 py-1 rounded border bg-opacity-50`;\n    case 'inline':\n      return `${baseClasses} inline`;\n    case 'list':\n    default:\n      return `${baseClasses}`;\n  }\n};\n\n/**\n * Get badge variant for IOC type (for Shoelace badges)\n */\nexport const getIOCBadgeVariant = (\n  type: IOCType\n): 'warning' | 'primary' | 'neutral' | 'success' => {\n  switch (type) {\n    case 'hash':\n      return 'warning';\n    case 'ip':\n      return 'primary';\n    case 'domain':\n      return 'neutral';\n    case 'url':\n      return 'neutral';\n    case 'registry':\n      return 'success';\n    case 'path':\n      return 'success';\n    default:\n      return 'neutral';\n  }\n};\n\n/**\n * Main IOC utility object - single interface for all IOC operations\n */\nexport const IOCCore = {\n  // Type detection\n  detectType: detectIOCType,\n\n  // Defanging operations\n  defang: defangIOC,        // For safe display\n  removeFanging,            // For copying original values\n\n  // Normalization and comparison\n  normalize: normalizeIOC,\n\n  // Display utilities\n  getDisplayClasses: getIOCDisplayClasses,\n  getBadgeVariant: getIOCBadgeVariant,\n};\n","// src/components/markdown/InlineCode.tsx\n\nimport { SlBadge, SlIcon, SlTooltip } from '@shoelace-style/shoelace/dist/react';\nimport React from 'react';\n\nimport { IOCCore } from '../../utils/security/iocCore';\nimport { useCopyToClipboard } from '../../hooks/useCopyToClipboard';\n\ninterface InlineCodeProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const InlineCode: React.FC<InlineCodeProps> = ({ children, className }) => {\n  const text = String(children);\n  const iocType = IOCCore.detectType(text);\n  const { copyState, copyToClipboard } = useCopyToClipboard();\n\n  const handleIOCCopy = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    copyToClipboard(text);\n  };\n\n  if (iocType) {\n    const badgeVariant = IOCCore.getBadgeVariant(iocType);\n    // Defang IOCs for display while keeping original for copying\n    const defangedText = IOCCore.defang(text);\n\n    return (\n      <span className='inline-flex items-center gap-1 ioc-container'>\n        <SlBadge variant={badgeVariant} className='text-xs'>\n          {iocType.toUpperCase()}\n        </SlBadge>\n        <SlTooltip\n          content={\n            copyState === 'check-circle'\n              ? 'Copied to clipboard!'\n              : `Click to copy ${iocType} to clipboard`\n          }\n          placement='top'\n          distance={8}\n          hoist\n        >\n          <code\n            className='ioc-code cursor-pointer ioc-hover-bg transition-colors'\n            onClick={handleIOCCopy}\n          >\n            {defangedText}\n          </code>\n        </SlTooltip>\n        <SlTooltip\n          content={\n            copyState === 'check-circle'\n              ? 'Copied to clipboard!'\n              : `Copy ${iocType} to clipboard for further analysis`\n          }\n          placement='top'\n          distance={8}\n          hoist\n        >\n          <SlIcon\n            name={copyState}\n            className={`text-xs cursor-pointer ioc-hover-text ${copyState === 'check-circle' ? 'copy-success' : 'secondary-text'}`}\n            onClick={handleIOCCopy}\n          />\n        </SlTooltip>\n      </span>\n    );\n  }\n\n  return <code className={className}>{children}</code>;\n};\n","// src/components/markdown/index.ts\n\nimport { SlIcon } from '@shoelace-style/shoelace/dist/react';\nimport React from 'react';\n\nimport { CodeBlock } from './CodeBlock';\nimport { InlineCode } from './InlineCode';\n\nexport { CodeBlock } from './CodeBlock';\nexport { InlineCode } from './InlineCode';\n\n// Simple components that don't need separate files\nexport const HeadingWithAnchor = ({ level, children, ...props }: any) => {\n  const tagName = `h${level}`;\n  const id = String(children)\n    .toLowerCase()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/(^-|-$)/g, '');\n\n  const headingIcons = {\n    1: 'file-text',\n    2: 'list-ul',\n    3: 'chevron-right',\n    4: 'dot',\n    5: 'dot',\n    6: 'dot',\n  };\n\n  const iconName = headingIcons[level as keyof typeof headingIcons] || 'dot';\n\n  return React.createElement(\n    tagName,\n    { id, className: 'group flex items-center gap-2', ...props },\n    React.createElement(SlIcon, {\n      name: iconName,\n      className: 'text-sm flex-shrink-0',\n    }),\n    children\n  );\n};\n\nexport const ListItem = ({ children, ...props }: any) => {\n  return React.createElement(\n    'li',\n    { className: 'flex items-start gap-2', ...props },\n    React.createElement(SlIcon, {\n      name: 'dot',\n      className: 'secondary-text text-sm mt-0.5 flex-shrink-0',\n    }),\n    React.createElement('span', null, children)\n  );\n};\n\nexport const createMarkdownRenderers = () => ({\n  code: ({ _node, inline, className, children, ...props }: any) => {\n    return inline\n      ? React.createElement(InlineCode, { className, ...props }, children)\n      : React.createElement(CodeBlock, { className, ...props }, children);\n  },\n  heading: ({ _node, level, children, ...props }: any) =>\n    React.createElement(HeadingWithAnchor, { level, ...props }, children),\n  li: ({ _node, children, ...props }: any) => React.createElement(ListItem, { ...props }, children),\n});\n","// src/components/security/IOCDisplay.tsx\n\nimport { SlButton, SlIcon, SlTooltip } from '@shoelace-style/shoelace/dist/react';\nimport React, { useState, useCallback } from 'react';\n\nimport type { IOCs } from '../../types/security';\nimport { IOCCore } from '../../utils/security/iocCore';\n\ninterface IOCDisplayProps {\n  iocs: IOCs;\n}\n\nexport const IOCDisplay: React.FC<IOCDisplayProps> = ({ iocs }) => {\n  const [copyStates, setCopyStates] = useState<Record<string, boolean>>({});\n\n  const copyIOC = useCallback(async (ioc: string, type: string) => {\n    try {\n      await navigator.clipboard.writeText(ioc);\n      setCopyStates(prev => ({ ...prev, [`${type}-${ioc}`]: true }));\n      setTimeout(() => {\n        setCopyStates(prev => ({ ...prev, [`${type}-${ioc}`]: false }));\n      }, 2000);\n    } catch {\n      // console.error('Copy failed:', e);\n    }\n  }, []);\n\n  const renderIOCList = (items: string[] | undefined, type: string) => {\n    if (!items || items.length === 0) return null;\n\n    return (\n      <div className='ioc-section-spacing'>\n        <div className='ioc-type-header'>\n          <span className='text-sm font-semibold'>\n            {type.toUpperCase()}S ({items.length})\n          </span>\n        </div>\n        <div className='space-y-2'>\n          {items.map((item, index) => {\n            // Defang IOCs for display (but keep original for copying)\n            const defangedItem = IOCCore.defang(item);\n\n            return (\n              <div key={index} className='ioc-value-item'>\n                <div className='flex items-center gap-1 p-0'>\n                  <code className='flex-1 text-xs font-mono min-w-0 break-all'>{defangedItem}</code>\n                  <SlTooltip\n                    content={\n                      copyStates[`${type}-${item}`]\n                        ? 'Copied to clipboard!'\n                        : `Copy ${type} to clipboard for further analysis`\n                    }\n                    placement='top'\n                    distance={8}\n                    hoist\n                  >\n                    <SlButton\n                      size='small'\n                      variant='text'\n                      onClick={() => copyIOC(item, type)}\n                      className='compact-copy-btn ioc-copy-btn flex-shrink-0'\n                    >\n                      <SlIcon\n                        name={copyStates[`${type}-${item}`] ? 'check-circle' : 'clipboard'}\n                        className={\n                          copyStates[`${type}-${item}`] ? 'copy-success' : 'secondary-text'\n                        }\n                      />\n                    </SlButton>\n                  </SlTooltip>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      {renderIOCList(iocs.hashes, 'hash')}\n      {renderIOCList(iocs.ips, 'ip')}\n      {renderIOCList(iocs.domains, 'domain')}\n      {renderIOCList(iocs.urls, 'url')}\n      {renderIOCList(iocs.file_paths, 'path')}\n    </div>\n  );\n};\n","// Unified text formatting utilities for improving readability\n\ninterface ParagraphBreakerOptions {\n  maxSentencesPerParagraph: number;\n  shortTextThreshold: number;\n  breakKeywords: string[];\n  aggressiveBreaking?: boolean;\n}\n\n/**\n * Core paragraph breaking engine - unified logic for all formatting types\n */\nconst createParagraphBreaker = (options: ParagraphBreakerOptions) => {\n  return (text: string): string[] => {\n    if (!text || typeof text !== 'string') {\n      return [];\n    }\n\n    // Normalize whitespace for consistent processing\n    const cleanText = text.replace(/\\s+/g, ' ').trim();\n\n    // Split on sentence boundaries (. ! ?) followed by space and capital letter\n    const sentences = cleanText\n      .split(/(?<=[.!?])\\s+(?=[A-Z])/)\n      .map(sentence => sentence.trim())\n      .filter(sentence => sentence.length > 0);\n\n    // Short text handling\n    if (sentences.length <= options.shortTextThreshold) {\n      return [cleanText];\n    }\n\n    const paragraphs: string[] = [];\n    let currentParagraph: string[] = [];\n\n    sentences.forEach((sentence, index) => {\n      currentParagraph.push(sentence);\n\n      // Determine if we should break paragraph\n      const atMaxLength = currentParagraph.length >= options.maxSentencesPerParagraph;\n      const isLastSentence = index === sentences.length - 1;\n      const hasKeywordBreak = options.aggressiveBreaking && \n        currentParagraph.length > 0 && \n        index < sentences.length - 1 &&\n        options.breakKeywords.some(keyword => sentence.includes(keyword));\n      \n      const shouldBreak = atMaxLength || isLastSentence || hasKeywordBreak;\n\n      if (shouldBreak) {\n        paragraphs.push(currentParagraph.join(' '));\n        currentParagraph = [];\n      }\n    });\n\n    return paragraphs.filter(p => p.length > 0);\n  };\n};\n\n// Predefined formatter configurations\nconst formatters = {\n  default: createParagraphBreaker({\n    maxSentencesPerParagraph: 3,\n    shortTextThreshold: 2,\n    breakKeywords: ['Additionally', 'Furthermore', 'However', 'This technique', 'Attackers'],\n    aggressiveBreaking: true\n  }),\n\n  mitre: createParagraphBreaker({\n    maxSentencesPerParagraph: 2,\n    shortTextThreshold: 1,\n    breakKeywords: [\n      // Technical transition indicators\n      'This technique', 'Attackers', 'Adversaries', 'The malware',\n      'Additionally', 'Furthermore', 'However', 'For example', 'In some cases',\n      'Common methods', 'Detection methods', 'Mitigation strategies',\n      // Technical process indicators  \n      'executed', 'implemented', 'utilized', 'performed',\n      // Platform/system indicators\n      'Windows', 'Linux', 'macOS', 'registry', 'file system', 'network', 'process'\n    ],\n    aggressiveBreaking: true\n  }),\n\n  summary: createParagraphBreaker({\n    maxSentencesPerParagraph: 3,\n    shortTextThreshold: 3,\n    breakKeywords: ['Additionally', 'However', 'Furthermore'],\n    aggressiveBreaking: true\n  }),\n\n  technical: createParagraphBreaker({\n    maxSentencesPerParagraph: 5,\n    shortTextThreshold: 4,\n    breakKeywords: [\n      'Additionally', 'Furthermore', 'However', 'The analysis',\n      'This indicates', 'Based on'\n    ],\n    aggressiveBreaking: true\n  }),\n\n  reasoning: createParagraphBreaker({\n    maxSentencesPerParagraph: 2,\n    shortTextThreshold: 1,\n    breakKeywords: [\n      // Core analytical transition phrases\n      'The analysis', 'This assessment', 'Based on the', 'The evidence',\n      'However', 'Additionally', 'Furthermore', 'Therefore', 'In conclusion',\n      'This indicates', 'The reasoning', 'Charlotte', 'data sources',\n      'analytical methods', 'decision factors', 'confidence level',\n      'limitations', 'assumptions',\n      // Technical assessment indicators\n      'probability', 'likelihood', 'assessment shows', 'evaluation indicates',\n      'analysis reveals', 'findings suggest', 'results demonstrate',\n      'investigation', 'methodology', 'approach', 'consideration',\n      'factor', 'criteria', 'metric', 'measurement', 'validation', 'verification'\n    ],\n    aggressiveBreaking: true\n  })\n};\n\n// Public API - simplified function exports\nexport const formatTextWithParagraphs = formatters.default;\nexport const formatMitreDescription = formatters.mitre;\n\n/**\n * Truncates text to a specified length with ellipsis\n * Used for preview/summary views\n */\nexport const truncateText = (text: string, maxLength: number): string => {\n  if (!text || text.length <= maxLength) {\n    return text;\n  }\n\n  // Find the last space before maxLength to avoid cutting words\n  const lastSpace = text.lastIndexOf(' ', maxLength);\n  const cutPoint = lastSpace > maxLength * 0.8 ? lastSpace : maxLength;\n\n  return `${text.substring(0, cutPoint).trim()}...`;\n};\n\n/**\n * Capitalizes first letter of each sentence\n * Ensures consistent formatting\n */\nexport const capitalizeFirstLetter = (text: string): string => {\n  if (!text) return text;\n  return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;\n};\n\n// Export formatters for use in universalFormatting.ts\nexport { formatters };\n","// src/components/security/MITREDisplay.tsx\n\nimport { SlIcon, SlBadge, SlButton, SlTooltip } from '@shoelace-style/shoelace/dist/react';\nimport React, { useState, useCallback } from 'react';\n\nimport type { MITRETechnique } from '../../types/security';\nimport { formatMitreDescription } from '../../utils/textFormatting';\nimport { buildMitreUrl } from '../../utils/helpers';\n\ninterface MITREDisplayProps {\n  techniques: MITRETechnique[] | undefined;\n}\n\nexport const MITREDisplay: React.FC<MITREDisplayProps> = ({ techniques }) => {\n  const [copyStates, setCopyStates] = useState<Record<string, boolean>>({});\n\n  const copyMitreUrl = useCallback(async (url: string, techniqueId: string) => {\n    try {\n      await navigator.clipboard.writeText(url);\n      setCopyStates(prev => ({ ...prev, [techniqueId]: true }));\n      setTimeout(() => {\n        setCopyStates(prev => ({ ...prev, [techniqueId]: false }));\n      }, 2000);\n    } catch {\n      // Silent failure like IOC pattern\n    }\n  }, []);\n\n  if (!techniques || techniques.length === 0) return null;\n\n  // Extract tactic from technique if available\n  const getTacticFromTechnique = (technique: MITRETechnique): string | null => {\n    // Try to extract tactic from description or technique_name\n    const description = technique.description.toLowerCase() || '';\n    const name = technique.technique_name.toLowerCase() || '';\n    \n    // Common MITRE tactics mapping\n    const tactics = {\n      'initial-access': ['initial access', 'exploit', 'phishing', 'drive-by'],\n      'execution': ['execution', 'command', 'script', 'powershell', 'rundll32'],\n      'persistence': ['persistence', 'registry', 'startup', 'scheduled task'],\n      'privilege-escalation': ['privilege escalation', 'escalate', 'token', 'uac bypass'],\n      'defense-evasion': ['defense evasion', 'obfuscat', 'masquerade', 'disable', 'hide'],\n      'credential-access': ['credential', 'password', 'hash', 'keylog', 'dump'],\n      'discovery': ['discovery', 'enumerate', 'network', 'system information'],\n      'lateral-movement': ['lateral movement', 'remote', 'psexec', 'wmi'],\n      'collection': ['collection', 'data', 'clipboard', 'screen capture'],\n      'command-control': ['command and control', 'c2', 'communication', 'channel'],\n      'exfiltration': ['exfiltration', 'steal', 'transfer', 'upload'],\n      'impact': ['impact', 'destroy', 'encrypt', 'ransom', 'wipe']\n    };\n\n    const combinedText = `${description} ${name}`;\n    \n    for (const [tactic, keywords] of Object.entries(tactics)) {\n      if (keywords.some(keyword => combinedText.includes(keyword))) {\n        return tactic;\n      }\n    }\n    \n    return null;\n  };\n\n  // Get badge variant based on tactic\n  const getTacticBadgeVariant = (tactic: string | null): 'primary' | 'warning' | 'danger' | 'success' | 'neutral' => {\n    if (!tactic) return 'neutral';\n    \n    switch (tactic) {\n      case 'initial-access':\n      case 'execution':\n        return 'warning';\n      case 'persistence':\n      case 'privilege-escalation':\n        return 'danger';\n      case 'defense-evasion':\n      case 'credential-access':\n        return 'primary';\n      case 'discovery':\n      case 'lateral-movement':\n        return 'success';\n      default:\n        return 'neutral';\n    }\n  };\n\n  // Format tactic name for display\n  const formatTacticName = (tactic: string | null): string => {\n    if (!tactic) return '';\n    return tactic\n      .split('-')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n\n  return (\n    <div className='mitre-techniques-container space-y-3'>\n      {techniques.map((technique, index) => {\n        const formattedDescriptions = formatMitreDescription(technique.description);\n        const tactic = getTacticFromTechnique(technique);\n        const tacticVariant = getTacticBadgeVariant(tactic);\n        const tacticName = formatTacticName(tactic);\n\n        return (\n          <div key={index} className='mitre-technique-card enhanced-card'>\n            {/* Technique Header - Restructured Layout */}\n            <div className='technique-header'>\n              <div className='technique-title-section'>\n                {/* Icon, ID and copy button on first line - IOC-style pattern */}\n                <div className='flex items-center gap-1 mb-1'>\n                  <SlIcon name='shield-check' className='technique-icon flex-shrink-0' />\n                  <span className='technique-id'>\n                    {technique.technique_id}\n                  </span>\n                  <SlTooltip\n                    content={\n                      copyStates[technique.technique_id]\n                        ? 'Copied to clipboard!'\n                        : 'Copy MITRE URL to clipboard'\n                    }\n                    placement='top'\n                    distance={8}\n                    hoist\n                  >\n                    <SlButton\n                      size='small'\n                      variant='text'\n                      onClick={() => copyMitreUrl(buildMitreUrl(technique.technique_id), technique.technique_id)}\n                      className='compact-copy-btn ioc-copy-btn flex-shrink-0'\n                    >\n                      <SlIcon\n                        name={copyStates[technique.technique_id] ? 'check-circle' : 'clipboard'}\n                        className={copyStates[technique.technique_id] ? 'copy-success' : 'secondary-text'}\n                      />\n                    </SlButton>\n                  </SlTooltip>\n                </div>\n                \n                {/* Technique Name on second line */}\n                <div className='technique-name-line mb-1'>\n                  <span className='technique-name'>{technique.technique_name}</span>\n                </div>\n                \n                {/* Tactic Badge on third line */}\n                {tacticName && (\n                  <div className='tactic-badge-container mb-3'>\n                    <SlBadge \n                      variant={tacticVariant} \n                      className='text-xs w-fit tactic-badge'\n                    >\n                      {tacticName}\n                    </SlBadge>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Technique Description with Paragraphs */}\n            <div className='technique-description'>\n              {formattedDescriptions.length > 0 ? (\n                formattedDescriptions.map((paragraph, paragraphIndex) => (\n                  <p \n                    key={paragraphIndex} \n                    className='text-sm sm:text-base secondary-text leading-relaxed break-words technique-paragraph'\n                  >\n                    {paragraph}\n                  </p>\n                ))\n              ) : (\n                <p className='text-sm sm:text-base secondary-text leading-relaxed break-words technique-paragraph'>\n                  {technique.description}\n                </p>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","// Universal formatting utilities for ALL security output sections\n// Applies consistent paragraph breaks and readability improvements\n\nimport React, { type ReactElement } from 'react';\nimport { formatTextWithParagraphs, formatMitreDescription, formatters } from './textFormatting';\n\n/**\n * Universal formatter for any text content in security analysis\n * Uses unified paragraph breaking system with optimized configurations\n */\nexport const formatSecurityText = (text: string, type: 'summary' | 'technical' | 'reasoning' | 'recommendation' | 'mitre' = 'technical'): string[] => {\n  if (!text || typeof text !== 'string') {\n    return [];\n  }\n\n  switch (type) {\n    case 'mitre':\n      return formatMitreDescription(text);\n    case 'summary':\n      return formatters.summary(text);\n    case 'technical':\n      return formatters.technical(text);\n    case 'reasoning':\n      return formatters.reasoning(text);\n    case 'recommendation':\n      return formatTextWithParagraphs(text);\n    default:\n      return formatTextWithParagraphs(text);\n  }\n};\n\n/**\n * Check if text needs formatting (has multiple sentences)\n */\nexport const needsFormatting = (text: string): boolean => {\n  if (!text || typeof text !== 'string') return false;\n  \n  const sentenceCount = text.split(/[.!?]/).filter(s => s.trim().length > 0).length;\n  return sentenceCount > 2;\n};\n\n/**\n * Format text for display with proper paragraph structure\n * Returns JSX-ready elements\n */\nexport const renderFormattedText = (text: string, type: 'summary' | 'technical' | 'reasoning' | 'recommendation' | 'mitre' = 'technical', className = ''): ReactElement[] => {\n  const paragraphs = formatSecurityText(text, type);\n  \n  return paragraphs.map((paragraph, index) => (\n    React.createElement('p', {\n      key: index,\n      className: `formatted-paragraph ${className}`.trim(),\n      dangerouslySetInnerHTML: { __html: paragraph }\n    })\n  ));\n};\n","// src/utils/badgeUtils.ts\n\nimport type { ThreatLevel, ConfidenceLevel } from '../types/security';\n\n/**\n * Shared badge color utilities to eliminate duplication across components\n */\n\nexport const getThreatLevelColor = (\n  level: ThreatLevel\n): 'danger' | 'warning' | 'neutral' | 'success' => {\n  switch (level.toLowerCase() as Lowercase<ThreatLevel>) {\n    case 'critical':\n      return 'danger';\n    case 'high':\n      return 'warning';\n    case 'medium':\n      return 'neutral';\n    case 'low':\n      return 'success';\n    default:\n      return 'neutral';\n  }\n};\n\nexport const getConfidenceLevelColor = (\n  level: ConfidenceLevel\n): 'success' | 'warning' | 'neutral' => {\n  switch (level.toLowerCase() as Lowercase<ConfidenceLevel>) {\n    case 'high':\n      return 'success';\n    case 'medium':\n      return 'warning';\n    case 'low':\n      return 'neutral';\n    default:\n      return 'neutral';\n  }\n};\n\n/**\n * Get malware classification color\n */\nexport const getMalwareClassificationColor = (\n  classification: string\n): 'danger' | 'warning' | 'neutral' => {\n  switch (classification.toLowerCase()) {\n    case 'malicious':\n      return 'danger';\n    case 'suspicious':\n      return 'warning';\n    default:\n      return 'neutral';\n  }\n};\n","// src/components/security/StructuredSecurityAnalysis.tsx\n\nimport { SlIcon, SlBadge, SlCard } from '@shoelace-style/shoelace/dist/react';\nimport React from 'react';\nimport ReactMarkdown, { type Components } from 'react-markdown';\n\nimport type {\n  StructuredSecurityResponse,\n} from '../../types/security';\nimport { formatSecurityText, needsFormatting } from '../../utils/universalFormatting';\nimport { getThreatLevelColor, getConfidenceLevelColor } from '../../utils/badgeUtils';\n\nimport { IOCDisplay } from './IocDisplay';\nimport { MITREDisplay } from './MitreDisplay';\n\ninterface StructuredSecurityAnalysisProps {\n  data: StructuredSecurityResponse;\n  renderers: Components; // ReactMarkdown component renderers\n}\n\nexport const StructuredSecurityAnalysis: React.FC<StructuredSecurityAnalysisProps> = ({\n  data,\n  renderers,\n}) => {\n  // Get priority actions from simplified schema\n  const priorityActions = data.priority_actions;\n\n  return (\n    <div className='structured-analysis space-y-2 sm:space-y-4'>\n      {/* Executive Summary */}\n      <SlCard className='executive-summary-card'>\n        <h3 className='flex items-center gap-1 sm:gap-2 text-base sm:text-lg font-bold mb-2 sm:mb-3'>\n          <SlIcon name='clipboard-data' className='flex-shrink-0' />\n          <span className='break-words'>Executive Summary</span>\n        </h3>\n        <div className='flex flex-col sm:flex-row flex-wrap gap-1 sm:gap-2 mb-3'>\n          <SlBadge\n            variant={getThreatLevelColor(data.threat_level)}\n            className='text-xs sm:text-sm w-fit'\n          >\n            {data.threat_level} Threat\n          </SlBadge>\n          <SlBadge\n            variant={getConfidenceLevelColor(data.confidence_level)}\n            className='text-xs sm:text-sm w-fit'\n          >\n            {data.confidence_level} Confidence\n          </SlBadge>\n        </div>\n        {needsFormatting(data.executive_summary) ? (\n          formatSecurityText(data.executive_summary, 'summary').map((paragraph, index) => (\n            <p key={index} className='text-sm sm:text-base leading-relaxed break-words formatted-paragraph'>\n              {paragraph}\n            </p>\n          ))\n        ) : (\n          <p className='text-sm sm:text-base leading-relaxed break-words'>{data.executive_summary}</p>\n        )}\n      </SlCard>\n\n      {/* IOCs */}\n      {data.iocs &&\n        ((data.iocs.hashes?.length ?? 0) > 0 ||\n          (data.iocs.ips?.length ?? 0) > 0 ||\n          (data.iocs.domains?.length ?? 0) > 0 ||\n          (data.iocs.urls?.length ?? 0) > 0 ||\n          (data.iocs.file_paths?.length ?? 0) > 0) && (\n          <SlCard className='iocs-card'>\n            <h3 className='flex items-center gap-1 sm:gap-2 text-base sm:text-lg font-bold mb-2 sm:mb-3'>\n              <SlIcon name='shield-exclamation' className='flex-shrink-0' />\n              <span className='break-words'>IOC Details</span>\n            </h3>\n            <IOCDisplay iocs={data.iocs} />\n          </SlCard>\n        )}\n\n      {/* MITRE ATT&CK Techniques */}\n      {data.mitre_techniques && data.mitre_techniques.length > 0 && (\n        <SlCard className='mitre-details'>\n          <h3 className='flex items-center gap-1 sm:gap-2 text-base sm:text-lg font-bold mb-2 sm:mb-3'>\n            <SlIcon name='diagram-3' className='flex-shrink-0' />\n            <span className='break-words'>\n              MITRE ATT&CK Techniques ({data.mitre_techniques.length})\n            </span>\n          </h3>\n          <MITREDisplay techniques={data.mitre_techniques} />\n        </SlCard>\n      )}\n\n      {/* Technical Details */}\n      {data.technical_details && (\n        <SlCard className='technical-details'>\n          <h3 className='flex items-center gap-1 sm:gap-2 text-base sm:text-lg font-bold mb-2 sm:mb-3'>\n            <SlIcon name='gear' className='flex-shrink-0' />\n            <span className='break-words'>Technical Analysis</span>\n          </h3>\n          <div className='prose prose-sm max-w-none'>\n            {needsFormatting(data.technical_details) ? (\n              <div className='technical-details-formatted'>\n                {formatSecurityText(data.technical_details, 'technical').map((paragraph, index) => (\n                  <div key={index} className='technical-paragraph'>\n                    <ReactMarkdown components={renderers}>{paragraph}</ReactMarkdown>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <ReactMarkdown components={renderers}>{data.technical_details}</ReactMarkdown>\n            )}\n          </div>\n        </SlCard>\n      )}\n\n      {/* Priority Actions - Simplified unified recommendations */}\n      {priorityActions.length > 0 && (\n        <SlCard className='recommendations-details'>\n          <h3 className='flex items-center gap-1 sm:gap-2 text-base sm:text-lg font-bold mb-2 sm:mb-3'>\n            <SlIcon name='lightbulb' className='flex-shrink-0' />\n            <span className='break-words'>\n              Priority Actions ({priorityActions.length})\n            </span>\n          </h3>\n          <ul className='compact-bullet-list'>\n            {priorityActions.map((action, index) => (\n              <li key={index} className='recommendation-item'>\n                <SlIcon name='dot' className='secondary-text mt-0.5 flex-shrink-0' />\n                <span className='text-sm sm:text-base break-words'>{action}</span>\n              </li>\n            ))}\n          </ul>\n        </SlCard>\n      )}\n\n      {/* Analysis Methodology - Charlotte's analytical transparency */}\n      {data.reasoning_assessment && (\n        <SlCard className='analysis-methodology-card'>\n          <h3 className='flex items-center gap-1 sm:gap-2 text-base sm:text-lg font-bold mb-2 sm:mb-3'>\n            <SlIcon name='lightbulb' className='flex-shrink-0' />\n            <span className='break-words'>Analysis Methodology</span>\n          </h3>\n          <div className='reasoning-content'>\n            <strong className='text-sm font-semibold mb-2 block'>\n              Charlotte&apos;s Analytical Methodology:\n            </strong>\n            {needsFormatting(data.reasoning_assessment) ? (\n              formatSecurityText(data.reasoning_assessment, 'reasoning').map((paragraph, index) => (\n                <p key={index} className='text-sm sm:text-base leading-relaxed break-words formatted-paragraph'>\n                  {paragraph}\n                </p>\n              ))\n            ) : (\n              <p className='text-sm sm:text-base leading-relaxed break-words'>\n                {data.reasoning_assessment}\n              </p>\n            )}\n          </div>\n        </SlCard>\n      )}\n    </div>\n  );\n};\n","// src/components/ResponseDisplay.tsx\n\nimport { SlSpinner, SlIcon } from '@shoelace-style/shoelace/dist/react';\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport { parseStructuredResponse } from '../utils/security/iocUtils';\n\nimport { createMarkdownRenderers } from './markdown';\nimport { StructuredSecurityAnalysis } from './security';\nimport '../styles/features/loading.css';\n\n/**\n * Enhanced markdown preprocessor for consistent formatting and readability\n * Handles complex nested lists, dense paragraphs, and technical content formatting\n */\nconst preprocessMarkdown = (text: string): string => {\n  let processed = text;\n\n  // Phase 1: Fix inline IPs - convert \"IPs: ip1    ip2    ip3\" to separate lines\n  processed = processed.replace(/^(IPs?:)\\s*([0-9.]+(?:\\s+[0-9.]+)+)\\s*$/gim, (_, label, ips) => {\n    const ipList = ips\n      .trim()\n      .split(/\\s+/)\n      .map((ip: string) => `- \\`${ip}\\``)\n      .join('\\n');\n    return `${label}\\n${ipList}`;\n  });\n\n  // Phase 2: Fix nested list structure - convert mixed bullets to consistent format\n  processed = processed.replace(/^(\\s*)\\d+\\.\\s*(.+)\\n(\\s*[-*•]\\s*.+)/gim, (match, indent, mainItem, bulletItems) => {\n    // Convert mixed numbered/bullet lists to consistent structure\n    const formattedBullets = bulletItems.replace(/^(\\s*)[-*•]\\s*/gm, '   • ');\n    return `${indent}• **${mainItem.trim()}**\\n${formattedBullets}`;\n  });\n\n  // Phase 3: Break up dense paragraphs (key fix for reasoning assessment)\n  processed = processed.replace(/([.!?])\\s+([A-Z][^.!?]*[.!?])\\s+([A-Z][^.!?]*[.!?])\\s+([A-Z][^.!?]*[.!?])/g, \n    '$1\\n\\n$2 $3\\n\\n$4');\n\n  // Phase 4: Improve paragraph breaks for analytical content\n  processed = processed.replace(/\\b(However|Additionally|Furthermore|Therefore|Based on|The analysis|This assessment),/g, '\\n\\n$1,');\n\n  // Phase 5: Ensure technical term consistency\n  processed = processed.replace(/^(\\s*[-*•]\\s*)([a-zA-Z0-9_.-]+\\.exe)(?!`)(\\s*)$/gim, '$1`$2`$3');\n  processed = processed.replace(/^(\\s*[-*•]\\s*)([a-fA-F0-9]{32,64})(?!`)(\\s*)$/gim, '$1`$2`$3');\n  processed = processed.replace(/^(\\s*[-*•]\\s*)(HK[A-Z_\\\\]+[^`\\n]*)(?!`)(\\s*)$/gim, '$1`$2`$3');\n\n  // Phase 6: Enhanced recommendation section detection\n  processed = processed.replace(\n    /^(#{1,6}\\s*(?:Recommended Actions?|Security Recommendations?|Recommendations?)[\\s\\S]*?)^(?=#{1,6}|\\n*$)/gim,\n    match => `<div class=\"markdown-recommendations\">\\n${match}\\n</div>`\n  );\n\n  // Phase 7: Clean up excessive whitespace while preserving intentional breaks\n  processed = processed.replace(/\\n{4,}/g, '\\n\\n\\n');\n  processed = processed.replace(/\\s+$/gm, '');\n\n  return processed;\n};\n\ninterface ResponseDisplayProps {\n  loading: boolean;\n  responseText: string;\n  errorMessage: string;\n}\n\nconst ResponseDisplay = React.memo(\n  ({ loading, responseText, errorMessage }: ResponseDisplayProps) => {\n    // Create markdown renderers\n    const renderers = createMarkdownRenderers();\n\n    // Progressive loading messages state\n    const [loadingMessage, setLoadingMessage] = React.useState('Gathering information...');\n\n    // Progressive loading message effect\n    React.useEffect(() => {\n      if (loading) {\n        setLoadingMessage('Gathering information...');\n\n        const timer1 = setTimeout(() => {\n          setLoadingMessage('Processing data...');\n        }, 8000);\n\n        const timer2 = setTimeout(() => {\n          setLoadingMessage('Compiling results...');\n        }, 16000);\n\n        return () => {\n          clearTimeout(timer1);\n          clearTimeout(timer2);\n        };\n      }\n      // Always return a cleanup function to satisfy TypeScript\n      return () => {};\n    }, [loading]);\n\n    // Loading state\n    if (loading) {\n      return (\n        <div className='loading-container'>\n          <div className='loading-backdrop'></div>\n          <div className='loading-icon-container'>\n            <SlSpinner\n              style={\n                {\n                  '--track-width': '3px',\n                  '--track-color': 'var(--cs-border-color-light, #e2e8f0)',\n                  '--indicator-color': 'var(--cs-color-primary, #0ea5e9)',\n                  '--speed': '2.5s',\n                  fontSize: 'var(--font-size-4xl)',\n                  filter: 'drop-shadow(0 0 8px rgba(14, 165, 233, 0.3))',\n                } as React.CSSProperties\n              }\n            />\n          </div>\n          <p className='loading-text-pulse'>{loadingMessage}</p>\n        </div>\n      );\n    }\n\n    // Error state\n    if (errorMessage) {\n      return (\n        <div\n          className='flex flex-col items-center justify-center min-h-96 gap-3'\n          style={{ color: `var(--cs-status-error)` }}\n        >\n          <SlIcon name='exclamation-triangle' />\n          <p className='text-base text-center'>{errorMessage}</p>\n        </div>\n      );\n    }\n\n    // Empty state\n    if (!responseText) {\n      return (\n        <div\n          className='flex flex-col items-center justify-center min-h-96 gap-3'\n          style={{ color: `var(--cs-text-secondary)` }}\n        >\n          <SlIcon name='chat-square-text' />\n          <p className='text-base'>Submit a query to see analysis results</p>\n        </div>\n      );\n    }\n\n    // Response content - render with height-constrained container and scroll indicators\n    const structuredData = parseStructuredResponse(responseText);\n\n    if (structuredData) {\n      // Render structured security analysis with scroll container\n      // Charlotte AI response parsed as structured JSON\n      return (\n        <div className='response-scroll-container'>\n          <div className='response-scroll-content'>\n            <StructuredSecurityAnalysis data={structuredData} renderers={renderers} />\n          </div>\n          <div className='response-scroll-fade'></div>\n        </div>\n      );\n    } else {\n      // JSON parsing failed - show markdown with warning in scroll container\n      // Charlotte AI response could not be parsed as JSON, falling back to markdown\n      // Raw response available for debugging\n\n      return (\n        <div className='response-scroll-container'>\n          <div className='response-scroll-content'>\n            <div className='space-y-4'>\n              <div\n                className='p-3 rounded-lg'\n                style={{\n                  backgroundColor: `var(--cs-background-light)`,\n                  border: `1px solid var(--cs-border-color-medium)`,\n                }}\n              >\n                <p className='text-sm font-medium' style={{ color: `var(--cs-status-warning)` }}>\n                  ⚠️ Response Format Issue\n                </p>\n                <p className='text-sm mt-1' style={{ color: `var(--cs-text-secondary)` }}>\n                  Charlotte AI did not return the expected JSON format. Displaying as markdown\n                  instead.\n                </p>\n              </div>\n              <ReactMarkdown components={renderers}>\n                {preprocessMarkdown(responseText)}\n              </ReactMarkdown>\n            </div>\n          </div>\n          <div className='response-scroll-fade'></div>\n        </div>\n      );\n    }\n  }\n);\n\nResponseDisplay.displayName = 'ResponseDisplay';\n\nexport default ResponseDisplay;\n","// src/components/Home.tsx\n\nimport {\n  SlCard,\n  SlIcon,\n  SlTabGroup,\n  SlTab,\n  SlTabPanel,\n  SlButton,\n  SlDropdown,\n  SlMenu,\n  SlMenuItem,\n} from '@shoelace-style/shoelace/dist/react';\nimport React, { useState, useCallback, useEffect } from 'react';\n\nimport { useContextProcessor } from '../hooks/useContextProcessor';\nimport { useCopyManager } from '../hooks/useCopyManager';\nimport { useCopyToClipboard } from '../hooks/useCopyToClipboard';\nimport { useJsonDataManager } from '../hooks/useJsonDataManager';\nimport { useTabManager } from '../hooks/useTabManager';\nimport {\n  executeWorkflowWithCache,\n  type WorkflowExecutionParams,\n  type WorkflowExecutionResult,\n} from '../services/workflow';\nimport {\n  DEFAULT_MODEL,\n  DEFAULT_TEMPERATURE,\n  DEFAULT_STOP_WORDS,\n  DEFAULT_JSON_SCHEMA,\n  DEFAULT_DATA_TO_INCLUDE,\n  getModelLabel,\n} from '../utils/constants';\nimport { validateQuery, formatErrorMessage } from '../utils/helpers';\n\nimport QueryForm from './QueryForm';\nimport ResponseDisplay from './ResponseDisplay';\n\ninterface HomeProps {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  falcon: any; // Complex Falcon API types - any is appropriate here\n}\n\ninterface HomeState {\n  query: string;\n  modelName: string;\n  temperature: number;\n  stopWords: string[];\n  jsonSchema: string;\n  dataToInclude: string[];\n  responseText: string;\n  status: string;\n  loading: boolean;\n  errorMessage: string;\n  hasSubmittedQuery: boolean;\n  selectedContextEntity: string | null;\n  showJsonTab: boolean;\n  quotaAcknowledged: boolean;\n  executionStartTime: string | null;\n  executionEndTime: string | null;\n}\n\nconst Home = React.memo(({ falcon }: HomeProps) => {\n  const [state, setState] = useState<HomeState>({\n    query: '',\n    modelName: DEFAULT_MODEL,\n    temperature: DEFAULT_TEMPERATURE,\n    stopWords: DEFAULT_STOP_WORDS,\n    jsonSchema: DEFAULT_JSON_SCHEMA,\n    dataToInclude: DEFAULT_DATA_TO_INCLUDE,\n    responseText: '',\n    status: '',\n    loading: false,\n    errorMessage: '',\n    hasSubmittedQuery: false,\n    selectedContextEntity: null,\n    showJsonTab: false,\n    quotaAcknowledged: false,\n    executionStartTime: null,\n    executionEndTime: null,\n  });\n\n  // Use custom hooks for modular functionality\n  const { availableContextOptions } = useContextProcessor({ falconData: falcon?.data });\n\n  // Calculate context counts for the JSON manager\n  const contextCounts = {\n    total: availableContextOptions.length,\n    domains: availableContextOptions.filter(opt => opt.type === 'domain').length,\n    files: availableContextOptions.filter(opt => opt.type === 'file').length,\n    ips: availableContextOptions.filter(opt => opt.type === 'ip').length,\n    fqdns: availableContextOptions.filter(opt => opt.type === 'domain' && opt.subType === 'fqdn')\n      .length,\n  };\n\n  const {\n    jsonContextData,\n    initializeRequestData,\n    updateRequestData,\n    updateResponseData,\n    copyFalconContext,\n    copyRequestData,\n    // Copy states for visual feedback\n    contextCopyState,\n    requestCopyState,\n  } = useJsonDataManager({\n    falconData: falcon?.data,\n    availableContextOptions,\n    contextCounts,\n  });\n\n  // Use tab manager hook\n  const {\n    tabGroupRef: tabGroupRefFromHook,\n    handleTabChange,\n    setActiveTab,\n    getResponseTabIndicator,\n  } = useTabManager({\n    hasSubmittedQuery: state.hasSubmittedQuery,\n    loading: state.loading,\n    errorMessage: state.errorMessage,\n    responseText: state.responseText,\n  });\n\n  // Use copy manager hook for Response tab copy functionality\n  const { copyState, handleCopyFormat, copyOptions } = useCopyManager({\n    responseText: state.responseText,\n    jsonContextData,\n  });\n\n  // Additional copy hook for Raw Response in JSON tab\n  const { copyState: rawResponseCopyState, copyToClipboard: copyRawResponse } = useCopyToClipboard();\n\n\n  const updateState = useCallback((updates: Partial<HomeState>) => {\n    setState(prev => ({ ...prev, ...updates }));\n  }, []);\n\n  // Use the tab manager's ref instead of our local ref\n  // The useTabManager hook handles tab switching internally\n\n  // Update request data in real-time whenever query parameters change\n  useEffect(() => {\n    if (\n      jsonContextData &&\n      (state.query ||\n        state.modelName ||\n        state.temperature ||\n        state.jsonSchema ||\n        state.selectedContextEntity)\n    ) {\n      const requestParams = {\n        query: state.query,\n        model: getModelLabel(state.modelName),\n        temperature: state.temperature,\n        stopWords: state.stopWords,\n        jsonSchema: state.jsonSchema,\n        dataToInclude: state.dataToInclude,\n        selectedContext: state.selectedContextEntity ?? '',\n      };\n\n      updateRequestData(requestParams);\n    }\n  }, [\n    state.query,\n    state.modelName,\n    state.temperature,\n    state.stopWords,\n    state.jsonSchema,\n    state.dataToInclude,\n    state.selectedContextEntity,\n    jsonContextData,\n    updateRequestData,\n  ]);\n\n  const handleSubmit = useCallback(async () => {\n    // Validate input\n    const validation = validateQuery(state.query);\n    if (!validation.isValid) {\n      setState(prev => ({\n        ...prev,\n        errorMessage: validation.error ?? 'Invalid query',\n      }));\n      return;\n    }\n\n    // Enable response tab and switch to it\n    const executionStartTime = new Date().toISOString();\n\n    // Initialize JSON context data with request parameters\n    const requestParams = {\n      query: state.query,\n      model: getModelLabel(state.modelName),\n      temperature: state.temperature,\n      stopWords: state.stopWords,\n      jsonSchema: state.jsonSchema,\n      dataToInclude: state.dataToInclude,\n      selectedContext: state.selectedContextEntity ?? '',\n    };\n\n    initializeRequestData(requestParams);\n\n    setState(prev => ({\n      ...prev,\n      hasSubmittedQuery: true,\n      loading: true,\n      status: 'Gathering details...',\n      responseText: '',\n      errorMessage: '',\n    }));\n\n    // Automatically switch to response tab\n    setActiveTab('response');\n\n    try {\n      // Build workflow execution parameters\n      const workflowParameters: WorkflowExecutionParams = {\n        query: state.query,\n        model: getModelLabel(state.modelName), // Convert internal value to display label for workflow\n        temperature: state.temperature,\n        stopWords: state.stopWords,\n        jsonSchema: state.jsonSchema,\n        dataToInclude: state.dataToInclude,\n        selectedContext: state.selectedContextEntity ?? '',\n        enableCaching: false,\n      };\n\n      // Execute workflow using the workflowExecutor\n      const result: WorkflowExecutionResult = await executeWorkflowWithCache(\n        falcon,\n        workflowParameters\n      );\n      const executionEndTime = new Date().toISOString();\n\n      // Update JSON context data with response\n      updateResponseData({\n        executionEndTime,\n        executionStartTime,\n        success: result.success,\n        fromCache: result.fromCache,\n        content: result.content,\n        error: result.error,\n        workflowResult: result,\n      });\n\n      if (result.success && result.content) {\n        setState(prev => ({\n          ...prev,\n          responseText: result.content ?? '',\n          status: result.fromCache ? 'Done (cached)' : 'Done',\n          loading: false,\n          errorMessage: '',\n          quotaAcknowledged: false, // Reset checkbox after successful submission\n          executionStartTime,\n          executionEndTime,\n        }));\n      } else {\n        setState(prev => ({\n          ...prev,\n          responseText: '',\n          errorMessage: result.error ?? 'Unknown error occurred',\n          status: 'Error',\n          loading: false,\n          executionStartTime,\n          executionEndTime,\n        }));\n      }\n    } catch (e) {\n      // Workflow error occurred\n      const errorMessage = formatErrorMessage(e);\n      const executionEndTime = new Date().toISOString();\n\n      // Update JSON context data with error\n      updateResponseData({\n        executionEndTime,\n        executionStartTime,\n        success: false,\n        error: errorMessage,\n        workflowResult: {\n          exception: {\n            message: e instanceof Error ? e.message : String(e),\n            stack: e instanceof Error ? e.stack : null,\n          },\n        },\n      });\n\n      setState(prev => ({\n        ...prev,\n        responseText: '',\n        errorMessage: `Error: ${errorMessage}`,\n        status: 'Error',\n        loading: false,\n        executionStartTime,\n        executionEndTime,\n      }));\n    }\n  }, [\n    state.query,\n    state.modelName,\n    state.temperature,\n    state.stopWords,\n    state.jsonSchema,\n    state.dataToInclude,\n    state.selectedContextEntity,\n    falcon,\n    initializeRequestData,\n    updateResponseData,\n    setActiveTab,\n  ]);\n\n  return (\n    <div className='w-full py-2'>\n      <SlCard className='full-width-card'>\n        <SlTabGroup ref={tabGroupRefFromHook} placement='top' onSlTabShow={handleTabChange}>\n          <SlTab slot='nav' panel='request'>\n            <SlIcon name='pencil' className='mr-2' />\n            Request\n          </SlTab>\n          <SlTab\n            slot='nav'\n            panel='response'\n            disabled={!state.hasSubmittedQuery}\n            className={!state.hasSubmittedQuery ? 'opacity-50 cursor-not-allowed' : ''}\n          >\n            {getResponseTabIndicator()}\n            Response\n          </SlTab>\n\n          {state.showJsonTab ? (\n            <SlTab slot='nav' panel='json'>\n              <SlIcon name='code-square' className='mr-2' />\n              JSON\n            </SlTab>\n          ) : null}\n\n          <SlTabPanel name='request'>\n            <QueryForm\n              query={state.query}\n              setQuery={(query: string) => updateState({ query })}\n              modelName={state.modelName}\n              setModelName={(modelName: string) => updateState({ modelName })}\n              temperature={state.temperature}\n              setTemperature={(temperature: number) => updateState({ temperature })}\n              stopWords={state.stopWords}\n              setStopWords={(stopWords: string[]) => updateState({ stopWords })}\n              jsonSchema={state.jsonSchema}\n              setJsonSchema={(jsonSchema: string) => updateState({ jsonSchema })}\n              dataToInclude={state.dataToInclude}\n              setDataToInclude={(dataToInclude: string[]) => updateState({ dataToInclude })}\n              loading={state.loading}\n              handleSubmit={handleSubmit}\n              selectedContextEntity={state.selectedContextEntity}\n              setSelectedContextEntity={(selectedContextEntity: string | null) =>\n                updateState({ selectedContextEntity })\n              }\n              availableContextOptions={availableContextOptions}\n              showJsonTab={state.showJsonTab}\n              setShowJsonTab={(showJsonTab: boolean) => updateState({ showJsonTab })}\n              quotaAcknowledged={state.quotaAcknowledged}\n              setQuotaAcknowledged={(quotaAcknowledged: boolean) =>\n                updateState({ quotaAcknowledged })\n              }\n            />\n          </SlTabPanel>\n\n          <SlTabPanel name='response'>\n            <div className='flex flex-col'>\n              {/* Response Header with Copy Button */}\n              {state.responseText && !state.loading && !state.errorMessage && (\n                <div className='flex justify-end mb-2'>\n                  <SlDropdown>\n                    <SlButton\n                      slot='trigger'\n                      size='small'\n                      variant='text'\n                      caret\n                      className={`compact-copy-btn ${\n                        copyState === 'check-circle'\n                          ? 'copy-success transition-colors duration-200'\n                          : 'text-body-and-labels'\n                      }`}\n                    >\n                      <SlIcon name={copyState} />\n                    </SlButton>\n                    <SlMenu>\n                      {copyOptions.map(option => (\n                        <SlMenuItem\n                          key={option.format}\n                          onClick={() => handleCopyFormat(option.format)}\n                        >\n                          <SlIcon slot='prefix' name={option.icon} />\n                          <span className='ml-2'>{option.label}</span>\n                        </SlMenuItem>\n                      ))}\n                    </SlMenu>\n                  </SlDropdown>\n                </div>\n              )}\n\n              {/* Response Content */}\n              <ResponseDisplay\n                loading={state.loading}\n                responseText={state.responseText}\n                errorMessage={state.errorMessage}\n              />\n            </div>\n          </SlTabPanel>\n\n          {state.showJsonTab ? (\n            <SlTabPanel name='json'>\n              <div className='json-tab-section'>\n                {/* Socket Information Section */}\n                {jsonContextData?.falcon_context.socket_info && (\n                  <div>\n                    <div className='json-section-header'>\n                      <h3 className='json-section-title'>\n                        <SlIcon name='diagram-3' />\n                        Socket Information\n                      </h3>\n                    </div>\n\n                    <div className='socket-info-container'>\n                      <div className='socket-info-grid'>\n                        <div className='socket-info-row'>\n                          <span className='socket-info-label'>Current Socket:</span>\n                          <span\n                            className={\n                              jsonContextData.falcon_context.socket_info.detected\n                                ? 'socket-badge-detected'\n                                : 'socket-badge-unknown'\n                            }\n                          >\n                            {jsonContextData.falcon_context.socket_info.detected\n                              ? jsonContextData.falcon_context.socket_info.socket\n                              : 'Unknown'}\n                          </span>\n                        </div>\n                        <div className='socket-info-row'>\n                          <span className='socket-info-label'>Page:</span>\n                          <span className='socket-info-text'>\n                            {jsonContextData.falcon_context.socket_info.displayName}\n                          </span>\n                        </div>\n                        <div className='socket-info-row'>\n                          <span className='socket-info-label'>Description:</span>\n                          <span className='socket-info-description'>\n                            {jsonContextData.falcon_context.socket_info.description}\n                          </span>\n                        </div>\n                        <div className='socket-info-row'>\n                          <span className='socket-info-label'>Detection Method:</span>\n                          <span className='socket-info-method'>\n                            {jsonContextData.falcon_context.socket_info.detectionMethod}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Context Section */}\n                <div>\n                  <div className='json-section-header'>\n                    <h3 className='json-section-title'>\n                      <SlIcon name='shield-check' />\n                      Context\n                    </h3>\n                    <SlButton \n                      size='small' \n                      onClick={copyFalconContext}\n                      className={`json-copy-button ${contextCopyState === 'check-circle' ? 'copy-success' : ''}`}\n                    >\n                      <SlIcon slot='prefix' name={contextCopyState} />\n                      {contextCopyState === 'check-circle' ? 'Copied!' : 'Copy Context'}\n                    </SlButton>\n                  </div>\n\n                  <div className='json-content-container'>\n                    <pre className='json-content-pre'>\n                      {jsonContextData?.falcon_context\n                        ? JSON.stringify(jsonContextData.falcon_context, null, 2)\n                        : 'No Falcon context available'}\n                    </pre>\n                  </div>\n                </div>\n\n                {/* Request Section */}\n                <div>\n                  <div className='json-section-header'>\n                    <h3 className='json-section-title'>\n                      <SlIcon name='arrow-up-circle' />\n                      Request\n                    </h3>\n                    <SlButton \n                      size='small' \n                      onClick={copyRequestData}\n                      className={`json-copy-button ${requestCopyState === 'check-circle' ? 'copy-success' : ''}`}\n                    >\n                      <SlIcon slot='prefix' name={requestCopyState} />\n                      {requestCopyState === 'check-circle' ? 'Copied!' : 'Copy Request'}\n                    </SlButton>\n                  </div>\n\n                  <div className='json-content-container'>\n                    <pre className='json-content-pre'>\n                      {jsonContextData?.request_data\n                        ? JSON.stringify(jsonContextData.request_data, null, 2)\n                        : 'No request data available - select a query to populate'}\n                    </pre>\n                  </div>\n                </div>\n\n                {/* Raw Response Section */}\n                {state.responseText && (\n                  <div>\n                    <div className='json-section-header'>\n                      <h3 className='json-section-title'>\n                        <SlIcon name='file-text' />\n                        Raw Response\n                      </h3>\n                      <SlButton \n                        size='small' \n                        onClick={() => copyRawResponse(state.responseText)}\n                        className={`json-copy-button ${rawResponseCopyState === 'check-circle' ? 'copy-success' : ''}`}\n                      >\n                        <SlIcon slot='prefix' name={rawResponseCopyState} />\n                        {rawResponseCopyState === 'check-circle' ? 'Copied!' : 'Copy Raw Response'}\n                      </SlButton>\n                    </div>\n\n                    <div className='raw-response-container'>\n                      <pre className='raw-response-pre'>\n                        {state.responseText}\n                      </pre>\n                    </div>\n                  </div>\n                )}\n\n\n                {/* Empty response state */}\n                {state.hasSubmittedQuery && !state.responseText && !state.loading && (\n                  <div className='raw-response-container'>\n                    <div className='raw-response-empty'>\n                      No response content available\n                    </div>\n                  </div>\n                )}\n              </div>\n            </SlTabPanel>\n          ) : null}\n        </SlTabGroup>\n      </SlCard>\n    </div>\n  );\n});\n\nHome.displayName = 'Home';\n\nexport default Home;\n","// src/hooks/useFalconApi.ts\nimport FalconApi from '@crowdstrike/foundry-js';\nimport { useEffect, useMemo, useState } from 'react';\n\n/**\n * Hook to initialize and provide access to the Falcon API\n * @returns Object containing falcon API instance and initialization state\n */\nexport function useFalconApi() {\n  const [isInitialized, setIsInitialized] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const falcon = useMemo(() => new FalconApi(), []);\n\n  useEffect(() => {\n    async function initializeFalcon() {\n      try {\n        await falcon.connect();\n        setIsInitialized(true);\n        setError(null);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Failed to initialize Falcon API';\n        // console.error('Failed to initialize Falcon API:', err);\n        setError(errorMessage);\n        setIsInitialized(false);\n      }\n    }\n\n    initializeFalcon();\n  }, [falcon]);\n\n  return {\n    falcon,\n    isInitialized,\n    error,\n  };\n}\n","// src/components/App.tsx\n\nimport React from 'react';\n\nimport { ErrorBoundary } from './ErrorBoundary';\nimport Home from './Home';\nimport { useFalconApi } from '../hooks/useFalconApi';\n\n/**\n * Main App component with error boundary\n */\nfunction App(): React.ReactNode {\n  const { isInitialized, falcon, error } = useFalconApi();\n\n  // Show error state if Falcon API failed to initialize\n  if (error) {\n    return (\n      <div\n        className='error-state p-6 rounded-lg'\n        style={{\n          backgroundColor: 'var(--cs-background-base)',\n          border: '1px solid var(--cs-border-color-light)',\n          borderRadius: 'var(--spacing-base)',\n        }}\n      >\n        <h3 className='text-lg font-medium mb-2' style={{ color: 'var(--cs-status-error)' }}>\n          Failed to Initialize\n        </h3>\n        <p className='text-sm mb-4' style={{ color: 'var(--cs-text-primary)' }}>\n          Unable to connect to the Falcon API: {error}\n        </p>\n        <button\n          onClick={() => window.location.reload()}\n          className='px-4 py-2 rounded hover:opacity-80 focus:outline-none focus:ring-2'\n          style={{\n            backgroundColor: 'var(--cs-status-error)',\n            color: 'var(--cs-text-on-primary)',\n          }}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  // Show loading state while initializing\n  if (!isInitialized) {\n    return (\n      <div className='loading-state flex items-center justify-center min-h-screen'>\n        <div className='text-center'>\n          <div\n            className='animate-spin rounded-full h-8 w-8 border-b-2 mx-auto mb-4'\n            style={{ borderBottomColor: 'var(--cs-primary)' }}\n          ></div>\n          <p style={{ color: 'var(--cs-text-primary)' }}>Initializing...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <ErrorBoundary>\n      <React.StrictMode>\n        <div\n          className='font-sans min-h-screen p-4'\n          style={{\n            fontFamily: 'var(--font-family-sans)',\n            color: 'var(--cs-text-primary)',\n            backgroundColor: 'var(--cs-background-dark)',\n            minHeight: '100vh',\n            padding: 'var(--spacing-xl)',\n          }}\n        >\n          <Home falcon={falcon} />\n        </div>\n      </React.StrictMode>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","// src/index.ts\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport App from './components/App';\n\n// Import Falcon Shoelace CSS (CrowdStrike themed Shoelace components)\n// This includes falcon-styles and provides light/dark theme support\nimport '@crowdstrike/falcon-shoelace/dist/style.css';\n\n// Import regular Shoelace for component functionality\nimport '@shoelace-style/shoelace/dist/shoelace.js';\nimport { setBasePath } from '@shoelace-style/shoelace/dist/utilities/base-path.js';\n\n// Import minimal custom styles LAST (only for component-specific overrides)\nimport './styles/global.css';\n\n// Set the base path for Shoelace icons to CDN\nsetBasePath('https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.20.1/cdn/');\n\n// Theme switching utility - system preferences only (no localStorage in sandbox)\nconst initializeTheme = () => {\n  // Simple system preference detection\n  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n  if (prefersDark) {\n    document.documentElement.classList.add('theme-dark');\n  } else {\n    document.documentElement.classList.remove('theme-dark');\n  }\n\n  // Listen for system theme changes and update automatically\n  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n    if (e.matches) {\n      document.documentElement.classList.add('theme-dark');\n    } else {\n      document.documentElement.classList.remove('theme-dark');\n    }\n  });\n};\n\n// Initialize theme before rendering\ninitializeTheme();\n\n// Render the app\nconst container = document.querySelector('#app');\nif (!container) {\n  throw new Error('Could not find app container element');\n}\n\nconst root = ReactDOM.createRoot(container);\nroot.render(React.createElement(App));\n"],"names":["ErrorBoundary","Component","constructor","props","state","hasError","error","errorInfo","getDerivedStateFromError","componentDidCatch","setState","onError","handleReset","render","fallback","_jsxDEV","className","style","backgroundColor","border","borderRadius","padding","children","color","xmlns","viewBox","fill","fillRule","d","clipRule","fileName","_jsxFileName","lineNumber","columnNumber","fontFamily","message","componentStack","type","onClick","borderColor","focusRingColor","window","location","reload","BASE_SECURITY_TEMPLATE","createDomainQueryTemplate","domain","replace","createFileQueryTemplate","filename","createHashQueryTemplate","hash","hashType","createIPQueryTemplate","ip","createFQDNQueryTemplate","fqdn","createHostnameQueryTemplate","hostname","createUserQueryTemplate","user","createMitreQueryTemplate","techniqueId","techniqueName","techniqueDisplay","createQueryTemplate","entityType","entityValue","entityData","fallbackEntityType","toUpperCase","HASH_TRUNCATION_LENGTH","HASH_DISPLAY_FORMAT","PREFIX_LENGTH","SUFFIX_LENGTH","SEPARATOR","PRIVATE_IP_RANGES","CLASS_A","MULTICAST_START","INTERNAL_DOMAIN_PATTERNS","truncateHash","length","slice","Math","max","extractTopLevelDomain","parts","split","lastPart","at","toLowerCase","secondLastPart","commonTwoPartTLDs","twoPartTLD","includes","truncateDomain","maxLength","truncationSuffix","availableLength","formatDisplayName","option","subType","hashMatch","displayName","match","displayedHash","originalHash","displayText","originalText","fullDomain","isTruncated","isPublicIP","map","Number","some","part","isNaN","a","b","isExternalFQDN","test","lowerHostname","pattern","endsWith","calculateEntityCounts","options","total","domains","filter","opt","files","ips","mitres","processDomains","entityValues","domainMap","Map","domain_names","Array","isArray","forEach","existing","get","count","sources","push","set","email_addresses","email","users","host_names","tldGroups","tld","has","totalCount","allSources","group","source","tldDisplayName","value","queryTemplate","domainCount","domainData","truncatedDomain","parentDomain","extractDomainsFromDetection","detection","device","machine_domain","hostinfo","domainExists","user_principal","processFiles","entities","fileHashMap","sha256Array","sha256s","md5Array","md5s","fileNameArray","file_name","canGroupFiles","i","entries","sha256Hash","sha256Hashes","Set","md5Hashes","add","md5Hash","hashData","sha256Count","size","md5Count","truncatedHash","parentFile","isGrouped","processLegacyFiles","entitiesFull","existingOptions","fileMap","entity","FileName","fileData","SHA256HashData","MD5HashData","filenameExists","isLegacy","optionValue","alreadyExists","extractFilesFromDetection","sha256","md5","hasSha256","sha1","sha1Hash","parent_details","parent","fileExists","grandparent_details","grandparent","processIPs","ipv4s","extractIPsFromDetection","external_ip","local_ip","extractMITREFromDetection","mitreMap","behaviors","behavior","technique_id","mitrePattern","technique","tactic","kill_chain","phase","technique_name","mitre_attack","attack","isValidMITRETechnique","extractTechniqueId","mitreData","possibleIds","id","processMITRETechniques","mitre_techniques","name","extractDetectionEntities","processAllEntities","falconData","detectionId","detectionEntities","incident","entity_values","entities_full","useContextProcessor","availableContextOptions","useMemo","contextCounts","COPY_OPTIONS","format","label","icon","description","stripMarkdown","markdown","text","convertJsonToMarkdown","jsonData","executive_summary","threat_level","confidence_level","malware_analysis","malware_family","variant_identification","threat_classification","risk_level","attack_intelligence","primary_functions","func","persistence_mechanisms","mech","behavior_patterns","incident_context","investigation_relevance","associated_filenames","related_iocs","registry_keys","key","hashes","immediate_actions","action","index","response_actions","immediate_containment","detection_rules","rule","remediation_guidance","guidance","iocs","Object","keys","urls","url","file_paths","path","technical_details","recommendations","rec","confidence_assessment","reasoning_assessment","analysis_confidence","source_reliability","validation_recommendations","convertJsonToPlainText","formatForCopy","responseText","parsedJsonResponse","JSON","stringify","response","timestamp","Date","toISOString","parseStructuredResponse","parsed","parse","trim","priority_actions","useCopyToClipboard","copyState","setCopyState","useState","copyToClipboard","useCallback","successDuration","navigator","clipboard","writeText","setTimeout","isSuccess","useCopyManager","jsonContextData","handleCopyFormat","textToCopy","copyOptions","SOCKET_MAP","socket","detectCurrentSocket","urlSocket","detectSocketFromUrl","socketInfo","detected","detectionMethod","contextSocket","detectSocketFromContext","titleSocket","detectSocketFromTitle","currentUrl","href","parentUrl","topUrl","top","urlsToCheck","Boolean","ngsiem","activity","xdr","title","document","parentTitle","topTitle","titlesToCheck","titleText","useJsonDataManager","setJsonContextData","contextCopyState","copyContextToClipboard","requestCopyState","copyRequestToClipboard","responseCopyState","copyResponseToClipboard","rawResponseCopyState","copyRawResponseToClipboard","useEffect","falconContextData","socket_info","falcon_object","full_data","data_structure","available_entities","entity_counts","total_entities","fqdns","initialJsonContext","falcon_context","initializeRequestData","requestParams","executionStartTime","updatedContext","request_data","parameters","updateRequestData","prevState","updateResponseData","responseData","newResponseData","executionEndTime","execution_time_ms","getTime","success","from_cache","fromCache","content","content_length","workflow_result","workflowResult","response_data","copyFalconContext","copyRequestData","requestData","copyResponseData","_","metadataOnly","copyRawResponse","rawContent","useTabManager","hasSubmittedQuery","loading","errorMessage","activeTab","setActiveTab","tabGroupRef","useRef","handleTabChange","e","detail","current","show","getResponseTabIndicator","React","createElement","SlIcon","CHARLOTTE_MODEL_OPTIONS","DEFAULT_MODEL","getModelLabel","find","TEMPERATURE_OPTIONS","DEFAULT_TEMPERATURE","DEFAULT_STOP_WORDS","DEFAULT_JSON_SCHEMA","DEFAULT_DATA_TO_INCLUDE","VALIDATION_THRESHOLDS","PROMPT_LENGTH","CONTEXT_ITEMS","LONG_PROMPT","JSON_SCHEMA_SIZE","PAYLOAD_SIZE_HIGH","PAYLOAD_SIZE_MEDIUM","wait","ms","Promise","resolve","validateQuery","query","isValid","trimmed","formatErrorMessage","Error","String","buildMitreUrl","baseUrl","urlPath","WorkflowStatus","WORKFLOW_CONFIG","MAX_POLL_ATTEMPTS","WORKFLOW_NAME","WORKFLOW_DEPTH","extractWorkflowContent","outputData","dynamicCompletionField","findDynamicCompletionField","completion","extractFromLegacyFormats","logExtractionFailure","trimmedContent","found","undefined","result","output","genericCompletionField","extractFromNestedStructure","firstKey","firstValue","potentialFields","_field","validateExtractedContent","warnings","isEmpty","wordCount","hasStructuredData","estimatedFormat","detectUseCase","lowercaseQuery","createSecurityResponseSchema","useCase","createMalwareAnalysisSchema","createIPInvestigationSchema","createDomainAnalysisSchema","createIncidentResponseSchema","createThreatHuntingSchema","createGeneralSecuritySchema","createUniversalSecuritySchema","schema","properties","enum","items","maxItems","required","buildWorkflowPayload","params","model","temperature","selectedContext","normalizedModel","normalizeModelName","finalPrompt","enhancedJsonSchema","jsonSchema","shouldEnhancePrompts","enablePromptEnhancement","detectedUseCase","payload","user_prompt","model_name","addOptionalParameters","modelName","stopWords","stop_words","json_schema","dataToInclude","data_to_include","analyzePayloadSize","jsonString","estimatedBytes","Blob","characterCount","complexity","logPayloadInfo","_context","pollWorkflowCompletion","falcon","workflowId","maxAttempts","attempts","delay","pollResults","getWorkflowStatus","attempt","now","status","hasOutput","output_data","COMPLETED","FAILED","isWorkflowRunning","api","workflows","getEntitiesExecutionResultsV1","ids","errors","resources","parseWorkflowStatus","IN_PROGRESS","RUNNING","PENDING","statusString","normalizedStatus","UNKNOWN","validateWorkflowParams","executeWorkflow","workflowConfig","depth","postEntitiesExecuteV1","checkCache","executeWorkflowWithCache","pollingResult","validation","cachedResponse","executionResponse","AdvancedOptionsPanel","showJsonTab","setShowJsonTab","setTemperature","setStopWords","setJsonSchema","setDataToInclude","stopWordsInput","setStopWordsInput","dataToIncludeInput","setDataToIncludeInput","handleAddStopWord","handleRemoveStopWord","handleAddDataToInclude","handleRemoveDataToInclude","SlDetails","summary","SlCheckbox","checked","onSlChange","target","this","SlTooltip","SlSelect","parseFloat","slot","SlOption","word","fontSize","SlInput","placeholder","onSlInput","onKeyDown","preventDefault","SlButton","disabled","SlTextarea","rows","data","TruncatedText","placement","hoist","trigger","distance","_Fragment","ContextEntitySelector","selectedContextEntity","setSelectedContextEntity","setQuery","isContextDisabled","getEntityCounts","counts","file","mitre","isChildOption","handleContextEntityChange","selectedValue","selectedOption","entityCounts","optionsOfType","groupConfig","Fragment","SlDivider","SlBadge","PromptTextarea","textareaRef","element","transition","height","calculatedHeight","scrollHeight","handleTextareaInput","newValue","currentHeight","offsetHeight","newHeight","min","abs","ref","resize","SubmitSection","quotaAcknowledged","setQuotaAcknowledged","handleSubmit","variant","QueryForm","memo","setModelName","handleModelChange","defaultValue","CodeBlock","handleCopy","language","detectIOCType","isHash","isIP","isDomain","isURL","isRegistry","isPath","defangIOC","ioc","removeFanging","normalizeIOC","getIOCDisplayClasses","_type","baseClasses","getIOCBadgeVariant","IOCCore","detectType","defang","normalize","getDisplayClasses","getBadgeVariant","InlineCode","iocType","handleIOCCopy","stopPropagation","badgeVariant","defangedText","HeadingWithAnchor","level","tagName","headingIcons","iconName","ListItem","createMarkdownRenderers","code","_node","inline","heading","li","IOCDisplay","copyStates","setCopyStates","copyIOC","prev","renderIOCList","item","defangedItem","createParagraphBreaker","cleanText","sentences","sentence","shortTextThreshold","paragraphs","currentParagraph","atMaxLength","maxSentencesPerParagraph","isLastSentence","hasKeywordBreak","aggressiveBreaking","breakKeywords","keyword","shouldBreak","join","p","formatters","default","technical","reasoning","formatTextWithParagraphs","formatMitreDescription","MITREDisplay","techniques","copyMitreUrl","getTacticFromTechnique","tactics","combinedText","keywords","getTacticBadgeVariant","formatTacticName","charAt","formattedDescriptions","tacticVariant","tacticName","paragraph","paragraphIndex","formatSecurityText","needsFormatting","sentenceCount","s","getThreatLevelColor","getConfidenceLevelColor","StructuredSecurityAnalysis","renderers","priorityActions","SlCard","ReactMarkdown","components","preprocessMarkdown","processed","ipList","indent","mainItem","bulletItems","formattedBullets","ResponseDisplay","loadingMessage","setLoadingMessage","timer1","timer2","clearTimeout","SlSpinner","structuredData","Home","tabGroupRefFromHook","updateState","updates","workflowParameters","exception","stack","SlTabGroup","onSlTabShow","SlTab","panel","SlTabPanel","SlDropdown","caret","SlMenu","SlMenuItem","useFalconApi","isInitialized","setIsInitialized","setError","FalconApi","initializeFalcon","connect","err","App","borderBottomColor","StrictMode","minHeight","setBasePath","initializeTheme","prefersDark","matchMedia","matches","documentElement","classList","remove","addEventListener","container","querySelector","root","ReactDOM","createRoot"],"mappings":"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"}